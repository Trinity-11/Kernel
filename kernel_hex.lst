
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass --m65816 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst kernel.asm
; Mon May 20 22:48:37 2019

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm


;******  Processing file: macros_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: simulator_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					unused_0000      = $000000 ;12 Bytes unused
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020					CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					CMD_PARSER_TMPX  = $000040 ; <<< Command Parser 2Bytes
=$000042					CMD_PARSER_TMPY  = $000042 ; <<< Command Parser 2Bytes
=$000044					CMD_LIST_PTR     = $000044 ; <<< Command Parser 3 Bytes
=$000048					CMD_PARSER_PTR   = $000048 ; <<< Command Parser 3 Bytes
=$00004b					CMD_ATTRIBUTE    = $00004B ; <<< Command Parser 2 Bytes (16bits Attribute Field)
=$00004d					CMD_EXEC_ADDY    = $00004D ; <<< Command Parser 3 Bytes 24 Bits Address Jump to execute the Command
=$000050					KEY_BUFFER_RPOS  = $000050 ;
=$000052					KEY_BUFFER_WPOS  = $000052 ;
=$000054					CMD_VARIABLE_TMP = $000054
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$0000d0					KERNEL_TEMP      = $0000D0 ;32 Bytes Temp space for kernel
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100					MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100					M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102					M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104					M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108					MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108					M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a					M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c					M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108					DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108					D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a					D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c					D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e					D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110					DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110					D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112					D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114					D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116					D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120					ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$01						FNX0_INT00_ALLONE = $01  ; Not Used - Always 1
=$02						FNX0_INT01_SOF    = $02  ;Start of Frame @ 60FPS
=$04						FNX0_INT02_SOL    = $04  ;Start of Line (Programmable)
=$08						FNX0_INT03_TMR0   = $08  ;Timer 0 Interrupt
=$10						FNX0_INT04_TMR1   = $10  ;Timer 1 Interrupt
=$20						FNX0_INT05_TMR2   = $20  ;Timer 2 Interrupt
=$40						FNX0_INT06_RTC    = $40  ;Real-Time Clock Interrupt
=$80						FNX0_INT07_FDC    = $80  ;Floppy Disk Controller
=$01						FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04						FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08						FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT    = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01						FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02						FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04						FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08						FNX2_INT03_SDMA   = $08  ;System DMA
=$10						FNX2_INT04_VDMA   = $10  ;Video DMA
=$20						FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40						FNX2_INT06_EXT    = $40  ;External Expansion
=$80						FNX2_INT07_ALLONE = $80  ; Not Used - Always 1
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$0001ff					VECTOR_STATE     = $0001FF ;1 Byte  Interrupt Vector State. See VECTOR_STATE_ENUM
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320					SDOS_BLOCK_BEGIN = $000320 ;
=$000324					SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328					SDOS_FILE_SIZE   = $000328 ;
=$00032c					SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330					SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334					SDOS_BYTE_PTR    = $000334
=$000380					SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400					SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff					SDOS_BLK_END     = $0006FF ;
=$000700					CURRUART         = $000700 ; 24-bit pointer to the current UART
=$000e00					STEF_BLOB_BEGIN  = $000E00 ; Temp Buffer for Testing
=$000eff					STEF_BLOB_END    = $000EFF ;
=$001000					TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$18ff00					ISR_BEGIN        = $18FF00 ; Byte  Beginning of CPU vectors in Direct page
=$18ff00					HRESET           = $18FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$18ff10					HCOP             = $18FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$18ff20					HBRK             = $18FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$18ff30					HABORT           = $18FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$18ff40					HNMI             = $18FF40 ;32 Bytes Handle NMI
=$18ff60					HIRQ             = $18FF60 ;32 Bytes Handle IRQ
=$18ff80					Unused_FF80      = $18FF80 ;End of direct page Interrrupt handlers
=$18ffe0					VECTORS_BEGIN    = $18FFE0 ;0 Byte  Interrupt vectors
=$00ffe0					JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4					VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6					VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8					VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea					VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec					VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee					VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0					RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4					VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6					VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8					VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa					VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc					VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe					VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$200000					VECTORS_END      = $200000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: kernel.asm


;******  Processing file: page_00_data.asm

>180000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003		48 00				                .word 72            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005		80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007		34 00				                .word 52            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: kernel.asm


;******  Processing file: page_00_code.asm

.18ff00		18		clc		RHRESET         CLC
.18ff01		fb		xce		                XCE
.18ff02		5c 00 00 19	jmp $190000	                JML BOOT
.18ff10						RHCOP
.18ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff12		8b		phb		                PHB
.18ff13		0b		phd		                PHD
.18ff14		48		pha		                PHA
.18ff15		da		phx		                PHX
.18ff16		5a		phy		                PHY
.18ff17		5c 08 00 19	jmp $190008	                JML BREAK
.18ff20						RHBRK
.18ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff22		8b		phb		                PHB
.18ff23		0b		phd		                PHD
.18ff24		48		pha		                PHA
.18ff25		da		phx		                PHX
.18ff26		5a		phy		                PHY
.18ff27		5c 08 00 19	jmp $190008	                JML BREAK
.18ff30						RHABORT
.18ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff32		8b		phb		                PHB
.18ff33		0b		phd		                PHD
.18ff34		48		pha		                PHA
.18ff35		da		phx		                PHX
.18ff36		5a		phy		                PHY
.18ff37		5c 08 00 19	jmp $190008	                JML BREAK
.18ff40						 RHNMI
.18ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff42		8b		phb		                PHB
.18ff43		0b		phd		                PHD
.18ff44		48		pha		                PHA
.18ff45		da		phx		                PHX
.18ff46		5a		phy		                PHY
.18ff47		22 83 12 19	jsl $191283	                JSL NMI_HANDLER
.18ff4b		7a		ply		                PLY
.18ff4c		fa		plx		                PLX
.18ff4d		68		pla		                PLA
.18ff4e		2b		pld		                PLD
.18ff4f		ab		plb		                PLB
.18ff50		40		rti		                RTI
.18ff60						RHIRQ
.18ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff62		8b		phb		                PHB
.18ff63		0b		phd		                PHD
.18ff64		48		pha		                PHA
.18ff65		da		phx		                PHX
.18ff66		5a		phy		                PHY
.18ff67		22 89 11 19	jsl $191189	                JSL IRQ_HANDLER
.18ff6b		7a		ply		                PLY
.18ff6c		fa		plx		                PLX
.18ff6d		68		pla		                PLA
.18ff6e		2b		pld		                PLD
.18ff6f		ab		plb		                PLB
.18ff70		40		rti		                RTI
.18ffe0		5c 68 50 19	jmp $195068	JUMP_READY      JML IMREADY     ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>18ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>18ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>18ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>18ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>18ffec		00 00				                .word $0000    ; FFEC
>18ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.18fff0		5c c6 07 19	jmp $1907c6	RRETURN         JML IRETURN
>18fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>18fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>18fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>18fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>18fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>18fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: kernel.asm


;******  Processing file: Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: kernel.asm


;******  Processing file: interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;

;******  Return to file: kernel.asm


;******  Processing file: dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: kernel.asm


;******  Processing file: vicky_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H	      = $AF0001
=$af0002					VKY_RESERVED_00         = $AF0002
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B  = $AF0005
=$af0006					BORDER_COLOR_G = $AF0006
=$af0007					BORDER_COLOR_R  = $AF0007
=$af0008					BORDER_X_SIZE        = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE        = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_RESERVED        = $AF0011   ;Not in Use
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F
=$01						TILE_Enable             = $01
=$02						TILE_LUT0               = $02
=$04						TILE_LUT1               = $04
=$08						TILE_LUT2               = $08
=$80						TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100					TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101					TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102					TL0_START_ADDY_M        = $AF0102
=$af0103					TL0_START_ADDY_H        = $AF0103
=$af0104					TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105					TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106					TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107					TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108					TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109					TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a					TL1_START_ADDY_M        = $AF010A
=$af010b					TL1_START_ADDY_H        = $AF010B
=$af010c					TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d					TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e					TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f					TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110					TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111					TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112					TL2_START_ADDY_M        = $AF0112
=$af0113					TL2_START_ADDY_H        = $AF0113
=$af0114					TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115					TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116					TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117					TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118					TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119					TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a					TL3_START_ADDY_M        = $AF011A
=$af011b					TL3_START_ADDY_H        = $AF011B
=$af011c					TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d					TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e					TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f					TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140					BM_CONTROL_REG          = $AF0140
=$af0141					BM_START_ADDY_L         = $AF0141
=$af0142					BM_START_ADDY_M         = $AF0142
=$af0143					BM_START_ADDY_H         = $AF0143
=$af0144					BM_X_SIZE_L             = $AF0144
=$af0145					BM_X_SIZE_H             = $AF0145
=$af0146					BM_Y_SIZE_L             = $AF0146
=$af0147					BM_Y_SIZE_H             = $AF0147
=$af0148					BM_RESERVED_0           = $AF0148
=$af0149					BM_RESERVED_1           = $AF0149
=$af014a					BM_RESERVED_2           = $AF014A
=$af014b					BM_RESERVED_3           = $AF014B
=$af014c					BM_RESERVED_4           = $AF014C
=$af014d					BM_RESERVED_5           = $AF014D
=$af014e					BM_RESERVED_6           = $AF014E
=$af014f					BM_RESERVED_7           = $AF014F
=$01						SPRITE_Enable             = $01
=$02						SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04						SPRITE_LUT1               = $04
=$08						SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10						SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20						SPRITE_DEPTH1             = $20
=$40						SPRITE_DEPTH2             = $40
=$af0200					SP00_CONTROL_REG        = $AF0200
=$af0201					SP00_ADDY_PTR_L         = $AF0201
=$af0202					SP00_ADDY_PTR_M         = $AF0202
=$af0203					SP00_ADDY_PTR_H         = $AF0203
=$af0204					SP00_X_POS_L            = $AF0204
=$af0205					SP00_X_POS_H            = $AF0205
=$af0206					SP00_Y_POS_L            = $AF0206
=$af0207					SP00_Y_POS_H            = $AF0207
=$af0208					SP01_CONTROL_REG        = $AF0208
=$af0209					SP01_ADDY_PTR_L         = $AF0209
=$af020a					SP01_ADDY_PTR_M         = $AF020A
=$af020b					SP01_ADDY_PTR_H         = $AF020B
=$af020c					SP01_X_POS_L            = $AF020C
=$af020d					SP01_X_POS_H            = $AF020D
=$af020e					SP01_Y_POS_L            = $AF020E
=$af020f					SP01_Y_POS_H            = $AF020F
=$af0210					SP02_CONTROL_REG        = $AF0210
=$af0211					SP02_ADDY_PTR_L         = $AF0211
=$af0212					SP02_ADDY_PTR_M         = $AF0212
=$af0213					SP02_ADDY_PTR_H         = $AF0213
=$af0214					SP02_X_POS_L            = $AF0214
=$af0215					SP02_X_POS_H            = $AF0215
=$af0216					SP02_Y_POS_L            = $AF0216
=$af0217					SP02_Y_POS_H            = $AF0217
=$af0218					SP03_CONTROL_REG        = $AF0218
=$af0219					SP03_ADDY_PTR_L         = $AF0219
=$af021a					SP03_ADDY_PTR_M         = $AF021A
=$af021b					SP03_ADDY_PTR_H         = $AF021B
=$af021c					SP03_X_POS_L            = $AF021C
=$af021d					SP03_X_POS_H            = $AF021D
=$af021e					SP03_Y_POS_L            = $AF021E
=$af021f					SP03_Y_POS_H            = $AF021F
=$af0220					SP04_CONTROL_REG        = $AF0220
=$af0221					SP04_ADDY_PTR_L         = $AF0221
=$af0222					SP04_ADDY_PTR_M         = $AF0222
=$af0223					SP04_ADDY_PTR_H         = $AF0223
=$af0224					SP04_X_POS_L            = $AF0224
=$af0225					SP04_X_POS_H            = $AF0225
=$af0226					SP04_Y_POS_L            = $AF0226
=$af0227					SP04_Y_POS_H            = $AF0227
=$af0228					SP05_CONTROL_REG        = $AF0228
=$af0229					SP05_ADDY_PTR_L         = $AF0229
=$af022a					SP05_ADDY_PTR_M         = $AF022A
=$af022b					SP05_ADDY_PTR_H         = $AF022B
=$af022c					SP05_X_POS_L            = $AF022C
=$af022d					SP05_X_POS_H            = $AF022D
=$af022e					SP05_Y_POS_L            = $AF022E
=$af022f					SP05_Y_POS_H            = $AF022F
=$af0230					SP06_CONTROL_REG        = $AF0230
=$af0231					SP06_ADDY_PTR_L         = $AF0231
=$af0232					SP06_ADDY_PTR_M         = $AF0232
=$af0233					SP06_ADDY_PTR_H         = $AF0233
=$af0234					SP06_X_POS_L            = $AF0234
=$af0235					SP06_X_POS_H            = $AF0235
=$af0236					SP06_Y_POS_L            = $AF0236
=$af0237					SP06_Y_POS_H            = $AF0237
=$af0238					SP07_CONTROL_REG        = $AF0238
=$af0239					SP07_ADDY_PTR_L         = $AF0239
=$af023a					SP07_ADDY_PTR_M         = $AF023A
=$af023b					SP07_ADDY_PTR_H         = $AF023B
=$af023c					SP07_X_POS_L            = $AF023C
=$af023d					SP07_X_POS_H            = $AF023D
=$af023e					SP07_Y_POS_L            = $AF023E
=$af023f					SP07_Y_POS_H            = $AF023F
=$af0240					SP08_CONTROL_REG        = $AF0240
=$af0241					SP08_ADDY_PTR_L         = $AF0241
=$af0242					SP08_ADDY_PTR_M         = $AF0242
=$af0243					SP08_ADDY_PTR_H         = $AF0243
=$af0244					SP08_X_POS_L            = $AF0244
=$af0245					SP08_X_POS_H            = $AF0245
=$af0246					SP08_Y_POS_L            = $AF0246
=$af0247					SP08_Y_POS_H            = $AF0247
=$af0248					SP09_CONTROL_REG        = $AF0248
=$af0249					SP09_ADDY_PTR_L         = $AF0249
=$af024a					SP09_ADDY_PTR_M         = $AF024A
=$af024b					SP09_ADDY_PTR_H         = $AF024B
=$af024c					SP09_X_POS_L            = $AF024C
=$af024d					SP09_X_POS_H            = $AF024D
=$af024e					SP09_Y_POS_L            = $AF024E
=$af024f					SP09_Y_POS_H            = $AF024F
=$af0250					SP10_CONTROL_REG        = $AF0250
=$af0251					SP10_ADDY_PTR_L         = $AF0251
=$af0252					SP10_ADDY_PTR_M         = $AF0252
=$af0253					SP10_ADDY_PTR_H         = $AF0253
=$af0254					SP10_X_POS_L            = $AF0254
=$af0255					SP10_X_POS_H            = $AF0255
=$af0256					SP10_Y_POS_L            = $AF0256
=$af0257					SP10_Y_POS_H            = $AF0257
=$af0258					SP11_CONTROL_REG        = $AF0258
=$af0259					SP11_ADDY_PTR_L         = $AF0259
=$af025a					SP11_ADDY_PTR_M         = $AF025A
=$af025b					SP11_ADDY_PTR_H         = $AF025B
=$af025c					SP11_X_POS_L            = $AF025C
=$af025d					SP11_X_POS_H            = $AF025D
=$af025e					SP11_Y_POS_L            = $AF025E
=$af025f					SP11_Y_POS_H            = $AF025F
=$af0260					SP12_CONTROL_REG        = $AF0260
=$af0261					SP12_ADDY_PTR_L         = $AF0261
=$af0262					SP12_ADDY_PTR_M         = $AF0262
=$af0263					SP12_ADDY_PTR_H         = $AF0263
=$af0264					SP12_X_POS_L            = $AF0264
=$af0265					SP12_X_POS_H            = $AF0265
=$af0266					SP12_Y_POS_L            = $AF0266
=$af0267					SP12_Y_POS_H            = $AF0267
=$af0268					SP13_CONTROL_REG        = $AF0268
=$af0269					SP13_ADDY_PTR_L         = $AF0269
=$af026a					SP13_ADDY_PTR_M         = $AF026A
=$af026b					SP13_ADDY_PTR_H         = $AF026B
=$af026c					SP13_X_POS_L            = $AF026C
=$af026d					SP13_X_POS_H            = $AF026D
=$af026e					SP13_Y_POS_L            = $AF026E
=$af026f					SP13_Y_POS_H            = $AF026F
=$af0270					SP14_CONTROL_REG        = $AF0270
=$af0271					SP14_ADDY_PTR_L         = $AF0271
=$af0272					SP14_ADDY_PTR_M         = $AF0272
=$af0273					SP14_ADDY_PTR_H         = $AF0273
=$af0274					SP14_X_POS_L            = $AF0274
=$af0275					SP14_X_POS_H            = $AF0275
=$af0276					SP14_Y_POS_L            = $AF0276
=$af0277					SP14_Y_POS_H            = $AF0277
=$af0278					SP15_CONTROL_REG        = $AF0278
=$af0279					SP15_ADDY_PTR_L         = $AF0279
=$af027a					SP15_ADDY_PTR_M         = $AF027A
=$af027b					SP15_ADDY_PTR_H         = $AF027B
=$af027c					SP15_X_POS_L            = $AF027C
=$af027d					SP15_X_POS_H            = $AF027D
=$af027e					SP15_Y_POS_L            = $AF027E
=$af027f					SP15_Y_POS_H            = $AF027F
=$af0280					SP16_CONTROL_REG        = $AF0280
=$af0281					SP16_ADDY_PTR_L         = $AF0281
=$af0282					SP16_ADDY_PTR_M         = $AF0282
=$af0283					SP16_ADDY_PTR_H         = $AF0283
=$af0284					SP16_X_POS_L            = $AF0284
=$af0285					SP16_X_POS_H            = $AF0285
=$af0286					SP16_Y_POS_L            = $AF0286
=$af0287					SP16_Y_POS_H            = $AF0287
=$af0288					SP17_CONTROL_REG        = $AF0288
=$af0289					SP17_ADDY_PTR_L         = $AF0289
=$af028a					SP17_ADDY_PTR_M         = $AF028A
=$af028b					SP17_ADDY_PTR_H         = $AF028B
=$af028c					SP17_X_POS_L            = $AF028C
=$af028d					SP17_X_POS_H            = $AF028D
=$af028e					SP17_Y_POS_L            = $AF028E
=$af028f					SP17_Y_POS_H            = $AF028F
=$af0400					VDMA_CONTROL_REG        = $AF0400
=$af0401					VDMA_COUNT_REG_L        = $AF0401
=$af0402					VDMA_COUNT_REG_M        = $AF0402
=$af0403					VDMA_COUNT_REG_H        = $AF0403
=$af0404					VDMA_DATA_2_WRITE_L     = $AF0404
=$af0405					VDMA_DATA_2_WRITE_H     = $AF0405
=$af0406					VDMA_STRIDE_L           = $AF0406
=$af0407					VDMA_STRIDE_H           = $AF0407
=$af0408					VDMA_SRC_ADDY_L         = $AF0408
=$af0409					VDMA_SRC_ADDY_M         = $AF0409
=$af040a					VDMA_SRC_ADDY_H         = $AF040A
=$af040b					VDMA_RESERVED_0         = $AF040B
=$af040c					VDMA_DST_ADDY_L         = $AF040C
=$af040d					VDMA_DST_ADDY_M         = $AF040D
=$af040e					VDMA_DST_ADDY_H         = $AF040E
=$af040f					VDMA_RESERVED_1         = $AF040F
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000					GRPH_LUT0_PTR		        = $AF2000
=$af2400					GRPH_LUT1_PTR		        = $AF2400
=$af2800					GRPH_LUT2_PTR		        = $AF2800
=$af2c00					GRPH_LUT3_PTR		        = $AF2C00
=$af3000					GRPH_LUT4_PTR		        = $AF3000
=$af3400					GRPH_LUT5_PTR		        = $AF3400
=$af3800					GRPH_LUT6_PTR		        = $AF3800
=$af3c00					GRPH_LUT7_PTR		        = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		      = $AF4000
=$af4100					GAMMA_G_LUT_PTR		      = $AF4100
=$af4200					GAMMA_R_LUT_PTR		      = $AF4200
=$af5000					TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800					TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000					TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800					TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800					FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000
=$afe000					BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff					BTX_END                 = $AFFFFF

;******  Return to file: kernel.asm


;******  Processing file: super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: kernel.asm


;******  Processing file: keyboard_def.asm

=$af1064					STATUS_PORT 	        =	$AF1064
=$af1060					KBD_OUT_BUF 	        =	$AF1060
=$af1060					KBD_INPT_BUF	        = $AF1060
=$af1064					KBD_CMD_BUF		        = $AF1064
=$af1060					KBD_DATA_BUF	        = $AF1060
=$af1060					PORT_A			          =	$AF1060
=$af1061					PORT_B			          =	$AF1061
=$01						OUT_BUF_FULL  =	$01
=$02						INPT_BUF_FULL	=	$02
=$04						SYS_FLAG		  =	$04
=$08						CMD_DATA		  =	$08
=$10						KEYBD_INH     =	$10
=$20						TRANS_TMOUT	  =	$20
=$40						RCV_TMOUT		  =	$40
=$80						PARITY_EVEN		=	$80
=$10						INH_KEYBOARD	=	$10
=$ae						KBD_ENA			  =	$AE
=$ad						KBD_DIS			  =	$AD
=$f1						KB_MENU			  =	$F1
=$f4						KB_ENABLE		  =	$F4
=$f7						KB_MAKEBREAK  =	$F7
=$fe						KB_ECHO			  =	$FE
=$ff						KB_RESET		  =	$FF
=$ed						KB_LED_CMD		=	$ED
=$aa						KB_OK			    =	$AA
=$fa						KB_ACK			  =	$FA
=$ff						KB_OVERRUN		=	$FF
=$fe						KB_RESEND		  =	$FE
=$f0						KB_BREAK		  =	$F0
=$10						KB_FA			    =	$10
=$20						KB_FE			    =	$20
=$40						KB_PR_LED		  =	$40

;******  Return to file: kernel.asm


;******  Processing file: SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: kernel.asm


;******  Processing file: RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: kernel.asm


;******  Processing file: io_def.asm

=$afe800					JOYSTICK0     = $AFE800  ;(R) Joystick 0 - J7 (Next to Buzzer)
=$afe801					JOYSTICK1     = $AFE801  ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2     = $AFE802  ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3     = $AFE803  ;(R) Joystick 3 - J10 (next to SD Card)
=$afe804					DIPSWITCH     = $AFE804  ;(R) $AFE804...$AFE807
=$afe808					SDCARD_DATA   = $AFE808  ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe809					SDCARD_CMD    = $AFE809  ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe810					SDCARD_STAT   = $AFE810  ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe820					CODEC_DATA_LO = $AFE820  ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe821					CODEC_DATA_HI = $AFE821  ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe822					CODEC_WR_CTRL = $AFE822  ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: kernel.asm


;******  Processing file: CMD_Parser.asm

=$000f00					KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
.193000						SAVECHAR2CMDLINE
.193000		0b		phd		                PHD
.193001		e2 20		sep #$20	                SEP #$20        ; set A short
.193003						NOT_CARRIAGE_RETURN
.193003		a6 52		ldx $52		                LDX KEY_BUFFER_WPOS   ; So the Receive Character is saved in the Buffer
.193005		c9 20		cmp #$20	                CMP #$20
.193007		90 22		bcc $19302b	                BCC CHECK_LOWERTHANSPACE
.193009		c9 80		cmp #$80	                CMP #$80
.19300b		b0 39		bcs $193046	                BCS EXIT_SAVE2_CMDLINE
.19300d		e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE  ; Make sure we haven't been overboard.
.193010		b0 34		bcs $193046	                BCS EXIT_SAVE2_CMDLINE  ; Stop storing - An error should ensue here...
.193012		c9 61		cmp #$61	                CMP #$61              ; "a"
.193014		90 06		bcc $19301c	                BCC CAPS_NO_CHANGE ;
.193016		c9 7b		cmp #$7b	                CMP #$7B              ; '{'  Char after 'z'
.193018		b0 02		bcs $19301c	                BCS CAPS_NO_CHANGE ;
.19301a		29 df		and #$df	                AND #$DF    ; remove the $20 in $61
.19301c						CAPS_NO_CHANGE
.19301c		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.193020		e8		inx		                INX
.193021		86 52		stx $52		                STX KEY_BUFFER_WPOS
.193023		a9 00		lda #$00	                LDA #$00
.193025		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X   ; Store a EOL in the following location for good measure
.193029		80 1b		bra $193046	                BRA EXIT_SAVE2_CMDLINE
.19302b						CHECK_LOWERTHANSPACE
.19302b		c9 08		cmp #$08	                CMP #$08    ; BackSpace
.19302d		f0 19		beq $193048	                BEQ GO_BACKTHEPOINTER;
.19302f		c9 0d		cmp #$0d	                CMP #$0D    ; Check to see if the incomming Character is a Cariage Return
.193031		d0 d0		bne $193003	                BNE NOT_CARRIAGE_RETURN
.193033		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.193037		a2 00 00	ldx #$0000	                LDX #$0000
.19303a		86 50		stx $50		                STX KEY_BUFFER_RPOS
.19303c		af 83 0f 00	lda $000f83	                LDA @lKEY_BUFFER_CMD
.193040		09 01		ora #$01	                ORA #$01      ; Set Bit 0 - to indicate that there is a command to process
.193042		8f 83 0f 00	sta $000f83	                STA @lKEY_BUFFER_CMD
.193046						EXIT_SAVE2_CMDLINE
.193046		2b		pld		                PLD
.193047		6b		rtl		                RTL
.193048						GO_BACKTHEPOINTER
.193048		a9 00		lda #$00	                LDA #$00
.19304a		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.19304e		e0 00 00	cpx #$0000	                CPX #$0000
.193051		f0 f3		beq $193046	                BEQ EXIT_SAVE2_CMDLINE
.193053		ca		dex		                DEX
.193054		80 f0		bra $193046	                BRA EXIT_SAVE2_CMDLINE
.193056						PROCESS_COMMAND_LINE
.193056		08		php		                PHP
.193057		c2 10		rep #$10	                REP #$10        ; set X long
.193059		e2 20		sep #$20	                SEP #$20        ; set A short
.19305b		a2 00 00	ldx #$0000	                LDX #$0000
.19305e		86 52		stx $52		                STX KEY_BUFFER_WPOS
.193060		a6 50		ldx $50		                LDX KEY_BUFFER_RPOS ; Load the Read Pointer
.193062						NOT_VALID_CHAR4CMD
.193062		bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.193066		c9 0d		cmp #$0d	                CMP #$0D              ; Check for Carriage Return
.193068		f0 24		beq $19308e	                BEQ NO_CMD_2_PROCESS  ; Exit, if the first char is a Carriage return
.19306a		c9 41		cmp #$41	                CMP #$41              ; Smaller than "A"
.19306c		90 04		bcc $193072	                BCC NOT_A_VALIDCHAR   ; check for space before the Command
.19306e		c9 5b		cmp #$5b	                CMP #$5B              ; Smaller than "Z" We are going to accept the character
.193070		90 08		bcc $19307a	                BCC VALIDCHAR_GO_FIND_CMD;
.193072						NOT_A_VALIDCHAR
.193072		e8		inx		                INX
.193073		e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE
.193076		d0 ea		bne $193062	                BNE NOT_VALID_CHAR4CMD
.193078		f0 0d		beq $193087	                BEQ ERROR_BUFFER_OVERRUN  ; This means that we have reached the end of Buffer
.19307a						VALIDCHAR_GO_FIND_CMD
.19307a		20 99 30	jsr $193099	                JSR HOWMANYCHARINCMD  ; Comming back from this Routine we know the size of the Command
.19307d		c0 10 00	cpy #$0010	                CPY #$0010            ; if the value of the size of the command is 16, then it is not a legit command
.193080		b0 0e		bcs $193090	                BCS NOTRECOGNIZEDCOMMAND  ; This will output a Command Not Recognized
.193082		20 b2 30	jsr $1930b2	                JSR FINDCMDINLIST     ; This is where, it gets really cool
.193085		80 07		bra $19308e	                BRA DONE_COMMANDPROCESS
.193087						ERROR_BUFFER_OVERRUN
.193087		a2 7d 33	ldx #$337d	                LDX #<>CMD_Error_Overrun
.19308a		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print the first line
.19308e						DONE_COMMANDPROCESS
.19308e						NO_CMD_2_PROCESS
.19308e		28		plp		                PLP
.19308f		6b		rtl		                RTL
.193090						NOTRECOGNIZEDCOMMAND
.193090		a2 8f 33	ldx #$338f	                LDX #<>CMD_Error_Notfound
.193093		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print the first line
.193097		28		plp		                PLP
.193098		60		rts		                RTS
.193099						HOWMANYCHARINCMD
.193099		a0 00 00	ldy #$0000	                LDY #$0000
.19309c		da		phx		                PHX ; Push X to Stack for the time being
.19309d						ENDOFCOMMANDNOTFOUND
.19309d		bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.1930a1		c9 20		cmp #$20	                CMP #$20              ; Check for a Space
.1930a3		f0 0b		beq $1930b0	                BEQ FOUNDTHEFOLLOWINGSPACE
.1930a5		c9 0d		cmp #$0d	                CMP #$0D              ; Check to see end of Command (if there is no arguments)
.1930a7		f0 07		beq $1930b0	                BEQ FOUNDTHEFOLLOWINGSPACE
.1930a9		e8		inx		                INX
.1930aa		c8		iny		                INY
.1930ab		c0 10 00	cpy #$0010	                CPY #$0010              ; Set the Maximum number of Character to 16
.1930ae		90 ed		bcc $19309d	                BCC ENDOFCOMMANDNOTFOUND
.1930b0						FOUNDTHEFOLLOWINGSPACE
.1930b0		fa		plx		                PLX ; Get the Pointer Location of the First Character of the Command
.1930b1		60		rts		                RTS
.1930b2						FINDCMDINLIST
.1930b2		86 40		stx $40		                STX CMD_PARSER_TMPX   ; Save X for the Time Being
.1930b4		84 42		sty $42		                STY CMD_PARSER_TMPY   ; Save Y for the Time Being
.1930b6		c2 20		rep #$20	                REP #$20        ; set A long
.1930b8		a9 cf 32	lda #$32cf	                LDA #<>CMDListPtr
.1930bb		85 44		sta $44		                STA CMD_LIST_PTR
.1930bd		a9 00 00	lda #$0000	                LDA #$0000  ; Just to make sure B is zero
.1930c0		e2 20		sep #$20	                SEP #$20        ; set A short
.1930c2		a9 19		lda #$19	                LDA #`CMDListPtr
.1930c4		85 46		sta $46		                STA CMD_LIST_PTR+2
.1930c6		a0 00 00	ldy #$0000	                LDY #$0000
.1930c9		84 54		sty $54		                STY CMD_VARIABLE_TMP
.1930cb						NOTTHERIGHTSIZEMOVEON
.1930cb		a4 54		ldy $54		                LDY CMD_VARIABLE_TMP
.1930cd		b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930cf		85 48		sta $48		                STA CMD_PARSER_PTR
.1930d1		c8		iny		                INY
.1930d2		b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930d4		85 49		sta $49		                STA CMD_PARSER_PTR+1
.1930d6		c8		iny		                INY
.1930d7		b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930d9		85 4a		sta $4a		                STA CMD_PARSER_PTR+2
.1930db		c8		iny		                INY
.1930dc		c0 3f 00	cpy #$003f	                CPY #size(CMDListPtr)
.1930df		b0 2b		bcs $19310c	                BCS COMMANDNOTFOUND   ; If we reach that limit then the Count didn't match any command in place
.1930e1		84 54		sty $54		                STY CMD_VARIABLE_TMP
.1930e3		a7 48		lda [$48]	                LDA [CMD_PARSER_PTR] ;
.1930e5		c5 42		cmp $42		                CMP CMD_PARSER_TMPY ;
.1930e7		d0 e2		bne $1930cb	                BNE NOTTHERIGHTSIZEMOVEON
.1930e9		20 14 31	jsr $193114	                JSR CHECKSYNTAX       ; Now we have found a Command in the list that matches the number of Char, let's see if this is one if we are looking for
.1930ec		b0 dd		bcs $1930cb	                BCS NOTTHERIGHTSIZEMOVEON ; Failed to Find
.1930ee		86 40		stx $40		                STX CMD_PARSER_TMPX   ; Just to make sure, this is where the Pointer in the line buffer is...
.1930f0		c8		iny		                INY   ; Point to after the $00, the next 2 bytes are the Attributes
.1930f1		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y ;
.1930f3		85 4b		sta $4b		                STA CMD_ATTRIBUTE
.1930f5		c8		iny		                INY
.1930f6		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.1930f8		85 4c		sta $4c		                STA CMD_ATTRIBUTE+1
.1930fa		c8		iny		                INY   ; This will point towards the Jumping Vector for the execution of the Command
.1930fb		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.1930fd		85 4d		sta $4d		                STA CMD_EXEC_ADDY
.1930ff		c8		iny		                INY
.193100		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.193102		85 4e		sta $4e		                STA CMD_EXEC_ADDY+1
.193104		c8		iny		                INY
.193105		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.193107		85 4f		sta $4f		                STA CMD_EXEC_ADDY+2
.193109		dc 4d 00	jmp [$004d]	                JML [CMD_EXEC_ADDY]
.19310c						COMMANDNOTFOUND
.19310c		a2 8f 33	ldx #$338f	                LDX #<>CMD_Error_Notfound
.19310f		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print the first line
.193113		60		rts		                RTS
.193114						CHECKSYNTAX
.193114		a0 01 00	ldy #$0001	                LDY #$0001      ; Point towards the Next Byte after the Size
.193117		a6 40		ldx $40		                LDX CMD_PARSER_TMPX ; This is the Pointer in the Line Buffer where the First Character ought to be...
.193119						CHECKSYNTAXNEXTCHAR
.193119		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y ;
.19311b		c9 00		cmp #$00	                CMP #$00  ; End of Character Check, if we reach that point, then we are on our way to have something happening! Call mom and dad and tell them how they failed to be good parents! Like all parents
.19311d		f0 0c		beq $19312b	                BEQ SUCCESSFOUNDCOMMAND
.19311f		df 00 0f 00	cmp $000f00,x	                CMP @lKEY_BUFFER, X   ;
.193123		d0 04		bne $193129	                BNE CHARDONTMATCH
.193125		e8		inx		                INX
.193126		c8		iny		                INY
.193127		80 f0		bra $193119	                BRA CHECKSYNTAXNEXTCHAR
.193129		38		sec		CHARDONTMATCH   SEC
.19312a		60		rts		                RTS
.19312b						SUCCESSFOUNDCOMMAND
.19312b		18		clc		                CLC
.19312c		60		rts		                RTS
.19312d						PROC_FILENAME_ARG
.19312d		60		rts		              RTS
.19312e						PROC_DEVICE_ARG
.19312e		60		rts		              RTS
.19312f						PROC_ADDRESS_ARG
.19312f		60		rts		              RTS
.193130						PROC_DATA8_ARG
.193130		60		rts		              RTS
.193131						PROC_DATA16_ARG
.193131		60		rts		              RTS
.193132						ENTRY_CMD_CLS
.193132		a2 00 00	ldx #$0000	              LDX #$0000		; Only Use One Pointer
.193135		a9 20		lda #$20	              LDA #$20		; Fill the Entire Screen with Space
.193137		9f 00 a0 af	sta $afa000,x	CLEARSCREENL0	STA CS_TEXT_MEM_PTR, x	;
.19313b		e8		inx		              inx
.19313c		e0 00 20	cpx #$2000	              cpx #$2000
.19313f		d0 f6		bne $193137	              bne CLEARSCREENL0
.193141		a2 00 00	ldx #$0000	              LDX	#$0000		; Only Use One Pointer
.193144		a9 ed		lda #$ed	              LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.193146		9f 00 c0 af	sta $afc000,x	CLEARSCREENL1	STA CS_COLOR_MEM_PTR, x	;
.19314a		e8		inx		              inx
.19314b		e0 00 20	cpx #$2000	              cpx #$2000
.19314e		d0 f6		bne $193146	              bne CLEARSCREENL1
.193150		a2 00 00	ldx #$0000	              LDX #$0000
.193153		86 52		stx $52		              STX KEY_BUFFER_WPOS
.193155		86 50		stx $50		              STX KEY_BUFFER_RPOS
.193157		a0 00 00	ldy #$0000	              LDY #$0000
.19315a		22 ba 08 19	jsl $1908ba	              JSL ILOCATE
.19315e		60		rts		              RTS
.19315f						ENTRY_CMD_DIR
.19315f		a2 12 33	ldx #$3312	LDX #<>DIR_COMMAND
.193162		22 d1 07 19	jsl $1907d1	JSL IPRINT       ; print the first line
.193166		60		rts		RTS
.193167						ENTRY_CMD_EXEC
.193167		a2 26 33	ldx #$3326	LDX #<>EXEC_COMMAND
.19316a		22 d1 07 19	jsl $1907d1	JSL IPRINT       ; print the first line
.19316e		60		rts		RTS
.19316f						ENTRY_CMD_LOAD
.19316f		a2 40 33	ldx #$3340	LDX #<>LOAD_COMMAND
.193172		22 d1 07 19	jsl $1907d1	JSL IPRINT       ; print the first line
.193176		60		rts		RTS
.193177		60		rts		ENTRY_CMD_SAVE RTS
.193178		60		rts		ENTRY_CMD_PEEK8     RTS
.193179		60		rts		ENTRY_CMD_POKE8     RTS
.19317a		60		rts		ENTRY_CMD_POKE16    RTS
.19317b		60		rts		ENTRY_CMD_PEEK16    RTS
.19317c		60		rts		ENTRY_CMD_RECWAV    RTS
.19317d		60		rts		ENTRY_CMD_EXECFNX   RTS
.19317e		60		rts		ENTRY_CMD_GETDATE   RTS
.19317f		60		rts		ENTRY_CMD_GETTIME   RTS
.193180		60		rts		ENTRY_CMD_MONITOR   RTS
.193181		60		rts		ENTRY_CMD_PLAYRAD   RTS
.193182		60		rts		ENTRY_CMD_PLAYWAV   RTS
.193183		60		rts		ENTRY_CMD_SETDATE   RTS
.193184		60		rts		ENTRY_CMD_SETTIME   RTS
.193185		60		rts		ENTRY_CMD_SYSINFO   RTS
.193186		60		rts		ENTRY_CMD_DISKCOPY  RTS
.193187		60		rts		ENTRY_CMD_SETTXTLUT RTS
.193188						CMD
>193188		03 43 4c 53 00 00 00 32		CLS       .text $03, "CLS", $00, CMD_ARGTYPE_NO, ENTRY_CMD_CLS                                        ; Clear Screen
>193190		31 19
>193192		03 44 49 52 00 01 00 5f		DIR       .text $03, "DIR", $00, CMD_ARGTYPE_DEV, ENTRY_CMD_DIR                                       ; @F, @S
>19319a		31 19
>19319c		04 45 58 45 43 00 04 00		EXEC      .text $04, "EXEC", $00, CMD_ARGTYPE_SA, ENTRY_CMD_EXEC                                        ; EXEC S:$00000
>1931a4		67 31 19
>1931a7		04 4c 4f 41 44 00 0b 00		LOAD      .text $04, "LOAD", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN | CMD_ARGTYPE_EA), ENTRY_CMD_LOAD   ; "LOAD @F, "NAME.XXX", D:$000000
>1931af		6f 31 19
>1931b2		04 53 41 56 45 00 0f 00		SAVE      .text $04, "SAVE", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN | CMD_ARGTYPE_SA | CMD_ARGTYPE_EA), ENTRY_CMD_SAVE           ; SAVE @F, "NAME.XXX", S:$000000, D:$000000
>1931ba		77 31 19
>1931bd		05 50 45 45 4b 38 00 04		PEEK8     .text $05, "PEEK8", $00,  CMD_ARGTYPE_SA, ENTRY_CMD_PEEK8       ; PEEK8 $000000
>1931c5		00 78 31 19
>1931c9		05 50 4f 4b 45 38 00 14		POKE8     .text $05, "POKE8", $00, (CMD_ARGTYPE_SA | CMD_ARGTYPE_8D), ENTRY_CMD_POKE8          ; POKE8 $000000, $00
>1931d1		00 79 31 19
>1931d5		06 50 45 45 4b 31 36 00		PEEK16    .text $06, "PEEK16", $00, CMD_ARGTYPE_SA, ENTRY_CMD_POKE16, ENTRY_CMD_PEEK16        ; PEEK16 $000000
>1931dd		04 00 7a 31 19 7b 31 19
>1931e5		06 50 4f 4b 45 31 36 00		POKE16    .text $06, "POKE16", $00, (CMD_ARGTYPE_SA | CMD_ARGTYPE_16D), ENTRY_CMD_POKE16           ; POKE16 $000000, $0000
>1931ed		24 00 7a 31 19
>1931f2		06 52 45 43 57 41 56 00		RECWAV    .text $06, "RECWAV", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN) , ENTRY_CMD_RECWAV          ; RECWAV @S, "NAME.XXX" (Samples)
>1931fa		03 00 7c 31 19
>1931ff		07 45 58 45 43 46 4e 58		EXECFNX   .text $07, "EXECFNX", $00, CMD_ARGTYPE_FN, ENTRY_CMD_EXECFNX        ; "EXECFNX "NAME.XXX"
>193207		00 02 00 7d 31 19
>19320d		07 47 45 54 44 41 54 45		GETDATE   .text $07, "GETDATE", $00, CMD_ARGTYPE_NO, ENTRY_CMD_GETDATE       ; GETDATE
>193215		00 00 00 7e 31 19
>19321b		07 47 45 54 54 49 4d 45		GETTIME   .text $07, "GETTIME", $00, CMD_ARGTYPE_NO, ENTRY_CMD_GETTIME        ; GETTIME
>193223		00 00 00 7f 31 19
>193229		07 4d 4f 4e 49 54 4f 52		MONITOR   .text $07, "MONITOR", $00, CMD_ARGTYPE_NO, ENTRY_CMD_MONITOR       ; MONITOR TBD
>193231		00 00 00 80 31 19
>193237		07 50 4c 41 59 52 41 44		PLAYRAD   .text $07, "PLAYRAD", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN), ENTRY_CMD_PLAYRAD        ; PLAYRAD @S, "NAME.XXX" (music File)
>19323f		00 03 00 81 31 19
>193245		07 50 4c 41 59 57 41 56		PLAYWAV   .text $07, "PLAYWAV", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN), ENTRY_CMD_PLAYWAV                ; PLAYWAV @S, "NAME.XXX" (samples)
>19324d		00 03 00 82 31 19
>193253		07 53 45 54 44 41 54 45		SETDATE   .text $07, "SETDATE", $00, CMD_ARGTYPE_DAT, ENTRY_CMD_SETDATE      ; SETDATE YY:MM:DD
>19325b		00 80 00 83 31 19
>193261		07 53 45 54 54 49 4d 45		SETTIME   .text $07, "SETTIME", $00, CMD_ARGTYPE_TIM, ENTRY_CMD_SETTIME       ; SETTIME HH:MM:SS
>193269		00 40 00 84 31 19
>19326f		04 53 59 53 49 4e 46 4f		SYSINFO   .text $04, "SYSINFO", $00, CMD_ARGTYPE_NO, ENTRY_CMD_SYSINFO
>193277		00 00 00 85 31 19
>19327d		08 44 49 53 4b 43 4f 50		DISKCOPY  .text $08, "DISKCOPY", $00, CMD_ARGTYPE_DEV, CMD_ARGTYPE_DEV, ENTRY_CMD_DISKCOPY           ; DISKCOPY @F, @F
>193285		59 00 01 00 01 00 86 31 19
>19328e		08 46 49 4c 45 43 4f 50		FILECOPY  .text $08, "FILECOPY", $00, (CMD_ARGTYPE_FN | CMD_ARGTYPE_FN2)
>193296		59 00 02 02
>19329a		08 53 45 54 42 47 43 4c		SETBGCLR  .text $08, "SETBGCLR", $00, CMD_ARGTYPE_DEC
>1932a2		52 00 00 04
>1932a6		08 53 45 54 46 47 43 4c		SETFGCLR  .text $08, "SETFGCLR", $00, CMD_ARGTYPE_DEC
>1932ae		52 00 00 04
>1932b2		09 53 45 54 54 58 54 4c		SETTXTLUT .text $09, "SETTXTLUT", $00, (CMD_ARGTYPE_DAT | CMD_ARGTYPE_RGB), ENTRY_CMD_SETTXTLUT        ; SETLUT $00, $000000
>1932ba		55 54 00 80 01 87 31 19
>1932c2		09 53 45 54 42 52 44 43		SETBRDCLR .text $09, "SETBRDCLR", $00, CMD_ARGTYPE_RGB
>1932ca		4c 52 00 00 01
>1932cf		88 31 19 92 31 19 9c 31		CMDListPtr .long CMD.CLS, CMD.DIR, CMD.EXEC, CMD.LOAD, CMD.SAVE, CMD.PEEK8, CMD.POKE8, CMD.PEEK16, CMD.POKE16, CMD.RECWAV, CMD.EXECFNX, CMD.GETDATE, CMD.GETTIME, CMD.MONITOR, CMD.PLAYRAD, CMD.PLAYWAV, CMD.SETDATE, CMD.SETTIME, CMD.SYSINFO, CMD.DISKCOPY, CMD.SETTXTLUT
>1932d7		19 a7 31 19 b2 31 19 bd 31 19 c9 31 19 d5 31 19
>1932e7		e5 31 19 f2 31 19 ff 31 19 0d 32 19 1b 32 19 29
>1932f7		32 19 37 32 19 45 32 19 53 32 19 61 32 19 6f 32
>193307		19 7d 32 19 b2 32 19
=$0000						CMD_ARGTYPE_NO    = $0000 ; No Argument
=$0001						CMD_ARGTYPE_DEV   = $0001 ; Device Type @S, @F
=$0002						CMD_ARGTYPE_FN    = $0002 ; File Name
=$0004						CMD_ARGTYPE_SA    = $0004 ; Starting Address (Source)
=$0008						CMD_ARGTYPE_EA    = $0008 ; Ending Address (Destination)
=$0010						CMD_ARGTYPE_8D    = $0010 ; 8bits Data
=$0020						CMD_ARGTYPE_16D   = $0020 ; 16bits Data
=$0040						CMD_ARGTYPE_TIM   = $0040 ; Time
=$0080						CMD_ARGTYPE_DAT   = $0080 ; Date
=$0100						CMD_ARGTYPE_RGB   = $0100 ; RGB Data (24Bit Data) for LUT mainly
=$0200						CMD_ARGTYPE_FN2   = $0200 ; Second File name
=$0400						CMD_ARGTYPE_DEC   = $0400 ; Decimal value
>19330e		43 4c 53 00			CLS_COMMAND .text "CLS", $00
>193312		44 49 52 20 69 73 20 68		DIR_COMMAND .text "DIR is happening...", $00
>19331a		61 70 70 65 6e 69 6e 67 2e 2e 2e 00
>193326		45 58 45 43 20 43 6f 6d		EXEC_COMMAND .text "EXEC Command Executing...", $00
>19332e		6d 61 6e 64 20 45 78 65 63 75 74 69 6e 67 2e 2e
>19333e		2e 00
>193340		4c 4f 41 44 00			LOAD_COMMAND .text "LOAD", $00
>193345		53 59 4e 54 41 58 20 20		CMD_Error_Syntax  .text "SYNTAX  ERROR", $00
>19334d		45 52 52 4f 52 00
>193353		4d 69 73 73 69 6e 67 20		CMD_Error_Missing .text "Missing Parameters...", $00
>19335b		50 61 72 61 6d 65 74 65 72 73 2e 2e 2e 00
>193369		57 72 6f 6e 67 20 50 61		CMD_Error_Wrong   .text "Wrong Parameters...", $00
>193371		72 61 6d 65 74 65 72 73 2e 2e 2e 00
>19337d		42 75 66 66 65 72 20 4f		CMD_Error_Overrun .text "Buffer Overrun...", $00
>193385		76 65 72 72 75 6e 2e 2e 2e 00
>19338f		53 59 4e 54 41 58 20 20		CMD_Error_Notfound .text "SYNTAX  ERROR", $00
>193397		45 52 52 4f 52 00

;******  Return to file: kernel.asm


;******  Processing file: monitor.asm

.195000		5c 5c 50 19	jmp $19505c	MONITOR         JML IMONITOR
.195004		5c 8a 50 19	jmp $19508a	MSTATUS         JML IMSTATUS
.195008		5c 68 50 19	jmp $195068	MREADY          JML IMREADY
.19500c		5c 35 51 19	jmp $195135	MRETURN         JML IMRETURN
.195010		5c 36 51 19	jmp $195136	MPARSE          JML IMPARSE
.195014		5c 37 51 19	jmp $195137	MPARSE1         JML IMPARSE1
.195018		5c 38 51 19	jmp $195138	MEXECUTE        JML IMEXECUTE
.19501c		5c 39 51 19	jmp $195139	MASSEMBLE       JML IMASSEMBLE
.195020		5c 3a 51 19	jmp $19513a	MASSEMBLEA      JML IMASSEMBLEA
.195024		5c 3b 51 19	jmp $19513b	MCOMPARE        JML IMCOMPARE
.195028		5c 3c 51 19	jmp $19513c	MDISASSEMBLE    JML IMDISASSEMBLE
.19502c		5c 3d 51 19	jmp $19513d	MFILL           JML IMFILL
.195030		5c 3f 51 19	jmp $19513f	MJUMP           JML IMJUMP
.195034		5c 40 51 19	jmp $195140	MHUNT           JML IMHUNT
.195038		5c 41 51 19	jmp $195141	MLOAD           JML IMLOAD
.19503c		5c 42 51 19	jmp $195142	MMEMORY         JML IMMEMORY
.195040		5c 43 51 19	jmp $195143	MREGISTERS      JML IMREGISTERS
.195044		5c 44 51 19	jmp $195144	MSAVE           JML IMSAVE
.195048		5c 45 51 19	jmp $195145	MTRANSFER       JML IMTRANSFER
.19504c		5c 46 51 19	jmp $195146	MVERIFY         JML IMVERIFY
.195050		5c 47 51 19	jmp $195147	MEXIT           JML IMEXIT
.195054		5c 48 51 19	jmp $195148	MMODIFY         JML IMMODIFY
.195058		5c 49 51 19	jmp $195149	MDOS            JML IMDOS
.19505c		18		clc		IMONITOR        CLC           ; clear the carry flag
.19505d		fb		xce		                XCE           ; move carry to emulation flag.
.19505e		c2 20		rep #$20	                REP #$20        ; set A long
.195060		a9 ff fe	lda #$feff	                LDA #STACK_END ; Reset the stack
.195063		1b		tcs		                TAS
.195064		5c 68 50 19	jmp $195068	                JML IMREADY
.195068						IMREADY
.195068		c2 30		rep #$30	                REP #$30        ; set A&X long
.19506a		a9 68 50	lda #$5068	                LDA #<>IMREADY
.19506d		8d e1 ff	sta $ffe1	                STA JMP_READY+1
.195070		e2 20		sep #$20	                SEP #$20        ; set A short
.195072		a9 19		lda #$19	                LDA #`IMREADY
.195074		8d e3 ff	sta $ffe3	                STA JMP_READY+3
.195077		c2 20		rep #$20	                REP #$20        ; set A long
.195079		a9 35 51	lda #$5135	                LDA #<>IMRETURN
.19507c		8d f1 ff	sta $fff1	                STA RETURN+1
.19507f		e2 20		sep #$20	                SEP #$20        ; set A short
.195081		a9 19		lda #$19	                LDA #`IMRETURN
.195083		8d f3 ff	sta $fff3	                STA RETURN+3
.195086		5c 8a 50 19	jmp $19508a	                JML IMSTATUS
.19508a						IMSTATUS
.19508a		48		pha		                PHA             ; begin setdbr macro
.19508b		08		php		                PHP
.19508c		e2 20		sep #$20	                SEP #$20        ; set A short
.19508e		a9 19		lda #$19		LDA #`mregisters_msg
.195090		48		pha		                PHA
.195091		ab		plb		                PLB
.195092		28		plp		                PLP
.195093		68		pla		                PLA             ; end setdbr macro
.195094		a2 4a 51	ldx #$514a	                LDX #<>mregisters_msg
.195097		22 d1 07 19	jsl $1907d1	                JSL IPRINT
.19509b		e2 20		sep #$20	                SEP #$20        ; set A short
.19509d		a9 3b		lda #$3b	                LDA #';'
.19509f		22 f1 07 19	jsl $1907f1	                JSL IPUTC
.1950a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950a5		48		pha		                PHA             ; begin setdbr macro
.1950a6		08		php		                PHP
.1950a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1950a9		a9 00		lda #$00		LDA #$0
.1950ab		48		pha		                PHA
.1950ac		ab		plb		                PLB
.1950ad		28		plp		                PLP
.1950ae		68		pla		                PLA             ; end setdbr macro
.1950af		a0 03 00	ldy #$0003	                LDY #3
.1950b2		a2 42 02	ldx #$0242	                LDX #CPUPC+2
.1950b5		22 0a 09 19	jsl $19090a	                JSL IPRINTH
.1950b9		a5 20		lda $20		                LDA ' '
.1950bb		22 f1 07 19	jsl $1907f1	                JSL IPUTC
.1950bf		a0 02 00	ldy #$0002	                LDY #2
.1950c2		a2 45 02	ldx #$0245	                LDX #CPUA+1
.1950c5		22 0a 09 19	jsl $19090a	                JSL IPRINTH
.1950c9		a5 20		lda $20		                LDA ' '
.1950cb		22 f1 07 19	jsl $1907f1	                JSL IPUTC
.1950cf		a0 02 00	ldy #$0002	                LDY #2
.1950d2		a2 47 02	ldx #$0247	                LDX #CPUX+1
.1950d5		22 0a 09 19	jsl $19090a	                JSL IPRINTH
.1950d9		a5 20		lda $20		                LDA ' '
.1950db		22 f1 07 19	jsl $1907f1	                JSL IPUTC
.1950df		a0 02 00	ldy #$0002	                LDY #2
.1950e2		a2 49 02	ldx #$0249	                LDX #CPUY+1
.1950e5		22 0a 09 19	jsl $19090a	                JSL IPRINTH
.1950e9		a5 20		lda $20		                LDA ' '
.1950eb		22 f1 07 19	jsl $1907f1	                JSL IPUTC
.1950ef		a0 02 00	ldy #$0002	                LDY #2
.1950f2		a2 4b 02	ldx #$024b	                LDX #CPUSTACK+1
.1950f5		22 0a 09 19	jsl $19090a	                JSL IPRINTH
.1950f9		a5 20		lda $20		                LDA ' '
.1950fb		22 f1 07 19	jsl $1907f1	                JSL IPUTC
.1950ff		a0 01 00	ldy #$0001	                LDY #1
.195102		a2 4e 02	ldx #$024e	                LDX #CPUDBR
.195105		22 0a 09 19	jsl $19090a	                JSL IPRINTH
.195109		a5 20		lda $20		                LDA ' '
.19510b		22 f1 07 19	jsl $1907f1	                JSL IPUTC
.19510f		22 f1 07 19	jsl $1907f1	                JSL IPUTC
.195113		a0 02 00	ldy #$0002	                LDY #2
.195116		a2 4d 02	ldx #$024d	                LDX #CPUDP+1
.195119		22 0a 09 19	jsl $19090a	                JSL IPRINTH
.19511d		a5 20		lda $20		                LDA ' '
.19511f		22 f1 07 19	jsl $1907f1	                JSL IPUTC
.195123		a0 01 00	ldy #$0001	                LDY #1
.195126		a2 4f 02	ldx #$024f	                LDX #CPUFLAGS
.195129		22 0a 09 19	jsl $19090a	                JSL IPRINTH
.19512d		22 1f 08 19	jsl $19081f	                JSL IPRINTCR
.195131		5c bf 07 19	jmp $1907bf	                JML IREADYWAIT
.195135		6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.195136		00		brk #		IMPARSE         BRK ; Parse the current command line
.195137		00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.195138		00		brk #		IMEXECUTE       BRK ; Execute the current command line (requires MCMD and MARG1-MARG8 to be populated)
.195139		00		brk #		IMASSEMBLE      BRK ; Assemble a line of text.
.19513a		00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.19513b		00		brk #		IMCOMPARE       BRK ; Compare memory. len=1
.19513c		00		brk #		IMDISASSEMBLE   BRK ; Disassemble memory. end=1 instruction
.19513d		00		brk #		IMFILL          BRK ; Fill memory with specified value. Start and end must be in the same bank.
.19513e		00		brk #		IMGO            BRK ; Execute from specified address
.19513f		00		brk #		IMJUMP          BRK ; Execute from spefified address
.195140		00		brk #		IMHUNT          BRK ; Hunt (find) value in memory
.195141		00		brk #		IMLOAD          BRK ; Load data from disk. Device=1 (internal floppy) Start=Address in file
.195142		00		brk #		IMMEMORY        BRK ; View memory
.195143		00		brk #		IMREGISTERS     BRK ; View/edit registers
.195144		00		brk #		IMSAVE          BRK ; Save memory to disk
.195145		00		brk #		IMTRANSFER      BRK ; Transfer (copy) data in memory
.195146		00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.195147		00		brk #		IMEXIT          BRK ; Exit monitor and return to BASIC command prompt
.195148		00		brk #		IMMODIFY        BRK ; Modify memory
.195149		00		brk #		IMDOS           BRK ; Execute DOS command
.19514a						MMESSAGES
>19514a						MMERROR         .text
>19514a		0d 20 50 43 20 20 20 20		mregisters_msg  .null $0D," PC     A    X    Y    SP   DBR DP   NVMXDIZC"
>195152		20 41 20 20 20 20 58 20 20 20 20 59 20 20 20 20
>195162		53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56
>195172		4d 58 44 49 5a 43 00

;******  Return to file: kernel.asm


;******  Processing file: SDOS.asm


;******  Processing file: ch376s_inc.asm

=$00						DEF_NULL_CHAR       = $00
=$2a						DEF_WILDCARD_CHAR   = $2A
=$5c						DEF_SEPAR_CHAR1     = $5C
=$2f						DEF_SEPAR_CHAR2     = $2F
=$0a						CH_CMD_RD_VAR8        = $0A     ; Read 8Bit Value
=$0b						CH_CMD_WR_VAR8        = $0B     ; Write 8Bit Value to controller
=$0c						CH_CMD_RD_VAR32       = $0C     ; Read 32Bit Value
=$0d						CH_CMD_WR_VAR32       = $0D
=$15						CH_CMD_SET_MODE       = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22						CH_CMD_GET_STATUS     = $22     ; Get Interrupt Status
=$27						CH_CMD_RD_DATA0       = $27     ;
=$2f						CH_CMD_SET_FILENAME   = $2F     ;SET_FILE_NAME
=$31						CH_CMD_DISK_MOUNT     = $31     ;DISK_MOUNT
=$32						CH_CMD_FILE_OPEN      = $32     ;FILE_OPEN
=$33						CH_CMD_FILE_ENUM_GO   = $33
=$39						CH_CMD_BYTE_LOCATE    = $39
=$3a						CH_CMD_BYTE_READ      = $3A
=$3b						CH_CMD_BYTE_RD_GO     = $3B
=$3c						CH_CMD_BYTE_WRITE     = $3C
=$3d						CH_CMD_BYTE_WR_GO     = $3D
=$44						CH_VAR_DISK_ROOT		  = $44
=$48						CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c						CH_VAR_DSK_START_LBA	= $4C
=$50						CH_VAR_DSK_DAT_START	= $50
=$54						CH_VAR_LBA_BUFFER		  = $54
=$58						CH_VAR_LBA_CURRENT		= $58
=$5c						CH_VAR_FAT_DIR_LBA		= $5C
=$60						CH_VAR_START_CLUSTER	= $60
=$64						CH_VAR_CURRENT_CLUST	= $64
=$68						CH_VAR_FILE_SIZE		  = $68
=$6c						CH_VAR_CURRENT_OFFSET	= $6C
=$14						CH376S_STAT_SUCCESS  = $14
=$17						CH376S_STAT_BUF_OVF  = $17
=$1d						CH376S_STAT_DSK_RD   = $1D
=$1e						CH376S_STAT_DSK_WR   = $1E
=$41						CH376S_ERR_OPEN_DIR  = $41
=$42						CH376S_ERR_MISS_FIL  = $42
=$43						CH376S_ERR_FND_NAME  = $43
=$82						CH376S_ERR_DISK_DSC  = $82
=$84						CH376S_ERR_LRG_SEC   = $84
=$92						CH376S_ERR_PARTTION  = $92
=$a1						CH376S_ERR_NOT_FORM  = $A1
=$b1						CH376S_ERR_DSK_FULL  = $B1
=$b2						CH376S_FDT_OVER      = $B2
=$b4						CH376S_FILE_CLOSED   = $B4
=$00						SDCARD_PRSNT_NO_CARD = $00
=$01						SDCARD_PRSNT_CD      = $01
=$02						SDCARD_PRSNT_WP      = $02
=$04						SDCARD_PRSNT_MNTED   = $04  ; Card is present and Mounted1

;******  Return to file: SDOS.asm

.192000		5c c5 21 19	jmp $1921c5	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.192004		5c d4 21 19	jmp $1921d4	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.192008		5c 20 20 19	jmp $192020	SDOS_INIT     JML ISDOS_INIT
.19200c		5c 63 20 19	jmp $192063	SDOS_DIR      JML ISDOS_DIR
.192010		5c 21 21 19	jmp $192121	SDOS_CHDIR    JML ISDOS_CHDIR
.192014		5c 22 21 19	jmp $192122	SDOS_LOAD     JML ISDOS_LOAD
.192018		5c 26 21 19	jmp $192126	SDOS_SAVE     JML ISDOS_SAVE
.19201c		5c 27 21 19	jmp $192127	SDOS_EXEC     JML ISDOS_EXEC
.192020						ISDOS_INIT
.192020		e2 20		sep #$20	                SEP #$20        ; set A short
.192022		a9 06		lda #$06	              LDA #$06
.192024		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192028		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19202b		a9 a8		lda #$a8	              LDA #$A8
.19202d		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192031		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192034		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192037		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.19203a		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.19203e		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.192041		a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.192043		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192047		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19204a		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19204d		a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.19204f		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA     ; Write the MODE and Wait for around ~10us
.192053						ISDOS_WAIT_FOR_MODE_SW
.192053		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA ; Wait 0.6us
.192056		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.19205a		c9 51		cmp #$51	              CMP #$51   ; CMD_RET_SUCCESS		EQU		051H, CMD_RET_ABORT		EQU		05FH
.19205c		d0 f5		bne $192053	              BNE ISDOS_WAIT_FOR_MODE_SW
.19205e		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA     ; See the Status Output
.192062		6b		rtl		              RTL
.192063						ISDOS_DIR
.192063		e2 20		sep #$20	                SEP #$20        ; set A short
.192065		c2 10		rep #$10	                REP #$10        ; set X long
.192067		20 28 21	jsr $192128	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.19206a		a2 00 00	ldx #$0000	              LDX #$0000
.19206d						ISDOS_DIR_TRF
.19206d		bf b7 23 19	lda $1923b7,x	              LDA sd_card_dir_string,X    ; /
.192071		9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.192075		e8		inx		              INX
.192076		e0 03 00	cpx #$0003	              CPX #$0003
.192079		d0 f2		bne $19206d	              BNE ISDOS_DIR_TRF
.19207b		20 6b 21	jsr $19216b	              JSR SDOS_FILE_OPEN         ; Now that the file name is set, go open File
.19207e		c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.192080		f0 03		beq $192085	              BEQ ISDOS_DIR_CONT0
.192082		82 87 00	brl $19210c	              BRL ISDOS_MISS_FILE
.192085						ISDOS_DIR_CONT0
.192085		a2 35 24	ldx #$2435	              LDX #<>sd_card_msg4         ; Print Screen the Message "FILE OPENED"
.192088		22 d1 07 19	jsl $1907d1	              JSL IPRINT       ; print the first line
.19208c						ISDOS_NEXT_ENTRY
.19208c		a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.19208e		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192092		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;
.192095		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;  Load First Data
.192099		a0 00 00	ldy #$0000	              LDY #$0000
.19209c		a2 00 00	ldx #$0000	              LDX #$0000
.19209f		a8		tay		              TAY              ; GET Size (Save in Case we need it)
.1920a0						ISDOS_DIR_GET_CHAR
.1920a0		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA ; Wait 0.6us
.1920a3		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;
.1920a7		22 f1 07 19	jsl $1907f1	              JSL IPUTC        ; Print the character
.1920ab		e8		inx		              INX
.1920ac		e0 08 00	cpx #$0008	              CPX #$0008
.1920af		d0 03		bne $1920b4	              BNE ISDOS_DIR_CONT1
.1920b1		20 1a 21	jsr $19211a	              JSR ISDOS_DISPLAY_DOT
.1920b4						ISDOS_DIR_CONT1
.1920b4		e0 0b 00	cpx #$000b	              CPX #$000B          ; the First 11th Character is the file name
.1920b7		d0 e7		bne $1920a0	              BNE ISDOS_DIR_GET_CHAR
.1920b9		a9 20		lda #$20	              LDA #$20
.1920bb		22 f1 07 19	jsl $1907f1	              JSL IPUTC        ; Print the character
.1920bf		a9 28		lda #$28	              LDA #'('
.1920c1		22 f1 07 19	jsl $1907f1	              JSL IPUTC        ; Print the character
.1920c5		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;
.1920c9		29 10		and #$10	              AND #$10
.1920cb		c9 10		cmp #$10	              CMP #$10
.1920cd		f0 04		beq $1920d3	              BEQ ISDOS_DIR_ATTR0
.1920cf		a9 46		lda #$46	              LDA #'F'
.1920d1		80 02		bra $1920d5	              BRA ISDOS_DIR_ATTR1
.1920d3						ISDOS_DIR_ATTR0
.1920d3		a9 44		lda #$44	              LDA #'D'
.1920d5						ISDOS_DIR_ATTR1
.1920d5		22 f1 07 19	jsl $1907f1	              JSL IPUTC        ; Print the character
.1920d9		a9 29		lda #$29	              LDA #')'
.1920db		22 f1 07 19	jsl $1907f1	              JSL IPUTC        ; Print the character
.1920df		a9 0d		lda #$0d	              LDA #$0D         ; Carriage Return
.1920e1		22 f1 07 19	jsl $1907f1	              JSL IPUTC        ; Print the character
.1920e5						ISDOS_DIR_GET_CHAR_FINISH
.1920e5		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA ; Wait 0.6us
.1920e8		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ; After the name Just empty the buffer
.1920ec		e8		inx		              INX
.1920ed		e0 20 00	cpx #$0020	              CPX #$0020
.1920f0		d0 f3		bne $1920e5	              BNE ISDOS_DIR_GET_CHAR_FINISH
.1920f2		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.1920f5		a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.1920f7		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.1920fb		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.1920fe		c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.192100		f0 8a		beq $19208c	              BEQ ISDOS_NEXT_ENTRY
.192102		c9 42		cmp #$42	              CMP #CH376S_ERR_MISS_FIL
.192104		d0 06		bne $19210c	              BNE  ISDOS_MISS_FILE
.192106		a2 42 24	ldx #$2442	              LDX #<>sd_card_msg5   ; End of File
.192109		82 09 00	brl $192115	              BRL ISDOS_DIR_DONE
.19210c						ISDOS_MISS_FILE
.19210c		a2 cd 23	ldx #$23cd	              LDX #<>sd_card_err0
.19210f		82 03 00	brl $192115	              BRL ISDOS_DIR_DONE
.192112						NO_SDCARD_PRESENT
.192112		a2 ba 23	ldx #$23ba	              LDX #<>sd_no_card_msg
.192115						ISDOS_DIR_DONE
.192115		22 d1 07 19	jsl $1907d1	              JSL IPRINT       ; print the first line
.192119		6b		rtl		              RTL;
.19211a						ISDOS_DISPLAY_DOT
.19211a		a9 2e		lda #$2e	              LDA #'.'
.19211c		22 f1 07 19	jsl $1907f1	              JSL IPUTC        ; Print the character
.192120		60		rts		              RTS;
.192121		00		brk #		ISDOS_CHDIR   BRK;
.192122						ISDOS_LOAD
.192122		20 42 22	jsr $192242	              JSR SDOS_READ_FILE;
.192125		6b		rtl		              RTL;
.192126		00		brk #		ISDOS_SAVE    BRK;
.192127		00		brk #		ISDOS_EXEC    BRK;
.192128						ISDOS_MOUNT_CARD
.192128		e2 20		sep #$20	                SEP #$20        ; set A short
.19212a		c2 10		rep #$10	                REP #$10        ; set X long
.19212c		a2 fe 23	ldx #$23fe	              LDX #<>sd_card_msg1         ; Print Screen the Message "Card Detected"
.19212f		22 d1 07 19	jsl $1907d1	              JSL IPRINT       ; print the first line
.192133		a0 00 00	ldy #$0000	              LDY #$0000
.192136		a9 01		lda #$01	              LDA #$01
.192138		85 3f		sta $3f		              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.19213a						TRY_MOUNT_AGAIN
.19213a		a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.19213c		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD              ;
.192140		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT       ;
.192143		c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.192145		f0 09		beq $192150	              BEQ ISDOS_MOUNTED
.192147		c8		iny		              INY
.192148		c0 05 00	cpy #$0005	              CPY #$0005
.19214b		d0 ed		bne $19213a	              BNE TRY_MOUNT_AGAIN
.19214d		4c 5e 21	jmp $19215e	              JMP SDCARD_ERROR_MOUNT
.192150						ISDOS_MOUNTED
.192150		a2 0e 24	ldx #$240e	              LDX #<>sd_card_msg2         ; Print Screen the Message "Card Detected"
.192153		22 d1 07 19	jsl $1907d1	              JSL IPRINT       ; print the first line
.192157		a5 3f		lda $3f		              LDA SDCARD_PRSNT_MNT
.192159		29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.19215b		09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.19215d		60		rts		              RTS
.19215e						SDCARD_ERROR_MOUNT
.19215e		a2 1d 24	ldx #$241d	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.192161		22 d1 07 19	jsl $1907d1	              JSL IPRINT       ; print the first line
.192165		60		rts		              RTS
.192166		a9 00		lda #$00	ISDOS_NO_CARD LDA #SDCARD_PRSNT_NO_CARD
.192168		85 3f		sta $3f		              STA SDCARD_PRSNT_MNT
.19216a		60		rts		              RTS
.19216b						SDOS_FILE_OPEN
.19216b		20 7b 21	jsr $19217b	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.19216e		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.192171		a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.192173		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD          ; Go Request to open the File
.192177		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.19217a		60		rts		              RTS
.19217b						SDOS_SET_FILE_NAME
.19217b		a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.19217d		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192181		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.192184		a2 00 00	ldx #$0000	              LDX #$0000
.192187						SDOS_SET_FILE_LOOP
.192187		bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.19218b		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.19218f		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192192		e8		inx		              INX
.192193		c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.192195		d0 f0		bne $192187	              BNE SDOS_SET_FILE_LOOP
.192197		60		rts		              RTS
.192198						DLYCMD_2_DTA
.192198		ea		nop		              NOP
.192199		ea		nop		              NOP
.19219a		ea		nop		              NOP
.19219b		ea		nop		              NOP
.19219c		ea		nop		              NOP
.19219d						DLYDTA_2_DTA
.19219d		ea		nop		              NOP
.19219e		ea		nop		              NOP
.19219f		ea		nop		              NOP
.1921a0		ea		nop		              NOP
.1921a1		ea		nop		              NOP
.1921a2		60		rts		              RTS;
.1921a3						SDCARD_WAIT_4_INT
.1921a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1921a5		78		sei		              SEI                 ; There is no time out on this, so let's
.1921a6						SDCARD_BUSY_INT
.1921a6		af 09 e8 af	lda $afe809	              LDA SDCARD_CMD    ; Read Status of Interrupt and
.1921aa		29 80		and #$80	              AND #$80          ; Bit[7] = !INT if Zero = Busy
.1921ac		c9 80		cmp #$80	              CMP #$80          ;
.1921ae		f0 f6		beq $1921a6	              BEQ SDCARD_BUSY_INT
.1921b0		58		cli		              CLI
.1921b1						SDCARD_BUSY_DONE
.1921b1		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA ;
.1921b4		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA ;
.1921b7		a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.1921b9		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1921bd		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.1921c0		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA;
.1921c4		60		rts		              RTS           ;
.1921c5						ISDOS_CHK_CD
.1921c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1921c7		18		clc		              CLC
.1921c8		af 10 e8 af	lda $afe810	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.1921cc		29 01		and #$01	              AND #$01
.1921ce		c9 01		cmp #$01	              CMP #$01
.1921d0		f0 01		beq $1921d3	              BEQ SDCD_NOT_PRST;
.1921d2		38		sec		              SEC
.1921d3		60		rts		SDCD_NOT_PRST RTS
.1921d4						ISDOS_CHK_WP
.1921d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1921d6		18		clc		              CLC
.1921d7		af 10 e8 af	lda $afe810	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.1921db		29 02		and #$02	              AND #$02
.1921dd		d0 01		bne $1921e0	              BNE SDCD_NOT_WP;
.1921df		38		sec		              SEC
.1921e0		60		rts		SDCD_NOT_WP   RTS
.1921e1						ISDOS_GET_FILE_SIZE
.1921e1		e2 20		sep #$20	                SEP #$20        ; set A short
.1921e3		a9 0c		lda #$0c	              LDA #CH_CMD_RD_VAR32
.1921e5		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1921e9		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.1921ec		a9 68		lda #$68	              LDA #CH_VAR_FILE_SIZE
.1921ee		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA;
.1921f2		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.1921f5		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA         ;LSB First
.1921f9		8f 28 03 00	sta $000328	              STA @lSDOS_FILE_SIZE+0
.1921fd		8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;     ; Store in ADDER32 REgister A
.192201		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192204		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192208		8f 29 03 00	sta $000329	              STA @lSDOS_FILE_SIZE+1
.19220c		8f 21 01 00	sta $000121	              STA @lADDER32_A_LH;     ; Store in ADDER32 REgister A
.192210		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192213		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192217		8f 2a 03 00	sta $00032a	              STA @lSDOS_FILE_SIZE+2
.19221b		8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;     ; Store in ADDER32 REgister A
.19221f		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192222		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192226		8f 2b 03 00	sta $00032b	              STA @lSDOS_FILE_SIZE+3   ;MSB Last
.19222a		8f 23 01 00	sta $000123	              STA @lADDER32_A_HH;     ; Store in ADDER32 REgister A
.19222e		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192231		af 28 01 00	lda $000128	              LDA @lADDER32_R_LL;
.192235		af 29 01 00	lda $000129	              LDA @lADDER32_R_LH;
.192239		af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL;
.19223d		af 2b 01 00	lda $00012b	              LDA @lADDER32_R_HH;
.192241		60		rts		              RTS
.192242						SDOS_READ_FILE
.192242		c2 30		rep #$30	                REP #$30        ; set A&X long
.192244		20 4f 23	jsr $19234f	              JSR SDOS_SETUP_ADDER_B;
.192247		e2 20		sep #$20	                SEP #$20        ; set A short
.192249		20 6b 21	jsr $19216b	              JSR SDOS_FILE_OPEN
.19224c		c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.19224e		f0 03		beq $192253	              BEQ SDOS_READ_FILE_KEEP_GOING
.192250		82 91 00	brl $1922e4	              BRL SDOS_READ_END
.192253						SDOS_READ_FILE_KEEP_GOING
.192253		a2 51 24	ldx #$2451	              LDX #<>sd_card_msg6         ; Print Screen the Message "FILE FOUND, LOADING..."
.192256		22 d1 07 19	jsl $1907d1	              JSL IPRINT       ; print the first line
.19225a		20 e1 21	jsr $1921e1	              JSR ISDOS_GET_FILE_SIZE   ; Get the File Size in 32Bits
.19225d		c2 20		rep #$20	                REP #$20        ; set A long
.19225f		20 73 23	jsr $192373	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE;
.192262		a9 00 00	lda #$0000	              LDA #$0000
.192265		8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.192269		8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.19226d		8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.192271		e2 20		sep #$20	                SEP #$20        ; set A short
.192273						SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.192273		a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.192275		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.192279		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.19227c		af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.192280		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192284		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.192287		af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.19228b		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19228f		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT
.192292		c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.192294		f0 03		beq $192299	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.192296		82 4b 00	brl $1922e4	              BRL SDOS_READ_END
.192299						SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.192299		20 92 23	jsr $192392	              JSR SDOS_READ_BLOCK
.19229c		a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.19229e		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.1922a2		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT
.1922a5		c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.1922a7		d0 05		bne $1922ae	              BNE SDOS_READ_PROC_DONE
.1922a9		20 ee 22	jsr $1922ee	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.1922ac		80 eb		bra $192299	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.1922ae						SDOS_READ_PROC_DONE
.1922ae		c2 20		rep #$20	                REP #$20        ; set A long
.1922b0		af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.1922b4		c9 ff ff	cmp #$ffff	              CMP #$FFFF
.1922b7		d0 24		bne $1922dd	              BNE SDOS_READ_DONE1                  ; if it equal 64K, then the file is bugger than 64K
.1922b9		af 28 01 00	lda $000128	              LDA @lADDER32_R_LL
.1922bd		8f 20 01 00	sta $000120	              STA @lADDER32_A_LL
.1922c1		af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL
.1922c5		8f 22 01 00	sta $000122	              STA @lADDER32_A_HL
.1922c9		20 73 23	jsr $192373	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE ;
.1922cc		20 35 23	jsr $192335	              JSR SDOS_COMPUTE_LOCATE_POINTER
.1922cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1922d1		20 00 23	jsr $192300	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.1922d4		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT
.1922d7		c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.1922d9		d0 09		bne $1922e4	              BNE SDOS_READ_END
.1922db		80 96		bra $192273	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.1922dd						SDOS_READ_DONE1
.1922dd		a9 00		lda #$00	              LDA #$00
.1922df		a2 68 24	ldx #$2468	              LDX #<>sd_card_msg7         ; Print Screen the Message "FILE LOADED"
.1922e2		80 05		bra $1922e9	              BRA SDOS_READ_PROC_DONE1
.1922e4						SDOS_READ_END
.1922e4		a9 ff		lda #$ff	              LDA #$FF
.1922e6		a2 e3 23	ldx #$23e3	              LDX #<>sd_card_err1         ;"ERROR LOADING FILE"
.1922e9						SDOS_READ_PROC_DONE1
.1922e9		22 d1 07 19	jsl $1907d1	              JSL IPRINT       ; print the first line
.1922ed		60		rts		              RTS;
.1922ee						SDOS_ADJUST_POINTER
.1922ee		c2 20		rep #$20	                REP #$20        ; set A long
.1922f0		18		clc		              CLC
.1922f1		a5 38		lda $38		              LDA SDCARD_FILE_PTR ;Load the Pointer
.1922f3		65 3c		adc $3c		              ADC SDCARD_BYTE_NUM
.1922f5		85 38		sta $38		              STA SDCARD_FILE_PTR;
.1922f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1922f9		a5 3a		lda $3a		              LDA SDCARD_FILE_PTR+2;
.1922fb		69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.1922fd		85 3a		sta $3a		              STA SDCARD_FILE_PTR+2;
.1922ff						SDOS_ADJ_DONE
.1922ff		60		rts		              RTS
.192300						SDOS_BYTE_LOCATE
.192300		e2 20		sep #$20	                SEP #$20        ; set A short
.192302		a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.192304		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192308		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19230b		af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.19230f		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192313		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192316		af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.19231a		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19231e		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192321		af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.192325		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192329		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.19232c		af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.192330		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192334		60		rts		              RTS
.192335						SDOS_COMPUTE_LOCATE_POINTER
.192335		c2 20		rep #$20	                REP #$20        ; set A long
.192337		18		clc		              CLC
.192338		af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.19233c		69 ff ff	adc #$ffff	              ADC #$FFFF
.19233f		8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.192343		af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.192347		69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.19234a		8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.19234e		60		rts		              RTS
.19234f						SDOS_SETUP_ADDER_B
.19234f		c2 20		rep #$20	                REP #$20        ; set A long
.192351		a9 01 00	lda #$0001	              LDA #$0001
.192354		8f 24 01 00	sta $000124	              STA @lADDER32_B_LL
.192358		a9 ff ff	lda #$ffff	              LDA #$FFFF
.19235b		8f 26 01 00	sta $000126	              STA @lADDER32_B_HL
.19235f		60		rts		              RTS
.192360						SDOS_LOAD_ADDER_A_WITH_SIZE
.192360		c2 20		rep #$20	                REP #$20        ; set A long
.192362		af 28 03 00	lda $000328	              LDA @lSDOS_FILE_SIZE;
.192366		8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;
.19236a		af 2a 03 00	lda $00032a	              LDA @lSDOS_FILE_SIZE+2;
.19236e		8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;
.192372		60		rts		              RTS
.192373						SDOS_SETUP_CH376S_BUFFER_SIZE
.192373		c2 20		rep #$20	                REP #$20        ; set A long
.192375		af 2a 01 00	lda $00012a	              LDA  @lADDER32_R_HL
.192379		29 00 80	and #$8000	              AND #$8000          ; Check if it is negative
.19237c		c9 00 80	cmp #$8000	              CMP #$8000          ; if it is then just put the Size of the file in ByteNumber
.19237f		f0 08		beq $192389	              BEQ SDOS_SETUP_SMALLR_THAN64K
.192381		a9 ff ff	lda #$ffff	              LDA #$FFFF
.192384		8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.192388		60		rts		              RTS
.192389						SDOS_SETUP_SMALLR_THAN64K
.192389		af 20 01 00	lda $000120	              LDA @lADDER32_A_LL
.19238d		8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.192391		60		rts		              RTS
.192392						SDOS_READ_BLOCK
.192392		e2 20		sep #$20	                SEP #$20        ; set A short
.192394		a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.192396		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.19239a		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.19239d		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA     ; Read First Byte for Number of Byte to Read
.1923a1		85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.1923a3		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.1923a6		a0 00 00	ldy #$0000	              LDY #$0000
.1923a9						SDOS_READ_MORE
.1923a9		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.1923ad		97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.1923af		c8		iny		              INY
.1923b0		c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.1923b2		d0 f5		bne $1923a9	              BNE SDOS_READ_MORE
.1923b4		a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.1923b6		60		rts		              RTS
>1923b7		2f 2a 00			sd_card_dir_string  .text $2F, $2A ,$00
>1923ba		4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>1923c2		44 20 50 52 45 53 45 4e 54 0d 00
>1923cd		45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>1923d5		20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>1923e3		45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>1923eb		41 44 49 4e 47 20 46 49 4c 45 00
>1923f6		4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>1923fe		53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>192406		45 54 45 43 54 45 44 00
>19240e		53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>192416		4f 55 4e 54 45 44 00
>19241d		46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>192425		4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>192435		46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>19243d		4e 45 44 0d 00
>192442		45 4e 44 20 4f 46 20 46		sd_card_msg5        .text "END OF FILE...", $00
>19244a		49 4c 45 2e 2e 2e 00
>192451		46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>192459		4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>192468		46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>192470		44 45 44 00

;******  Return to file: kernel.asm


;******  Processing file: OPL2_Library.asm


;******  Processing file: OPL2_def.asm

=$afe500					OPL2_L_BASE               = $AFE500
=$afe501					OPL2_L_TEST               = $AFE501 ; TEST
=$afe502					OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503					OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504					OPL2_L_IRQ                = $AFE504 ;
=$afe508					OPL2_L_CSM                = $AFE508 ;
=$afe520					OPL2_L_AM_VID_EG_KSR_MULT = $AFE520 ; $40..$35 (21 Registers)
=$afee40					OPL2_L_KSL_TL             = $AFEE40;  $40..$55 (21 Registers)
=$afe560					OPL2_L_AR_DR              = $AFE560;  $60..$75 (21 Registers)
=$afe580					OPL2_L_SL_RR              = $AFE580;  $80..$95 (21 Registers)
=$afe5a0					OPL2_L_FNumber            = $AFE5A0;  $A0..$A8
=$afe5b0					OPL2_L_KON_BLOCK_FNumber  = $AFE5B0;  $B0..$B9
=$afe5bd					OPL2_L_DPTH_RHYTM         = $AFE5BD;  $BD
=$afe5c0					OPL2_L_FEEDBACK           = $AFE5C0;  $C0..$C9
=$afe5e0					OPL2_L_WAVE_SELECT        = $AFE5E0;  $E0..$F5
=$afe600					OPL2_R_BASE               = $AFE600
=$afe601					OPL2_R_TEST               = $AFE601 ; TEST
=$afe602					OPL2_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL2_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL2_R_IRQ                = $AFE604 ;
=$afe608					OPL2_R_CSM                = $AFE608 ;
=$afe620					OPL2_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL2_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL2_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL2_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL2_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL2_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL2_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL2_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL2_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$e700						OPL2_S_BASE_LL            = $E700
=$00af						OPL2_S_BASE_HL            = $00AF
=$afe701					OPL2_S_TEST               = $AFE701 ; TEST
=$afe702					OPL2_S_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL2_S_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL2_S_IRQ                = $AFE704 ;
=$afe708					OPL2_S_CSM                = $AFE708 ;
=$afe720					OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL2_S_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL2_S_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL2_S_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=0						NOTE_C =    0
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
>192474		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>19247c		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>19248c		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>192494		12
>192495		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>19249d		15
>19249e		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>1924a4		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>1924a9		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: OPL2_Library.asm

.1924af						IOPL2_TONE_TEST
.1924af		e2 20		sep #$20	                SEP #$20        ; set A short
.1924b1		a9 01		lda #$01	                LDA #$01
.1924b3		85 26		sta $26		                STA OPL2_OPERATOR
.1924b5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1924b7		22 2f 25 19	jsl $19252f	                JSL OPL2_INIT
.1924bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1924bd		a9 00		lda #$00	                LDA #$00
.1924bf		85 36		sta $36		                STA OPL2_LOOP
.1924c1						OPL2_TONE_TESTING_L0
.1924c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1924c3		a5 36		lda $36		                LDA OPL2_LOOP
.1924c5		85 27		sta $27		                STA OPL2_CHANNEL
.1924c7		38		sec		                SEC
.1924c8		22 7b 25 19	jsl $19257b	                JSL OPL2_SET_TREMOLO
.1924cc		38		sec		                SEC
.1924cd		22 aa 25 19	jsl $1925aa	                JSL OPL2_SET_VIBRATO
.1924d1		a9 04		lda #$04	                LDA #$04
.1924d3		85 32		sta $32		                STA OPL2_PARAMETER0
.1924d5		22 de 25 19	jsl $1925de	                JSL OPL2_SET_MULTIPLIER
.1924d9		a9 0a		lda #$0a	                LDA #$0A
.1924db		85 32		sta $32		                STA OPL2_PARAMETER0
.1924dd		22 46 26 19	jsl $192646	                JSL OPL2_SET_ATTACK
.1924e1		a9 04		lda #$04	                LDA #$04
.1924e3		85 32		sta $32		                STA OPL2_PARAMETER0
.1924e5		22 7a 26 19	jsl $19267a	                JSL OPL2_SET_DECAY
.1924e9		a9 0f		lda #$0f	                LDA #$0F
.1924eb		85 32		sta $32		                STA OPL2_PARAMETER0
.1924ed		22 a6 26 19	jsl $1926a6	                JSL OPL2_SET_SUSTAIN
.1924f1		a9 0f		lda #$0f	                LDA #$0F
.1924f3		85 32		sta $32		                STA OPL2_PARAMETER0
.1924f5		22 da 26 19	jsl $1926da	                JSL OPL2_SET_RELEASE
.1924f9		e2 20		sep #$20	                SEP #$20        ; set A short
.1924fb		e6 36		inc $36		                INC OPL2_LOOP
.1924fd		a5 36		lda $36		                LDA OPL2_LOOP
.1924ff		c9 03		cmp #$03	                CMP #$03
.192501		d0 be		bne $1924c1	                BNE OPL2_TONE_TESTING_L0
.192503		a9 00		lda #$00	                LDA #$00
.192505		85 36		sta $36		                STA OPL2_LOOP
.192507						OPL2_TONE_TESTING_L1
.192507		85 30		sta $30		                STA OPL2_NOTE
.192509		29 03		and #$03	                AND #$03        ; replace modulo 3
.19250b		85 27		sta $27		                STA OPL2_CHANNEL
.19250d		a9 03		lda #$03	                LDA #$03
.19250f		85 31		sta $31		                STA OPL2_OCTAVE
.192511		22 51 25 19	jsl $192551	                JSL OPL2_PLAYNOTE
.192515		e2 20		sep #$20	                SEP #$20        ; set A short
.192517		c2 10		rep #$10	                REP #$10        ; set X long
.192519		a2 00 00	ldx #$0000	                LDX #$0000
.19251c						OPL2_TONE_TESTING_L2
.19251c		ea		nop		                NOP
.19251d		ea		nop		                NOP
.19251e		ea		nop		                NOP
.19251f		ea		nop		                NOP
.192520		e8		inx		                INX
.192521		e0 ff ff	cpx #$ffff	                CPX #$FFFF
.192524		d0 f6		bne $19251c	                BNE OPL2_TONE_TESTING_L2
.192526		e6 36		inc $36		                INC OPL2_LOOP
.192528		a5 36		lda $36		                LDA OPL2_LOOP
.19252a		c9 0c		cmp #$0c	                CMP #12
.19252c		d0 d9		bne $192507	                BNE OPL2_TONE_TESTING_L1
.19252e		6b		rtl		                RTL
.19252f						OPL2_INIT
.19252f		c2 20		rep #$20	                REP #$20        ; set A long
.192531		a9 00 00	lda #$0000	                LDA #$0000
.192534		85 28		sta $28		                STA OPL2_REG_REGION
.192536		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.192538		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19253a		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19253c		85 30		sta $30		                STA OPL2_NOTE
.19253e		85 32		sta $32		                STA OPL2_PARAMETER0
.192540		85 34		sta $34		                STA OPL2_PARAMETER2
.192542		6b		rtl		                RTL
.192543						OPL2_Reset
.192543		6b		rtl		                RTL
.192544						OPL2_Get_FrequencyBlock
.192544		6b		rtl		                RTL
.192545						OPL2_Get_Register
.192545		6b		rtl		                RTL
.192546						OPL2_Get_WaveFormSelect
.192546		6b		rtl		                RTL
.192547						OPL2_Get_ScalingLevel
.192547		6b		rtl		                RTL
.192548						OPL2_Get_Block
.192548		6b		rtl		                RTL
.192549						OPL2_Get_KeyOn
.192549		6b		rtl		                RTL
.19254a						OPL2_Get_Feedback
.19254a		6b		rtl		                RTL
.19254b						OPL2_Get_SynthMode
.19254b		6b		rtl		                RTL
.19254c						OPL2_Get_DeepTremolo
.19254c		6b		rtl		                RTL
.19254d						OPL2_Get_DeepVibrato
.19254d		6b		rtl		                RTL
.19254e						OPL2_Get_Percussion
.19254e		6b		rtl		                RTL
.19254f						OPL2_Get_Drums
.19254f		6b		rtl		                RTL
.192550						OPL2_Get_WaveForm
.192550		6b		rtl		                RTL
.192551						OPL2_PLAYNOTE
.192551		e2 20		sep #$20	                SEP #$20        ; set A short
.192553		a9 00		lda #$00	                LDA #$00
.192555		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.192557		20 a5 27	jsr $1927a5	                JSR OPL2_SET_KEYON
.19255a		20 74 27	jsr $192774	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.19255d		e2 10		sep #$10	                SEP #$10        ; set X short
.19255f		c2 20		rep #$20	                REP #$20        ; set A long
.192561		a6 30		ldx $30		                LDX OPL2_NOTE
.192563		bf 74 24 19	lda $192474,x	                LDA @lnoteFNumbers,X
.192567		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 16bit in Param OPL2_PARAMETER0 & OPL2_PARAMETER1
.192569		22 06 27 19	jsl $192706	                JSL OPL2_SET_FNUMBER
.19256d		e2 20		sep #$20	                SEP #$20        ; set A short
.19256f		a9 01		lda #$01	                LDA #$01
.192571		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.192573		20 a5 27	jsr $1927a5	                JSR OPL2_SET_KEYON
.192576		6b		rtl		                RTL
.192577						OPL2_PLAYDRUM
.192577		6b		rtl		                RTL
.192578						OPL2_Set_Instrument
.192578		6b		rtl		                RTL
.192579						OPL2_Set_Register
.192579		6b		rtl		                RTL
.19257a						OPL2_Set_WaveFormSelect
.19257a		6b		rtl		                RTL
.19257b						OPL2_SET_TREMOLO
.19257b		08		php		                PHP ; Push the Carry
.19257c		c2 20		rep #$20	                REP #$20        ; set A long
.19257e		a9 20 00	lda #$0020	                LDA #$0020;
.192581		85 28		sta $28		                STA OPL2_REG_REGION
.192583		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192586		28		plp		                PLP ; Pull the Carry out
.192587		e2 20		sep #$20	                SEP #$20        ; set A short
.192589		b0 08		bcs $192593	                BCS OPL2_Set_Tremolo_Set;
.19258b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19258d		29 7f		and #$7f	                AND #$7F
.19258f		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192591		80 06		bra $192599	                BRA OPL2_Set_Tremolo_Exit
.192593						OPL2_Set_Tremolo_Set
.192593		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192595		09 80		ora #$80	                ORA #$80
.192597		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192599						OPL2_Set_Tremolo_Exit
.192599		6b		rtl		                RTL
.19259a						OPL2_GET_TREMOLO
.19259a		c2 20		rep #$20	                REP #$20        ; set A long
.19259c		a9 20 00	lda #$0020	                LDA #$0020;
.19259f		85 28		sta $28		                STA OPL2_REG_REGION
.1925a1		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925a4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925a6		29 80 00	and #$0080	                AND #$80
.1925a9		6b		rtl		                RTL
.1925aa						OPL2_SET_VIBRATO
.1925aa		08		php		                PHP ; Push the Carry
.1925ab		c2 20		rep #$20	                REP #$20        ; set A long
.1925ad		a9 20 00	lda #$0020	                LDA #$0020;
.1925b0		85 28		sta $28		                STA OPL2_REG_REGION
.1925b2		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925b5		28		plp		                PLP ; Pull the Carry out
.1925b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1925b8		b0 08		bcs $1925c2	                BCS OPL2_Set_Vibrato_Set;
.1925ba		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925bc		29 bf		and #$bf	                AND #$BF
.1925be		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925c0		80 06		bra $1925c8	                BRA OPL2_Set_Vibrato_Exit
.1925c2						OPL2_Set_Vibrato_Set
.1925c2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925c4		09 40		ora #$40	                ORA #$40
.1925c6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925c8						OPL2_Set_Vibrato_Exit
.1925c8		6b		rtl		                RTL
.1925c9						OPL2_GET_VIBRATO
.1925c9		c2 20		rep #$20	                REP #$20        ; set A long
.1925cb		a9 20 00	lda #$0020	                LDA #$0020;
.1925ce		85 28		sta $28		                STA OPL2_REG_REGION
.1925d0		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925d3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925d5		29 40 00	and #$0040	                AND #$40
.1925d8		6b		rtl		                RTL
.1925d9						OPL2_Set_MaintainSustain
.1925d9		6b		rtl		                RTL
.1925da						OPL2_Get_MaintainSustain
.1925da		6b		rtl		                RTL
.1925db						OPL2_Set_EnvelopeScaling
.1925db		6b		rtl		                RTL
.1925dc						OPL2_Get_EnvelopeScaling
.1925dc		6b		rtl		                RTL
.1925dd						OPL2_Get_Multiplier
.1925dd		6b		rtl		                RTL
.1925de						OPL2_SET_MULTIPLIER
.1925de		c2 20		rep #$20	                REP #$20        ; set A long
.1925e0		a9 20 00	lda #$0020	                LDA #$0020;
.1925e3		85 28		sta $28		                STA OPL2_REG_REGION
.1925e5		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1925ea		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1925ec		29 0f		and #$0f	                AND #$0F
.1925ee		85 32		sta $32		                STA OPL2_PARAMETER0
.1925f0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925f2		29 f0		and #$f0	                AND #$F0
.1925f4		05 32		ora $32		                ORA OPL2_PARAMETER0
.1925f6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925f8		6b		rtl		                RTL
.1925f9						OPL2_SET_SCALINGLEVEL
.1925f9		c2 20		rep #$20	                REP #$20        ; set A long
.1925fb		a9 40 00	lda #$0040	                LDA #$0040;
.1925fe		85 28		sta $28		                STA OPL2_REG_REGION
.192600		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192603		e2 20		sep #$20	                SEP #$20        ; set A short
.192605		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192607		29 03		and #$03	                AND #$03
.192609		0a		asl a		                ASL
.19260a		0a		asl a		                ASL
.19260b		0a		asl a		                ASL
.19260c		0a		asl a		                ASL
.19260d		0a		asl a		                ASL
.19260e		0a		asl a		                ASL
.19260f		85 32		sta $32		                STA OPL2_PARAMETER0
.192611		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192613		29 3f		and #$3f	                AND #$3F
.192615		05 32		ora $32		                ORA OPL2_PARAMETER0
.192617		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192619		6b		rtl		                RTL
.19261a						OPL2_SET_VOLUME
.19261a		c2 20		rep #$20	                REP #$20        ; set A long
.19261c		a9 40 00	lda #$0040	                LDA #$0040  ;
.19261f		85 28		sta $28		                STA OPL2_REG_REGION
.192621		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192624		e2 20		sep #$20	                SEP #$20        ; set A short
.192626		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.192628		29 3f		and #$3f	                AND #$3F
.19262a		85 32		sta $32		                STA OPL2_PARAMETER0
.19262c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19262e		29 c0		and #$c0	                AND #$C0
.192630		05 32		ora $32		                ORA OPL2_PARAMETER0
.192632		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192634		6b		rtl		                RTL
.192635						OPL2_GET_VOLUME
.192635		c2 20		rep #$20	                REP #$20        ; set A long
.192637		a9 40 00	lda #$0040	                LDA #$0040  ;
.19263a		85 28		sta $28		                STA OPL2_REG_REGION
.19263c		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.19263f		e2 20		sep #$20	                SEP #$20        ; set A short
.192641		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192643		29 3f		and #$3f	                AND #$3F
.192645		6b		rtl		                RTL
.192646						OPL2_SET_ATTACK
.192646		c2 20		rep #$20	                REP #$20        ; set A long
.192648		a9 60 00	lda #$0060	                LDA #$0060  ;
.19264b		85 28		sta $28		                STA OPL2_REG_REGION
.19264d		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192650		e2 20		sep #$20	                SEP #$20        ; set A short
.192652		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192654		29 0f		and #$0f	                AND #$0F
.192656		0a		asl a		                ASL
.192657		0a		asl a		                ASL
.192658		0a		asl a		                ASL
.192659		0a		asl a		                ASL
.19265a		85 32		sta $32		                STA OPL2_PARAMETER0
.19265c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19265e		29 0f		and #$0f	                AND #$0F
.192660		05 32		ora $32		                ORA OPL2_PARAMETER0
.192662		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192664		6b		rtl		                RTL
.192665						OPL2_GET_ATTACK
.192665		c2 20		rep #$20	                REP #$20        ; set A long
.192667		a9 60 00	lda #$0060	                LDA #$0060
.19266a		85 28		sta $28		                STA OPL2_REG_REGION
.19266c		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.19266f		e2 20		sep #$20	                SEP #$20        ; set A short
.192671		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192673		29 f0		and #$f0	                AND #$F0
.192675		4a		lsr a		                LSR
.192676		4a		lsr a		                LSR
.192677		4a		lsr a		                LSR
.192678		4a		lsr a		                LSR
.192679		6b		rtl		                RTL
.19267a						OPL2_SET_DECAY
.19267a		c2 20		rep #$20	                REP #$20        ; set A long
.19267c		a9 60 00	lda #$0060	                LDA #$0060;
.19267f		85 28		sta $28		                STA OPL2_REG_REGION
.192681		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192684		e2 20		sep #$20	                SEP #$20        ; set A short
.192686		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192688		29 0f		and #$0f	                AND #$0F
.19268a		85 32		sta $32		                STA OPL2_PARAMETER0
.19268c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19268e		29 f0		and #$f0	                AND #$F0
.192690		05 32		ora $32		                ORA OPL2_PARAMETER0
.192692		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192694		6b		rtl		                RTL
.192695						OPL2_GET_DECAY
.192695		c2 20		rep #$20	                REP #$20        ; set A long
.192697		a9 60 00	lda #$0060	                LDA #$0060
.19269a		85 28		sta $28		                STA OPL2_REG_REGION
.19269c		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.19269f		e2 20		sep #$20	                SEP #$20        ; set A short
.1926a1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926a3		29 0f		and #$0f	                AND #$0F
.1926a5		6b		rtl		                RTL
.1926a6						OPL2_SET_SUSTAIN
.1926a6		c2 20		rep #$20	                REP #$20        ; set A long
.1926a8		a9 80 00	lda #$0080	                LDA #$0080;
.1926ab		85 28		sta $28		                STA OPL2_REG_REGION
.1926ad		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1926b2		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1926b4		29 0f		and #$0f	                AND #$0F
.1926b6		0a		asl a		                ASL
.1926b7		0a		asl a		                ASL
.1926b8		0a		asl a		                ASL
.1926b9		0a		asl a		                ASL
.1926ba		85 32		sta $32		                STA OPL2_PARAMETER0
.1926bc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926be		29 0f		and #$0f	                AND #$0F
.1926c0		05 32		ora $32		                ORA OPL2_PARAMETER0
.1926c2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1926c4		6b		rtl		                RTL
.1926c5						OPL2_GET_SUSTAIN
.1926c5		c2 20		rep #$20	                REP #$20        ; set A long
.1926c7		a9 80 00	lda #$0080	                LDA #$0080
.1926ca		85 28		sta $28		                STA OPL2_REG_REGION
.1926cc		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1926d1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926d3		29 f0		and #$f0	                AND #$F0
.1926d5		4a		lsr a		                LSR
.1926d6		4a		lsr a		                LSR
.1926d7		4a		lsr a		                LSR
.1926d8		4a		lsr a		                LSR
.1926d9		6b		rtl		                RTL
.1926da						OPL2_SET_RELEASE
.1926da		c2 20		rep #$20	                REP #$20        ; set A long
.1926dc		a9 80 00	lda #$0080	                LDA #$0080;
.1926df		85 28		sta $28		                STA OPL2_REG_REGION
.1926e1		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926e4		e2 20		sep #$20	                SEP #$20        ; set A short
.1926e6		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1926e8		29 0f		and #$0f	                AND #$0F
.1926ea		85 32		sta $32		                STA OPL2_PARAMETER0
.1926ec		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926ee		29 f0		and #$f0	                AND #$F0
.1926f0		05 32		ora $32		                ORA OPL2_PARAMETER0
.1926f2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1926f4		6b		rtl		                RTL
.1926f5						OPL2_GET_RELEASE
.1926f5		c2 20		rep #$20	                REP #$20        ; set A long
.1926f7		a9 80 00	lda #$0080	                LDA #$0080
.1926fa		85 28		sta $28		                STA OPL2_REG_REGION
.1926fc		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926ff		e2 20		sep #$20	                SEP #$20        ; set A short
.192701		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192703		29 0f		and #$0f	                AND #$0F
.192705		6b		rtl		                RTL
.192706						OPL2_SET_FNUMBER
.192706		e2 20		sep #$20	                SEP #$20        ; set A short
.192708		18		clc		                CLC
.192709		a5 27		lda $27		                LDA OPL2_CHANNEL
.19270b		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19270d		69 a0		adc #$a0	                ADC #$A0
.19270f		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.192711		a9 00		lda #$00	                LDA #$00
.192713		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.192715		c2 30		rep #$30	                REP #$30        ; set A&X long
.192717		18		clc		                CLC
.192718		a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.19271b		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19271d		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19271f		a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.192722		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.192724		e2 20		sep #$20	                SEP #$20        ; set A short
.192726		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the 16Bits Value of FNumber
.192728		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.19272a		18		clc		                CLC
.19272b		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.19272d		69 10		adc #$10	                ADC #$10
.19272f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.192731		a5 33		lda $33		                LDA OPL2_PARAMETER1
.192733		29 03		and #$03	                AND #$03
.192735		85 33		sta $33		                STA OPL2_PARAMETER1
.192737		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192739		29 fc		and #$fc	                AND #$FC
.19273b		05 33		ora $33		                ORA OPL2_PARAMETER1
.19273d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19273f		6b		rtl		                RTL
.192740						OPL2_GET_FNUMBER
.192740		e2 20		sep #$20	                SEP #$20        ; set A short
.192742		18		clc		                CLC
.192743		a5 27		lda $27		                LDA OPL2_CHANNEL
.192745		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.192747		69 a0		adc #$a0	                ADC #$A0
.192749		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19274b		a9 00		lda #$00	                LDA #$00
.19274d		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.19274f		c2 30		rep #$30	                REP #$30        ; set A&X long
.192751		18		clc		                CLC
.192752		a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192755		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.192757		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.192759		a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.19275c		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19275e		e2 20		sep #$20	                SEP #$20        ; set A short
.192760		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192762		85 32		sta $32		                STA OPL2_PARAMETER0
.192764		18		clc		                CLC
.192765		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.192767		69 10		adc #$10	                ADC #$10
.192769		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19276b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19276d		29 03		and #$03	                AND #$03
.19276f		85 33		sta $33		                STA OPL2_PARAMETER1
.192771		6b		rtl		                RTL
.192772						OPL2_Set_Frequency
.192772		6b		rtl		                RTL
.192773						OPL2_Get_Frequency
.192773		6b		rtl		                RTL
.192774						OPL2_SET_BLOCK
.192774		e2 20		sep #$20	                SEP #$20        ; set A short
.192776		18		clc		                CLC
.192777		a5 27		lda $27		                LDA OPL2_CHANNEL
.192779		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19277b		69 b0		adc #$b0	                ADC #$B0
.19277d		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19277f		a9 00		lda #$00	                LDA #$00
.192781		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.192783		c2 30		rep #$30	                REP #$30        ; set A&X long
.192785		18		clc		                CLC
.192786		a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192789		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19278b		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19278d		a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.192790		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.192792		e2 20		sep #$20	                SEP #$20        ; set A short
.192794		a5 31		lda $31		                LDA OPL2_OCTAVE
.192796		29 07		and #$07	                AND #$07
.192798		0a		asl a		                ASL
.192799		0a		asl a		                ASL
.19279a		85 31		sta $31		                STA OPL2_OCTAVE
.19279c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19279e		29 e3		and #$e3	                AND #$E3
.1927a0		05 31		ora $31		                ORA OPL2_OCTAVE
.1927a2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1927a4		60		rts		                RTS
.1927a5						OPL2_SET_KEYON
.1927a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1927a7		18		clc		                CLC
.1927a8		a5 27		lda $27		                LDA OPL2_CHANNEL
.1927aa		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1927ac		69 b0		adc #$b0	                ADC #$B0
.1927ae		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1927b0		a9 00		lda #$00	                LDA #$00
.1927b2		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1927b4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1927b6		18		clc		                CLC
.1927b7		a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.1927ba		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1927bc		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1927be		a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.1927c1		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1927c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1927c5		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1927c7		29 01		and #$01	                AND #$01
.1927c9		0a		asl a		                ASL
.1927ca		0a		asl a		                ASL
.1927cb		0a		asl a		                ASL
.1927cc		0a		asl a		                ASL
.1927cd		0a		asl a		                ASL
.1927ce		85 32		sta $32		                STA OPL2_PARAMETER0
.1927d0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1927d2		29 df		and #$df	                AND #$DF
.1927d4		05 32		ora $32		                ORA OPL2_PARAMETER0
.1927d6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1927d8		60		rts		                RTS
.1927d9						OPL2_Set_Feedback
.1927d9		6b		rtl		                RTL
.1927da						OPL2_Set_SynthMode
.1927da		6b		rtl		                RTL
.1927db						OPL2_Set_DeepTremolo
.1927db		6b		rtl		                RTL
.1927dc						OPL2_Set_DeepVibrato
.1927dc		6b		rtl		                RTL
.1927dd						OPL2_Set_Percussion
.1927dd		6b		rtl		                RTL
.1927de						OPL2_Set_Drums
.1927de		6b		rtl		                RTL
.1927df						OPL2_Set_WaveForm
.1927df		6b		rtl		                RTL
.1927e0						OPL2_GET_REG_OFFSET
.1927e0		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1927e2		a5 27		lda $27		                LDA OPL2_CHANNEL
.1927e4		29 0f		and #$0f	                AND #$0F
.1927e6		aa		tax		                TAX
.1927e7		a5 26		lda $26		                LDA OPL2_OPERATOR   ; Check which Operator In used
.1927e9		29 01		and #$01	                AND #$01            ; if ZERO = The operator 1, One = Operator 2
.1927eb		c9 01		cmp #$01	                CMP #$01
.1927ed		f0 06		beq $1927f5	                BEQ OPL2_Get_Register_Offset_l0
.1927ef		bf 8c 24 19	lda $19248c,x	                LDA @lregisterOffsets_operator0, X
.1927f3		80 04		bra $1927f9	                BRA OPL2_Get_Register_Offset_exit
.1927f5						OPL2_Get_Register_Offset_l0
.1927f5		bf 95 24 19	lda $192495,x	                LDA @lregisterOffsets_operator1, X
.1927f9						OPL2_Get_Register_Offset_exit
.1927f9		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1927fb		a9 00		lda #$00	                LDA #$00
.1927fd		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1927ff		c2 30		rep #$30	                REP #$30        ; set A&X long
.192801		18		clc		                CLC
.192802		a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192805		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.192807		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.192809		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19280b		a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.19280e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.192810		60		rts		                RTS

;******  Return to file: kernel.asm


;******  Processing file: Floppy.asm


;******  Processing file: Floppy_def.asm

=$af13f0					FDD_STATUS_A         = $AF13F0 ; Read     use in with PS2 and PS2 mode 30 noly
=$af13f1					FDD_STATUS_B         = $AF13F1 ; Read
=$af13f2					FDD_DIGITAL_OUTPUT   = $AF13F2 ; Read/Write
=$af13f3					FDD_TAPE_DRIVER      = $AF13F3 ; Read/Write
=$af13f4					FDD_MAIN_STATUE      = $AF13F4 ; Read
=$af13f4					FDD_DATA_RATE_SELECT = $AF13F4 ; Write
=$af13f5					FDD_FIFO             = $AF13F5 ; Read/Write
=$af13f7					FDD_DIGITAL_INPUT    = $AF13F7 ; Read
=$af13f7					FDD_CONFIG_CTRL      = $AF13F7 ; Write
=$01						FFD_DIRECTION         = $01 ; "1" Head is moving inward direction, "0" it moving outward direction
=$02						FDD_nWRITE_PROTECT    = $02 ; "0" protected / "1" unprotected
=$04						FDD_nINDEX            = $04 ;
=$08						FDD_HEAD_SELLECT      = $08 ; "1" side 1 selected / "0" side 0 selected
=$10						FDD_nTRACK0           = $10 ; "0" => head at track 0
=$20						FDD_STEP              = $20 ;
=$80						FDD_INTERRUPT_PENDING = $80 ; "1" interrupt output is active
=$01						FDD_nDIRECTION        = $01 ; "0" Head is moving inward direction, "1" it moving outward direction
=$02						FDD_WRITE_PROTECT     = $02 ; "1" protected / "0" unprotected
=$04						FDD_INDEX             = $04 ;
=$08						FDD_nHEAD_SELLECT     = $08 ; "0" side 1 selected / "1" side 0 selected
=$10						FDD_TRACK0            = $10 ; "1" => head at track 0
=$40						FDD_DMA_REQUEST       = $40 ; "1" => DMA requeste pending
=$01						FDD_MOTOR_ENABLE_0    = $01 ; "1" => motor enabled
=$02						FDD_MOTOR_ENABLE_1    = $02 ; "1" => motor enabled
=$04						FDD_WRITE_GATE        = $04 ;
=$08						FDD_READ_DATA_TOOGLE  = $08 ;
=$10						FDD_WRITE_DATA_TOOGLE = $10 ;
=$20						FDD_DRIVER_SELLECT_0  = $20 ; bit reflet the bite 0 in "Data Outpu Register"
=$08						FDD_READ_DATA         = $08 ;
=$01						FDD_WRITE_DATA        = $01 ;
=$40						FDD_nDRIVE_SELLECT_1  = $40 ;
=$03						FDD_DRIVE_SEL         = $03
=$04						FDD_nRESET            = $04 ; Set at 1 will reset the FDD write back 0 to reactivate it
=$08						FDD_DMAEN             = $08 ; Set at 1 will active the DMA and interupt IF in PC/AT and Model 30 mode otherwise alreaddy active
=$10						FDD_ENABLE_MOTOR_0    = $10
=$20						FDD_ENABLE_MOTOR_1    = $20
=$03						FDD_TAPE_SEL          = $03
=$0c						FDD_FLOPPY_BOOT_DRIVE = $0C
=$30						FDD_DRIVE_ID          = $30
=$03						FDD_DRIVER_BUSY       = $03
=$10						FDD_CMD_BUSSY         = $10 ; set to "1" when a command is in progress
=$20						FDD_NO_DMA            = $20
=$40						FDD_DIO               = $40
=$80						FDD_RQM               = $80
=$03						FDD_DATA_RATE         = $03
=$1c						FDD_PRE_COMP          = $1C
=$40						FDD_LOW_POWER         = $40 ; write 1 to activeate
=$80						FDD_SOFTWARE_RESET    = $80 ; write 1 to reset the controler , this bit will reset himself
=$01						FDD_nHIGH_ENSITY      = $01 ; "0" if 500Kbps or 1Mbps / "1" if 250 or 300Kpbs
=$06						FDD_DRATE_SEL_PS2     = $06
=$03						FDD_DRATE_SEL_MODE_30 = $03
=$04						FDD_NOPREC            = $04
=$08						FDD_DMAEN_MODE_30     = $08
=$80						FDD_DSKCHG            = $80 ; Disk Change state
=$03						FDD_DRATE_SEL         = $03
=$03						FDD_ST0_DRIVE_SELLECT       = $03 ; give the curent sellected drive
=$04						FDD_ST0_HEAD_ADDRESS        = $04
=$10						FDD_ST0_EQUIPMENT_CHeCK     = $10 ; "1" if fail
=$20						FDD_ST0_SEEK_END            = $20
=$c0						FDD_ST0_INTERRUPT_COE       = $C0 ; "00" Normal termination
=$01						FDD_ST1_MISSIG_ADDRESS_MARK = $01
=$02						FDD_ST1_NOT_WRITABLE        = $02
=$04						FDD_ST1_NO_DATA             = $04
=$10						FDD_ST1_OVERRUN_UDNERRUN    = $10
=$20						FDD_ST1_DATTA_ERROR         = $20
=$80						FDD_ST1_END_OF_CYLINDER     = $80
=$01						FDD_ST2_MISSIG_DATA_ADDRESS_MARK = $01
=$02						FDD_ST2_BAD_CYLINDER        = $02
=$10						FDD_ST2_WRONG_CYLINDER      = $10
=$20						FDD_ST2_DATA_ERROR_IN_DATA_FIELD = $20
=$40						FDD_ST2_CONTROL_MASK        = $40
=$03						FDD_ST3_DRIVE_SELLECT       = $03
=$04						FDD_ST3_HEAD_ADDRESS        = $04
=$10						FDD_ST3_TRACK_0             = $10
=$40						FDD_ST3_WRITE_PROTECT       = $40

;******  Return to file: Floppy.asm

=$1a000						FLOPPY_CMD_BUFFER = $1A000 ; 10 Byte buffer for the command to be send to the FDC and the the data recieved as e result of the command
.01a00a		ea		nop		ILOOP           NOP
.01a00b		ea		nop		                NOP
.01a00c		ea		nop		                NOP
.01a00d		ea		nop		                NOP
.01a00e		ea		nop		                NOP
.01a00f		ea		nop		                NOP
.01a010		ea		nop		                NOP
.01a011		ea		nop		                NOP
.01a012		ea		nop		                NOP
.01a013		ea		nop		                NOP
.01a014		6b		rtl		                RTL
.01a015		22 0a a0 01	jsl $01a00a	ILOOP_1         JSL ILOOP
.01a019		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a01d		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a021		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a025		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a029		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a02d		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a031		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a035		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a039		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a03d		6b		rtl		                RTL
.01a03e		22 15 a0 01	jsl $01a015	ILOOP_1MS       JSL ILOOP_1
.01a042		6b		rtl		                RTL
.01a043		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.01a046		f0 07		beq $01a04f	                BEQ LOOP_MS_END
.01a048		22 3e a0 01	jsl $01a03e	                JSL ILOOP_1MS
.01a04c		ca		dex		                DEX
.01a04d		80 f4		bra $01a043	                BRA ILOOP_MS
.01a04f		6b		rtl		LOOP_MS_END     RTL
.01a050						IFDD_MOTOR_0_ON
.01a050		e2 20		sep #$20	                SEP #$20        ; set A short
.01a052		48		pha		                PHA             ; begin setdbr macro
.01a053		08		php		                PHP
.01a054		e2 20		sep #$20	                SEP #$20        ; set A short
.01a056		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a058		48		pha		                PHA
.01a059		ab		plb		                PLB
.01a05a		28		plp		                PLP
.01a05b		68		pla		                PLA             ; end setdbr macro
.01a05c		a9 10		lda #$10	                LDA #FDD_ENABLE_MOTOR_0
.01a05e		0c f2 13	tsb $af13f2	                TSB FDD_DIGITAL_OUTPUT
.01a061		6b		rtl		                RTL
.01a062						IFDD_MOTOR_0_OFF
.01a062		e2 20		sep #$20	                SEP #$20        ; set A short
.01a064		48		pha		                PHA             ; begin setdbr macro
.01a065		08		php		                PHP
.01a066		e2 20		sep #$20	                SEP #$20        ; set A short
.01a068		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a06a		48		pha		                PHA
.01a06b		ab		plb		                PLB
.01a06c		28		plp		                PLP
.01a06d		68		pla		                PLA             ; end setdbr macro
.01a06e		a9 10		lda #$10	                LDA #FDD_ENABLE_MOTOR_0
.01a070		1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT
.01a073		6b		rtl		                RTL
.01a074						IFDD_MOTOR_ALL_OFF
.01a074		e2 20		sep #$20	                SEP #$20        ; set A short
.01a076		48		pha		                PHA             ; begin setdbr macro
.01a077		08		php		                PHP
.01a078		e2 20		sep #$20	                SEP #$20        ; set A short
.01a07a		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a07c		48		pha		                PHA
.01a07d		ab		plb		                PLB
.01a07e		28		plp		                PLP
.01a07f		68		pla		                PLA             ; end setdbr macro
.01a080		a9 10		lda #$10	                LDA #FDD_ENABLE_MOTOR_0
.01a082		1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT
.01a085		a9 20		lda #$20	                LDA #FDD_ENABLE_MOTOR_1
.01a087		1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT
.01a08a		6b		rtl		                RTL
.01a08b						SCREEN_PUTHEX
.01a08b		08		php		                PHP
.01a08c		0b		phd		                PHD
.01a08d		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a08f		da		phx		                PHX
.01a090		48		pha		                PHA             ; save the value before converting the High part into ASCII
.01a091		e2 20		sep #$20	                SEP #$20        ; set A short
.01a093		a3 01		lda $01,s	                LDA #1, S       ; get the original value out of the stack
.01a095		4a		lsr a		                LSR A             ; Extracting the high part of the byte
.01a096		4a		lsr a		                LSR A
.01a097		4a		lsr a		                LSR A
.01a098		4a		lsr a		                LSR A
.01a099		c2 20		rep #$20	                REP #$20        ; set A long
.01a09b		29 0f 00	and #$000f	                AND #$F
.01a09e		aa		tax		                LDX A
.01a09f		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0a1		bf a3 18 19	lda $1918a3,x	                LDA hex_digits,x
.01a0a5		48		pha		                PHA
.01a0a6		c2 20		rep #$20	                REP #$20        ; set A long
.01a0a8		a3 04		lda $04,s	                LDA #4, S
.01a0aa		aa		tax		                TAX
.01a0ab		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0ad		68		pla		                PLA
.01a0ae		48		pha		                PHA             ; begin setdbr macro
.01a0af		08		php		                PHP
.01a0b0		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0b2		a9 af		lda #$af		LDA #`$AFA000
.01a0b4		48		pha		                PHA
.01a0b5		ab		plb		                PLB
.01a0b6		28		plp		                PLP
.01a0b7		68		pla		                PLA             ; end setdbr macro
.01a0b8		9d 00 a0	sta $afa000,x	                STA $AFA000,x
.01a0bb		a3 01		lda $01,s	                LDA #1, S       ; get the original value out of the stack
.01a0bd		c2 20		rep #$20	                REP #$20        ; set A long
.01a0bf		29 0f 00	and #$000f	                AND #$F         ; Extracting the low part of the byte
.01a0c2		aa		tax		                LDX A
.01a0c3		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0c5		bf a3 18 19	lda $1918a3,x	                LDA hex_digits,x
.01a0c9		48		pha		                PHA
.01a0ca		c2 20		rep #$20	                REP #$20        ; set A long
.01a0cc		a3 04		lda $04,s	                LDA #4, S
.01a0ce		aa		tax		                TAX
.01a0cf		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0d1		68		pla		                PLA
.01a0d2		e8		inx		                INX
.01a0d3		48		pha		                PHA             ; begin setdbr macro
.01a0d4		08		php		                PHP
.01a0d5		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0d7		a9 af		lda #$af		LDA #`$AFA000
.01a0d9		48		pha		                PHA
.01a0da		ab		plb		                PLB
.01a0db		28		plp		                PLP
.01a0dc		68		pla		                PLA             ; end setdbr macro
.01a0dd		9d 00 a0	sta $afa000,x	                STA $AFA000,x
.01a0e0		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a0e2		68		pla		                PLA
.01a0e3		fa		plx		                PLX
.01a0e4		2b		pld		                PLD
.01a0e5		28		plp		                PLP
.01a0e6		6b		rtl		                RTL
.01a0e7						IFDD_READ_FDD
.01a0e7		08		php		                PHP
.01a0e8		0b		phd		                PHD
.01a0e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a0eb		da		phx		                PHX
.01a0ec		48		pha		                PHA
.01a0ed		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0ef		a3 01		lda $01,s	                LDA #1, S
.01a0f1		a2 05 02	ldx #$0205	                LDX #$205
.01a0f4		22 8b a0 01	jsl $01a08b	                JSL SCREEN_PUTHEX
.01a0f8		48		pha		                PHA             ; begin setdbr macro
.01a0f9		08		php		                PHP
.01a0fa		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0fc		a9 af		lda #$af		LDA #`$AFA200
.01a0fe		48		pha		                PHA
.01a0ff		ab		plb		                PLB
.01a100		28		plp		                PLP
.01a101		68		pla		                PLA             ; end setdbr macro
.01a102		a2 00 00	ldx #$0000	                LDX #0
.01a105		9d 00 a2	sta $afa200,x	                STA $AFA200,x
.01a108		68		pla		                PLA
.01a109		48		pha		                PHA             ; begin setdbr macro
.01a10a		08		php		                PHP
.01a10b		e2 20		sep #$20	                SEP #$20        ; set A short
.01a10d		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a10f		48		pha		                PHA
.01a110		ab		plb		                PLB
.01a111		28		plp		                PLP
.01a112		68		pla		                PLA             ; end setdbr macro
.01a113		8d 04 a0	sta $01a004	                STA FLOPPY_CMD_BUFFER+4   ; R : Sector Address
.01a116		a9 46		lda #$46	                LDA #$46 ;;;;;;;;
.01a118		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER     ; command code 0 : MT MFM SK  0 0 1   1   0
.01a11b		8a		txa		                LDA X                     ; command code 1 : 0  0   0   0 0 HDS DS1 DS2
.01a11c		29 07		and #$07	                AND #7
.01a11e		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a121		a5 00		lda $00		                LDA 0                     ; C : Cylinder Address
.01a123		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a126		a5 00		lda $00		                LDA 0                     ; H : Head Address
.01a128		8d 03 a0	sta $01a003	                STA FLOPPY_CMD_BUFFER+3
.01a12b		a5 02		lda $02		                LDA 2                     ; N : Sector Size Code 0=>128 / 1=>256 / 2=>512
.01a12d		8d 05 a0	sta $01a005	                STA FLOPPY_CMD_BUFFER+5
.01a130		a5 01		lda $01		                LDA 1                     ; EOT : End of Track
.01a132		8d 06 a0	sta $01a006	                STA FLOPPY_CMD_BUFFER+6
.01a135		a5 00		lda $00		                LDA 0                     ; GPL : Gap Length
.01a137		8d 07 a0	sta $01a007	                STA FLOPPY_CMD_BUFFER+7
.01a13a		a5 02		lda $02		                LDA 2                     ; DTL : Special Sector Size Determin the number of byte to read / 2=>512 ???
.01a13c		8d 08 a0	sta $01a008	                STA FLOPPY_CMD_BUFFER+8
.01a13f		48		pha		                PHA             ; begin setdbr macro
.01a140		08		php		                PHP
.01a141		e2 20		sep #$20	                SEP #$20        ; set A short
.01a143		a9 01		lda #$01		LDA #`Text_READ
.01a145		48		pha		                PHA
.01a146		ab		plb		                PLB
.01a147		28		plp		                PLP
.01a148		68		pla		                PLA             ; end setdbr macro
.01a149		a2 f5 aa	ldx #$aaf5	                LDX #<>Text_READ
.01a14c		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a150		a9 09		lda #$09	                LDA #9                    ; number of command Bytes
.01a152		22 ff a5 01	jsl $01a5ff	                JSL IFDD_SEND_CMD
.01a156		e2 20		sep #$20	                SEP #$20        ; set A short
.01a158		0b		phd		                PHD
.01a159		08		php		                PHP
.01a15a		22 09 a8 01	jsl $01a809	                JSL IFDD_READ_DATA_FIFO
.01a15e		08		php		                PHP
.01a15f		0b		phd		                PHD
.01a160		e2 20		sep #$20	                SEP #$20        ; set A short
.01a162		c9 01		cmp #$01	                CMP #1
.01a164		a9 07		lda #$07	                LDA #7
.01a166		48		pha		                PHA
.01a167		48		pha		                PHA             ; begin setdbr macro
.01a168		08		php		                PHP
.01a169		e2 20		sep #$20	                SEP #$20        ; set A short
.01a16b		a9 01		lda #$01		LDA #`Text_Stop_Rx_FIFO
.01a16d		48		pha		                PHA
.01a16e		ab		plb		                PLB
.01a16f		28		plp		                PLP
.01a170		68		pla		                PLA             ; end setdbr macro
.01a171		a2 54 ac	ldx #$ac54	                LDX #<>Text_Stop_Rx_FIFO
.01a174		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a178		68		pla		                PLA                    ; number of Bytes to read
.01a179		22 01 a7 01	jsl $01a701	                JSL IFDD_READ_CMD_RESULT
.01a17d		22 55 a4 01	jsl $01a455	                JSL IFDD_SENS_INTERRUPT_STATUS
.01a181		22 62 a0 01	jsl $01a062	                JSL IFDD_MOTOR_0_OFF
.01a185		80 fe		bra $01a185	DEBUG_INF_LOOP                BRA DEBUG_INF_LOOP
.01a187		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a189		68		pla		                PLA
.01a18a		fa		plx		                PLX
.01a18b		2b		pld		                PLD
.01a18c		28		plp		                PLP
.01a18d		6b		rtl		                RTL
.01a18e						IFDD_INIT_AT
.01a18e		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a190		48		pha		                PHA             ; begin setdbr macro
.01a191		08		php		                PHP
.01a192		e2 20		sep #$20	                SEP #$20        ; set A short
.01a194		a9 01		lda #$01		LDA #`Text_INIT_AT
.01a196		48		pha		                PHA
.01a197		ab		plb		                PLB
.01a198		28		plp		                PLP
.01a199		68		pla		                PLA             ; end setdbr macro
.01a19a		a2 5f aa	ldx #$aa5f	                LDX #<>Text_INIT_AT
.01a19d		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a1a1		22 18 a2 01	jsl $01a218	                JSL IFDD_RESET_FULL         ; Reset FDD : No DMA, Drive 0 selected, no motor activated
.01a1a5		48		pha		                PHA             ; begin setdbr macro
.01a1a6		08		php		                PHP
.01a1a7		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1a9		a9 af		lda #$af		LDA #`FDD_CONFIG_CTRL
.01a1ab		48		pha		                PHA
.01a1ac		ab		plb		                PLB
.01a1ad		28		plp		                PLP
.01a1ae		68		pla		                PLA             ; end setdbr macro
.01a1af		a9 02		lda #$02	                LDA #$02
.01a1b1		0c f7 13	tsb $af13f7	                TSB FDD_CONFIG_CTRL
.01a1b4		48		pha		                PHA             ; begin setdbr macro
.01a1b5		08		php		                PHP
.01a1b6		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1b8		a9 af		lda #$af		LDA #`FDD_DATA_RATE_SELECT
.01a1ba		48		pha		                PHA
.01a1bb		ab		plb		                PLB
.01a1bc		28		plp		                PLP
.01a1bd		68		pla		                PLA             ; end setdbr macro
.01a1be		a9 00		lda #$00	                LDA #$00
.01a1c0		0c f4 13	tsb $af13f4	                TSB FDD_DATA_RATE_SELECT
.01a1c3		48		pha		                PHA             ; begin setdbr macro
.01a1c4		08		php		                PHP
.01a1c5		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1c7		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a1c9		48		pha		                PHA
.01a1ca		ab		plb		                PLB
.01a1cb		28		plp		                PLP
.01a1cc		68		pla		                PLA             ; end setdbr macro
.01a1cd		a9 f0		lda #$f0	                LDA #$F0                    ; active all motor output and sellect drive 0 (bit 0-1)
.01a1cf		0c f2 13	tsb $af13f2	                TSB FDD_DIGITAL_OUTPUT      ; Set the reset bit to exit the reset mode  "Test and Reset Memory Bits Against Accumulator"
.01a1d2		6b		rtl		                RTL
.01a1d3						IFDD_RESET
.01a1d3		48		pha		                PHA             ; begin setdbr macro
.01a1d4		08		php		                PHP
.01a1d5		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1d7		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a1d9		48		pha		                PHA
.01a1da		ab		plb		                PLB
.01a1db		28		plp		                PLP
.01a1dc		68		pla		                PLA             ; end setdbr macro
.01a1dd		a9 04		lda #$04	                LDA #FDD_nRESET             ; reset the floppy disc controler, deactive all the motors and the DMA
.01a1df		1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT      ; Clear the reset bit to go in reset mode "Test and Reset Memory Bits Against Accumulator"
.01a1e2		22 15 a0 01	jsl $01a015	                JSL ILOOP_1
.01a1e6		48		pha		                PHA             ; begin setdbr macro
.01a1e7		08		php		                PHP
.01a1e8		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1ea		a9 af		lda #$af		LDA #`FDD_DATA_RATE_SELECT
.01a1ec		48		pha		                PHA
.01a1ed		ab		plb		                PLB
.01a1ee		28		plp		                PLP
.01a1ef		68		pla		                PLA             ; end setdbr macro
.01a1f0		a9 02		lda #$02	                LDA #2
.01a1f2		8d f4 13	sta $af13f4	                STA FDD_DATA_RATE_SELECT    ; if in mode PC/AT or PS/2 the datarate is set in Config Control Register
.01a1f5		22 3e a0 01	jsl $01a03e	                JSL ILOOP_1MS
.01a1f9		48		pha		                PHA             ; begin setdbr macro
.01a1fa		08		php		                PHP
.01a1fb		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1fd		a9 af		lda #$af		LDA #`FDD_CONFIG_CTRL
.01a1ff		48		pha		                PHA
.01a200		ab		plb		                PLB
.01a201		28		plp		                PLP
.01a202		68		pla		                PLA             ; end setdbr macro
.01a203		a9 02		lda #$02	                LDA #2
.01a205		8d f7 13	sta $af13f7	                STA FDD_CONFIG_CTRL
.01a208		48		pha		                PHA             ; begin setdbr macro
.01a209		08		php		                PHP
.01a20a		e2 20		sep #$20	                SEP #$20        ; set A short
.01a20c		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a20e		48		pha		                PHA
.01a20f		ab		plb		                PLB
.01a210		28		plp		                PLP
.01a211		68		pla		                PLA             ; end setdbr macro
.01a212		a9 04		lda #$04	                LDA #FDD_nRESET             ; Load the reset bit to be set
.01a214		0c f2 13	tsb $af13f2	                TSB FDD_DIGITAL_OUTPUT      ; Set the reset bit to exit the reset mode  "Test and Reset Memory Bits Against Accumulator"
.01a217		6b		rtl		                RTL
.01a218						IFDD_RESET_FULL
.01a218		e2 20		sep #$20	                SEP #$20        ; set A short
.01a21a		a9 00		lda #$00	                LDA #0                      ; Will set all the bit at 0 to reset everyting
.01a21c		48		pha		                PHA             ; begin setdbr macro
.01a21d		08		php		                PHP
.01a21e		e2 20		sep #$20	                SEP #$20        ; set A short
.01a220		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a222		48		pha		                PHA
.01a223		ab		plb		                PLB
.01a224		28		plp		                PLP
.01a225		68		pla		                PLA             ; end setdbr macro
.01a226		8d f2 13	sta $af13f2	                STA  FDD_DIGITAL_OUTPUT
.01a229		ea		nop		                NOP                         ; wait, the doc say 100ns min
.01a22a		ea		nop		                NOP
.01a22b		22 15 a0 01	jsl $01a015	                JSL ILOOP_1
.01a22f		ea		nop		                NOP
.01a230		e2 20		sep #$20	                SEP #$20        ; set A short
.01a232		a9 04		lda #$04	                LDA #FDD_nRESET
.01a234		48		pha		                PHA             ; begin setdbr macro
.01a235		08		php		                PHP
.01a236		e2 20		sep #$20	                SEP #$20        ; set A short
.01a238		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a23a		48		pha		                PHA
.01a23b		ab		plb		                PLB
.01a23c		28		plp		                PLP
.01a23d		68		pla		                PLA             ; end setdbr macro
.01a23e		8d f2 13	sta $af13f2	                STA FDD_DIGITAL_OUTPUT      ; Set the reset bit to exit the reset mode
.01a241		6b		rtl		                RTL
.01a242						IFDD_READ
.01a242		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a244		48		pha		                PHA ; save the sector to read
.01a245		a3 08		lda $08,s	                LDA 8,S
.01a247		a8		tay		                TAY
.01a248		a3 06		lda $06,s	                LDA 6,S
.01a24a		a8		tay		                TAY
.01a24b		68		pla		                PLA
.01a24c		48		pha		                PHA ; save the sector read for the return value
.01a24d		0a		asl a		                ASL A ; convert the sector number into byte count
.01a24e		0a		asl a		                ASL A
.01a24f		0a		asl a		                ASL A
.01a250		0a		asl a		                ASL A
.01a251		0a		asl a		                ASL A
.01a252		0a		asl a		                ASL A
.01a253		0a		asl a		                ASL A
.01a254		0a		asl a		                ASL A
.01a255		0a		asl a		                ASL A
.01a256		69 30 ad	adc #$ad30	                ADC #<>data_floppy
.01a259		aa		tax		                TAX
.01a25a		e2 20		sep #$20	                SEP #$20        ; set A short
.01a25c		a3 08		lda $08,s	                LDA 8,S
.01a25e		8f 69 a2 01	sta $01a269	                STA FFD_MVN_INSTRUCTION_ADDRESS + 2 ; rewrite the second parameter of the instruction in RAM
.01a262		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a264		a9 ff 01	lda #$01ff	                LDA #511
.01a267		54 01 01	mvn $01,$01	FFD_MVN_INSTRUCTION_ADDRESS  MVN `FAT12_ADDRESS_BUFFER_512,`data_floppy
.01a26a		68		pla		                PLA
.01a26b		6b		rtl		                RTL
.01a26c						IFDD_READ_ORI
.01a26c		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a26e		48		pha		                PHA
.01a26f		a3 08		lda $08,s	                LDA 8,S
.01a271		aa		tax		                TAX
.01a272		a3 06		lda $06,s	                LDA 6,S
.01a274		a8		tay		                TAY
.01a275		68		pla		                PLA
.01a276		48		pha		                PHA ; save the sector read for the return value
.01a277		0a		asl a		                ASL A ; convert the sector number into byte count
.01a278		0a		asl a		                ASL A
.01a279		0a		asl a		                ASL A
.01a27a		0a		asl a		                ASL A
.01a27b		0a		asl a		                ASL A
.01a27c		0a		asl a		                ASL A
.01a27d		0a		asl a		                ASL A
.01a27e		0a		asl a		                ASL A
.01a27f		0a		asl a		                ASL A
.01a280		69 30 ad	adc #$ad30	                ADC #<>data_floppy
.01a283		aa		tax		                TAX
.01a284		a9 ff 01	lda #$01ff	                LDA #511
.01a287		a0 00 98	ldy #$9800	                LDY #<>FAT12_ADDRESS_BUFFER_512
.01a28a		54 01 01	mvn $01,$01	                MVN `FAT12_ADDRESS_BUFFER_512,`data_floppy
.01a28d		68		pla		                PLA
.01a28e		6b		rtl		                RTL
.01a28f		00		brk #		IFDD_WRITE      BRK
.01a290		00		brk #		IFDD_SETSECTOR  BRK
.01a291		00		brk #		IFDD_SETTRACK  BRK
.01a292		00		brk #		IFDD_SETSIDE    BRK
.01a293						IFDD_FORMAT_TRACK
.01a293		08		php		                PHP
.01a294		0b		phd		                PHD
.01a295		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a297		da		phx		                PHX
.01a298		48		pha		                PHA ; stack ofset of 7 need to be addes to get the parametters
.01a299		e2 20		sep #$20	                SEP #$20        ; set A short
.01a29b		a3 0b		lda $0b,s	                LDA #4+7, S         ; Get the MFM Byte
.01a29d		29 01		and #$01	                AND #1            ; Get only the MFM 1 bits info
.01a29f		0a		asl a		                ASL
.01a2a0		0a		asl a		                ASL
.01a2a1		0a		asl a		                ASL
.01a2a2		0a		asl a		                ASL
.01a2a3		0a		asl a		                ASL
.01a2a4		0a		asl a		                ASL
.01a2a5		09 0d		ora #$0d	                ORA #$D
.01a2a7		48		pha		                PHA             ; begin setdbr macro
.01a2a8		08		php		                PHP
.01a2a9		e2 20		sep #$20	                SEP #$20        ; set A short
.01a2ab		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a2ad		48		pha		                PHA
.01a2ae		ab		plb		                PLB
.01a2af		28		plp		                PLP
.01a2b0		68		pla		                PLA             ; end setdbr macro
.01a2b1		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a2b4		a3 0c		lda $0c,s	                LDA #5+7, S         ; Get the ID Info Byte
.01a2b6		29 07		and #$07	                AND #7            ; Get only the ID 3 bits info
.01a2b8		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a2bb		a3 0d		lda $0d,s	                LDA #6+7, S         ; Get N (Byte per sector)
.01a2bd		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a2c0		a3 0e		lda $0e,s	                LDA #7+7, S         ; Get SC (Sector Per Cylender)
.01a2c2		8d 03 a0	sta $01a003	                STA FLOPPY_CMD_BUFFER+3
.01a2c5		a3 0f		lda $0f,s	                LDA #8+7, S         ; Get GPL (Gap3)
.01a2c7		8d 04 a0	sta $01a004	                STA FLOPPY_CMD_BUFFER+4
.01a2ca		a3 10		lda $10,s	                LDA #9+7, S         ; Get D (Byte filler)
.01a2cc		8d 05 a0	sta $01a005	                STA FLOPPY_CMD_BUFFER+5
.01a2cf		48		pha		                PHA             ; begin setdbr macro
.01a2d0		08		php		                PHP
.01a2d1		e2 20		sep #$20	                SEP #$20        ; set A short
.01a2d3		a9 01		lda #$01		LDA #`Text_FORMAT
.01a2d5		48		pha		                PHA
.01a2d6		ab		plb		                PLB
.01a2d7		28		plp		                PLP
.01a2d8		68		pla		                PLA             ; end setdbr macro
.01a2d9		a2 59 ab	ldx #$ab59	                LDX #<>Text_FORMAT
.01a2dc		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a2e0		a9 06		lda #$06	                LDA #6                    ; number of command Bytes
.01a2e2		22 ff a5 01	jsl $01a5ff	                JSL IFDD_SEND_CMD
.01a2e6		c9 00		cmp #$00	                CMP #0
.01a2e8		30 2c		bmi $01a316	                BMI IFDD_FORMAT_TRACK_ERROR_SEND_CMD
.01a2ea		a3 11		lda $11,s	                LDA #10+7, S         ; Get C (Cylender Adress)
.01a2ec		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a2ef		a3 12		lda $12,s	                LDA #11+7, S         ; Get H (Head Address)
.01a2f1		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a2f4		a3 13		lda $13,s	                LDA #12+7, S         ; Get N (Sector size code)
.01a2f6		8d 03 a0	sta $01a003	                STA FLOPPY_CMD_BUFFER+3
.01a2f9		a3 12		lda $12,s	                LDA #11+7, S         ; Get R (Sector Adress)
.01a2fb						Format_next_sector
.01a2fb		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a2fe		a9 04		lda #$04	                LDA #4
.01a300		20 30 a3	jsr $01a330	                JSR IFDD_SEND_EXECUTION_DATA
.01a303		af f4 13 af	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a307		29 14		and #$14	                AND #20                  ; get NON DMA bit, will stay 1 until the Executuin phase
.01a309		c9 20		cmp #$20	                CMP #$20
.01a30b		d0 05		bne $01a312	                BNE Format_sector_done
.01a30d		a3 12		lda $12,s	                LDA #11+7, S
.01a30f		1a		inc a		                INC A
.01a310		80 e9		bra $01a2fb	                BRA Format_next_sector
.01a312						Format_sector_done
.01a312		a9 01		lda #$01	                LDA #1
.01a314		80 13		bra $01a329	                BRA IFDD_FORMAT_TRACK_DONE
.01a316						IFDD_FORMAT_TRACK_ERROR_SEND_CMD
.01a316		48		pha		                PHA             ; begin setdbr macro
.01a317		08		php		                PHP
.01a318		e2 20		sep #$20	                SEP #$20        ; set A short
.01a31a		a9 01		lda #$01		LDA #`Text_ERROR
.01a31c		48		pha		                PHA
.01a31d		ab		plb		                PLB
.01a31e		28		plp		                PLP
.01a31f		68		pla		                PLA             ; end setdbr macro
.01a320		a2 67 ac	ldx #$ac67	                LDX #<>Text_ERROR
.01a323		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a327		a9 ff		lda #$ff	                LDA #-1
.01a329						IFDD_FORMAT_TRACK_DONE
.01a329		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a32b		68		pla		                PLA
.01a32c		fa		plx		                PLX
.01a32d		2b		pld		                PLD
.01a32e		28		plp		                PLP
.01a32f		6b		rtl		                RTL
.01a330						IFDD_SEND_EXECUTION_DATA
.01a330		08		php		                PHP
.01a331		0b		phd		                PHD
.01a332		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a334		da		phx		                PHX
.01a335		48		pha		                PHA ; stack ofset of 7 need to be addes to get the parametters
.01a336		e2 20		sep #$20	                SEP #$20        ; set A short
.01a338		48		pha		                PHA                       ; save the number of byt to be sent to the FDC
.01a339		48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.01a33a		48		pha		                PHA             ; begin setdbr macro
.01a33b		08		php		                PHP
.01a33c		e2 20		sep #$20	                SEP #$20        ; set A short
.01a33e		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a340		48		pha		                PHA
.01a341		ab		plb		                PLB
.01a342		28		plp		                PLP
.01a343		68		pla		                PLA             ; end setdbr macro
.01a344						IFDD_SEND_EXECUTION_DATA____READ_MAIN_STATUS_REG
.01a344		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a347		83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.01a349		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a34b		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a34d		f0 05		beq $01a354	                BEQ IFDD_SEND_EXECUTION_DATA____TRANSFERT_CAN_BE_DONE ;
.01a34f		ea		nop		                NOP
.01a350		ea		nop		                NOP
.01a351		ea		nop		                NOP
.01a352		80 f0		bra $01a344	                BRA IFDD_SEND_EXECUTION_DATA____READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a354						IFDD_SEND_EXECUTION_DATA____TRANSFERT_CAN_BE_DONE
.01a354		a3 01		lda $01,s	                LDA #1, S                 ; get the Main Status avlue
.01a356		29 40		and #$40	                AND #FDD_DIO                  ; get DIO bit
.01a358		c9 40		cmp #$40	                CMP #$40                  ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.01a35a		d0 05		bne $01a361	                BNE IFDD_SEND_EXECUTION_DATA____READY_TO_SEND_DATA;
.01a35c		ad f5 13	lda $af13f5	                LDA FDD_FIFO                      ; remove the Main Status value saved
.01a35f		80 e3		bra $01a344	                BRA IFDD_SEND_EXECUTION_DATA____READ_MAIN_STATUS_REG  ; retest if we can send data now#
.01a361						IFDD_SEND_EXECUTION_DATA____READY_TO_SEND_DATA
.01a361		68		pla		                PLA                       ; remove the Main Status value saved
.01a362		48		pha		                PHA             ; begin setdbr macro
.01a363		08		php		                PHP
.01a364		e2 20		sep #$20	                SEP #$20        ; set A short
.01a366		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a368		48		pha		                PHA
.01a369		ab		plb		                PLB
.01a36a		28		plp		                PLP
.01a36b		68		pla		                PLA             ; end setdbr macro
.01a36c		a2 00 00	ldx #$0000	                LDX #0
.01a36f						IFDD_SEND_EXECUTION_DATA____SEND_NEXT_ECUTION_DATA
.01a36f		8a		txa		                LDA X
.01a370		c3 01		cmp $01,s	                CMP #1, S                 ; Test if we sent all the data ot not
.01a372		f0 53		beq $01a3c7	                BEQ IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT_1
.01a374		bd 00 a0	lda $01a000,x	                LDA FLOPPY_CMD_BUFFER,X
.01a377		8f f5 13 af	sta $af13f5	                STA FDD_FIFO              ; Write the data in the FDC's FIFO
.01a37b		da		phx		                PHX
.01a37c		48		pha		                PHA             ; begin setdbr macro
.01a37d		08		php		                PHP
.01a37e		e2 20		sep #$20	                SEP #$20        ; set A short
.01a380		a9 01		lda #$01		LDA #`Text_CMD_Parametter
.01a382		48		pha		                PHA
.01a383		ab		plb		                PLB
.01a384		28		plp		                PLP
.01a385		68		pla		                PLA             ; end setdbr macro
.01a386		a2 8c ac	ldx #$ac8c	                LDX #<>Text_CMD_Parametter
.01a389		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a38d		fa		plx		                PLX
.01a38e		da		phx		                PHX
.01a38f		8a		txa		                TXA
.01a390		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a394		48		pha		                PHA             ; begin setdbr macro
.01a395		08		php		                PHP
.01a396		e2 20		sep #$20	                SEP #$20        ; set A short
.01a398		a9 01		lda #$01		LDA #`Text_duble_dot
.01a39a		48		pha		                PHA
.01a39b		ab		plb		                PLB
.01a39c		28		plp		                PLP
.01a39d		68		pla		                PLA             ; end setdbr macro
.01a39e		a2 a8 ac	ldx #$aca8	                LDX #<>Text_duble_dot
.01a3a1		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a3a5		fa		plx		                PLX
.01a3a6		da		phx		                PHX
.01a3a7		bd 00 a0	lda $01a000,x	                LDA FLOPPY_CMD_BUFFER,X
.01a3aa		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a3ae		a2 78 ac	ldx #$ac78	                LDX #<>Text_EOL
.01a3b1		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a3b5		22 ff a8 01	jsl $01a8ff	                JSL IFDD_PRINT_FDD_MS_REG
.01a3b9		fa		plx		                PLX
.01a3ba		e8		inx		                INX
.01a3bb		48		pha		                PHA             ; begin setdbr macro
.01a3bc		08		php		                PHP
.01a3bd		e2 20		sep #$20	                SEP #$20        ; set A short
.01a3bf		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a3c1		48		pha		                PHA
.01a3c2		ab		plb		                PLB
.01a3c3		28		plp		                PLP
.01a3c4		68		pla		                PLA             ; end setdbr macro
.01a3c5						IFDD_SEND_EXECUTION____READ_MAIN_STATUS_REG_FOR_TRANSFERT
.01a3c5		80 02		bra $01a3c9	                BRA IFDD_SEND_EXECUTION____JUMP_BYPASS
.01a3c7		80 48		bra $01a411	IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT_1 BRA IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT
.01a3c9						IFDD_SEND_EXECUTION____JUMP_BYPASS
.01a3c9		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a3cc		48		pha		                PHA
.01a3cd		29 0f		and #$0f	                AND #$F
.01a3cf		18		clc		                CLC
.01a3d0		69 30		adc #$30	                ADC #$30
.01a3d2		48		pha		                PHA             ; begin setdbr macro
.01a3d3		08		php		                PHP
.01a3d4		e2 20		sep #$20	                SEP #$20        ; set A short
.01a3d6		a9 af		lda #$af		LDA #`$AFA207
.01a3d8		48		pha		                PHA
.01a3d9		ab		plb		                PLB
.01a3da		28		plp		                PLP
.01a3db		68		pla		                PLA             ; end setdbr macro
.01a3dc		8d 07 a2	sta $afa207	                STA $AFA207
.01a3df		a3 01		lda $01,s	                LDA #1, S
.01a3e1		4a		lsr a		                LSR A
.01a3e2		4a		lsr a		                LSR A
.01a3e3		4a		lsr a		                LSR A
.01a3e4		4a		lsr a		                LSR A
.01a3e5		29 0f		and #$0f	                AND #$F
.01a3e7		18		clc		                CLC
.01a3e8		69 30		adc #$30	                ADC #$30
.01a3ea		48		pha		                PHA             ; begin setdbr macro
.01a3eb		08		php		                PHP
.01a3ec		e2 20		sep #$20	                SEP #$20        ; set A short
.01a3ee		a9 af		lda #$af		LDA #`$AFA206
.01a3f0		48		pha		                PHA
.01a3f1		ab		plb		                PLB
.01a3f2		28		plp		                PLP
.01a3f3		68		pla		                PLA             ; end setdbr macro
.01a3f4		8d 06 a2	sta $afa206	                STA $AFA206
.01a3f7		68		pla		                PLA
.01a3f8		48		pha		                PHA             ; begin setdbr macro
.01a3f9		08		php		                PHP
.01a3fa		e2 20		sep #$20	                SEP #$20        ; set A short
.01a3fc		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a3fe		48		pha		                PHA
.01a3ff		ab		plb		                PLB
.01a400		28		plp		                PLP
.01a401		68		pla		                PLA             ; end setdbr macro
.01a402		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a405		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a407		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a409		82 63 ff	brl $01a36f	                BRL IFDD_SEND_EXECUTION_DATA____SEND_NEXT_ECUTION_DATA
.01a40c		ea		nop		                NOP
.01a40d		ea		nop		                NOP
.01a40e		ea		nop		                NOP
.01a40f		80 b4		bra $01a3c5	                BRA IFDD_SEND_EXECUTION____READ_MAIN_STATUS_REG_FOR_TRANSFERT  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a411						IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT
.01a411		68		pla		                PLA                       ; removing the number of commands byte to send
.01a412		a9 00		lda #$00	                LDA #0
.01a414		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a416		fa		plx		                PLX
.01a417		68		pla		                PLA
.01a418		2b		pld		                PLD
.01a419		28		plp		                PLP
.01a41a		6b		rtl		                RTL
.01a41b						IFDD_RECALIBRATE
.01a41b		e2 20		sep #$20	                SEP #$20        ; set A short
.01a41d		29 03		and #$03	                AND #3                    ; just get the 2 first bit
.01a41f		48		pha		                PHA             ; begin setdbr macro
.01a420		08		php		                PHP
.01a421		e2 20		sep #$20	                SEP #$20        ; set A short
.01a423		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a425		48		pha		                PHA
.01a426		ab		plb		                PLB
.01a427		28		plp		                PLP
.01a428		68		pla		                PLA             ; end setdbr macro
.01a429		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a42c		a9 07		lda #$07	                LDA #7
.01a42e		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a431		48		pha		                PHA             ; begin setdbr macro
.01a432		08		php		                PHP
.01a433		e2 20		sep #$20	                SEP #$20        ; set A short
.01a435		a9 01		lda #$01		LDA #`Text_RECALIBRATE
.01a437		48		pha		                PHA
.01a438		ab		plb		                PLB
.01a439		28		plp		                PLP
.01a43a		68		pla		                PLA             ; end setdbr macro
.01a43b		a2 91 aa	ldx #$aa91	                LDX #<>Text_RECALIBRATE
.01a43e		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a442		a9 02		lda #$02	                LDA #2                    ; number of command Bytes
.01a444		22 ff a5 01	jsl $01a5ff	                JSL IFDD_SEND_CMD
.01a448		c9 00		cmp #$00	                CMP #0
.01a44a		30 04		bmi $01a450	                BMI IFDD_RECALIBRATE_ERROR_SEND_CMD
.01a44c		a9 01		lda #$01	                LDA #1
.01a44e		80 04		bra $01a454	                BRA IFDD_RECALIBRATE_DONE
.01a450						IFDD_RECALIBRATE_ERROR_SEND_CMD
.01a450		a9 ff		lda #$ff	                LDA #-1
.01a452		80 00		bra $01a454	                BRA IFDD_RECALIBRATE_ERROR
.01a454						IFDD_RECALIBRATE_ERROR
.01a454						IFDD_RECALIBRATE_DONE
.01a454		6b		rtl		                RTL
.01a455						IFDD_SENS_INTERRUPT_STATUS
.01a455		08		php		                PHP
.01a456		0b		phd		                PHD
.01a457		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a459		48		pha		                PHA
.01a45a		da		phx		                PHX; stack ofset of 7 need to be addes to get the parametters
.01a45b		e2 20		sep #$20	                SEP #$20        ; set A short
.01a45d		a9 08		lda #$08	                LDA #$08
.01a45f		48		pha		                PHA             ; begin setdbr macro
.01a460		08		php		                PHP
.01a461		e2 20		sep #$20	                SEP #$20        ; set A short
.01a463		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a465		48		pha		                PHA
.01a466		ab		plb		                PLB
.01a467		28		plp		                PLP
.01a468		68		pla		                PLA             ; end setdbr macro
.01a469		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a46c		48		pha		                PHA             ; begin setdbr macro
.01a46d		08		php		                PHP
.01a46e		e2 20		sep #$20	                SEP #$20        ; set A short
.01a470		a9 01		lda #$01		LDA #`Text_SENS_INTERRUPT_STATUS
.01a472		48		pha		                PHA
.01a473		ab		plb		                PLB
.01a474		28		plp		                PLP
.01a475		68		pla		                PLA             ; end setdbr macro
.01a476		a2 27 ab	ldx #$ab27	                LDX #<>Text_SENS_INTERRUPT_STATUS
.01a479		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a47d		a9 01		lda #$01	                LDA #1                    ; number of command Bytes
.01a47f		22 ff a5 01	jsl $01a5ff	                JSL IFDD_SEND_CMD
.01a483		c9 00		cmp #$00	                CMP #0
.01a485		30 10		bmi $01a497	                BMI IFDD_SENS_INTERRUPT_STATUS_ERROR_READ_CMD
.01a487		e2 20		sep #$20	                SEP #$20        ; set A short
.01a489		a9 02		lda #$02	                LDA #2                    ; number of Bytes to read
.01a48b		22 01 a7 01	jsl $01a701	                JSL IFDD_READ_CMD_RESULT
.01a48f		c9 00		cmp #$00	                CMP #0
.01a491		30 04		bmi $01a497	                BMI IFDD_SENS_INTERRUPT_STATUS_ERROR_READ_CMD
.01a493		a9 01		lda #$01	                LDA #1
.01a495		80 13		bra $01a4aa	                BRA IFDD_SENS_INTERRUPT_STATUS_DONE
.01a497						IFDD_SENS_INTERRUPT_STATUS_ERROR_READ_CMD
.01a497		48		pha		                PHA             ; begin setdbr macro
.01a498		08		php		                PHP
.01a499		e2 20		sep #$20	                SEP #$20        ; set A short
.01a49b		a9 01		lda #$01		LDA #`Text_ERROR
.01a49d		48		pha		                PHA
.01a49e		ab		plb		                PLB
.01a49f		28		plp		                PLP
.01a4a0		68		pla		                PLA             ; end setdbr macro
.01a4a1		a2 67 ac	ldx #$ac67	                LDX #<>Text_ERROR
.01a4a4		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a4a8		a9 ff		lda #$ff	                LDA #-1
.01a4aa						IFDD_SENS_INTERRUPT_STATUS_DONE
.01a4aa		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a4ac		fa		plx		                PLX
.01a4ad		68		pla		                PLA
.01a4ae		2b		pld		                PLD
.01a4af		28		plp		                PLP
.01a4b0		6b		rtl		                RTL
.01a4b1		08		php		IFDD_SPECIFY    PHP
.01a4b2		0b		phd		                PHD
.01a4b3		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a4b5		da		phx		                PHX
.01a4b6		48		pha		                PHA ; stack ofset of 7 need to be addes to get the parametters
.01a4b7		48		pha		                PHA             ; begin setdbr macro
.01a4b8		08		php		                PHP
.01a4b9		e2 20		sep #$20	                SEP #$20        ; set A short
.01a4bb		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a4bd		48		pha		                PHA
.01a4be		ab		plb		                PLB
.01a4bf		28		plp		                PLP
.01a4c0		68		pla		                PLA             ; end setdbr macro
.01a4c1		e2 20		sep #$20	                SEP #$20        ; set A short
.01a4c3		a9 03		lda #$03	                LDA #3                    ; "SPECIFY" command value
.01a4c5		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a4c8		a3 0b		lda $0b,s	                LDA #4+7, S                 ; Get SRT (Step Rate Time)
.01a4ca		0a		asl a		                ASL
.01a4cb		0a		asl a		                ASL
.01a4cc		0a		asl a		                ASL
.01a4cd		0a		asl a		                ASL
.01a4ce		03 0c		ora $0c,s	                ORA #5+7, S                 ; Get HUT (Head Unload Time)
.01a4d0		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a4d3		a3 0d		lda $0d,s	                LDA #6+7, S                 ; Get HLT (Head Load Time)
.01a4d5		0a		asl a		                ASL
.01a4d6		03 0e		ora $0e,s	                ORA #7+7, S                 ; Get ND (non-DMA)
.01a4d8		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a4db		48		pha		                PHA             ; begin setdbr macro
.01a4dc		08		php		                PHP
.01a4dd		e2 20		sep #$20	                SEP #$20        ; set A short
.01a4df		a9 01		lda #$01		LDA #`Text_SPECIFY
.01a4e1		48		pha		                PHA
.01a4e2		ab		plb		                PLB
.01a4e3		28		plp		                PLP
.01a4e4		68		pla		                PLA             ; end setdbr macro
.01a4e5		a2 bd ab	ldx #$abbd	                LDX #<>Text_SPECIFY
.01a4e8		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a4ec		a9 03		lda #$03	                LDA #3                    ; number of command Bytes
.01a4ee		22 ff a5 01	jsl $01a5ff	                JSL IFDD_SEND_CMD
.01a4f2		c9 00		cmp #$00	                CMP #0
.01a4f4		30 04		bmi $01a4fa	                BMI IFDD_SPECIFY_ERROR_SEND_CMD
.01a4f6		a9 01		lda #$01	                LDA #1
.01a4f8		80 02		bra $01a4fc	                BRA IFDD_SPECIFY_DONE
.01a4fa						IFDD_SPECIFY_ERROR_SEND_CMD
.01a4fa		a9 ff		lda #$ff	                LDA #-1
.01a4fc						IFDD_SPECIFY_DONE
.01a4fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a4fe		68		pla		                PLA
.01a4ff		fa		plx		                PLX
.01a500		2b		pld		                PLD
.01a501		28		plp		                PLP
.01a502		6b		rtl		                RTL
.01a503		08		php		IFDD_SEEK       PHP
.01a504		0b		phd		                PHD
.01a505		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a507		da		phx		                PHX
.01a508		48		pha		                PHA
.01a509		e2 20		sep #$20	                SEP #$20        ; set A short
.01a50b		29 07		and #$07	                AND #7                    ; Get the 3 first bit side (2) and driver (1-0)
.01a50d		48		pha		                PHA             ; begin setdbr macro
.01a50e		08		php		                PHP
.01a50f		e2 20		sep #$20	                SEP #$20        ; set A short
.01a511		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a513		48		pha		                PHA
.01a514		ab		plb		                PLB
.01a515		28		plp		                PLP
.01a516		68		pla		                PLA             ; end setdbr macro
.01a517		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a51a		a9 0f		lda #$0f	                LDA #$F
.01a51c		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a51f		8a		txa		                LDA X                     ; Get the cylinder index
.01a520		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a523		48		pha		                PHA             ; begin setdbr macro
.01a524		08		php		                PHP
.01a525		e2 20		sep #$20	                SEP #$20        ; set A short
.01a527		a9 01		lda #$01		LDA #`Text_SEEK
.01a529		48		pha		                PHA
.01a52a		ab		plb		                PLB
.01a52b		28		plp		                PLP
.01a52c		68		pla		                PLA             ; end setdbr macro
.01a52d		a2 8b ab	ldx #$ab8b	                LDX #<>Text_SEEK
.01a530		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a534		a9 03		lda #$03	                LDA #3                    ; number of command Bytes
.01a536		22 ff a5 01	jsl $01a5ff	                JSL IFDD_SEND_CMD
.01a53a		c9 00		cmp #$00	                CMP #0
.01a53c		30 04		bmi $01a542	                BMI IFDD_SEEK_ERROR_SEND_CMD
.01a53e		a9 01		lda #$01	                LDA #1
.01a540		80 02		bra $01a544	                BRA IFDD_SEEK_DONE
.01a542						IFDD_SEEK_ERROR_SEND_CMD
.01a542		a9 ff		lda #$ff	                LDA #-1
.01a544						IFDD_SEEK_DONE
.01a544		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a546		68		pla		                PLA
.01a547		fa		plx		                PLX
.01a548		2b		pld		                PLD
.01a549		28		plp		                PLP
.01a54a		6b		rtl		                RTL
.01a54b		00		brk #		IFDD_SEEKRELATIF BRK
.01a54c						IFDD_READ_ID
.01a54c		08		php		                PHP
.01a54d		0b		phd		                PHD
.01a54e		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a550		48		pha		                PHA
.01a551		da		phx		                PHX
.01a552		e2 20		sep #$20	                SEP #$20        ; set A short
.01a554		29 07		and #$07	                AND #7                    ; Get the 3 first bit HDS (2) and driver (1-0)
.01a556		48		pha		                PHA             ; begin setdbr macro
.01a557		08		php		                PHP
.01a558		e2 20		sep #$20	                SEP #$20        ; set A short
.01a55a		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a55c		48		pha		                PHA
.01a55d		ab		plb		                PLB
.01a55e		28		plp		                PLP
.01a55f		68		pla		                PLA             ; end setdbr macro
.01a560		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a563		8a		txa		                LDA X                     ; Get the cylinder index
.01a564		29 01		and #$01	                AND #1
.01a566		0a		asl a		                ASL
.01a567		0a		asl a		                ASL
.01a568		0a		asl a		                ASL
.01a569		0a		asl a		                ASL
.01a56a		0a		asl a		                ASL
.01a56b		0a		asl a		                ASL
.01a56c		48		pha		                PHA
.01a56d		a9 0a		lda #$0a	                LDA #$0A
.01a56f		03 01		ora $01,s	                ORA #1, S
.01a571		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a574		68		pla		                PLA
.01a575		ad 00 a0	lda $01a000	                LDA FLOPPY_CMD_BUFFER
.01a578		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a57c		ad 01 a0	lda $01a001	                LDA FLOPPY_CMD_BUFFER+1
.01a57f		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a583		48		pha		                PHA             ; begin setdbr macro
.01a584		08		php		                PHP
.01a585		e2 20		sep #$20	                SEP #$20        ; set A short
.01a587		a9 01		lda #$01		LDA #`Text_READ_ID
.01a589		48		pha		                PHA
.01a58a		ab		plb		                PLB
.01a58b		28		plp		                PLP
.01a58c		68		pla		                PLA             ; end setdbr macro
.01a58d		a2 c3 aa	ldx #$aac3	                LDX #<>Text_READ_ID
.01a590		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a594		a9 02		lda #$02	                LDA #2                    ; number of command Bytes
.01a596		22 ff a5 01	jsl $01a5ff	                JSL IFDD_SEND_CMD
.01a59a		c9 00		cmp #$00	                CMP #0
.01a59c		30 10		bmi $01a5ae	                BMI IFDD_READ_ID_ERROR_READ_CMD
.01a59e		e2 20		sep #$20	                SEP #$20        ; set A short
.01a5a0		a9 07		lda #$07	                LDA #7                    ; number of Bytes to read
.01a5a2		22 01 a7 01	jsl $01a701	                JSL IFDD_READ_CMD_RESULT
.01a5a6		c9 00		cmp #$00	                CMP #0
.01a5a8		30 04		bmi $01a5ae	                BMI IFDD_READ_ID_ERROR_READ_CMD
.01a5aa		a9 01		lda #$01	                LDA #1
.01a5ac		80 13		bra $01a5c1	                BRA IFDD_READ_ID_DONE
.01a5ae						IFDD_READ_ID_ERROR_READ_CMD
.01a5ae		48		pha		                PHA             ; begin setdbr macro
.01a5af		08		php		                PHP
.01a5b0		e2 20		sep #$20	                SEP #$20        ; set A short
.01a5b2		a9 01		lda #$01		LDA #`Text_ERROR
.01a5b4		48		pha		                PHA
.01a5b5		ab		plb		                PLB
.01a5b6		28		plp		                PLP
.01a5b7		68		pla		                PLA             ; end setdbr macro
.01a5b8		a2 67 ac	ldx #$ac67	                LDX #<>Text_ERROR
.01a5bb		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a5bf		a9 ff		lda #$ff	                LDA #-1
.01a5c1						IFDD_READ_ID_DONE
.01a5c1		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a5c3		fa		plx		                PLX
.01a5c4		68		pla		                PLA
.01a5c5		2b		pld		                PLD
.01a5c6		28		plp		                PLP
.01a5c7		6b		rtl		                RTL
.01a5c8						IFDD_GET_DRIVE_STATUS
.01a5c8		e2 20		sep #$20	                SEP #$20        ; set A short
.01a5ca		29 07		and #$07	                AND #7                    ; Get the 3 first bit HDS (2) and driver (1-0)
.01a5cc		48		pha		                PHA             ; begin setdbr macro
.01a5cd		08		php		                PHP
.01a5ce		e2 20		sep #$20	                SEP #$20        ; set A short
.01a5d0		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a5d2		48		pha		                PHA
.01a5d3		ab		plb		                PLB
.01a5d4		28		plp		                PLP
.01a5d5		68		pla		                PLA             ; end setdbr macro
.01a5d6		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a5d9		a9 04		lda #$04	                LDA #$4
.01a5db		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a5de		8a		txa		                LDA X                     ; Get the cylinder index
.01a5df		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a5e2		a9 02		lda #$02	                LDA #2                    ; number of command Bytes
.01a5e4		22 ff a5 01	jsl $01a5ff	                JSL IFDD_SEND_CMD
.01a5e8		c9 00		cmp #$00	                CMP #0
.01a5ea		30 10		bmi $01a5fc	                BMI IFDD_DRIVE_STATUS_ERROR_READ_CMD
.01a5ec		e2 20		sep #$20	                SEP #$20        ; set A short
.01a5ee		a9 01		lda #$01	                LDA #1                    ; number of Bytes to read
.01a5f0		22 01 a7 01	jsl $01a701	                JSL IFDD_READ_CMD_RESULT
.01a5f4		c9 00		cmp #$00	                CMP #0
.01a5f6		30 04		bmi $01a5fc	                BMI IFDD_DRIVE_STATUS_ERROR_READ_CMD
.01a5f8		a9 01		lda #$01	                LDA #1
.01a5fa		80 02		bra $01a5fe	                BRA IFDD_DRIVE_STATUS_DONE
.01a5fc						IFDD_DRIVE_STATUS_ERROR_READ_CMD
.01a5fc		a9 ff		lda #$ff	                LDA #-1
.01a5fe						IFDD_DRIVE_STATUS_DONE
.01a5fe		6b		rtl		                RTL
.01a5ff		48		pha		IFDD_SEND_CMD   PHA                       ; save the number of byt to be sent to the FDC
.01a600		48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.01a601		48		pha		                PHA             ; begin setdbr macro
.01a602		08		php		                PHP
.01a603		e2 20		sep #$20	                SEP #$20        ; set A short
.01a605		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a607		48		pha		                PHA
.01a608		ab		plb		                PLB
.01a609		28		plp		                PLP
.01a60a		68		pla		                PLA             ; end setdbr macro
.01a60b						IFDD_SEND_CMD_READ_MAIN_STATUS_REG
.01a60b		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a60e		83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.01a610		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a612		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a614		f0 05		beq $01a61b	                BEQ IFDD_SEND_CMD_TRANSFERT_CAN_BE_DONE ;
.01a616		ea		nop		                NOP
.01a617		ea		nop		                NOP
.01a618		ea		nop		                NOP
.01a619		80 f0		bra $01a60b	                BRA IFDD_SEND_CMD_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a61b						IFDD_SEND_CMD_TRANSFERT_CAN_BE_DONE
.01a61b		a3 01		lda $01,s	                LDA #1, S                 ; get the Main Status avlue
.01a61d		29 40		and #$40	                AND #FDD_DIO                  ; get DIO bit
.01a61f		c9 40		cmp #$40	                CMP #$40                  ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.01a621		d0 05		bne $01a628	                BNE IFDD_SEND_CMD_READDY_TO_SEND_DATA;
.01a623		ad f5 13	lda $af13f5	                LDA FDD_FIFO                      ; remove the Main Status value saved
.01a626		80 e3		bra $01a60b	                BRA IFDD_SEND_CMD_READ_MAIN_STATUS_REG  ; retest if we can send data now#
.01a628						IFDD_SEND_CMD_READDY_TO_SEND_DATA
.01a628		68		pla		                PLA                       ; remove the Main Status value saved
.01a629		48		pha		                PHA             ; begin setdbr macro
.01a62a		08		php		                PHP
.01a62b		e2 20		sep #$20	                SEP #$20        ; set A short
.01a62d		a9 01		lda #$01		LDA #`Text_SEND_CMD
.01a62f		48		pha		                PHA
.01a630		ab		plb		                PLB
.01a631		28		plp		                PLP
.01a632		68		pla		                PLA             ; end setdbr macro
.01a633		a2 ee ab	ldx #$abee	                LDX #<>Text_SEND_CMD
.01a636		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a63a		a2 7b ac	ldx #$ac7b	                LDX #<>Text_CMD_Parametter_Number
.01a63d		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a641		a3 01		lda $01,s	                LDA #1, S                 ; Get the number of parametter
.01a643		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a647		a2 78 ac	ldx #$ac78	                LDX #<>Text_EOL
.01a64a		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a64e		48		pha		                PHA             ; begin setdbr macro
.01a64f		08		php		                PHP
.01a650		e2 20		sep #$20	                SEP #$20        ; set A short
.01a652		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a654		48		pha		                PHA
.01a655		ab		plb		                PLB
.01a656		28		plp		                PLP
.01a657		68		pla		                PLA             ; end setdbr macro
.01a658		a2 00 00	ldx #$0000	                LDX #0
.01a65b		8a		txa		SEND_NEXT_DATA  LDA X
.01a65c		c3 01		cmp $01,s	                CMP #1, S                 ; Test if we sent all the data ot not
.01a65e		f0 53		beq $01a6b3	                BEQ ALL_DATA_SENT_1
.01a660		bd 00 a0	lda $01a000,x	                LDA FLOPPY_CMD_BUFFER,X
.01a663		8f f5 13 af	sta $af13f5	                STA FDD_FIFO              ; Write the data in the FDC's FIFO
.01a667		da		phx		                PHX
.01a668		48		pha		                PHA             ; begin setdbr macro
.01a669		08		php		                PHP
.01a66a		e2 20		sep #$20	                SEP #$20        ; set A short
.01a66c		a9 01		lda #$01		LDA #`Text_CMD_Parametter
.01a66e		48		pha		                PHA
.01a66f		ab		plb		                PLB
.01a670		28		plp		                PLP
.01a671		68		pla		                PLA             ; end setdbr macro
.01a672		a2 8c ac	ldx #$ac8c	                LDX #<>Text_CMD_Parametter
.01a675		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a679		fa		plx		                PLX
.01a67a		da		phx		                PHX
.01a67b		8a		txa		                TXA
.01a67c		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a680		48		pha		                PHA             ; begin setdbr macro
.01a681		08		php		                PHP
.01a682		e2 20		sep #$20	                SEP #$20        ; set A short
.01a684		a9 01		lda #$01		LDA #`Text_duble_dot
.01a686		48		pha		                PHA
.01a687		ab		plb		                PLB
.01a688		28		plp		                PLP
.01a689		68		pla		                PLA             ; end setdbr macro
.01a68a		a2 a8 ac	ldx #$aca8	                LDX #<>Text_duble_dot
.01a68d		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a691		fa		plx		                PLX
.01a692		da		phx		                PHX
.01a693		bd 00 a0	lda $01a000,x	                LDA FLOPPY_CMD_BUFFER,X
.01a696		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a69a		a2 78 ac	ldx #$ac78	                LDX #<>Text_EOL
.01a69d		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a6a1		22 ff a8 01	jsl $01a8ff	                JSL IFDD_PRINT_FDD_MS_REG
.01a6a5		fa		plx		                PLX
.01a6a6		e8		inx		                INX
.01a6a7		48		pha		                PHA             ; begin setdbr macro
.01a6a8		08		php		                PHP
.01a6a9		e2 20		sep #$20	                SEP #$20        ; set A short
.01a6ab		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a6ad		48		pha		                PHA
.01a6ae		ab		plb		                PLB
.01a6af		28		plp		                PLP
.01a6b0		68		pla		                PLA             ; end setdbr macro
.01a6b1						READ_MAIN_STATUS_REG_FOR_TRANSFERT
.01a6b1		80 02		bra $01a6b5	                BRA ALL_DATA_SEND_JUMP_BYPASS
.01a6b3		80 48		bra $01a6fd	ALL_DATA_SENT_1 BRA ALL_DATA_SENT
.01a6b5						ALL_DATA_SEND_JUMP_BYPASS
.01a6b5		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a6b8		48		pha		                PHA
.01a6b9		29 0f		and #$0f	                AND #$F
.01a6bb		18		clc		                CLC
.01a6bc		69 30		adc #$30	                ADC #$30
.01a6be		48		pha		                PHA             ; begin setdbr macro
.01a6bf		08		php		                PHP
.01a6c0		e2 20		sep #$20	                SEP #$20        ; set A short
.01a6c2		a9 af		lda #$af		LDA #`$AFA207
.01a6c4		48		pha		                PHA
.01a6c5		ab		plb		                PLB
.01a6c6		28		plp		                PLP
.01a6c7		68		pla		                PLA             ; end setdbr macro
.01a6c8		8d 07 a2	sta $afa207	                STA $AFA207
.01a6cb		a3 01		lda $01,s	                LDA #1, S
.01a6cd		4a		lsr a		                LSR A
.01a6ce		4a		lsr a		                LSR A
.01a6cf		4a		lsr a		                LSR A
.01a6d0		4a		lsr a		                LSR A
.01a6d1		29 0f		and #$0f	                AND #$F
.01a6d3		18		clc		                CLC
.01a6d4		69 30		adc #$30	                ADC #$30
.01a6d6		48		pha		                PHA             ; begin setdbr macro
.01a6d7		08		php		                PHP
.01a6d8		e2 20		sep #$20	                SEP #$20        ; set A short
.01a6da		a9 af		lda #$af		LDA #`$AFA206
.01a6dc		48		pha		                PHA
.01a6dd		ab		plb		                PLB
.01a6de		28		plp		                PLP
.01a6df		68		pla		                PLA             ; end setdbr macro
.01a6e0		8d 06 a2	sta $afa206	                STA $AFA206
.01a6e3		68		pla		                PLA
.01a6e4		48		pha		                PHA             ; begin setdbr macro
.01a6e5		08		php		                PHP
.01a6e6		e2 20		sep #$20	                SEP #$20        ; set A short
.01a6e8		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a6ea		48		pha		                PHA
.01a6eb		ab		plb		                PLB
.01a6ec		28		plp		                PLP
.01a6ed		68		pla		                PLA             ; end setdbr macro
.01a6ee		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a6f1		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a6f3		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a6f5		82 63 ff	brl $01a65b	                BRL SEND_NEXT_DATA
.01a6f8		ea		nop		                NOP
.01a6f9		ea		nop		                NOP
.01a6fa		ea		nop		                NOP
.01a6fb		80 b4		bra $01a6b1	                BRA READ_MAIN_STATUS_REG_FOR_TRANSFERT  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a6fd						ALL_DATA_SENT
.01a6fd		68		pla		                PLA                       ; removing the number of commands byte to send
.01a6fe		a9 00		lda #$00	                LDA #0
.01a700		6b		rtl		                RTL
.01a701						IFDD_READ_CMD_RESULT
.01a701		48		pha		                PHA             ; begin setdbr macro
.01a702		08		php		                PHP
.01a703		e2 20		sep #$20	                SEP #$20        ; set A short
.01a705		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a707		48		pha		                PHA
.01a708		ab		plb		                PLB
.01a709		28		plp		                PLP
.01a70a		68		pla		                PLA             ; end setdbr macro
.01a70b		48		pha		                PHA                       ; save the number of byt to be sent to the FDC
.01a70c		48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.01a70d						IFDD_READ_CMD_RESULT_READ_MAIN_STATUS_REG
.01a70d		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a710		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a714		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a717		83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.01a719		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a71b		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a71d		f0 0b		beq $01a72a	                BEQ IFDD_READ_CMD_TRANSFERT_CAN_BE_DONE ;
.01a71f		ea		nop		                NOP
.01a720		a2 d0 07	ldx #$07d0	                LDX #2000
.01a723		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.01a727		ea		nop		                NOP
.01a728		80 e3		bra $01a70d	                BRA IFDD_READ_CMD_RESULT_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a72a						IFDD_READ_CMD_TRANSFERT_CAN_BE_DONE
.01a72a		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a72d		29 40		and #$40	                AND #FDD_DIO              ; get DIO bit
.01a72f		c9 40		cmp #$40	                CMP #$40                  ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.01a731		f0 04		beq $01a737	                BEQ READDY_TO_READ_DATA   ; We want to read the result of the command
.01a733		a9 01		lda #$01	                LDA #1                    ; error, the FDC after reciving the commans is suppos to sent you data
.01a735		80 d6		bra $01a70d	                BRA IFDD_READ_CMD_RESULT_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a737						READDY_TO_READ_DATA
.01a737		68		pla		                PLA
.01a738		48		pha		                PHA             ; begin setdbr macro
.01a739		08		php		                PHP
.01a73a		e2 20		sep #$20	                SEP #$20        ; set A short
.01a73c		a9 01		lda #$01		LDA #`Text_EOL
.01a73e		48		pha		                PHA
.01a73f		ab		plb		                PLB
.01a740		28		plp		                PLP
.01a741		68		pla		                PLA             ; end setdbr macro
.01a742		a2 78 ac	ldx #$ac78	                LDX #<>Text_EOL
.01a745		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a749		a2 15 ac	ldx #$ac15	                LDX #<>Text_Start_Rx_CMD
.01a74c		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a750		a2 93 ac	ldx #$ac93	                LDX #<>Text_CMD_Result_Number
.01a753		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a757		a3 01		lda $01,s	                LDA #1, S                 ; Get the number of parametter
.01a759		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a75d		a2 78 ac	ldx #$ac78	                LDX #<>Text_EOL
.01a760		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a764		a2 00 00	ldx #$0000	                LDX #0
.01a767		8a		txa		READ_NEXT_DATA  LDA X
.01a768		c3 01		cmp $01,s	                CMP #1, S                 ; Test if we read all the data ot not
.01a76a		f0 72		beq $01a7de	                BEQ ALL_DATA_READ
.01a76c		48		pha		                PHA             ; begin setdbr macro
.01a76d		08		php		                PHP
.01a76e		e2 20		sep #$20	                SEP #$20        ; set A short
.01a770		a9 af		lda #$af		LDA #`FDD_FIFO
.01a772		48		pha		                PHA
.01a773		ab		plb		                PLB
.01a774		28		plp		                PLP
.01a775		68		pla		                PLA             ; end setdbr macro
.01a776		ad f5 13	lda $af13f5	                LDA FDD_FIFO              ; Read the data from the FDC's FIFO
.01a779		48		pha		                PHA             ; begin setdbr macro
.01a77a		08		php		                PHP
.01a77b		e2 20		sep #$20	                SEP #$20        ; set A short
.01a77d		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a77f		48		pha		                PHA
.01a780		ab		plb		                PLB
.01a781		28		plp		                PLP
.01a782		68		pla		                PLA             ; end setdbr macro
.01a783		9d 00 a0	sta $01a000,x	                STA FLOPPY_CMD_BUFFER,X   ; Save it in the Buffer
.01a786		da		phx		                PHX
.01a787		48		pha		                PHA             ; begin setdbr macro
.01a788		08		php		                PHP
.01a789		e2 20		sep #$20	                SEP #$20        ; set A short
.01a78b		a9 01		lda #$01		LDA #`Text_CMD_Parametter
.01a78d		48		pha		                PHA
.01a78e		ab		plb		                PLB
.01a78f		28		plp		                PLP
.01a790		68		pla		                PLA             ; end setdbr macro
.01a791		a2 a0 ac	ldx #$aca0	                LDX #<>Text_CMD_Result
.01a794		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a798		fa		plx		                PLX
.01a799		da		phx		                PHX
.01a79a		8a		txa		                TXA
.01a79b		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a79f		48		pha		                PHA             ; begin setdbr macro
.01a7a0		08		php		                PHP
.01a7a1		e2 20		sep #$20	                SEP #$20        ; set A short
.01a7a3		a9 01		lda #$01		LDA #`Text_duble_dot
.01a7a5		48		pha		                PHA
.01a7a6		ab		plb		                PLB
.01a7a7		28		plp		                PLP
.01a7a8		68		pla		                PLA             ; end setdbr macro
.01a7a9		a2 a8 ac	ldx #$aca8	                LDX #<>Text_duble_dot
.01a7ac		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a7b0		fa		plx		                PLX
.01a7b1		da		phx		                PHX
.01a7b2		bd 00 a0	lda $01a000,x	                LDA FLOPPY_CMD_BUFFER,X
.01a7b5		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a7b9		a2 78 ac	ldx #$ac78	                LDX #<>Text_EOL
.01a7bc		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a7c0		22 ff a8 01	jsl $01a8ff	                JSL IFDD_PRINT_FDD_MS_REG
.01a7c4		fa		plx		                PLX
.01a7c5		e8		inx		                INX
.01a7c6		48		pha		                PHA             ; begin setdbr macro
.01a7c7		08		php		                PHP
.01a7c8		e2 20		sep #$20	                SEP #$20        ; set A short
.01a7ca		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a7cc		48		pha		                PHA
.01a7cd		ab		plb		                PLB
.01a7ce		28		plp		                PLP
.01a7cf		68		pla		                PLA             ; end setdbr macro
.01a7d0						READ_MAIN_STATUS_REG_FOR_TRANSFERT_2
.01a7d0		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a7d3		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a7d5		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a7d7		f0 8e		beq $01a767	                BEQ READ_NEXT_DATA
.01a7d9		ea		nop		                NOP
.01a7da		ea		nop		                NOP
.01a7db		ea		nop		                NOP
.01a7dc		80 f2		bra $01a7d0	                BRA READ_MAIN_STATUS_REG_FOR_TRANSFERT_2  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a7de						ALL_DATA_READ
.01a7de		a9 00		lda #$00	                LDA #0
.01a7e0		80 11		bra $01a7f3	                BRA IFDD_READ_CMD_RESULT_RETURN
.01a7e2						IFDD_READ_CMD_RESULT_RETURN_ERROR
.01a7e2		48		pha		                PHA             ; begin setdbr macro
.01a7e3		08		php		                PHP
.01a7e4		e2 20		sep #$20	                SEP #$20        ; set A short
.01a7e6		a9 01		lda #$01		LDA #`Text_ERROR
.01a7e8		48		pha		                PHA
.01a7e9		ab		plb		                PLB
.01a7ea		28		plp		                PLP
.01a7eb		68		pla		                PLA             ; end setdbr macro
.01a7ec		a2 67 ac	ldx #$ac67	                LDX #<>Text_ERROR
.01a7ef		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a7f3						IFDD_READ_CMD_RESULT_RETURN
.01a7f3		68		pla		                PLA
.01a7f4		48		pha		                PHA             ; begin setdbr macro
.01a7f5		08		php		                PHP
.01a7f6		e2 20		sep #$20	                SEP #$20        ; set A short
.01a7f8		a9 01		lda #$01		LDA #`Text_Stop_Rx_CMD
.01a7fa		48		pha		                PHA
.01a7fb		ab		plb		                PLB
.01a7fc		28		plp		                PLP
.01a7fd		68		pla		                PLA             ; end setdbr macro
.01a7fe		a2 2b ac	ldx #$ac2b	                LDX #<>Text_Stop_Rx_CMD
.01a801		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a805		a2 00 00	ldx #$0000	                LDX #0
.01a808		6b		rtl		                RTL
.01a809						IFDD_READ_DATA_FIFO
.01a809		c2 10		rep #$10	                REP #$10        ; set X long
.01a80b		48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.01a80c		48		pha		                PHA             ; begin setdbr macro
.01a80d		08		php		                PHP
.01a80e		e2 20		sep #$20	                SEP #$20        ; set A short
.01a810		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a812		48		pha		                PHA
.01a813		ab		plb		                PLB
.01a814		28		plp		                PLP
.01a815		68		pla		                PLA             ; end setdbr macro
.01a816						IFDD_READ_DATA_FIFO_READ_MAIN_STATUS_REG
.01a816		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a819		83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.01a81b		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a81d		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a81f		f0 05		beq $01a826	                BEQ IFDD_READ_DATA_FIFO_TRANSFERT_CAN_BE_DONE ;
.01a821		ea		nop		                NOP
.01a822		ea		nop		                NOP
.01a823		ea		nop		                NOP
.01a824		80 f0		bra $01a816	                BRA IFDD_READ_DATA_FIFO_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a826						IFDD_READ_DATA_FIFO_TRANSFERT_CAN_BE_DONE
.01a826		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a829		29 40		and #$40	                AND #FDD_DIO              ; get DIO bit
.01a82b		c9 40		cmp #$40	                CMP #$40                  ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.01a82d		f0 06		beq $01a835	                BEQ IFDD_READ_DATA_FIFO_READDY_TO_READ_DATA   ; We want to read the result of the command
.01a82f		68		pla		                PLA
.01a830		a9 01		lda #$01	                LDA #1                   ; error, the FDC after reciving the commans is suppos to sent you data
.01a832		82 b6 00	brl $01a8eb	                BRL IFDD_READ_DATA_FIFO_RETURN_ERROR
.01a835						IFDD_READ_DATA_FIFO_READDY_TO_READ_DATA
.01a835		68		pla		                PLA
.01a836		a2 00 00	ldx #$0000	                LDX #0
.01a839		a0 00 06	ldy #$0600	                LDY #$600
.01a83c						IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a83c		48		pha		                PHA             ; begin setdbr macro
.01a83d		08		php		                PHP
.01a83e		e2 20		sep #$20	                SEP #$20        ; set A short
.01a840		a9 af		lda #$af		LDA #`FDD_FIFO
.01a842		48		pha		                PHA
.01a843		ab		plb		                PLB
.01a844		28		plp		                PLP
.01a845		68		pla		                PLA             ; end setdbr macro
.01a846		ad f5 13	lda $af13f5	                LDA FDD_FIFO              ; Read the data from the FDC's FIFO
.01a849		48		pha		                PHA             ; begin setdbr macro
.01a84a		08		php		                PHP
.01a84b		e2 20		sep #$20	                SEP #$20        ; set A short
.01a84d		a9 19		lda #$19		LDA #`$19A000
.01a84f		48		pha		                PHA
.01a850		ab		plb		                PLB
.01a851		28		plp		                PLP
.01a852		68		pla		                PLA             ; end setdbr macro
.01a853		9d 00 a0	sta $19a000,x	                STA $19A000 ,X            ; Save it in the Buffer
.01a856		48		pha		                PHA             ; begin setdbr macro
.01a857		08		php		                PHP
.01a858		e2 20		sep #$20	                SEP #$20        ; set A short
.01a85a		a9 af		lda #$af		LDA #`$AFA000
.01a85c		48		pha		                PHA
.01a85d		ab		plb		                PLB
.01a85e		28		plp		                PLP
.01a85f		68		pla		                PLA             ; end setdbr macro
.01a860		da		phx		                PHX
.01a861		48		pha		                PHA
.01a862		a3 01		lda $01,s	                LDA #1, S
.01a864		4a		lsr a		                LSR A                   ; Extracting the high part of the byte
.01a865		4a		lsr a		                LSR A
.01a866		4a		lsr a		                LSR A
.01a867		4a		lsr a		                LSR A
.01a868		c2 20		rep #$20	                REP #$20        ; set A long
.01a86a		29 0f 00	and #$000f	                AND #$F
.01a86d		aa		tax		                LDX A
.01a86e		e2 20		sep #$20	                SEP #$20        ; set A short
.01a870		48		pha		                PHA             ; begin setdbr macro
.01a871		08		php		                PHP
.01a872		e2 20		sep #$20	                SEP #$20        ; set A short
.01a874		a9 19		lda #$19		LDA #`hex_digits
.01a876		48		pha		                PHA
.01a877		ab		plb		                PLB
.01a878		28		plp		                PLP
.01a879		68		pla		                PLA             ; end setdbr macro
.01a87a		bd a3 18	lda $1918a3,x	                LDA hex_digits,X
.01a87d		bb		tyx		                TYX
.01a87e		9f 00 a0 af	sta $afa000,x	                STA $AFA000 ,X
.01a882		a3 01		lda $01,s	                LDA #1, S
.01a884		c2 20		rep #$20	                REP #$20        ; set A long
.01a886		29 0f 00	and #$000f	                AND #$F
.01a889		aa		tax		                LDX A
.01a88a		e2 20		sep #$20	                SEP #$20        ; set A short
.01a88c		bd a3 18	lda $1918a3,x	                LDA hex_digits,X
.01a88f		bb		tyx		                TYX
.01a890		9f 01 a0 af	sta $afa001,x	                STA $AFA000+1 ,X
.01a894		80 02		bra $01a898	                BRA BYPASS_IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a896		80 a4		bra $01a83c	IFDD_READ_DATA_FIFO_READ_NEXT_DATA_step1 BRA IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a898						BYPASS_IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a898		c2 20		rep #$20	                REP #$20        ; set A long
.01a89a		98		tya		                TYA
.01a89b		18		clc		                CLC
.01a89c		69 04 00	adc #$0004	                ADC #4
.01a89f		29 40 00	and #$0040	                AND #$40
.01a8a2		c9 40 00	cmp #$0040	                CMP #$40
.01a8a5		d0 0a		bne $01a8b1	                BNE NO_NEED_NEW_LINE
.01a8a7		98		tya		                TYA
.01a8a8		29 80 ff	and #$ff80	                AND #$FF80
.01a8ab		18		clc		                CLC
.01a8ac		69 80 00	adc #$0080	                ADC #$80
.01a8af		80 05		bra $01a8b6	                BRA NEW_LINE_ADDED
.01a8b1						NO_NEED_NEW_LINE
.01a8b1		98		tya		                TYA
.01a8b2		18		clc		                CLC
.01a8b3		69 04 00	adc #$0004	                ADC #4
.01a8b6		a8		tay		NEW_LINE_ADDED  TAY
.01a8b7		e2 20		sep #$20	                SEP #$20        ; set A short
.01a8b9		68		pla		                PLA
.01a8ba		fa		plx		                PLX
.01a8bb		e8		inx		                INC X
.01a8bc		e0 00 02	cpx #$0200	                CPX #512
.01a8bf		f0 18		beq $01a8d9	                BEQ ALL_DATA_READ_2
.01a8c1		48		pha		                PHA             ; begin setdbr macro
.01a8c2		08		php		                PHP
.01a8c3		e2 20		sep #$20	                SEP #$20        ; set A short
.01a8c5		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a8c7		48		pha		                PHA
.01a8c8		ab		plb		                PLB
.01a8c9		28		plp		                PLP
.01a8ca		68		pla		                PLA             ; end setdbr macro
.01a8cb						READ_MAIN_STATUS_REG_FOR_TRANSFERT_3
.01a8cb		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a8ce		29 80		and #$80	                AND #FDD_RQM              ; get RQM bit
.01a8d0		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a8d2		f0 c2		beq $01a896	                BEQ IFDD_READ_DATA_FIFO_READ_NEXT_DATA_step1
.01a8d4		ea		nop		                NOP
.01a8d5		ea		nop		                NOP
.01a8d6		ea		nop		                NOP
.01a8d7		80 f2		bra $01a8cb	                BRA READ_MAIN_STATUS_REG_FOR_TRANSFERT_3  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a8d9						ALL_DATA_READ_2
.01a8d9		a9 0a		lda #$0a	                LDA #$A
.01a8db		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a8df		a9 0d		lda #$0d	                LDA #$D
.01a8e1		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a8e5		22 ff a8 01	jsl $01a8ff	                JSL IFDD_PRINT_FDD_MS_REG
.01a8e9		a9 00		lda #$00	                LDA #0
.01a8eb						IFDD_READ_DATA_FIFO_RETURN_ERROR
.01a8eb		48		pha		                PHA
.01a8ec		48		pha		                PHA             ; begin setdbr macro
.01a8ed		08		php		                PHP
.01a8ee		e2 20		sep #$20	                SEP #$20        ; set A short
.01a8f0		a9 01		lda #$01		LDA #`Text_Stop_Rx_FIFO
.01a8f2		48		pha		                PHA
.01a8f3		ab		plb		                PLB
.01a8f4		28		plp		                PLP
.01a8f5		68		pla		                PLA             ; end setdbr macro
.01a8f6		a2 54 ac	ldx #$ac54	                LDX #<>Text_Stop_Rx_FIFO
.01a8f9		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a8fd		68		pla		                PLA
.01a8fe		6b		rtl		                RTL
.01a8ff						IFDD_PRINT_FDD_MS_REG
.01a8ff		08		php		                PHP
.01a900		0b		phd		                PHD
.01a901		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a903		da		phx		                PHX
.01a904		48		pha		                PHA
.01a905		48		pha		                PHA             ; begin setdbr macro
.01a906		08		php		                PHP
.01a907		e2 20		sep #$20	                SEP #$20        ; set A short
.01a909		a9 01		lda #$01		LDA #`Text_FDD_MAIN_STATUE
.01a90b		48		pha		                PHA
.01a90c		ab		plb		                PLB
.01a90d		28		plp		                PLP
.01a90e		68		pla		                PLA             ; end setdbr macro
.01a90f		a2 04 ad	ldx #$ad04	                LDX #<>Text_FDD_MAIN_STATUE
.01a912		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a916		e2 20		sep #$20	                SEP #$20        ; set A short
.01a918		48		pha		                PHA             ; begin setdbr macro
.01a919		08		php		                PHP
.01a91a		e2 20		sep #$20	                SEP #$20        ; set A short
.01a91c		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a91e		48		pha		                PHA
.01a91f		ab		plb		                PLB
.01a920		28		plp		                PLP
.01a921		68		pla		                PLA             ; end setdbr macro
.01a922		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a925		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a929		a9 0a		lda #$0a	                LDA #$A
.01a92b		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a92f		a9 0d		lda #$0d	                LDA #$D
.01a931		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a935		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a937		68		pla		                PLA
.01a938		fa		plx		                PLX
.01a939		2b		pld		                PLD
.01a93a		28		plp		                PLP
.01a93b		6b		rtl		                RTL
.01a93c						IFDD_PRINT_REG
.01a93c		e2 20		sep #$20	                SEP #$20        ; set A short
.01a93e		48		pha		                PHA             ; begin setdbr macro
.01a93f		08		php		                PHP
.01a940		e2 20		sep #$20	                SEP #$20        ; set A short
.01a942		a9 01		lda #$01		LDA #`Text_FDD_STATUS_A
.01a944		48		pha		                PHA
.01a945		ab		plb		                PLB
.01a946		28		plp		                PLP
.01a947		68		pla		                PLA             ; end setdbr macro
.01a948		a2 ac ac	ldx #$acac	                LDX #<>Text_FDD_STATUS_A
.01a94b		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a94f		48		pha		                PHA             ; begin setdbr macro
.01a950		08		php		                PHP
.01a951		e2 20		sep #$20	                SEP #$20        ; set A short
.01a953		a9 af		lda #$af		LDA #`FDD_STATUS_A
.01a955		48		pha		                PHA
.01a956		ab		plb		                PLB
.01a957		28		plp		                PLP
.01a958		68		pla		                PLA             ; end setdbr macro
.01a959		ad f0 13	lda $af13f0	                LDA FDD_STATUS_A
.01a95c		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01a960		a9 0a		lda #$0a	                LDA #$A
.01a962		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a966		a9 0d		lda #$0d	                LDA #$D
.01a968		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a96c		48		pha		                PHA             ; begin setdbr macro
.01a96d		08		php		                PHP
.01a96e		e2 20		sep #$20	                SEP #$20        ; set A short
.01a970		a9 01		lda #$01		LDA #`Text_FDD_STATUS_B
.01a972		48		pha		                PHA
.01a973		ab		plb		                PLB
.01a974		28		plp		                PLP
.01a975		68		pla		                PLA             ; end setdbr macro
.01a976		a2 c2 ac	ldx #$acc2	                LDX #<>Text_FDD_STATUS_B
.01a979		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a97d		48		pha		                PHA             ; begin setdbr macro
.01a97e		08		php		                PHP
.01a97f		e2 20		sep #$20	                SEP #$20        ; set A short
.01a981		a9 af		lda #$af		LDA #`FDD_STATUS_B
.01a983		48		pha		                PHA
.01a984		ab		plb		                PLB
.01a985		28		plp		                PLP
.01a986		68		pla		                PLA             ; end setdbr macro
.01a987		ad f1 13	lda $af13f1	                LDA FDD_STATUS_B
.01a98a		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01a98e		a9 0a		lda #$0a	                LDA #$A
.01a990		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a994		a9 0d		lda #$0d	                LDA #$D
.01a996		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a99a		48		pha		                PHA             ; begin setdbr macro
.01a99b		08		php		                PHP
.01a99c		e2 20		sep #$20	                SEP #$20        ; set A short
.01a99e		a9 01		lda #$01		LDA #`Text_FDD_DIGITAL_OUTPUT
.01a9a0		48		pha		                PHA
.01a9a1		ab		plb		                PLB
.01a9a2		28		plp		                PLP
.01a9a3		68		pla		                PLA             ; end setdbr macro
.01a9a4		a2 d8 ac	ldx #$acd8	                LDX #<>Text_FDD_DIGITAL_OUTPUT
.01a9a7		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a9ab		48		pha		                PHA             ; begin setdbr macro
.01a9ac		08		php		                PHP
.01a9ad		e2 20		sep #$20	                SEP #$20        ; set A short
.01a9af		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a9b1		48		pha		                PHA
.01a9b2		ab		plb		                PLB
.01a9b3		28		plp		                PLP
.01a9b4		68		pla		                PLA             ; end setdbr macro
.01a9b5		ad f2 13	lda $af13f2	                LDA FDD_DIGITAL_OUTPUT
.01a9b8		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01a9bc		a9 0a		lda #$0a	                LDA #$A
.01a9be		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a9c2		a9 0d		lda #$0d	                LDA #$D
.01a9c4		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a9c8		48		pha		                PHA             ; begin setdbr macro
.01a9c9		08		php		                PHP
.01a9ca		e2 20		sep #$20	                SEP #$20        ; set A short
.01a9cc		a9 01		lda #$01		LDA #`Text_FDD_TAPE_DRIVER
.01a9ce		48		pha		                PHA
.01a9cf		ab		plb		                PLB
.01a9d0		28		plp		                PLP
.01a9d1		68		pla		                PLA             ; end setdbr macro
.01a9d2		a2 ee ac	ldx #$acee	                LDX #<>Text_FDD_TAPE_DRIVER
.01a9d5		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a9d9		48		pha		                PHA             ; begin setdbr macro
.01a9da		08		php		                PHP
.01a9db		e2 20		sep #$20	                SEP #$20        ; set A short
.01a9dd		a9 af		lda #$af		LDA #`FDD_TAPE_DRIVER
.01a9df		48		pha		                PHA
.01a9e0		ab		plb		                PLB
.01a9e1		28		plp		                PLP
.01a9e2		68		pla		                PLA             ; end setdbr macro
.01a9e3		ad f3 13	lda $af13f3	                LDA FDD_TAPE_DRIVER
.01a9e6		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01a9ea		a9 0a		lda #$0a	                LDA #$A
.01a9ec		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a9f0		a9 0d		lda #$0d	                LDA #$D
.01a9f2		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a9f6		48		pha		                PHA             ; begin setdbr macro
.01a9f7		08		php		                PHP
.01a9f8		e2 20		sep #$20	                SEP #$20        ; set A short
.01a9fa		a9 01		lda #$01		LDA #`Text_FDD_MAIN_STATUE
.01a9fc		48		pha		                PHA
.01a9fd		ab		plb		                PLB
.01a9fe		28		plp		                PLP
.01a9ff		68		pla		                PLA             ; end setdbr macro
.01aa00		a2 04 ad	ldx #$ad04	                LDX #<>Text_FDD_MAIN_STATUE
.01aa03		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01aa07		48		pha		                PHA             ; begin setdbr macro
.01aa08		08		php		                PHP
.01aa09		e2 20		sep #$20	                SEP #$20        ; set A short
.01aa0b		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01aa0d		48		pha		                PHA
.01aa0e		ab		plb		                PLB
.01aa0f		28		plp		                PLP
.01aa10		68		pla		                PLA             ; end setdbr macro
.01aa11		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01aa14		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01aa18		a9 0a		lda #$0a	                LDA #$A
.01aa1a		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa1e		a9 0d		lda #$0d	                LDA #$D
.01aa20		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa24		48		pha		                PHA             ; begin setdbr macro
.01aa25		08		php		                PHP
.01aa26		e2 20		sep #$20	                SEP #$20        ; set A short
.01aa28		a9 01		lda #$01		LDA #`Text_FDD_DIGITAL_INPUT
.01aa2a		48		pha		                PHA
.01aa2b		ab		plb		                PLB
.01aa2c		28		plp		                PLP
.01aa2d		68		pla		                PLA             ; end setdbr macro
.01aa2e		a2 1a ad	ldx #$ad1a	                LDX #<>Text_FDD_DIGITAL_INPUT
.01aa31		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01aa35		48		pha		                PHA             ; begin setdbr macro
.01aa36		08		php		                PHP
.01aa37		e2 20		sep #$20	                SEP #$20        ; set A short
.01aa39		a9 af		lda #$af		LDA #`FDD_DIGITAL_INPUT
.01aa3b		48		pha		                PHA
.01aa3c		ab		plb		                PLB
.01aa3d		28		plp		                PLP
.01aa3e		68		pla		                PLA             ; end setdbr macro
.01aa3f		ad f7 13	lda $af13f7	                LDA FDD_DIGITAL_INPUT
.01aa42		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01aa46		a9 0a		lda #$0a	                LDA #$A
.01aa48		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa4c		a9 0d		lda #$0d	                LDA #$D
.01aa4e		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa52		a9 0a		lda #$0a	                LDA #$A
.01aa54		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa58		a9 0d		lda #$0d	                LDA #$D
.01aa5a		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa5e		6b		rtl		                RTL
>01aa5f		2d 2d 2d 2d 2d 2d 2d 2d		Text_INIT_AT              .text "----------------- FDD INIT_AT -----------------",$A,$D,0
>01aa67		2d 2d 2d 2d 2d 2d 2d 2d 2d 20 46 44 44 20 49 4e
>01aa77		49 54 5f 41 54 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01aa87		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01aa91		2d 2d 2d 2d 2d 2d 2d 2d		Text_RECALIBRATE          .text "--------------- FDD RECALIBRATE ---------------",$A,$D,0
>01aa99		2d 2d 2d 2d 2d 2d 2d 20 46 44 44 20 52 45 43 41
>01aaa9		4c 49 42 52 41 54 45 20 2d 2d 2d 2d 2d 2d 2d 2d
>01aab9		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01aac3		2d 2d 2d 2d 2d 2d 2d 2d		Text_READ_ID              .text "------------------- READ_ID -------------------",$A,$D,0
>01aacb		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 52 45 41 44
>01aadb		5f 49 44 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01aaeb		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01aaf5		2d 2d 2d 2d 2d 2d 2d 2d		Text_READ                 .text "--------------------- READ --------------------",$A,$D,0
>01aafd		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 52 45
>01ab0d		41 44 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01ab1d		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01ab27		2d 2d 2d 2d 2d 2d 2d 2d		Text_SENS_INTERRUPT_STATUS .text "------------ SENS_INTERRUPT_STATUS ------------",$A,$D,0
>01ab2f		2d 2d 2d 2d 20 53 45 4e 53 5f 49 4e 54 45 52 52
>01ab3f		55 50 54 5f 53 54 41 54 55 53 20 2d 2d 2d 2d 2d
>01ab4f		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01ab59		2d 2d 2d 2d 2d 2d 2d 2d		Text_FORMAT               .text "-------------------- FORMAT -------------------",$A,$D,0
>01ab61		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 46 4f 52
>01ab71		4d 41 54 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01ab81		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01ab8b		2d 2d 2d 2d 2d 2d 2d 2d		Text_SEEK                 .text "--------------------- SEEK --------------------",$A,$D,0
>01ab93		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 53 45
>01aba3		45 4b 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01abb3		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01abbd		2d 2d 2d 2d 2d 2d 2d 2d		Text_SPECIFY               .text "------------------- SPECIFY ------------------",$A,$D,0
>01abc5		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 53 50 45 43
>01abd5		49 46 59 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01abe5		2d 2d 2d 2d 2d 2d 0a 0d 00
>01abee		2d 20 53 45 4e 44 20 43		Text_SEND_CMD         .text "- SEND CMD Start -",$A,$D,0
>01abf6		4d 44 20 53 74 61 72 74 20 2d 0a 0d 00
>01ac03		2d 20 54 58 20 43 4d 44		Text_Stop_Tx_CMD          .text "- TX CMD Stop -",$A,$D,0
>01ac0b		20 53 74 6f 70 20 2d 0a 0d 00
>01ac15		2d 20 52 58 20 52 45 53		Text_Start_Rx_CMD         .text "- RX RESULT Start -",$A,$D,0
>01ac1d		55 4c 54 20 53 74 61 72 74 20 2d 0a 0d 00
>01ac2b		2d 20 52 58 20 52 45 53		Text_Stop_Rx_CMD          .text "- RX RESULT Stop -",$A,$D,0
>01ac33		55 4c 54 20 53 74 6f 70 20 2d 0a 0d 00
>01ac40		2d 20 52 58 20 46 49 46		Text_Start_Rx_FIFO        .text "- RX FIFO Start -",$A,$D,0
>01ac48		4f 20 53 74 61 72 74 20 2d 0a 0d 00
>01ac54		2d 20 52 58 20 46 49 46		Text_Stop_Rx_FIFO         .text "- RX FIFO Stop -",$A,$D,0
>01ac5c		4f 20 53 74 6f 70 20 2d 0a 0d 00
>01ac67		2d 20 46 44 44 5f 45 52		Text_ERROR                .text "- FDD_ERROR : ",$A,$D,0
>01ac6f		52 4f 52 20 3a 20 0a 0d 00
>01ac78		0a 0d 00			Text_EOL                  .text $A,$D,0
>01ac7b		4e 62 20 70 61 72 61 6d		Text_CMD_Parametter_Number .text "Nb parametter : ",0
>01ac83		65 74 74 65 72 20 3a 20 00
>01ac8c		50 61 72 61 6d 20 00		Text_CMD_Parametter       .text "Param ",0
>01ac93		4e 62 20 72 65 73 75 6c		Text_CMD_Result_Number    .text "Nb result : ",0
>01ac9b		74 20 3a 20 00
>01aca0		52 65 73 75 6c 74 20 00		Text_CMD_Result           .text "Result ",0
>01aca8		20 3a 20 00			Text_duble_dot             .text " : ",0
>01acac		46 44 44 5f 53 54 41 54		Text_FDD_STATUS_A         .text "FDD_STATUS_A       0x",0
>01acb4		55 53 5f 41 20 20 20 20 20 20 20 30 78 00
>01acc2		46 44 44 5f 53 54 41 54		Text_FDD_STATUS_B         .text "FDD_STATUS_B       0x",0
>01acca		55 53 5f 42 20 20 20 20 20 20 20 30 78 00
>01acd8		46 44 44 5f 44 49 47 49		Text_FDD_DIGITAL_OUTPUT   .text "FDD_DIGITAL_OUTPUT 0x",0
>01ace0		54 41 4c 5f 4f 55 54 50 55 54 20 30 78 00
>01acee		46 44 44 5f 54 41 50 45		Text_FDD_TAPE_DRIVER      .text "FDD_TAPE_DRIVER    0x",0
>01acf6		5f 44 52 49 56 45 52 20 20 20 20 30 78 00
>01ad04		46 44 44 5f 4d 41 49 4e		Text_FDD_MAIN_STATUE      .text "FDD_MAIN_STATUE    0x",0
>01ad0c		5f 53 54 41 54 55 45 20 20 20 20 30 78 00
>01ad1a		46 44 44 5f 44 49 47 49		Text_FDD_DIGITAL_INPUT    .text "FDD_DIGITAL_INPUT  0x",0
>01ad22		54 41 4c 5f 49 4e 50 55 54 20 20 30 78 00

;******  Processing file: FDD_row_TEXT_HEX.asm

>01ad30		eb 3c 90 4d 53 44 4f 53		data_floppy .text $EB,$3C,$90,$4D,$53,$44,$4F,$53,$35,$2E,$30,$00,$02,$01,$01,$00,$02,$E0,$00,$40,$0B,$F0,$09,$00,$12,$00,$02,$00,$00,$00,$00,$00
>01ad38		35 2e 30 00 02 01 01 00 02 e0 00 40 0b f0 09 00
>01ad48		12 00 02 00 00 00 00 00
>01ad50		00 00 00 00 00 00 29 07		.text $00,$00,$00,$00,$00,$00,$29,$07,$09,$31,$2D,$44,$49,$53,$4B,$20,$20,$20,$20,$20,$20,$31,$46,$41,$54,$31,$32,$20,$20,$20,$FA,$33
>01ad58		09 31 2d 44 49 53 4b 20 20 20 20 20 20 31 46 41
>01ad68		54 31 32 20 20 20 fa 33
>01ad70		c0 8e d0 bc 00 7c 16 07		.text $C0,$8E,$D0,$BC,$00,$7C,$16,$07,$BB,$78,$00,$36,$C5,$37,$1E,$56,$16,$53,$BF,$3E,$7C,$B9,$0B,$00,$FC,$F3,$A4,$06,$1F,$C6,$45,$FE
>01ad78		bb 78 00 36 c5 37 1e 56 16 53 bf 3e 7c b9 0b 00
>01ad88		fc f3 a4 06 1f c6 45 fe
>01ad90		0f 8b 0e 18 7c 88 4d f9		.text $0F,$8B,$0E,$18,$7C,$88,$4D,$F9,$89,$47,$02,$C7,$07,$3E,$7C,$FB,$CD,$13,$72,$79,$33,$C0,$39,$06,$13,$7C,$74,$08,$8B,$0E,$13,$7C
>01ad98		89 47 02 c7 07 3e 7c fb cd 13 72 79 33 c0 39 06
>01ada8		13 7c 74 08 8b 0e 13 7c
>01adb0		89 0e 20 7c a0 10 7c f7		.text $89,$0E,$20,$7C,$A0,$10,$7C,$F7,$26,$16,$7C,$03,$06,$1C,$7C,$13,$16,$1E,$7C,$03,$06,$0E,$7C,$83,$D2,$00,$A3,$50,$7C,$89,$16,$52
>01adb8		26 16 7c 03 06 1c 7c 13 16 1e 7c 03 06 0e 7c 83
>01adc8		d2 00 a3 50 7c 89 16 52
>01add0		7c a3 49 7c 89 16 4b 7c		.text $7C,$A3,$49,$7C,$89,$16,$4B,$7C,$B8,$20,$00,$F7,$26,$11,$7C,$8B,$1E,$0B,$7C,$03,$C3,$48,$F7,$F3,$01,$06,$49,$7C,$83,$16,$4B,$7C
>01add8		b8 20 00 f7 26 11 7c 8b 1e 0b 7c 03 c3 48 f7 f3
>01ade8		01 06 49 7c 83 16 4b 7c
>01adf0		00 bb 00 05 8b 16 52 7c		.text $00,$BB,$00,$05,$8B,$16,$52,$7C,$A1,$50,$7C,$E8,$92,$00,$72,$1D,$B0,$01,$E8,$AC,$00,$72,$16,$8B,$FB,$B9,$0B,$00,$BE,$E6,$7D,$F3
>01adf8		a1 50 7c e8 92 00 72 1d b0 01 e8 ac 00 72 16 8b
>01ae08		fb b9 0b 00 be e6 7d f3
>01ae10		a6 75 0a 8d 7f 20 b9 0b		.text $A6,$75,$0A,$8D,$7F,$20,$B9,$0B,$00,$F3,$A6,$74,$18,$BE,$9E,$7D,$E8,$5F,$00,$33,$C0,$CD,$16,$5E,$1F,$8F,$04,$8F,$44,$02,$CD,$19
>01ae18		00 f3 a6 74 18 be 9e 7d e8 5f 00 33 c0 cd 16 5e
>01ae28		1f 8f 04 8f 44 02 cd 19
>01ae30		58 58 58 eb e8 8b 47 1a		.text $58,$58,$58,$EB,$E8,$8B,$47,$1A,$48,$48,$8A,$1E,$0D,$7C,$32,$FF,$F7,$E3,$03,$06,$49,$7C,$13,$16,$4B,$7C,$BB,$00,$07,$B9,$03,$00
>01ae38		48 48 8a 1e 0d 7c 32 ff f7 e3 03 06 49 7c 13 16
>01ae48		4b 7c bb 00 07 b9 03 00
>01ae50		50 52 51 e8 3a 00 72 d8		.text $50,$52,$51,$E8,$3A,$00,$72,$D8,$B0,$01,$E8,$54,$00,$59,$5A,$58,$72,$BB,$05,$01,$00,$83,$D2,$00,$03,$1E,$0B,$7C,$E2,$E2,$8A,$2E
>01ae58		b0 01 e8 54 00 59 5a 58 72 bb 05 01 00 83 d2 00
>01ae68		03 1e 0b 7c e2 e2 8a 2e
>01ae70		15 7c 8a 16 24 7c 8b 1e		.text $15,$7C,$8A,$16,$24,$7C,$8B,$1E,$49,$7C,$A1,$4B,$7C,$EA,$00,$00,$70,$00,$AC,$0A,$C0,$74,$29,$B4,$0E,$BB,$07,$00,$CD,$10,$EB,$F2
>01ae78		49 7c a1 4b 7c ea 00 00 70 00 ac 0a c0 74 29 b4
>01ae88		0e bb 07 00 cd 10 eb f2
>01ae90		3b 16 18 7c 73 19 f7 36		.text $3B,$16,$18,$7C,$73,$19,$F7,$36,$18,$7C,$FE,$C2,$88,$16,$4F,$7C,$33,$D2,$F7,$36,$1A,$7C,$88,$16,$25,$7C,$A3,$4D,$7C,$F8,$C3,$F9
>01ae98		18 7c fe c2 88 16 4f 7c 33 d2 f7 36 1a 7c 88 16
>01aea8		25 7c a3 4d 7c f8 c3 f9
>01aeb0		c3 b4 02 8b 16 4d 7c b1		.text $C3,$B4,$02,$8B,$16,$4D,$7C,$B1,$06,$D2,$E6,$0A,$36,$4F,$7C,$8B,$CA,$86,$E9,$8A,$16,$24,$7C,$8A,$36,$25,$7C,$CD,$13,$C3,$0D,$0A
>01aeb8		06 d2 e6 0a 36 4f 7c 8b ca 86 e9 8a 16 24 7c 8a
>01aec8		36 25 7c cd 13 c3 0d 0a
>01aed0		4e 6f 6e 2d 53 79 73 74		.text $4E,$6F,$6E,$2D,$53,$79,$73,$74,$65,$6D,$20,$64,$69,$73,$6B,$20,$6F,$72,$20,$64,$69,$73,$6B,$20,$65,$72,$72,$6F,$72,$0D,$0A,$52
>01aed8		65 6d 20 64 69 73 6b 20 6f 72 20 64 69 73 6b 20
>01aee8		65 72 72 6f 72 0d 0a 52
>01aef0		65 70 6c 61 63 65 20 61		.text $65,$70,$6C,$61,$63,$65,$20,$61,$6E,$64,$20,$70,$72,$65,$73,$73,$20,$61,$6E,$79,$20,$6B,$65,$79,$20,$77,$68,$65,$6E,$20,$72,$65
>01aef8		6e 64 20 70 72 65 73 73 20 61 6e 79 20 6b 65 79
>01af08		20 77 68 65 6e 20 72 65
>01af10		61 64 79 0d 0a 00 49 4f		.text $61,$64,$79,$0D,$0A,$00,$49,$4F,$20,$20,$20,$20,$20,$20,$53,$59,$53,$4D,$53,$44,$4F,$53,$20,$20,$20,$53,$59,$53,$00,$00,$55,$AA
>01af18		20 20 20 20 20 20 53 59 53 4d 53 44 4f 53 20 20
>01af28		20 53 59 53 00 00 55 aa
>01af30		f0 ff ff 03 40 00 05 60		.text $F0,$FF,$FF,$03,$40,$00,$05,$60,$00,$07,$80,$00,$09,$A0,$00,$0B,$C0,$00,$0D,$E0,$00,$0F,$00,$01,$11,$20,$01,$13,$40,$01,$15,$60
>01af38		00 07 80 00 09 a0 00 0b c0 00 0d e0 00 0f 00 01
>01af48		11 20 01 13 40 01 15 60
>01af50		01 17 80 01 19 a0 01 1b		.text $01,$17,$80,$01,$19,$A0,$01,$1B,$C0,$01,$1D,$E0,$01,$1F,$00,$02,$21,$20,$02,$23,$40,$02,$25,$60,$02,$27,$80,$02,$29,$A0,$02,$2B
>01af58		c0 01 1d e0 01 1f 00 02 21 20 02 23 40 02 25 60
>01af68		02 27 80 02 29 a0 02 2b
>01af70		c0 02 2d e0 02 2f 00 03		.text $C0,$02,$2D,$E0,$02,$2F,$00,$03,$31,$20,$03,$33,$40,$03,$35,$60,$03,$37,$80,$03,$39,$A0,$03,$3B,$C0,$03,$3D,$E0,$03,$3F,$00,$04
>01af78		31 20 03 33 40 03 35 60 03 37 80 03 39 a0 03 3b
>01af88		c0 03 3d e0 03 3f 00 04
>01af90		41 20 04 43 40 04 45 60		.text $41,$20,$04,$43,$40,$04,$45,$60,$04,$47,$80,$04,$49,$A0,$04,$4B,$C0,$04,$4D,$E0,$04,$4F,$00,$05,$51,$F0,$FF,$53,$40,$05,$55,$60
>01af98		04 47 80 04 49 a0 04 4b c0 04 4d e0 04 4f 00 05
>01afa8		51 f0 ff 53 40 05 55 60
>01afb0		05 57 80 05 59 a0 05 5b		.text $05,$57,$80,$05,$59,$A0,$05,$5B,$C0,$05,$5D,$E0,$05,$5F,$00,$06,$61,$20,$06,$63,$40,$06,$65,$60,$06,$67,$80,$06,$69,$A0,$06,$6B
>01afb8		c0 05 5d e0 05 5f 00 06 61 20 06 63 40 06 65 60
>01afc8		06 67 80 06 69 a0 06 6b
>01afd0		c0 06 6d e0 06 6f 00 07		.text $C0,$06,$6D,$E0,$06,$6F,$00,$07,$71,$20,$07,$73,$40,$07,$75,$60,$07,$77,$80,$07,$79,$A0,$07,$7B,$C0,$07,$7D,$E0,$07,$7F,$00,$08
>01afd8		71 20 07 73 40 07 75 60 07 77 80 07 79 a0 07 7b
>01afe8		c0 07 7d e0 07 7f 00 08
>01aff0		81 20 08 83 40 08 85 60		.text $81,$20,$08,$83,$40,$08,$85,$60,$08,$87,$80,$08,$89,$A0,$08,$8B,$C0,$08,$8D,$E0,$08,$8F,$00,$09,$91,$20,$09,$93,$40,$09,$95,$60
>01aff8		08 87 80 08 89 a0 08 8b c0 08 8d e0 08 8f 00 09
>01b008		91 20 09 93 40 09 95 60
>01b010		09 97 80 09 99 a0 09 9b		.text $09,$97,$80,$09,$99,$A0,$09,$9B,$C0,$09,$FF,$EF,$09,$9F,$00,$0A,$A1,$20,$0A,$A3,$40,$0A,$A5,$60,$0A,$A7,$80,$0A,$A9,$A0,$0A,$AB
>01b018		c0 09 ff ef 09 9f 00 0a a1 20 0a a3 40 0a a5 60
>01b028		0a a7 80 0a a9 a0 0a ab
>01b030		c0 0a ad e0 0a af 00 0b		.text $C0,$0A,$AD,$E0,$0A,$AF,$00,$0B,$B1,$20,$0B,$B3,$40,$0B,$B5,$60,$0B,$B7,$80,$0B,$B9,$A0,$0B,$BB,$C0,$0B,$BD,$E0,$0B,$BF,$00,$0C
>01b038		b1 20 0b b3 40 0b b5 60 0b b7 80 0b b9 a0 0b bb
>01b048		c0 0b bd e0 0b bf 00 0c
>01b050		c1 20 0c c3 40 0c c5 60		.text $C1,$20,$0C,$C3,$40,$0C,$C5,$60,$0C,$C7,$80,$0C,$C9,$A0,$0C,$CB,$C0,$0C,$CD,$E0,$0C,$CF,$00,$0D,$D1,$20,$0D,$D3,$40,$0D,$D5,$60
>01b058		0c c7 80 0c c9 a0 0c cb c0 0c cd e0 0c cf 00 0d
>01b068		d1 20 0d d3 40 0d d5 60
>01b070		0d d7 80 0d d9 a0 0d db		.text $0D,$D7,$80,$0D,$D9,$A0,$0D,$DB,$C0,$0D,$DD,$E0,$0D,$DF,$00,$0E,$E1,$20,$0E,$E3,$40,$0E,$E5,$60,$0E,$E7,$80,$0E,$E9,$A0,$0E,$EB
>01b078		c0 0d dd e0 0d df 00 0e e1 20 0e e3 40 0e e5 60
>01b088		0e e7 80 0e e9 a0 0e eb
>01b090		c0 0e ed e0 0e ef 00 0f		.text $C0,$0E,$ED,$E0,$0E,$EF,$00,$0F,$F1,$20,$0F,$F3,$40,$0F,$F5,$60,$0F,$F7,$80,$0F,$F9,$A0,$0F,$FB,$C0,$0F,$FD,$E0,$0F,$FF,$00,$10
>01b098		f1 20 0f f3 40 0f f5 60 0f f7 80 0f f9 a0 0f fb
>01b0a8		c0 0f fd e0 0f ff 00 10
>01b0b0		01 21 10 03 41 10 05 61		.text $01,$21,$10,$03,$41,$10,$05,$61,$10,$07,$F1,$FF,$FF,$AF,$10,$0B,$C1,$10,$0D,$E1,$10,$0F,$01,$11,$11,$21,$11,$13,$41,$11,$15,$61
>01b0b8		10 07 f1 ff ff af 10 0b c1 10 0d e1 10 0f 01 11
>01b0c8		11 21 11 13 41 11 15 61
>01b0d0		11 17 81 11 19 a1 11 1b		.text $11,$17,$81,$11,$19,$A1,$11,$1B,$C1,$11,$1D,$E1,$11,$1F,$01,$12,$21,$21,$12,$23,$41,$12,$25,$61,$12,$27,$81,$12,$29,$A1,$12,$2B
>01b0d8		c1 11 1d e1 11 1f 01 12 21 21 12 23 41 12 25 61
>01b0e8		12 27 81 12 29 a1 12 2b
>01b0f0		c1 12 2d e1 12 2f 01 13		.text $C1,$12,$2D,$E1,$12,$2F,$01,$13,$31,$21,$13,$33,$41,$13,$35,$61,$13,$37,$81,$13,$39,$A1,$13,$3B,$C1,$13,$3D,$E1,$13,$3F,$01,$14
>01b0f8		31 21 13 33 41 13 35 61 13 37 81 13 39 a1 13 3b
>01b108		c1 13 3d e1 13 3f 01 14
>01b110		41 21 14 ff 4f 14 45 61		.text $41,$21,$14,$FF,$4F,$14,$45,$61,$14,$47,$81,$14,$49,$A1,$14,$4B,$C1,$14,$4D,$E1,$14,$4F,$01,$15,$51,$21,$15,$53,$41,$15,$55,$61
>01b118		14 47 81 14 49 a1 14 4b c1 14 4d e1 14 4f 01 15
>01b128		51 21 15 53 41 15 55 61
>01b130		15 57 81 15 59 a1 15 5b		.text $15,$57,$81,$15,$59,$A1,$15,$5B,$C1,$15,$5D,$E1,$15,$5F,$01,$16,$61,$21,$16,$63,$41,$16,$65,$61,$16,$67,$81,$16,$69,$A1,$16,$6B
>01b138		c1 15 5d e1 15 5f 01 16 61 21 16 63 41 16 65 61
>01b148		16 67 81 16 69 a1 16 6b
>01b150		c1 16 6d e1 16 6f 01 17		.text $C1,$16,$6D,$E1,$16,$6F,$01,$17,$71,$21,$17,$73,$41,$17,$75,$61,$17,$77,$81,$17,$79,$A1,$17,$7B,$C1,$17,$7D,$E1,$17,$7F,$01,$18
>01b158		71 21 17 73 41 17 75 61 17 77 81 17 79 a1 17 7b
>01b168		c1 17 7d e1 17 7f 01 18
>01b170		81 21 18 83 41 18 85 61		.text $81,$21,$18,$83,$41,$18,$85,$61,$18,$87,$81,$18,$89,$A1,$18,$8B,$C1,$18,$8D,$E1,$18,$8F,$01,$19,$91,$21,$19,$93,$41,$19,$95,$61
>01b178		18 87 81 18 89 a1 18 8b c1 18 8d e1 18 8f 01 19
>01b188		91 21 19 93 41 19 95 61
>01b190		19 97 81 19 99 a1 19 9b		.text $19,$97,$81,$19,$99,$A1,$19,$9B,$C1,$19,$9D,$E1,$19,$9F,$01,$1A,$A1,$21,$1A,$A3,$41,$1A,$A5,$61,$1A,$A7,$81,$1A,$A9,$A1,$1A,$AB
>01b198		c1 19 9d e1 19 9f 01 1a a1 21 1a a3 41 1a a5 61
>01b1a8		1a a7 81 1a a9 a1 1a ab
>01b1b0		c1 1a ad e1 1a af 01 1b		.text $C1,$1A,$AD,$E1,$1A,$AF,$01,$1B,$B1,$21,$1B,$B3,$41,$1B,$B5,$61,$1B,$B7,$81,$1B,$B9,$A1,$1B,$BB,$C1,$1B,$BD,$E1,$1B,$BF,$01,$1C
>01b1b8		b1 21 1b b3 41 1b b5 61 1b b7 81 1b b9 a1 1b bb
>01b1c8		c1 1b bd e1 1b bf 01 1c
>01b1d0		c1 21 1c c3 41 1c ff 6f		.text $C1,$21,$1C,$C3,$41,$1C,$FF,$6F,$1C,$C7,$81,$1C,$FF,$FF,$FF,$CB,$C1,$1C,$CD,$E1,$1C,$CF,$01,$1D,$D1,$21,$1D,$D3,$41,$1D,$D5,$61
>01b1d8		1c c7 81 1c ff ff ff cb c1 1c cd e1 1c cf 01 1d
>01b1e8		d1 21 1d d3 41 1d d5 61
>01b1f0		1d d7 81 1d d9 a1 1d db		.text $1D,$D7,$81,$1D,$D9,$A1,$1D,$DB,$C1,$1D,$DD,$E1,$1D,$DF,$01,$1E,$E1,$21,$1E,$E3,$41,$1E,$E5,$61,$1E,$E7,$81,$1E,$E9,$A1,$1E,$EB
>01b1f8		c1 1d dd e1 1d df 01 1e e1 21 1e e3 41 1e e5 61
>01b208		1e e7 81 1e e9 a1 1e eb
>01b210		c1 1e ed e1 1e ef 01 1f		.text $C1,$1E,$ED,$E1,$1E,$EF,$01,$1F,$F1,$21,$1F,$F3,$41,$1F,$F5,$61,$1F,$FF,$8F,$1F,$F9,$A1,$1F,$FB,$C1,$1F,$FD,$E1,$1F,$FF,$01,$20
>01b218		f1 21 1f f3 41 1f f5 61 1f ff 8f 1f f9 a1 1f fb
>01b228		c1 1f fd e1 1f ff 01 20
>01b230		01 22 20 03 42 20 05 62		.text $01,$22,$20,$03,$42,$20,$05,$62,$20,$07,$82,$20,$09,$A2,$20,$0B,$C2,$20,$0D,$E2,$20,$0F,$02,$21,$11,$22,$21,$13,$42,$21,$15,$F2
>01b238		20 07 82 20 09 a2 20 0b c2 20 0d e2 20 0f 02 21
>01b248		11 22 21 13 42 21 15 f2
>01b250		ff 17 82 21 19 a2 21 1b		.text $FF,$17,$82,$21,$19,$A2,$21,$1B,$C2,$21,$1D,$E2,$21,$1F,$02,$22,$21,$22,$22,$23,$42,$22,$25,$62,$22,$27,$82,$22,$FF,$AF,$22,$2B
>01b258		c2 21 1d e2 21 1f 02 22 21 22 22 23 42 22 25 62
>01b268		22 27 82 22 ff af 22 2b
>01b270		c2 22 2d e2 22 2f 02 23		.text $C2,$22,$2D,$E2,$22,$2F,$02,$23,$31,$22,$23,$33,$42,$23,$35,$62,$23,$37,$82,$23,$39,$A2,$23,$3B,$C2,$23,$3D,$E2,$23,$3F,$02,$24
>01b278		31 22 23 33 42 23 35 62 23 37 82 23 39 a2 23 3b
>01b288		c2 23 3d e2 23 3f 02 24
>01b290		41 22 24 43 42 24 45 62		.text $41,$22,$24,$43,$42,$24,$45,$62,$24,$47,$82,$24,$49,$A2,$24,$4B,$C2,$24,$FF,$EF,$24,$4F,$02,$25,$51,$22,$25,$53,$42,$25,$55,$62
>01b298		24 47 82 24 49 a2 24 4b c2 24 ff ef 24 4f 02 25
>01b2a8		51 22 25 53 42 25 55 62
>01b2b0		25 57 82 25 59 a2 25 5b		.text $25,$57,$82,$25,$59,$A2,$25,$5B,$C2,$25,$5D,$E2,$25,$5F,$02,$26,$61,$22,$26,$63,$42,$26,$65,$62,$26,$67,$82,$26,$69,$A2,$26,$6B
>01b2b8		c2 25 5d e2 25 5f 02 26 61 22 26 63 42 26 65 62
>01b2c8		26 67 82 26 69 a2 26 6b
>01b2d0		c2 26 6d e2 26 6f 02 27		.text $C2,$26,$6D,$E2,$26,$6F,$02,$27,$71,$22,$27,$FF,$4F,$27,$75,$62,$27,$77,$82,$27,$79,$A2,$27,$7B,$C2,$27,$7D,$E2,$27,$7F,$02,$28
>01b2d8		71 22 27 ff 4f 27 75 62 27 77 82 27 79 a2 27 7b
>01b2e8		c2 27 7d e2 27 7f 02 28
>01b2f0		81 22 28 83 42 28 85 62		.text $81,$22,$28,$83,$42,$28,$85,$62,$28,$87,$82,$28,$89,$A2,$28,$8B,$C2,$28,$8D,$E2,$28,$8F,$02,$29,$91,$F2,$FF,$93,$42,$29,$95,$62
>01b2f8		28 87 82 28 89 a2 28 8b c2 28 8d e2 28 8f 02 29
>01b308		91 f2 ff 93 42 29 95 62
>01b310		29 97 82 29 99 a2 29 9b		.text $29,$97,$82,$29,$99,$A2,$29,$9B,$C2,$29,$9D,$E2,$29,$9F,$02,$2A,$A1,$22,$2A,$A3,$42,$2A,$A5,$62,$2A,$A7,$F2,$FF,$A9,$A2,$2A,$AB
>01b318		c2 29 9d e2 29 9f 02 2a a1 22 2a a3 42 2a a5 62
>01b328		2a a7 f2 ff a9 a2 2a ab
>01b330		c2 2a ad e2 2a af 02 2b		.text $C2,$2A,$AD,$E2,$2A,$AF,$02,$2B,$B1,$22,$2B,$B3,$42,$2B,$B5,$62,$2B,$B7,$82,$2B,$B9,$A2,$2B,$BB,$C2,$2B,$BD,$E2,$2B,$BF,$02,$2C
>01b338		b1 22 2b b3 42 2b b5 62 2b b7 82 2b b9 a2 2b bb
>01b348		c2 2b bd e2 2b bf 02 2c
>01b350		c1 22 2c c3 42 2c c5 62		.text $C1,$22,$2C,$C3,$42,$2C,$C5,$62,$2C,$C7,$82,$2C,$C9,$A2,$2C,$CB,$C2,$2C,$CD,$E2,$2C,$CF,$02,$2D,$D1,$22,$2D,$D3,$42,$2D,$D5,$62
>01b358		2c c7 82 2c c9 a2 2c cb c2 2c cd e2 2c cf 02 2d
>01b368		d1 22 2d d3 42 2d d5 62
>01b370		2d d7 82 2d d9 a2 2d db		.text $2D,$D7,$82,$2D,$D9,$A2,$2D,$DB,$C2,$2D,$DD,$E2,$2D,$DF,$02,$2E,$E1,$22,$2E,$E3,$42,$2E,$E5,$62,$2E,$E7,$82,$2E,$E9,$A2,$2E,$EB
>01b378		c2 2d dd e2 2d df 02 2e e1 22 2e e3 42 2e e5 62
>01b388		2e e7 82 2e e9 a2 2e eb
>01b390		c2 2e ed e2 2e ef 02 2f		.text $C2,$2E,$ED,$E2,$2E,$EF,$02,$2F,$F1,$22,$2F,$F3,$42,$2F,$F5,$62,$2F,$F7,$82,$2F,$F9,$A2,$2F,$FB,$C2,$2F,$FD,$E2,$2F,$FF,$02,$30
>01b398		f1 22 2f f3 42 2f f5 62 2f f7 82 2f f9 a2 2f fb
>01b3a8		c2 2f fd e2 2f ff 02 30
>01b3b0		01 23 30 03 43 30 05 63		.text $01,$23,$30,$03,$43,$30,$05,$63,$30,$07,$83,$30,$09,$A3,$30,$0B,$C3,$30,$0D,$E3,$30,$0F,$03,$31,$11,$23,$31,$13,$43,$31,$15,$63
>01b3b8		30 07 83 30 09 a3 30 0b c3 30 0d e3 30 0f 03 31
>01b3c8		11 23 31 13 43 31 15 63
>01b3d0		31 17 83 31 19 a3 31 1b		.text $31,$17,$83,$31,$19,$A3,$31,$1B,$C3,$31,$1D,$E3,$31,$1F,$03,$32,$21,$23,$32,$23,$43,$32,$25,$63,$32,$27,$83,$32,$29,$A3,$32,$2B
>01b3d8		c3 31 1d e3 31 1f 03 32 21 23 32 23 43 32 25 63
>01b3e8		32 27 83 32 29 a3 32 2b
>01b3f0		c3 32 2d e3 32 2f 03 33		.text $C3,$32,$2D,$E3,$32,$2F,$03,$33,$31,$23,$33,$33,$43,$33,$35,$63,$33,$37,$83,$33,$FF,$AF,$33,$3B,$C3,$33,$3D,$E3,$33,$3F,$03,$34
>01b3f8		31 23 33 33 43 33 35 63 33 37 83 33 ff af 33 3b
>01b408		c3 33 3d e3 33 3f 03 34
>01b410		41 23 34 43 43 34 45 63		.text $41,$23,$34,$43,$43,$34,$45,$63,$34,$47,$83,$34,$49,$A3,$34,$4B,$C3,$34,$4D,$E3,$34,$4F,$03,$35,$FF,$2F,$35,$53,$43,$35,$55,$63
>01b418		34 47 83 34 49 a3 34 4b c3 34 4d e3 34 4f 03 35
>01b428		ff 2f 35 53 43 35 55 63
>01b430		35 57 83 35 59 a3 35 5b		.text $35,$57,$83,$35,$59,$A3,$35,$5B,$C3,$35,$5D,$E3,$35,$5F,$03,$36,$61,$23,$36,$63,$43,$36,$65,$63,$36,$67,$83,$36,$69,$A3,$36,$6B
>01b438		c3 35 5d e3 35 5f 03 36 61 23 36 63 43 36 65 63
>01b448		36 67 83 36 69 a3 36 6b
>01b450		c3 36 6d e3 36 6f f3 ff		.text $C3,$36,$6D,$E3,$36,$6F,$F3,$FF,$71,$23,$37,$73,$43,$37,$75,$63,$37,$77,$83,$37,$79,$A3,$37,$7B,$C3,$37,$7D,$E3,$37,$7F,$03,$38
>01b458		71 23 37 73 43 37 75 63 37 77 83 37 79 a3 37 7b
>01b468		c3 37 7d e3 37 7f 03 38
>01b470		81 23 38 83 43 38 85 63		.text $81,$23,$38,$83,$43,$38,$85,$63,$38,$87,$83,$38,$89,$A3,$38,$8B,$C3,$38,$8D,$E3,$38,$8F,$03,$39,$91,$23,$39,$93,$43,$39,$95,$63
>01b478		38 87 83 38 89 a3 38 8b c3 38 8d e3 38 8f 03 39
>01b488		91 23 39 93 43 39 95 63
>01b490		39 97 83 39 99 a3 39 9b		.text $39,$97,$83,$39,$99,$A3,$39,$9B,$C3,$39,$9D,$E3,$39,$9F,$03,$3A,$A1,$23,$3A,$A3,$43,$3A,$A5,$63,$3A,$A7,$83,$3A,$A9,$A3,$3A,$AB
>01b498		c3 39 9d e3 39 9f 03 3a a1 23 3a a3 43 3a a5 63
>01b4a8		3a a7 83 3a a9 a3 3a ab
>01b4b0		c3 3a ad e3 3a af 03 3b		.text $C3,$3A,$AD,$E3,$3A,$AF,$03,$3B,$B1,$23,$3B,$B3,$43,$3B,$B5,$63,$3B,$B7,$83,$3B,$B9,$A3,$3B,$BB,$C3,$3B,$BD,$E3,$3B,$BF,$03,$3C
>01b4b8		b1 23 3b b3 43 3b b5 63 3b b7 83 3b b9 a3 3b bb
>01b4c8		c3 3b bd e3 3b bf 03 3c
>01b4d0		c1 23 3c c3 43 3c c5 63		.text $C1,$23,$3C,$C3,$43,$3C,$C5,$63,$3C,$C7,$83,$3C,$C9,$A3,$3C,$CB,$C3,$3C,$CD,$E3,$3C,$CF,$03,$3D,$D1,$23,$3D,$D3,$43,$3D,$D5,$63
>01b4d8		3c c7 83 3c c9 a3 3c cb c3 3c cd e3 3c cf 03 3d
>01b4e8		d1 23 3d d3 43 3d d5 63
>01b4f0		3d d7 83 3d d9 a3 3d db		.text $3D,$D7,$83,$3D,$D9,$A3,$3D,$DB,$C3,$3D,$DD,$E3,$3D,$DF,$03,$3E,$E1,$23,$3E,$E3,$43,$3E,$E5,$63,$3E,$E7,$83,$3E,$E9,$A3,$3E,$EB
>01b4f8		c3 3d dd e3 3d df 03 3e e1 23 3e e3 43 3e e5 63
>01b508		3e e7 83 3e e9 a3 3e eb
>01b510		c3 3e ed e3 3e ef 03 3f		.text $C3,$3E,$ED,$E3,$3E,$EF,$03,$3F,$F1,$23,$3F,$F3,$43,$3F,$F5,$63,$3F,$F7,$83,$3F,$F9,$A3,$3F,$FB,$C3,$3F,$FD,$E3,$3F,$FF,$03,$40
>01b518		f1 23 3f f3 43 3f f5 63 3f f7 83 3f f9 a3 3f fb
>01b528		c3 3f fd e3 3f ff 03 40
>01b530		01 24 40 03 44 40 05 64		.text $01,$24,$40,$03,$44,$40,$05,$64,$40,$07,$84,$40,$09,$A4,$40,$FF,$CF,$40,$0D,$E4,$40,$0F,$04,$41,$11,$24,$41,$13,$44,$41,$15,$64
>01b538		40 07 84 40 09 a4 40 ff cf 40 0d e4 40 0f 04 41
>01b548		11 24 41 13 44 41 15 64
>01b550		41 17 84 41 19 a4 41 1b		.text $41,$17,$84,$41,$19,$A4,$41,$1B,$C4,$41,$1D,$E4,$41,$1F,$04,$42,$21,$24,$42,$23,$44,$42,$25,$64,$42,$27,$84,$42,$29,$A4,$42,$FF
>01b558		c4 41 1d e4 41 1f 04 42 21 24 42 23 44 42 25 64
>01b568		42 27 84 42 29 a4 42 ff
>01b570		cf 42 2d e4 42 2f 04 43		.text $CF,$42,$2D,$E4,$42,$2F,$04,$43,$31,$24,$43,$33,$44,$43,$35,$64,$43,$37,$84,$43,$39,$A4,$43,$3B,$C4,$43,$3D,$E4,$43,$3F,$04,$44
>01b578		31 24 43 33 44 43 35 64 43 37 84 43 39 a4 43 3b
>01b588		c4 43 3d e4 43 3f 04 44
>01b590		41 24 44 43 44 44 45 64		.text $41,$24,$44,$43,$44,$44,$45,$64,$44,$47,$84,$44,$49,$A4,$44,$4B,$C4,$44,$4D,$E4,$44,$4F,$04,$45,$51,$24,$45,$53,$44,$45,$55,$64
>01b598		44 47 84 44 49 a4 44 4b c4 44 4d e4 44 4f 04 45
>01b5a8		51 24 45 53 44 45 55 64
>01b5b0		45 57 84 45 59 a4 45 5b		.text $45,$57,$84,$45,$59,$A4,$45,$5B,$C4,$45,$5D,$E4,$45,$5F,$04,$46,$61,$24,$46,$63,$44,$46,$FF,$6F,$46,$67,$84,$46,$69,$A4,$46,$6B
>01b5b8		c4 45 5d e4 45 5f 04 46 61 24 46 63 44 46 ff 6f
>01b5c8		46 67 84 46 69 a4 46 6b
>01b5d0		c4 46 6d e4 46 6f 04 47		.text $C4,$46,$6D,$E4,$46,$6F,$04,$47,$71,$24,$47,$73,$44,$47,$75,$64,$47,$77,$84,$47,$79,$A4,$47,$7B,$C4,$47,$7D,$E4,$47,$7F,$04,$48
>01b5d8		71 24 47 73 44 47 75 64 47 77 84 47 79 a4 47 7b
>01b5e8		c4 47 7d e4 47 7f 04 48
>01b5f0		81 24 48 83 44 48 85 64		.text $81,$24,$48,$83,$44,$48,$85,$64,$48,$87,$84,$48,$89,$A4,$48,$8B,$C4,$48,$8D,$E4,$48,$8F,$04,$49,$91,$24,$49,$93,$44,$49,$95,$64
>01b5f8		48 87 84 48 89 a4 48 8b c4 48 8d e4 48 8f 04 49
>01b608		91 24 49 93 44 49 95 64
>01b610		49 ff 8f 49 99 a4 49 9b		.text $49,$FF,$8F,$49,$99,$A4,$49,$9B,$C4,$49,$9D,$E4,$49,$9F,$04,$4A,$A1,$24,$4A,$A3,$44,$4A,$FF,$6F,$4A,$A7,$84,$4A,$A9,$A4,$4A,$AB
>01b618		c4 49 9d e4 49 9f 04 4a a1 24 4a a3 44 4a ff 6f
>01b628		4a a7 84 4a a9 a4 4a ab
>01b630		c4 4a ad e4 4a af 04 4b		.text $C4,$4A,$AD,$E4,$4A,$AF,$04,$4B,$B1,$24,$4B,$B3,$44,$4B,$B5,$64,$4B,$B7,$84,$4B,$B9,$A4,$4B,$BB,$C4,$4B,$BD,$E4,$4B,$BF,$04,$4C
>01b638		b1 24 4b b3 44 4b b5 64 4b b7 84 4b b9 a4 4b bb
>01b648		c4 4b bd e4 4b bf 04 4c
>01b650		c1 24 4c c3 44 4c c5 64		.text $C1,$24,$4C,$C3,$44,$4C,$C5,$64,$4C,$C7,$84,$4C,$C9,$A4,$4C,$CB,$C4,$4C,$CD,$E4,$4C,$CF,$04,$4D,$D1,$24,$4D,$D3,$44,$4D,$D5,$64
>01b658		4c c7 84 4c c9 a4 4c cb c4 4c cd e4 4c cf 04 4d
>01b668		d1 24 4d d3 44 4d d5 64
>01b670		4d d7 84 4d d9 a4 4d db		.text $4D,$D7,$84,$4D,$D9,$A4,$4D,$DB,$C4,$4D,$DD,$E4,$4D,$DF,$04,$4E,$E1,$24,$4E,$E3,$44,$4E,$E5,$64,$4E,$E7,$84,$4E,$E9,$A4,$4E,$EB
>01b678		c4 4d dd e4 4d df 04 4e e1 24 4e e3 44 4e e5 64
>01b688		4e e7 84 4e e9 a4 4e eb
>01b690		c4 4e ed e4 4e ef 04 4f		.text $C4,$4E,$ED,$E4,$4E,$EF,$04,$4F,$F1,$24,$4F,$F3,$44,$4F,$F5,$64,$4F,$F7,$84,$4F,$F9,$A4,$4F,$FB,$C4,$4F,$FD,$E4,$4F,$FF,$04,$50
>01b698		f1 24 4f f3 44 4f f5 64 4f f7 84 4f f9 a4 4f fb
>01b6a8		c4 4f fd e4 4f ff 04 50
>01b6b0		01 25 50 03 45 50 05 65		.text $01,$25,$50,$03,$45,$50,$05,$65,$50,$07,$85,$50,$09,$A5,$50,$0B,$C5,$50,$0D,$E5,$50,$0F,$05,$51,$11,$25,$51,$13,$45,$51,$15,$65
>01b6b8		50 07 85 50 09 a5 50 0b c5 50 0d e5 50 0f 05 51
>01b6c8		11 25 51 13 45 51 15 65
>01b6d0		51 17 85 51 19 a5 51 1b		.text $51,$17,$85,$51,$19,$A5,$51,$1B,$C5,$51,$1D,$E5,$51,$1F,$05,$52,$21,$25,$52,$23,$45,$52,$25,$65,$52,$27,$85,$52,$29,$A5,$52,$2B
>01b6d8		c5 51 1d e5 51 1f 05 52 21 25 52 23 45 52 25 65
>01b6e8		52 27 85 52 29 a5 52 2b
>01b6f0		c5 52 2d e5 52 2f 05 53		.text $C5,$52,$2D,$E5,$52,$2F,$05,$53,$31,$25,$53,$33,$45,$53,$35,$65,$53,$37,$85,$53,$39,$A5,$53,$3B,$C5,$53,$3D,$E5,$53,$3F,$05,$54
>01b6f8		31 25 53 33 45 53 35 65 53 37 85 53 39 a5 53 3b
>01b708		c5 53 3d e5 53 3f 05 54
>01b710		41 25 54 43 45 54 45 65		.text $41,$25,$54,$43,$45,$54,$45,$65,$54,$47,$85,$54,$49,$A5,$54,$4B,$C5,$54,$4D,$E5,$54,$4F,$05,$55,$51,$25,$55,$53,$45,$55,$55,$65
>01b718		54 47 85 54 49 a5 54 4b c5 54 4d e5 54 4f 05 55
>01b728		51 25 55 53 45 55 55 65
>01b730		55 57 85 55 59 a5 55 5b		.text $55,$57,$85,$55,$59,$A5,$55,$5B,$C5,$55,$5D,$E5,$55,$5F,$05,$56,$61,$25,$56,$63,$45,$56,$65,$65,$56,$67,$85,$56,$69,$A5,$56,$6B
>01b738		c5 55 5d e5 55 5f 05 56 61 25 56 63 45 56 65 65
>01b748		56 67 85 56 69 a5 56 6b
>01b750		c5 56 6d e5 56 6f 05 57		.text $C5,$56,$6D,$E5,$56,$6F,$05,$57,$71,$25,$57,$73,$45,$57,$75,$65,$57,$77,$85,$57,$79,$A5,$57,$7B,$C5,$57,$7D,$E5,$57,$7F,$05,$58
>01b758		71 25 57 73 45 57 75 65 57 77 85 57 79 a5 57 7b
>01b768		c5 57 7d e5 57 7f 05 58
>01b770		81 25 58 83 45 58 85 65		.text $81,$25,$58,$83,$45,$58,$85,$65,$58,$87,$85,$58,$89,$A5,$58,$8B,$C5,$58,$8D,$E5,$58,$8F,$05,$59,$91,$25,$59,$93,$45,$59,$95,$65
>01b778		58 87 85 58 89 a5 58 8b c5 58 8d e5 58 8f 05 59
>01b788		91 25 59 93 45 59 95 65
>01b790		59 97 85 59 99 a5 59 9b		.text $59,$97,$85,$59,$99,$A5,$59,$9B,$C5,$59,$9D,$E5,$59,$9F,$05,$5A,$A1,$25,$5A,$A3,$45,$5A,$A5,$65,$5A,$A7,$85,$5A,$A9,$A5,$5A,$AB
>01b798		c5 59 9d e5 59 9f 05 5a a1 25 5a a3 45 5a a5 65
>01b7a8		5a a7 85 5a a9 a5 5a ab
>01b7b0		c5 5a ad e5 5a af 05 5b		.text $C5,$5A,$AD,$E5,$5A,$AF,$05,$5B,$B1,$25,$5B,$B3,$45,$5B,$B5,$65,$5B,$B7,$85,$5B,$B9,$A5,$5B,$BB,$C5,$5B,$BD,$E5,$5B,$BF,$05,$5C
>01b7b8		b1 25 5b b3 45 5b b5 65 5b b7 85 5b b9 a5 5b bb
>01b7c8		c5 5b bd e5 5b bf 05 5c
>01b7d0		c1 25 5c c3 45 5c c5 65		.text $C1,$25,$5C,$C3,$45,$5C,$C5,$65,$5C,$C7,$85,$5C,$C9,$A5,$5C,$CB,$C5,$5C,$CD,$E5,$5C,$CF,$05,$5D,$D1,$25,$5D,$D3,$45,$5D,$D5,$65
>01b7d8		5c c7 85 5c c9 a5 5c cb c5 5c cd e5 5c cf 05 5d
>01b7e8		d1 25 5d d3 45 5d d5 65
>01b7f0		5d d7 85 5d d9 a5 5d db		.text $5D,$D7,$85,$5D,$D9,$A5,$5D,$DB,$C5,$5D,$DD,$E5,$5D,$DF,$05,$5E,$E1,$25,$5E,$E3,$45,$5E,$E5,$65,$5E,$E7,$85,$5E,$E9,$A5,$5E,$EB
>01b7f8		c5 5d dd e5 5d df 05 5e e1 25 5e e3 45 5e e5 65
>01b808		5e e7 85 5e e9 a5 5e eb
>01b810		c5 5e ed e5 5e ef 05 5f		.text $C5,$5E,$ED,$E5,$5E,$EF,$05,$5F,$F1,$25,$5F,$F3,$45,$5F,$F5,$65,$5F,$F7,$85,$5F,$F9,$A5,$5F,$FB,$C5,$5F,$FD,$E5,$5F,$FF,$05,$60
>01b818		f1 25 5f f3 45 5f f5 65 5f f7 85 5f f9 a5 5f fb
>01b828		c5 5f fd e5 5f ff 05 60
>01b830		01 26 60 03 46 60 05 66		.text $01,$26,$60,$03,$46,$60,$05,$66,$60,$07,$86,$60,$09,$A6,$60,$0B,$C6,$60,$0D,$E6,$60,$0F,$06,$61,$11,$26,$61,$13,$46,$61,$15,$66
>01b838		60 07 86 60 09 a6 60 0b c6 60 0d e6 60 0f 06 61
>01b848		11 26 61 13 46 61 15 66
>01b850		61 17 86 61 19 a6 61 1b		.text $61,$17,$86,$61,$19,$A6,$61,$1B,$C6,$61,$1D,$E6,$61,$1F,$06,$62,$FF,$2F,$62,$23,$46,$62,$25,$66,$62,$27,$86,$62,$29,$A6,$62,$2B
>01b858		c6 61 1d e6 61 1f 06 62 ff 2f 62 23 46 62 25 66
>01b868		62 27 86 62 29 a6 62 2b
>01b870		c6 62 2d e6 62 2f 06 63		.text $C6,$62,$2D,$E6,$62,$2F,$06,$63,$31,$26,$63,$33,$46,$63,$35,$66,$63,$37,$86,$63,$39,$A6,$63,$3B,$C6,$63,$3D,$E6,$63,$3F,$06,$64
>01b878		31 26 63 33 46 63 35 66 63 37 86 63 39 a6 63 3b
>01b888		c6 63 3d e6 63 3f 06 64
>01b890		41 26 64 43 46 64 45 66		.text $41,$26,$64,$43,$46,$64,$45,$66,$64,$47,$86,$64,$49,$A6,$64,$4B,$C6,$64,$4D,$E6,$64,$4F,$06,$65,$51,$26,$65,$53,$46,$65,$55,$66
>01b898		64 47 86 64 49 a6 64 4b c6 64 4d e6 64 4f 06 65
>01b8a8		51 26 65 53 46 65 55 66
>01b8b0		65 57 86 65 59 a6 65 5b		.text $65,$57,$86,$65,$59,$A6,$65,$5B,$C6,$65,$5D,$E6,$65,$5F,$06,$66,$61,$26,$66,$63,$46,$66,$65,$66,$66,$67,$86,$66,$69,$A6,$66,$6B
>01b8b8		c6 65 5d e6 65 5f 06 66 61 26 66 63 46 66 65 66
>01b8c8		66 67 86 66 69 a6 66 6b
>01b8d0		c6 66 6d e6 66 6f 06 67		.text $C6,$66,$6D,$E6,$66,$6F,$06,$67,$71,$26,$67,$73,$46,$67,$75,$66,$67,$77,$86,$67,$79,$A6,$67,$7B,$C6,$67,$7D,$E6,$67,$7F,$06,$68
>01b8d8		71 26 67 73 46 67 75 66 67 77 86 67 79 a6 67 7b
>01b8e8		c6 67 7d e6 67 7f 06 68
>01b8f0		81 26 68 83 46 68 85 66		.text $81,$26,$68,$83,$46,$68,$85,$66,$68,$87,$86,$68,$89,$A6,$68,$8B,$C6,$68,$8D,$E6,$68,$8F,$06,$69,$91,$26,$69,$93,$46,$69,$95,$66
>01b8f8		68 87 86 68 89 a6 68 8b c6 68 8d e6 68 8f 06 69
>01b908		91 26 69 93 46 69 95 66
>01b910		69 97 86 69 99 a6 69 9b		.text $69,$97,$86,$69,$99,$A6,$69,$9B,$C6,$69,$9D,$E6,$69,$9F,$06,$6A,$A1,$26,$6A,$A3,$46,$6A,$A5,$66,$6A,$A7,$86,$6A,$A9,$A6,$6A,$AB
>01b918		c6 69 9d e6 69 9f 06 6a a1 26 6a a3 46 6a a5 66
>01b928		6a a7 86 6a a9 a6 6a ab
>01b930		c6 6a ad e6 6a af 06 6b		.text $C6,$6A,$AD,$E6,$6A,$AF,$06,$6B,$B1,$26,$6B,$B3,$46,$6B,$B5,$66,$6B,$B7,$86,$6B,$B9,$A6,$6B,$BB,$C6,$6B,$BD,$E6,$6B,$BF,$06,$6C
>01b938		b1 26 6b b3 46 6b b5 66 6b b7 86 6b b9 a6 6b bb
>01b948		c6 6b bd e6 6b bf 06 6c
>01b950		c1 26 6c c3 46 6c c5 66		.text $C1,$26,$6C,$C3,$46,$6C,$C5,$66,$6C,$C7,$86,$6C,$C9,$A6,$6C,$CB,$C6,$6C,$CD,$E6,$6C,$CF,$06,$6D,$D1,$26,$6D,$D3,$46,$6D,$D5,$66
>01b958		6c c7 86 6c c9 a6 6c cb c6 6c cd e6 6c cf 06 6d
>01b968		d1 26 6d d3 46 6d d5 66
>01b970		6d d7 86 6d d9 a6 6d db		.text $6D,$D7,$86,$6D,$D9,$A6,$6D,$DB,$C6,$6D,$DD,$E6,$6D,$DF,$06,$6E,$E1,$26,$6E,$E3,$46,$6E,$E5,$66,$6E,$E7,$86,$6E,$E9,$A6,$6E,$EB
>01b978		c6 6d dd e6 6d df 06 6e e1 26 6e e3 46 6e e5 66
>01b988		6e e7 86 6e e9 a6 6e eb
>01b990		c6 6e ed e6 6e ef 06 6f		.text $C6,$6E,$ED,$E6,$6E,$EF,$06,$6F,$F1,$26,$6F,$F3,$46,$6F,$F5,$66,$6F,$F7,$86,$6F,$F9,$A6,$6F,$FB,$C6,$6F,$FD,$E6,$6F,$FF,$06,$70
>01b998		f1 26 6f f3 46 6f f5 66 6f f7 86 6f f9 a6 6f fb
>01b9a8		c6 6f fd e6 6f ff 06 70
>01b9b0		01 27 70 03 47 70 05 67		.text $01,$27,$70,$03,$47,$70,$05,$67,$70,$07,$87,$70,$09,$A7,$70,$0B,$C7,$70,$0D,$E7,$70,$0F,$07,$71,$11,$27,$71,$13,$F7,$FF,$15,$67
>01b9b8		70 07 87 70 09 a7 70 0b c7 70 0d e7 70 0f 07 71
>01b9c8		11 27 71 13 f7 ff 15 67
>01b9d0		71 17 87 71 19 a7 71 1b		.text $71,$17,$87,$71,$19,$A7,$71,$1B,$C7,$71,$1D,$E7,$71,$1F,$07,$72,$21,$27,$72,$23,$47,$72,$25,$67,$72,$27,$87,$72,$29,$A7,$72,$2B
>01b9d8		c7 71 1d e7 71 1f 07 72 21 27 72 23 47 72 25 67
>01b9e8		72 27 87 72 29 a7 72 2b
>01b9f0		c7 72 2d e7 72 2f 07 73		.text $C7,$72,$2D,$E7,$72,$2F,$07,$73,$31,$27,$73,$33,$47,$73,$35,$67,$73,$37,$87,$73,$39,$A7,$73,$3B,$C7,$73,$3D,$E7,$73,$3F,$07,$74
>01b9f8		31 27 73 33 47 73 35 67 73 37 87 73 39 a7 73 3b
>01ba08		c7 73 3d e7 73 3f 07 74
>01ba10		41 27 74 43 47 74 45 67		.text $41,$27,$74,$43,$47,$74,$45,$67,$74,$47,$87,$74,$49,$A7,$74,$4B,$C7,$74,$4D,$E7,$74,$4F,$07,$75,$51,$27,$75,$53,$47,$75,$55,$67
>01ba18		74 47 87 74 49 a7 74 4b c7 74 4d e7 74 4f 07 75
>01ba28		51 27 75 53 47 75 55 67
>01ba30		75 57 87 75 59 a7 75 5b		.text $75,$57,$87,$75,$59,$A7,$75,$5B,$C7,$75,$5D,$E7,$75,$5F,$07,$76,$61,$27,$76,$63,$47,$76,$65,$67,$76,$67,$87,$76,$69,$A7,$76,$6B
>01ba38		c7 75 5d e7 75 5f 07 76 61 27 76 63 47 76 65 67
>01ba48		76 67 87 76 69 a7 76 6b
>01ba50		c7 76 6d e7 76 6f 07 77		.text $C7,$76,$6D,$E7,$76,$6F,$07,$77,$71,$27,$77,$73,$47,$77,$75,$67,$77,$77,$87,$77,$79,$A7,$77,$7B,$C7,$77,$7D,$E7,$77,$7F,$07,$78
>01ba58		71 27 77 73 47 77 75 67 77 77 87 77 79 a7 77 7b
>01ba68		c7 77 7d e7 77 7f 07 78
>01ba70		81 27 78 83 47 78 85 67		.text $81,$27,$78,$83,$47,$78,$85,$67,$78,$87,$87,$78,$89,$A7,$78,$8B,$C7,$78,$8D,$E7,$78,$8F,$07,$79,$91,$27,$79,$93,$47,$79,$95,$67
>01ba78		78 87 87 78 89 a7 78 8b c7 78 8d e7 78 8f 07 79
>01ba88		91 27 79 93 47 79 95 67
>01ba90		79 97 87 79 99 a7 79 9b		.text $79,$97,$87,$79,$99,$A7,$79,$9B,$C7,$79,$9D,$E7,$79,$9F,$07,$7A,$A1,$27,$7A,$A3,$47,$7A,$A5,$67,$7A,$A7,$87,$7A,$A9,$A7,$7A,$AB
>01ba98		c7 79 9d e7 79 9f 07 7a a1 27 7a a3 47 7a a5 67
>01baa8		7a a7 87 7a a9 a7 7a ab
>01bab0		c7 7a ad e7 7a af 07 7b		.text $C7,$7A,$AD,$E7,$7A,$AF,$07,$7B,$B1,$27,$7B,$B3,$47,$7B,$B5,$67,$7B,$B7,$87,$7B,$B9,$A7,$7B,$BB,$C7,$7B,$BD,$E7,$7B,$BF,$07,$7C
>01bab8		b1 27 7b b3 47 7b b5 67 7b b7 87 7b b9 a7 7b bb
>01bac8		c7 7b bd e7 7b bf 07 7c
>01bad0		c1 27 7c c3 47 7c c5 67		.text $C1,$27,$7C,$C3,$47,$7C,$C5,$67,$7C,$C7,$87,$7C,$C9,$A7,$7C,$CB,$C7,$7C,$CD,$E7,$7C,$CF,$07,$7D,$D1,$27,$7D,$D3,$47,$7D,$D5,$67
>01bad8		7c c7 87 7c c9 a7 7c cb c7 7c cd e7 7c cf 07 7d
>01bae8		d1 27 7d d3 47 7d d5 67
>01baf0		7d d7 87 7d d9 a7 7d db		.text $7D,$D7,$87,$7D,$D9,$A7,$7D,$DB,$C7,$7D,$DD,$E7,$7D,$DF,$07,$7E,$E1,$27,$7E,$E3,$47,$7E,$E5,$67,$7E,$E7,$87,$7E,$E9,$A7,$7E,$EB
>01baf8		c7 7d dd e7 7d df 07 7e e1 27 7e e3 47 7e e5 67
>01bb08		7e e7 87 7e e9 a7 7e eb
>01bb10		c7 7e ed f7 ff ef 07 7f		.text $C7,$7E,$ED,$F7,$FF,$EF,$07,$7F,$F1,$27,$7F,$F3,$47,$7F,$F5,$67,$7F,$F7,$87,$7F,$F9,$A7,$7F,$FB,$C7,$7F,$FD,$E7,$7F,$FF,$07,$80
>01bb18		f1 27 7f f3 47 7f f5 67 7f f7 87 7f f9 a7 7f fb
>01bb28		c7 7f fd e7 7f ff 07 80
>01bb30		01 28 80 03 48 80 05 68		.text $01,$28,$80,$03,$48,$80,$05,$68,$80,$07,$88,$80,$09,$A8,$80,$0B,$C8,$80,$0D,$E8,$80,$0F,$08,$81,$11,$28,$81,$13,$48,$81,$15,$68
>01bb38		80 07 88 80 09 a8 80 0b c8 80 0d e8 80 0f 08 81
>01bb48		11 28 81 13 48 81 15 68
>01bb50		81 17 88 81 19 a8 81 1b		.text $81,$17,$88,$81,$19,$A8,$81,$1B,$C8,$81,$1D,$E8,$81,$1F,$08,$82,$21,$28,$82,$23,$48,$82,$25,$68,$82,$27,$88,$82,$29,$A8,$82,$2B
>01bb58		c8 81 1d e8 81 1f 08 82 21 28 82 23 48 82 25 68
>01bb68		82 27 88 82 29 a8 82 2b
>01bb70		c8 82 2d e8 82 2f 08 83		.text $C8,$82,$2D,$E8,$82,$2F,$08,$83,$31,$28,$83,$33,$48,$83,$35,$68,$83,$37,$88,$83,$39,$A8,$83,$3B,$C8,$83,$3D,$E8,$83,$3F,$08,$84
>01bb78		31 28 83 33 48 83 35 68 83 37 88 83 39 a8 83 3b
>01bb88		c8 83 3d e8 83 3f 08 84
>01bb90		41 28 84 43 48 84 45 68		.text $41,$28,$84,$43,$48,$84,$45,$68,$84,$47,$88,$84,$49,$A8,$84,$4B,$C8,$84,$4D,$E8,$84,$4F,$08,$85,$51,$28,$85,$53,$48,$85,$55,$68
>01bb98		84 47 88 84 49 a8 84 4b c8 84 4d e8 84 4f 08 85
>01bba8		51 28 85 53 48 85 55 68
>01bbb0		85 57 88 85 59 a8 85 5b		.text $85,$57,$88,$85,$59,$A8,$85,$5B,$C8,$85,$5D,$E8,$85,$5F,$08,$86,$61,$28,$86,$63,$48,$86,$65,$68,$86,$67,$88,$86,$69,$A8,$86,$6B
>01bbb8		c8 85 5d e8 85 5f 08 86 61 28 86 63 48 86 65 68
>01bbc8		86 67 88 86 69 a8 86 6b
>01bbd0		c8 86 6d e8 86 6f 08 87		.text $C8,$86,$6D,$E8,$86,$6F,$08,$87,$71,$28,$87,$73,$48,$87,$75,$68,$87,$77,$88,$87,$79,$A8,$87,$7B,$C8,$87,$7D,$E8,$87,$7F,$08,$88
>01bbd8		71 28 87 73 48 87 75 68 87 77 88 87 79 a8 87 7b
>01bbe8		c8 87 7d e8 87 7f 08 88
>01bbf0		81 28 88 83 48 88 85 68		.text $81,$28,$88,$83,$48,$88,$85,$68,$88,$87,$88,$88,$89,$A8,$88,$8B,$C8,$88,$8D,$E8,$88,$8F,$08,$89,$91,$28,$89,$93,$48,$89,$95,$68
>01bbf8		88 87 88 88 89 a8 88 8b c8 88 8d e8 88 8f 08 89
>01bc08		91 28 89 93 48 89 95 68
>01bc10		89 97 88 89 99 f8 ff 9b		.text $89,$97,$88,$89,$99,$F8,$FF,$9B,$C8,$89,$9D,$E8,$89,$9F,$08,$8A,$A1,$28,$8A,$A3,$48,$8A,$A5,$68,$8A,$A7,$88,$8A,$A9,$A8,$8A,$AB
>01bc18		c8 89 9d e8 89 9f 08 8a a1 28 8a a3 48 8a a5 68
>01bc28		8a a7 88 8a a9 a8 8a ab
>01bc30		c8 8a ad e8 8a af 08 8b		.text $C8,$8A,$AD,$E8,$8A,$AF,$08,$8B,$FF,$2F,$8B,$B3,$48,$8B,$B5,$68,$8B,$B7,$88,$8B,$B9,$A8,$8B,$BB,$C8,$8B,$BD,$E8,$8B,$BF,$08,$8C
>01bc38		ff 2f 8b b3 48 8b b5 68 8b b7 88 8b b9 a8 8b bb
>01bc48		c8 8b bd e8 8b bf 08 8c
>01bc50		c1 28 8c c3 48 8c c5 68		.text $C1,$28,$8C,$C3,$48,$8C,$C5,$68,$8C,$C7,$88,$8C,$C9,$A8,$8C,$CB,$C8,$8C,$CD,$E8,$8C,$CF,$08,$8D,$D1,$28,$8D,$D3,$48,$8D,$D5,$68
>01bc58		8c c7 88 8c c9 a8 8c cb c8 8c cd e8 8c cf 08 8d
>01bc68		d1 28 8d d3 48 8d d5 68
>01bc70		8d d7 88 8d d9 a8 8d db		.text $8D,$D7,$88,$8D,$D9,$A8,$8D,$DB,$C8,$8D,$DD,$E8,$8D,$DF,$08,$8E,$E1,$28,$8E,$E3,$48,$8E,$E5,$68,$8E,$E7,$88,$8E,$E9,$A8,$8E,$EB
>01bc78		c8 8d dd e8 8d df 08 8e e1 28 8e e3 48 8e e5 68
>01bc88		8e e7 88 8e e9 a8 8e eb
>01bc90		c8 8e ed e8 8e ef 08 8f		.text $C8,$8E,$ED,$E8,$8E,$EF,$08,$8F,$F1,$28,$8F,$F3,$48,$8F,$F5,$68,$8F,$F7,$88,$8F,$F9,$A8,$8F,$FB,$C8,$8F,$FD,$E8,$8F,$FF,$08,$90
>01bc98		f1 28 8f f3 48 8f f5 68 8f f7 88 8f f9 a8 8f fb
>01bca8		c8 8f fd e8 8f ff 08 90
>01bcb0		01 29 90 03 49 90 05 69		.text $01,$29,$90,$03,$49,$90,$05,$69,$90,$07,$89,$90,$09,$A9,$90,$0B,$C9,$90,$0D,$E9,$90,$0F,$09,$91,$11,$29,$91,$FF,$4F,$91,$15,$69
>01bcb8		90 07 89 90 09 a9 90 0b c9 90 0d e9 90 0f 09 91
>01bcc8		11 29 91 ff 4f 91 15 69
>01bcd0		91 17 89 91 19 a9 91 1b		.text $91,$17,$89,$91,$19,$A9,$91,$1B,$C9,$91,$1D,$E9,$91,$1F,$09,$92,$21,$29,$92,$23,$49,$92,$25,$69,$92,$27,$89,$92,$29,$A9,$92,$2B
>01bcd8		c9 91 1d e9 91 1f 09 92 21 29 92 23 49 92 25 69
>01bce8		92 27 89 92 29 a9 92 2b
>01bcf0		c9 92 2d e9 92 2f 09 93		.text $C9,$92,$2D,$E9,$92,$2F,$09,$93,$31,$29,$93,$33,$49,$93,$35,$69,$93,$37,$89,$93,$39,$F9,$FF,$3B,$C9,$93,$3D,$E9,$93,$3F,$09,$94
>01bcf8		31 29 93 33 49 93 35 69 93 37 89 93 39 f9 ff 3b
>01bd08		c9 93 3d e9 93 3f 09 94
>01bd10		41 29 94 43 49 94 45 69		.text $41,$29,$94,$43,$49,$94,$45,$69,$94,$47,$89,$94,$49,$A9,$94,$4B,$C9,$94,$4D,$E9,$94,$4F,$F9,$FF,$51,$29,$95,$53,$49,$95,$55,$69
>01bd18		94 47 89 94 49 a9 94 4b c9 94 4d e9 94 4f f9 ff
>01bd28		51 29 95 53 49 95 55 69
>01bd30		95 57 89 95 ff af 95 5b		.text $95,$57,$89,$95,$FF,$AF,$95,$5B,$C9,$95,$5D,$F9,$FF,$5F,$09,$96,$61,$29,$96,$63,$49,$96,$65,$69,$96,$67,$89,$96,$69,$A9,$96,$6B
>01bd38		c9 95 5d f9 ff 5f 09 96 61 29 96 63 49 96 65 69
>01bd48		96 67 89 96 69 a9 96 6b
>01bd50		c9 96 6d e9 96 6f 09 97		.text $C9,$96,$6D,$E9,$96,$6F,$09,$97,$71,$29,$97,$73,$49,$97,$75,$69,$97,$77,$89,$97,$79,$A9,$97,$FF,$CF,$97,$7D,$E9,$97,$7F,$09,$98
>01bd58		71 29 97 73 49 97 75 69 97 77 89 97 79 a9 97 ff
>01bd68		cf 97 7d e9 97 7f 09 98
>01bd70		81 29 98 83 49 98 85 69		.text $81,$29,$98,$83,$49,$98,$85,$69,$98,$87,$89,$98,$FF,$AF,$98,$8B,$C9,$98,$8D,$E9,$98,$8F,$09,$99,$91,$29,$99,$93,$49,$99,$95,$69
>01bd78		98 87 89 98 ff af 98 8b c9 98 8d e9 98 8f 09 99
>01bd88		91 29 99 93 49 99 95 69
>01bd90		99 ff 8f 99 99 a9 99 ff		.text $99,$FF,$8F,$99,$99,$A9,$99,$FF,$FF,$FF,$9D,$E9,$99,$9F,$09,$9A,$A1,$29,$9A,$A3,$49,$9A,$A5,$69,$9A,$A7,$89,$9A,$A9,$A9,$9A,$AB
>01bd98		ff ff 9d e9 99 9f 09 9a a1 29 9a a3 49 9a a5 69
>01bda8		9a a7 89 9a a9 a9 9a ab
>01bdb0		c9 9a ad e9 9a af 09 9b		.text $C9,$9A,$AD,$E9,$9A,$AF,$09,$9B,$B1,$29,$9B,$B3,$49,$9B,$B5,$69,$9B,$B7,$89,$9B,$B9,$A9,$9B,$BB,$C9,$9B,$BD,$E9,$9B,$BF,$09,$9C
>01bdb8		b1 29 9b b3 49 9b b5 69 9b b7 89 9b b9 a9 9b bb
>01bdc8		c9 9b bd e9 9b bf 09 9c
>01bdd0		c1 29 9c c3 49 9c c5 69		.text $C1,$29,$9C,$C3,$49,$9C,$C5,$69,$9C,$C7,$89,$9C,$C9,$A9,$9C,$CB,$C9,$9C,$CD,$E9,$9C,$CF,$09,$9D,$FF,$2F,$9D,$D3,$49,$9D,$D5,$69
>01bdd8		9c c7 89 9c c9 a9 9c cb c9 9c cd e9 9c cf 09 9d
>01bde8		ff 2f 9d d3 49 9d d5 69
>01bdf0		9d d7 89 9d d9 a9 9d db		.text $9D,$D7,$89,$9D,$D9,$A9,$9D,$DB,$C9,$9D,$DD,$E9,$9D,$DF,$09,$9E,$E1,$29,$9E,$E3,$49,$9E,$E5,$69,$9E,$E7,$89,$9E,$E9,$A9,$9E,$EB
>01bdf8		c9 9d dd e9 9d df 09 9e e1 29 9e e3 49 9e e5 69
>01be08		9e e7 89 9e e9 a9 9e eb
>01be10		c9 9e ed e9 9e ef 09 9f		.text $C9,$9E,$ED,$E9,$9E,$EF,$09,$9F,$F1,$29,$9F,$F3,$49,$9F,$F5,$69,$9F,$F7,$89,$9F,$F9,$A9,$9F,$FB,$C9,$9F,$FD,$E9,$9F,$FF,$09,$A0
>01be18		f1 29 9f f3 49 9f f5 69 9f f7 89 9f f9 a9 9f fb
>01be28		c9 9f fd e9 9f ff 09 a0
>01be30		01 2a a0 03 4a a0 05 6a		.text $01,$2A,$A0,$03,$4A,$A0,$05,$6A,$A0,$07,$8A,$A0,$09,$AA,$A0,$0B,$CA,$A0,$0D,$EA,$A0,$0F,$0A,$A1,$11,$2A,$A1,$13,$4A,$A1,$FF,$6F
>01be38		a0 07 8a a0 09 aa a0 0b ca a0 0d ea a0 0f 0a a1
>01be48		11 2a a1 13 4a a1 ff 6f
>01be50		a1 17 8a a1 19 aa a1 1b		.text $A1,$17,$8A,$A1,$19,$AA,$A1,$1B,$CA,$A1,$1D,$EA,$A1,$1F,$0A,$A2,$21,$2A,$A2,$23,$4A,$A2,$25,$6A,$A2,$27,$8A,$A2,$29,$AA,$A2,$2B
>01be58		ca a1 1d ea a1 1f 0a a2 21 2a a2 23 4a a2 25 6a
>01be68		a2 27 8a a2 29 aa a2 2b
>01be70		fa ff 2d ea a2 2f 0a a3		.text $FA,$FF,$2D,$EA,$A2,$2F,$0A,$A3,$31,$2A,$A3,$33,$4A,$A3,$35,$6A,$A3,$37,$8A,$A3,$39,$AA,$A3,$3B,$CA,$A3,$3D,$EA,$A3,$3F,$0A,$A4
>01be78		31 2a a3 33 4a a3 35 6a a3 37 8a a3 39 aa a3 3b
>01be88		ca a3 3d ea a3 3f 0a a4
>01be90		41 2a a4 43 4a a4 45 6a		.text $41,$2A,$A4,$43,$4A,$A4,$45,$6A,$A4,$47,$8A,$A4,$49,$AA,$A4,$4B,$CA,$A4,$4D,$EA,$A4,$4F,$0A,$A5,$51,$2A,$A5,$FF,$4F,$A5,$55,$6A
>01be98		a4 47 8a a4 49 aa a4 4b ca a4 4d ea a4 4f 0a a5
>01bea8		51 2a a5 ff 4f a5 55 6a
>01beb0		a5 57 8a a5 59 aa a5 5b		.text $A5,$57,$8A,$A5,$59,$AA,$A5,$5B,$CA,$A5,$5D,$EA,$A5,$5F,$FA,$FF,$61,$2A,$A6,$63,$4A,$A6,$65,$6A,$A6,$67,$8A,$A6,$69,$AA,$A6,$6B
>01beb8		ca a5 5d ea a5 5f fa ff 61 2a a6 63 4a a6 65 6a
>01bec8		a6 67 8a a6 69 aa a6 6b
>01bed0		ca a6 6d ea a6 6f 0a a7		.text $CA,$A6,$6D,$EA,$A6,$6F,$0A,$A7,$71,$2A,$A7,$73,$4A,$A7,$75,$6A,$A7,$77,$8A,$A7,$79,$AA,$A7,$7B,$CA,$A7,$7D,$EA,$A7,$7F,$0A,$A8
>01bed8		71 2a a7 73 4a a7 75 6a a7 77 8a a7 79 aa a7 7b
>01bee8		ca a7 7d ea a7 7f 0a a8
>01bef0		81 2a a8 83 4a a8 85 6a		.text $81,$2A,$A8,$83,$4A,$A8,$85,$6A,$A8,$87,$8A,$A8,$89,$AA,$A8,$8B,$CA,$A8,$8D,$EA,$A8,$8F,$0A,$A9,$91,$2A,$A9,$93,$4A,$A9,$95,$6A
>01bef8		a8 87 8a a8 89 aa a8 8b ca a8 8d ea a8 8f 0a a9
>01bf08		91 2a a9 93 4a a9 95 6a
>01bf10		a9 97 8a a9 99 aa a9 9b		.text $A9,$97,$8A,$A9,$99,$AA,$A9,$9B,$CA,$A9,$9D,$EA,$A9,$9F,$0A,$AA,$A1,$2A,$AA,$A3,$4A,$AA,$A5,$6A,$AA,$A7,$8A,$AA,$A9,$AA,$AA,$AB
>01bf18		ca a9 9d ea a9 9f 0a aa a1 2a aa a3 4a aa a5 6a
>01bf28		aa a7 8a aa a9 aa aa ab
>01bf30		ca aa ad ea aa af 0a ab		.text $CA,$AA,$AD,$EA,$AA,$AF,$0A,$AB,$B1,$2A,$AB,$B3,$4A,$AB,$B5,$6A,$AB,$B7,$8A,$AB,$B9,$AA,$AB,$BB,$CA,$AB,$BD,$EA,$AB,$BF,$0A,$AC
>01bf38		b1 2a ab b3 4a ab b5 6a ab b7 8a ab b9 aa ab bb
>01bf48		ca ab bd ea ab bf 0a ac
>01bf50		c1 2a ac c3 4a ac c5 6a		.text $C1,$2A,$AC,$C3,$4A,$AC,$C5,$6A,$AC,$C7,$8A,$AC,$C9,$AA,$AC,$CB,$CA,$AC,$CD,$EA,$AC,$CF,$0A,$AD,$D1,$2A,$AD,$D3,$4A,$AD,$D5,$6A
>01bf58		ac c7 8a ac c9 aa ac cb ca ac cd ea ac cf 0a ad
>01bf68		d1 2a ad d3 4a ad d5 6a
>01bf70		ad d7 8a ad d9 aa ad db		.text $AD,$D7,$8A,$AD,$D9,$AA,$AD,$DB,$CA,$AD,$DD,$EA,$AD,$DF,$0A,$AE,$E1,$2A,$AE,$E3,$4A,$AE,$E5,$6A,$AE,$E7,$8A,$AE,$E9,$AA,$AE,$EB
>01bf78		ca ad dd ea ad df 0a ae e1 2a ae e3 4a ae e5 6a
>01bf88		ae e7 8a ae e9 aa ae eb
>01bf90		ca ae ed ea ae ef 0a af		.text $CA,$AE,$ED,$EA,$AE,$EF,$0A,$AF,$F1,$2A,$AF,$F3,$4A,$AF,$F5,$6A,$AF,$F7,$8A,$AF,$F9,$AA,$AF,$FB,$CA,$AF,$FD,$EA,$AF,$FF,$0A,$B0
>01bf98		f1 2a af f3 4a af f5 6a af f7 8a af f9 aa af fb
>01bfa8		ca af fd ea af ff 0a b0
>01bfb0		01 2b b0 03 4b b0 05 6b		.text $01,$2B,$B0,$03,$4B,$B0,$05,$6B,$B0,$07,$FB,$FF,$09,$AB,$B0,$0B,$CB,$B0,$0D,$EB,$B0,$0F,$0B,$B1,$FF,$0F,$00,$00,$00,$00,$00,$00
>01bfb8		b0 07 fb ff 09 ab b0 0b cb b0 0d eb b0 0f 0b b1
>01bfc8		ff 0f 00 00 00 00 00 00
>01bfd0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01bfd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01bfe8		00 00 00 00 00 00 00 00
>01bff0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01bff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c008		00 00 00 00 00 00 00 00
>01c010		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c028		00 00 00 00 00 00 00 00
>01c030		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c048		00 00 00 00 00 00 00 00
>01c050		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c068		00 00 00 00 00 00 00 00
>01c070		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c088		00 00 00 00 00 00 00 00
>01c090		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c0a8		00 00 00 00 00 00 00 00
>01c0b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c0c8		00 00 00 00 00 00 00 00
>01c0d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c0e8		00 00 00 00 00 00 00 00
>01c0f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c108		00 00 00 00 00 00 00 00
>01c110		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c128		00 00 00 00 00 00 00 00
>01c130		f0 ff ff 03 40 00 05 60		.text $F0,$FF,$FF,$03,$40,$00,$05,$60,$00,$07,$80,$00,$09,$A0,$00,$0B,$C0,$00,$0D,$E0,$00,$0F,$00,$01,$11,$20,$01,$13,$40,$01,$15,$60
>01c138		00 07 80 00 09 a0 00 0b c0 00 0d e0 00 0f 00 01
>01c148		11 20 01 13 40 01 15 60
>01c150		01 17 80 01 19 a0 01 1b		.text $01,$17,$80,$01,$19,$A0,$01,$1B,$C0,$01,$1D,$E0,$01,$1F,$00,$02,$21,$20,$02,$23,$40,$02,$25,$60,$02,$27,$80,$02,$29,$A0,$02,$2B
>01c158		c0 01 1d e0 01 1f 00 02 21 20 02 23 40 02 25 60
>01c168		02 27 80 02 29 a0 02 2b
>01c170		c0 02 2d e0 02 2f 00 03		.text $C0,$02,$2D,$E0,$02,$2F,$00,$03,$31,$20,$03,$33,$40,$03,$35,$60,$03,$37,$80,$03,$39,$A0,$03,$3B,$C0,$03,$3D,$E0,$03,$3F,$00,$04
>01c178		31 20 03 33 40 03 35 60 03 37 80 03 39 a0 03 3b
>01c188		c0 03 3d e0 03 3f 00 04
>01c190		41 20 04 43 40 04 45 60		.text $41,$20,$04,$43,$40,$04,$45,$60,$04,$47,$80,$04,$49,$A0,$04,$4B,$C0,$04,$4D,$E0,$04,$4F,$00,$05,$51,$F0,$FF,$53,$40,$05,$55,$60
>01c198		04 47 80 04 49 a0 04 4b c0 04 4d e0 04 4f 00 05
>01c1a8		51 f0 ff 53 40 05 55 60
>01c1b0		05 57 80 05 59 a0 05 5b		.text $05,$57,$80,$05,$59,$A0,$05,$5B,$C0,$05,$5D,$E0,$05,$5F,$00,$06,$61,$20,$06,$63,$40,$06,$65,$60,$06,$67,$80,$06,$69,$A0,$06,$6B
>01c1b8		c0 05 5d e0 05 5f 00 06 61 20 06 63 40 06 65 60
>01c1c8		06 67 80 06 69 a0 06 6b
>01c1d0		c0 06 6d e0 06 6f 00 07		.text $C0,$06,$6D,$E0,$06,$6F,$00,$07,$71,$20,$07,$73,$40,$07,$75,$60,$07,$77,$80,$07,$79,$A0,$07,$7B,$C0,$07,$7D,$E0,$07,$7F,$00,$08
>01c1d8		71 20 07 73 40 07 75 60 07 77 80 07 79 a0 07 7b
>01c1e8		c0 07 7d e0 07 7f 00 08
>01c1f0		81 20 08 83 40 08 85 60		.text $81,$20,$08,$83,$40,$08,$85,$60,$08,$87,$80,$08,$89,$A0,$08,$8B,$C0,$08,$8D,$E0,$08,$8F,$00,$09,$91,$20,$09,$93,$40,$09,$95,$60
>01c1f8		08 87 80 08 89 a0 08 8b c0 08 8d e0 08 8f 00 09
>01c208		91 20 09 93 40 09 95 60
>01c210		09 97 80 09 99 a0 09 9b		.text $09,$97,$80,$09,$99,$A0,$09,$9B,$C0,$09,$FF,$EF,$09,$9F,$00,$0A,$A1,$20,$0A,$A3,$40,$0A,$A5,$60,$0A,$A7,$80,$0A,$A9,$A0,$0A,$AB
>01c218		c0 09 ff ef 09 9f 00 0a a1 20 0a a3 40 0a a5 60
>01c228		0a a7 80 0a a9 a0 0a ab
>01c230		c0 0a ad e0 0a af 00 0b		.text $C0,$0A,$AD,$E0,$0A,$AF,$00,$0B,$B1,$20,$0B,$B3,$40,$0B,$B5,$60,$0B,$B7,$80,$0B,$B9,$A0,$0B,$BB,$C0,$0B,$BD,$E0,$0B,$BF,$00,$0C
>01c238		b1 20 0b b3 40 0b b5 60 0b b7 80 0b b9 a0 0b bb
>01c248		c0 0b bd e0 0b bf 00 0c
>01c250		c1 20 0c c3 40 0c c5 60		.text $C1,$20,$0C,$C3,$40,$0C,$C5,$60,$0C,$C7,$80,$0C,$C9,$A0,$0C,$CB,$C0,$0C,$CD,$E0,$0C,$CF,$00,$0D,$D1,$20,$0D,$D3,$40,$0D,$D5,$60
>01c258		0c c7 80 0c c9 a0 0c cb c0 0c cd e0 0c cf 00 0d
>01c268		d1 20 0d d3 40 0d d5 60
>01c270		0d d7 80 0d d9 a0 0d db		.text $0D,$D7,$80,$0D,$D9,$A0,$0D,$DB,$C0,$0D,$DD,$E0,$0D,$DF,$00,$0E,$E1,$20,$0E,$E3,$40,$0E,$E5,$60,$0E,$E7,$80,$0E,$E9,$A0,$0E,$EB
>01c278		c0 0d dd e0 0d df 00 0e e1 20 0e e3 40 0e e5 60
>01c288		0e e7 80 0e e9 a0 0e eb
>01c290		c0 0e ed e0 0e ef 00 0f		.text $C0,$0E,$ED,$E0,$0E,$EF,$00,$0F,$F1,$20,$0F,$F3,$40,$0F,$F5,$60,$0F,$F7,$80,$0F,$F9,$A0,$0F,$FB,$C0,$0F,$FD,$E0,$0F,$FF,$00,$10
>01c298		f1 20 0f f3 40 0f f5 60 0f f7 80 0f f9 a0 0f fb
>01c2a8		c0 0f fd e0 0f ff 00 10
>01c2b0		01 21 10 03 41 10 05 61		.text $01,$21,$10,$03,$41,$10,$05,$61,$10,$07,$F1,$FF,$FF,$AF,$10,$0B,$C1,$10,$0D,$E1,$10,$0F,$01,$11,$11,$21,$11,$13,$41,$11,$15,$61
>01c2b8		10 07 f1 ff ff af 10 0b c1 10 0d e1 10 0f 01 11
>01c2c8		11 21 11 13 41 11 15 61
>01c2d0		11 17 81 11 19 a1 11 1b		.text $11,$17,$81,$11,$19,$A1,$11,$1B,$C1,$11,$1D,$E1,$11,$1F,$01,$12,$21,$21,$12,$23,$41,$12,$25,$61,$12,$27,$81,$12,$29,$A1,$12,$2B
>01c2d8		c1 11 1d e1 11 1f 01 12 21 21 12 23 41 12 25 61
>01c2e8		12 27 81 12 29 a1 12 2b
>01c2f0		c1 12 2d e1 12 2f 01 13		.text $C1,$12,$2D,$E1,$12,$2F,$01,$13,$31,$21,$13,$33,$41,$13,$35,$61,$13,$37,$81,$13,$39,$A1,$13,$3B,$C1,$13,$3D,$E1,$13,$3F,$01,$14
>01c2f8		31 21 13 33 41 13 35 61 13 37 81 13 39 a1 13 3b
>01c308		c1 13 3d e1 13 3f 01 14
>01c310		41 21 14 ff 4f 14 45 61		.text $41,$21,$14,$FF,$4F,$14,$45,$61,$14,$47,$81,$14,$49,$A1,$14,$4B,$C1,$14,$4D,$E1,$14,$4F,$01,$15,$51,$21,$15,$53,$41,$15,$55,$61
>01c318		14 47 81 14 49 a1 14 4b c1 14 4d e1 14 4f 01 15
>01c328		51 21 15 53 41 15 55 61
>01c330		15 57 81 15 59 a1 15 5b		.text $15,$57,$81,$15,$59,$A1,$15,$5B,$C1,$15,$5D,$E1,$15,$5F,$01,$16,$61,$21,$16,$63,$41,$16,$65,$61,$16,$67,$81,$16,$69,$A1,$16,$6B
>01c338		c1 15 5d e1 15 5f 01 16 61 21 16 63 41 16 65 61
>01c348		16 67 81 16 69 a1 16 6b
>01c350		c1 16 6d e1 16 6f 01 17		.text $C1,$16,$6D,$E1,$16,$6F,$01,$17,$71,$21,$17,$73,$41,$17,$75,$61,$17,$77,$81,$17,$79,$A1,$17,$7B,$C1,$17,$7D,$E1,$17,$7F,$01,$18
>01c358		71 21 17 73 41 17 75 61 17 77 81 17 79 a1 17 7b
>01c368		c1 17 7d e1 17 7f 01 18
>01c370		81 21 18 83 41 18 85 61		.text $81,$21,$18,$83,$41,$18,$85,$61,$18,$87,$81,$18,$89,$A1,$18,$8B,$C1,$18,$8D,$E1,$18,$8F,$01,$19,$91,$21,$19,$93,$41,$19,$95,$61
>01c378		18 87 81 18 89 a1 18 8b c1 18 8d e1 18 8f 01 19
>01c388		91 21 19 93 41 19 95 61
>01c390		19 97 81 19 99 a1 19 9b		.text $19,$97,$81,$19,$99,$A1,$19,$9B,$C1,$19,$9D,$E1,$19,$9F,$01,$1A,$A1,$21,$1A,$A3,$41,$1A,$A5,$61,$1A,$A7,$81,$1A,$A9,$A1,$1A,$AB
>01c398		c1 19 9d e1 19 9f 01 1a a1 21 1a a3 41 1a a5 61
>01c3a8		1a a7 81 1a a9 a1 1a ab
>01c3b0		c1 1a ad e1 1a af 01 1b		.text $C1,$1A,$AD,$E1,$1A,$AF,$01,$1B,$B1,$21,$1B,$B3,$41,$1B,$B5,$61,$1B,$B7,$81,$1B,$B9,$A1,$1B,$BB,$C1,$1B,$BD,$E1,$1B,$BF,$01,$1C
>01c3b8		b1 21 1b b3 41 1b b5 61 1b b7 81 1b b9 a1 1b bb
>01c3c8		c1 1b bd e1 1b bf 01 1c
>01c3d0		c1 21 1c c3 41 1c ff 6f		.text $C1,$21,$1C,$C3,$41,$1C,$FF,$6F,$1C,$C7,$81,$1C,$FF,$FF,$FF,$CB,$C1,$1C,$CD,$E1,$1C,$CF,$01,$1D,$D1,$21,$1D,$D3,$41,$1D,$D5,$61
>01c3d8		1c c7 81 1c ff ff ff cb c1 1c cd e1 1c cf 01 1d
>01c3e8		d1 21 1d d3 41 1d d5 61
>01c3f0		1d d7 81 1d d9 a1 1d db		.text $1D,$D7,$81,$1D,$D9,$A1,$1D,$DB,$C1,$1D,$DD,$E1,$1D,$DF,$01,$1E,$E1,$21,$1E,$E3,$41,$1E,$E5,$61,$1E,$E7,$81,$1E,$E9,$A1,$1E,$EB
>01c3f8		c1 1d dd e1 1d df 01 1e e1 21 1e e3 41 1e e5 61
>01c408		1e e7 81 1e e9 a1 1e eb
>01c410		c1 1e ed e1 1e ef 01 1f		.text $C1,$1E,$ED,$E1,$1E,$EF,$01,$1F,$F1,$21,$1F,$F3,$41,$1F,$F5,$61,$1F,$FF,$8F,$1F,$F9,$A1,$1F,$FB,$C1,$1F,$FD,$E1,$1F,$FF,$01,$20
>01c418		f1 21 1f f3 41 1f f5 61 1f ff 8f 1f f9 a1 1f fb
>01c428		c1 1f fd e1 1f ff 01 20
>01c430		01 22 20 03 42 20 05 62		.text $01,$22,$20,$03,$42,$20,$05,$62,$20,$07,$82,$20,$09,$A2,$20,$0B,$C2,$20,$0D,$E2,$20,$0F,$02,$21,$11,$22,$21,$13,$42,$21,$15,$F2
>01c438		20 07 82 20 09 a2 20 0b c2 20 0d e2 20 0f 02 21
>01c448		11 22 21 13 42 21 15 f2
>01c450		ff 17 82 21 19 a2 21 1b		.text $FF,$17,$82,$21,$19,$A2,$21,$1B,$C2,$21,$1D,$E2,$21,$1F,$02,$22,$21,$22,$22,$23,$42,$22,$25,$62,$22,$27,$82,$22,$FF,$AF,$22,$2B
>01c458		c2 21 1d e2 21 1f 02 22 21 22 22 23 42 22 25 62
>01c468		22 27 82 22 ff af 22 2b
>01c470		c2 22 2d e2 22 2f 02 23		.text $C2,$22,$2D,$E2,$22,$2F,$02,$23,$31,$22,$23,$33,$42,$23,$35,$62,$23,$37,$82,$23,$39,$A2,$23,$3B,$C2,$23,$3D,$E2,$23,$3F,$02,$24
>01c478		31 22 23 33 42 23 35 62 23 37 82 23 39 a2 23 3b
>01c488		c2 23 3d e2 23 3f 02 24
>01c490		41 22 24 43 42 24 45 62		.text $41,$22,$24,$43,$42,$24,$45,$62,$24,$47,$82,$24,$49,$A2,$24,$4B,$C2,$24,$FF,$EF,$24,$4F,$02,$25,$51,$22,$25,$53,$42,$25,$55,$62
>01c498		24 47 82 24 49 a2 24 4b c2 24 ff ef 24 4f 02 25
>01c4a8		51 22 25 53 42 25 55 62
>01c4b0		25 57 82 25 59 a2 25 5b		.text $25,$57,$82,$25,$59,$A2,$25,$5B,$C2,$25,$5D,$E2,$25,$5F,$02,$26,$61,$22,$26,$63,$42,$26,$65,$62,$26,$67,$82,$26,$69,$A2,$26,$6B
>01c4b8		c2 25 5d e2 25 5f 02 26 61 22 26 63 42 26 65 62
>01c4c8		26 67 82 26 69 a2 26 6b
>01c4d0		c2 26 6d e2 26 6f 02 27		.text $C2,$26,$6D,$E2,$26,$6F,$02,$27,$71,$22,$27,$FF,$4F,$27,$75,$62,$27,$77,$82,$27,$79,$A2,$27,$7B,$C2,$27,$7D,$E2,$27,$7F,$02,$28
>01c4d8		71 22 27 ff 4f 27 75 62 27 77 82 27 79 a2 27 7b
>01c4e8		c2 27 7d e2 27 7f 02 28
>01c4f0		81 22 28 83 42 28 85 62		.text $81,$22,$28,$83,$42,$28,$85,$62,$28,$87,$82,$28,$89,$A2,$28,$8B,$C2,$28,$8D,$E2,$28,$8F,$02,$29,$91,$F2,$FF,$93,$42,$29,$95,$62
>01c4f8		28 87 82 28 89 a2 28 8b c2 28 8d e2 28 8f 02 29
>01c508		91 f2 ff 93 42 29 95 62
>01c510		29 97 82 29 99 a2 29 9b		.text $29,$97,$82,$29,$99,$A2,$29,$9B,$C2,$29,$9D,$E2,$29,$9F,$02,$2A,$A1,$22,$2A,$A3,$42,$2A,$A5,$62,$2A,$A7,$F2,$FF,$A9,$A2,$2A,$AB
>01c518		c2 29 9d e2 29 9f 02 2a a1 22 2a a3 42 2a a5 62
>01c528		2a a7 f2 ff a9 a2 2a ab
>01c530		c2 2a ad e2 2a af 02 2b		.text $C2,$2A,$AD,$E2,$2A,$AF,$02,$2B,$B1,$22,$2B,$B3,$42,$2B,$B5,$62,$2B,$B7,$82,$2B,$B9,$A2,$2B,$BB,$C2,$2B,$BD,$E2,$2B,$BF,$02,$2C
>01c538		b1 22 2b b3 42 2b b5 62 2b b7 82 2b b9 a2 2b bb
>01c548		c2 2b bd e2 2b bf 02 2c
>01c550		c1 22 2c c3 42 2c c5 62		.text $C1,$22,$2C,$C3,$42,$2C,$C5,$62,$2C,$C7,$82,$2C,$C9,$A2,$2C,$CB,$C2,$2C,$CD,$E2,$2C,$CF,$02,$2D,$D1,$22,$2D,$D3,$42,$2D,$D5,$62
>01c558		2c c7 82 2c c9 a2 2c cb c2 2c cd e2 2c cf 02 2d
>01c568		d1 22 2d d3 42 2d d5 62
>01c570		2d d7 82 2d d9 a2 2d db		.text $2D,$D7,$82,$2D,$D9,$A2,$2D,$DB,$C2,$2D,$DD,$E2,$2D,$DF,$02,$2E,$E1,$22,$2E,$E3,$42,$2E,$E5,$62,$2E,$E7,$82,$2E,$E9,$A2,$2E,$EB
>01c578		c2 2d dd e2 2d df 02 2e e1 22 2e e3 42 2e e5 62
>01c588		2e e7 82 2e e9 a2 2e eb
>01c590		c2 2e ed e2 2e ef 02 2f		.text $C2,$2E,$ED,$E2,$2E,$EF,$02,$2F,$F1,$22,$2F,$F3,$42,$2F,$F5,$62,$2F,$F7,$82,$2F,$F9,$A2,$2F,$FB,$C2,$2F,$FD,$E2,$2F,$FF,$02,$30
>01c598		f1 22 2f f3 42 2f f5 62 2f f7 82 2f f9 a2 2f fb
>01c5a8		c2 2f fd e2 2f ff 02 30
>01c5b0		01 23 30 03 43 30 05 63		.text $01,$23,$30,$03,$43,$30,$05,$63,$30,$07,$83,$30,$09,$A3,$30,$0B,$C3,$30,$0D,$E3,$30,$0F,$03,$31,$11,$23,$31,$13,$43,$31,$15,$63
>01c5b8		30 07 83 30 09 a3 30 0b c3 30 0d e3 30 0f 03 31
>01c5c8		11 23 31 13 43 31 15 63
>01c5d0		31 17 83 31 19 a3 31 1b		.text $31,$17,$83,$31,$19,$A3,$31,$1B,$C3,$31,$1D,$E3,$31,$1F,$03,$32,$21,$23,$32,$23,$43,$32,$25,$63,$32,$27,$83,$32,$29,$A3,$32,$2B
>01c5d8		c3 31 1d e3 31 1f 03 32 21 23 32 23 43 32 25 63
>01c5e8		32 27 83 32 29 a3 32 2b
>01c5f0		c3 32 2d e3 32 2f 03 33		.text $C3,$32,$2D,$E3,$32,$2F,$03,$33,$31,$23,$33,$33,$43,$33,$35,$63,$33,$37,$83,$33,$FF,$AF,$33,$3B,$C3,$33,$3D,$E3,$33,$3F,$03,$34
>01c5f8		31 23 33 33 43 33 35 63 33 37 83 33 ff af 33 3b
>01c608		c3 33 3d e3 33 3f 03 34
>01c610		41 23 34 43 43 34 45 63		.text $41,$23,$34,$43,$43,$34,$45,$63,$34,$47,$83,$34,$49,$A3,$34,$4B,$C3,$34,$4D,$E3,$34,$4F,$03,$35,$FF,$2F,$35,$53,$43,$35,$55,$63
>01c618		34 47 83 34 49 a3 34 4b c3 34 4d e3 34 4f 03 35
>01c628		ff 2f 35 53 43 35 55 63
>01c630		35 57 83 35 59 a3 35 5b		.text $35,$57,$83,$35,$59,$A3,$35,$5B,$C3,$35,$5D,$E3,$35,$5F,$03,$36,$61,$23,$36,$63,$43,$36,$65,$63,$36,$67,$83,$36,$69,$A3,$36,$6B
>01c638		c3 35 5d e3 35 5f 03 36 61 23 36 63 43 36 65 63
>01c648		36 67 83 36 69 a3 36 6b
>01c650		c3 36 6d e3 36 6f f3 ff		.text $C3,$36,$6D,$E3,$36,$6F,$F3,$FF,$71,$23,$37,$73,$43,$37,$75,$63,$37,$77,$83,$37,$79,$A3,$37,$7B,$C3,$37,$7D,$E3,$37,$7F,$03,$38
>01c658		71 23 37 73 43 37 75 63 37 77 83 37 79 a3 37 7b
>01c668		c3 37 7d e3 37 7f 03 38
>01c670		81 23 38 83 43 38 85 63		.text $81,$23,$38,$83,$43,$38,$85,$63,$38,$87,$83,$38,$89,$A3,$38,$8B,$C3,$38,$8D,$E3,$38,$8F,$03,$39,$91,$23,$39,$93,$43,$39,$95,$63
>01c678		38 87 83 38 89 a3 38 8b c3 38 8d e3 38 8f 03 39
>01c688		91 23 39 93 43 39 95 63
>01c690		39 97 83 39 99 a3 39 9b		.text $39,$97,$83,$39,$99,$A3,$39,$9B,$C3,$39,$9D,$E3,$39,$9F,$03,$3A,$A1,$23,$3A,$A3,$43,$3A,$A5,$63,$3A,$A7,$83,$3A,$A9,$A3,$3A,$AB
>01c698		c3 39 9d e3 39 9f 03 3a a1 23 3a a3 43 3a a5 63
>01c6a8		3a a7 83 3a a9 a3 3a ab
>01c6b0		c3 3a ad e3 3a af 03 3b		.text $C3,$3A,$AD,$E3,$3A,$AF,$03,$3B,$B1,$23,$3B,$B3,$43,$3B,$B5,$63,$3B,$B7,$83,$3B,$B9,$A3,$3B,$BB,$C3,$3B,$BD,$E3,$3B,$BF,$03,$3C
>01c6b8		b1 23 3b b3 43 3b b5 63 3b b7 83 3b b9 a3 3b bb
>01c6c8		c3 3b bd e3 3b bf 03 3c
>01c6d0		c1 23 3c c3 43 3c c5 63		.text $C1,$23,$3C,$C3,$43,$3C,$C5,$63,$3C,$C7,$83,$3C,$C9,$A3,$3C,$CB,$C3,$3C,$CD,$E3,$3C,$CF,$03,$3D,$D1,$23,$3D,$D3,$43,$3D,$D5,$63
>01c6d8		3c c7 83 3c c9 a3 3c cb c3 3c cd e3 3c cf 03 3d
>01c6e8		d1 23 3d d3 43 3d d5 63
>01c6f0		3d d7 83 3d d9 a3 3d db		.text $3D,$D7,$83,$3D,$D9,$A3,$3D,$DB,$C3,$3D,$DD,$E3,$3D,$DF,$03,$3E,$E1,$23,$3E,$E3,$43,$3E,$E5,$63,$3E,$E7,$83,$3E,$E9,$A3,$3E,$EB
>01c6f8		c3 3d dd e3 3d df 03 3e e1 23 3e e3 43 3e e5 63
>01c708		3e e7 83 3e e9 a3 3e eb
>01c710		c3 3e ed e3 3e ef 03 3f		.text $C3,$3E,$ED,$E3,$3E,$EF,$03,$3F,$F1,$23,$3F,$F3,$43,$3F,$F5,$63,$3F,$F7,$83,$3F,$F9,$A3,$3F,$FB,$C3,$3F,$FD,$E3,$3F,$FF,$03,$40
>01c718		f1 23 3f f3 43 3f f5 63 3f f7 83 3f f9 a3 3f fb
>01c728		c3 3f fd e3 3f ff 03 40
>01c730		01 24 40 03 44 40 05 64		.text $01,$24,$40,$03,$44,$40,$05,$64,$40,$07,$84,$40,$09,$A4,$40,$FF,$CF,$40,$0D,$E4,$40,$0F,$04,$41,$11,$24,$41,$13,$44,$41,$15,$64
>01c738		40 07 84 40 09 a4 40 ff cf 40 0d e4 40 0f 04 41
>01c748		11 24 41 13 44 41 15 64
>01c750		41 17 84 41 19 a4 41 1b		.text $41,$17,$84,$41,$19,$A4,$41,$1B,$C4,$41,$1D,$E4,$41,$1F,$04,$42,$21,$24,$42,$23,$44,$42,$25,$64,$42,$27,$84,$42,$29,$A4,$42,$FF
>01c758		c4 41 1d e4 41 1f 04 42 21 24 42 23 44 42 25 64
>01c768		42 27 84 42 29 a4 42 ff
>01c770		cf 42 2d e4 42 2f 04 43		.text $CF,$42,$2D,$E4,$42,$2F,$04,$43,$31,$24,$43,$33,$44,$43,$35,$64,$43,$37,$84,$43,$39,$A4,$43,$3B,$C4,$43,$3D,$E4,$43,$3F,$04,$44
>01c778		31 24 43 33 44 43 35 64 43 37 84 43 39 a4 43 3b
>01c788		c4 43 3d e4 43 3f 04 44
>01c790		41 24 44 43 44 44 45 64		.text $41,$24,$44,$43,$44,$44,$45,$64,$44,$47,$84,$44,$49,$A4,$44,$4B,$C4,$44,$4D,$E4,$44,$4F,$04,$45,$51,$24,$45,$53,$44,$45,$55,$64
>01c798		44 47 84 44 49 a4 44 4b c4 44 4d e4 44 4f 04 45
>01c7a8		51 24 45 53 44 45 55 64
>01c7b0		45 57 84 45 59 a4 45 5b		.text $45,$57,$84,$45,$59,$A4,$45,$5B,$C4,$45,$5D,$E4,$45,$5F,$04,$46,$61,$24,$46,$63,$44,$46,$FF,$6F,$46,$67,$84,$46,$69,$A4,$46,$6B
>01c7b8		c4 45 5d e4 45 5f 04 46 61 24 46 63 44 46 ff 6f
>01c7c8		46 67 84 46 69 a4 46 6b
>01c7d0		c4 46 6d e4 46 6f 04 47		.text $C4,$46,$6D,$E4,$46,$6F,$04,$47,$71,$24,$47,$73,$44,$47,$75,$64,$47,$77,$84,$47,$79,$A4,$47,$7B,$C4,$47,$7D,$E4,$47,$7F,$04,$48
>01c7d8		71 24 47 73 44 47 75 64 47 77 84 47 79 a4 47 7b
>01c7e8		c4 47 7d e4 47 7f 04 48
>01c7f0		81 24 48 83 44 48 85 64		.text $81,$24,$48,$83,$44,$48,$85,$64,$48,$87,$84,$48,$89,$A4,$48,$8B,$C4,$48,$8D,$E4,$48,$8F,$04,$49,$91,$24,$49,$93,$44,$49,$95,$64
>01c7f8		48 87 84 48 89 a4 48 8b c4 48 8d e4 48 8f 04 49
>01c808		91 24 49 93 44 49 95 64
>01c810		49 ff 8f 49 99 a4 49 9b		.text $49,$FF,$8F,$49,$99,$A4,$49,$9B,$C4,$49,$9D,$E4,$49,$9F,$04,$4A,$A1,$24,$4A,$A3,$44,$4A,$FF,$6F,$4A,$A7,$84,$4A,$A9,$A4,$4A,$AB
>01c818		c4 49 9d e4 49 9f 04 4a a1 24 4a a3 44 4a ff 6f
>01c828		4a a7 84 4a a9 a4 4a ab
>01c830		c4 4a ad e4 4a af 04 4b		.text $C4,$4A,$AD,$E4,$4A,$AF,$04,$4B,$B1,$24,$4B,$B3,$44,$4B,$B5,$64,$4B,$B7,$84,$4B,$B9,$A4,$4B,$BB,$C4,$4B,$BD,$E4,$4B,$BF,$04,$4C
>01c838		b1 24 4b b3 44 4b b5 64 4b b7 84 4b b9 a4 4b bb
>01c848		c4 4b bd e4 4b bf 04 4c
>01c850		c1 24 4c c3 44 4c c5 64		.text $C1,$24,$4C,$C3,$44,$4C,$C5,$64,$4C,$C7,$84,$4C,$C9,$A4,$4C,$CB,$C4,$4C,$CD,$E4,$4C,$CF,$04,$4D,$D1,$24,$4D,$D3,$44,$4D,$D5,$64
>01c858		4c c7 84 4c c9 a4 4c cb c4 4c cd e4 4c cf 04 4d
>01c868		d1 24 4d d3 44 4d d5 64
>01c870		4d d7 84 4d d9 a4 4d db		.text $4D,$D7,$84,$4D,$D9,$A4,$4D,$DB,$C4,$4D,$DD,$E4,$4D,$DF,$04,$4E,$E1,$24,$4E,$E3,$44,$4E,$E5,$64,$4E,$E7,$84,$4E,$E9,$A4,$4E,$EB
>01c878		c4 4d dd e4 4d df 04 4e e1 24 4e e3 44 4e e5 64
>01c888		4e e7 84 4e e9 a4 4e eb
>01c890		c4 4e ed e4 4e ef 04 4f		.text $C4,$4E,$ED,$E4,$4E,$EF,$04,$4F,$F1,$24,$4F,$F3,$44,$4F,$F5,$64,$4F,$F7,$84,$4F,$F9,$A4,$4F,$FB,$C4,$4F,$FD,$E4,$4F,$FF,$04,$50
>01c898		f1 24 4f f3 44 4f f5 64 4f f7 84 4f f9 a4 4f fb
>01c8a8		c4 4f fd e4 4f ff 04 50
>01c8b0		01 25 50 03 45 50 05 65		.text $01,$25,$50,$03,$45,$50,$05,$65,$50,$07,$85,$50,$09,$A5,$50,$0B,$C5,$50,$0D,$E5,$50,$0F,$05,$51,$11,$25,$51,$13,$45,$51,$15,$65
>01c8b8		50 07 85 50 09 a5 50 0b c5 50 0d e5 50 0f 05 51
>01c8c8		11 25 51 13 45 51 15 65
>01c8d0		51 17 85 51 19 a5 51 1b		.text $51,$17,$85,$51,$19,$A5,$51,$1B,$C5,$51,$1D,$E5,$51,$1F,$05,$52,$21,$25,$52,$23,$45,$52,$25,$65,$52,$27,$85,$52,$29,$A5,$52,$2B
>01c8d8		c5 51 1d e5 51 1f 05 52 21 25 52 23 45 52 25 65
>01c8e8		52 27 85 52 29 a5 52 2b
>01c8f0		c5 52 2d e5 52 2f 05 53		.text $C5,$52,$2D,$E5,$52,$2F,$05,$53,$31,$25,$53,$33,$45,$53,$35,$65,$53,$37,$85,$53,$39,$A5,$53,$3B,$C5,$53,$3D,$E5,$53,$3F,$05,$54
>01c8f8		31 25 53 33 45 53 35 65 53 37 85 53 39 a5 53 3b
>01c908		c5 53 3d e5 53 3f 05 54
>01c910		41 25 54 43 45 54 45 65		.text $41,$25,$54,$43,$45,$54,$45,$65,$54,$47,$85,$54,$49,$A5,$54,$4B,$C5,$54,$4D,$E5,$54,$4F,$05,$55,$51,$25,$55,$53,$45,$55,$55,$65
>01c918		54 47 85 54 49 a5 54 4b c5 54 4d e5 54 4f 05 55
>01c928		51 25 55 53 45 55 55 65
>01c930		55 57 85 55 59 a5 55 5b		.text $55,$57,$85,$55,$59,$A5,$55,$5B,$C5,$55,$5D,$E5,$55,$5F,$05,$56,$61,$25,$56,$63,$45,$56,$65,$65,$56,$67,$85,$56,$69,$A5,$56,$6B
>01c938		c5 55 5d e5 55 5f 05 56 61 25 56 63 45 56 65 65
>01c948		56 67 85 56 69 a5 56 6b
>01c950		c5 56 6d e5 56 6f 05 57		.text $C5,$56,$6D,$E5,$56,$6F,$05,$57,$71,$25,$57,$73,$45,$57,$75,$65,$57,$77,$85,$57,$79,$A5,$57,$7B,$C5,$57,$7D,$E5,$57,$7F,$05,$58
>01c958		71 25 57 73 45 57 75 65 57 77 85 57 79 a5 57 7b
>01c968		c5 57 7d e5 57 7f 05 58
>01c970		81 25 58 83 45 58 85 65		.text $81,$25,$58,$83,$45,$58,$85,$65,$58,$87,$85,$58,$89,$A5,$58,$8B,$C5,$58,$8D,$E5,$58,$8F,$05,$59,$91,$25,$59,$93,$45,$59,$95,$65
>01c978		58 87 85 58 89 a5 58 8b c5 58 8d e5 58 8f 05 59
>01c988		91 25 59 93 45 59 95 65
>01c990		59 97 85 59 99 a5 59 9b		.text $59,$97,$85,$59,$99,$A5,$59,$9B,$C5,$59,$9D,$E5,$59,$9F,$05,$5A,$A1,$25,$5A,$A3,$45,$5A,$A5,$65,$5A,$A7,$85,$5A,$A9,$A5,$5A,$AB
>01c998		c5 59 9d e5 59 9f 05 5a a1 25 5a a3 45 5a a5 65
>01c9a8		5a a7 85 5a a9 a5 5a ab
>01c9b0		c5 5a ad e5 5a af 05 5b		.text $C5,$5A,$AD,$E5,$5A,$AF,$05,$5B,$B1,$25,$5B,$B3,$45,$5B,$B5,$65,$5B,$B7,$85,$5B,$B9,$A5,$5B,$BB,$C5,$5B,$BD,$E5,$5B,$BF,$05,$5C
>01c9b8		b1 25 5b b3 45 5b b5 65 5b b7 85 5b b9 a5 5b bb
>01c9c8		c5 5b bd e5 5b bf 05 5c
>01c9d0		c1 25 5c c3 45 5c c5 65		.text $C1,$25,$5C,$C3,$45,$5C,$C5,$65,$5C,$C7,$85,$5C,$C9,$A5,$5C,$CB,$C5,$5C,$CD,$E5,$5C,$CF,$05,$5D,$D1,$25,$5D,$D3,$45,$5D,$D5,$65
>01c9d8		5c c7 85 5c c9 a5 5c cb c5 5c cd e5 5c cf 05 5d
>01c9e8		d1 25 5d d3 45 5d d5 65
>01c9f0		5d d7 85 5d d9 a5 5d db		.text $5D,$D7,$85,$5D,$D9,$A5,$5D,$DB,$C5,$5D,$DD,$E5,$5D,$DF,$05,$5E,$E1,$25,$5E,$E3,$45,$5E,$E5,$65,$5E,$E7,$85,$5E,$E9,$A5,$5E,$EB
>01c9f8		c5 5d dd e5 5d df 05 5e e1 25 5e e3 45 5e e5 65
>01ca08		5e e7 85 5e e9 a5 5e eb
>01ca10		c5 5e ed e5 5e ef 05 5f		.text $C5,$5E,$ED,$E5,$5E,$EF,$05,$5F,$F1,$25,$5F,$F3,$45,$5F,$F5,$65,$5F,$F7,$85,$5F,$F9,$A5,$5F,$FB,$C5,$5F,$FD,$E5,$5F,$FF,$05,$60
>01ca18		f1 25 5f f3 45 5f f5 65 5f f7 85 5f f9 a5 5f fb
>01ca28		c5 5f fd e5 5f ff 05 60
>01ca30		01 26 60 03 46 60 05 66		.text $01,$26,$60,$03,$46,$60,$05,$66,$60,$07,$86,$60,$09,$A6,$60,$0B,$C6,$60,$0D,$E6,$60,$0F,$06,$61,$11,$26,$61,$13,$46,$61,$15,$66
>01ca38		60 07 86 60 09 a6 60 0b c6 60 0d e6 60 0f 06 61
>01ca48		11 26 61 13 46 61 15 66
>01ca50		61 17 86 61 19 a6 61 1b		.text $61,$17,$86,$61,$19,$A6,$61,$1B,$C6,$61,$1D,$E6,$61,$1F,$06,$62,$FF,$2F,$62,$23,$46,$62,$25,$66,$62,$27,$86,$62,$29,$A6,$62,$2B
>01ca58		c6 61 1d e6 61 1f 06 62 ff 2f 62 23 46 62 25 66
>01ca68		62 27 86 62 29 a6 62 2b
>01ca70		c6 62 2d e6 62 2f 06 63		.text $C6,$62,$2D,$E6,$62,$2F,$06,$63,$31,$26,$63,$33,$46,$63,$35,$66,$63,$37,$86,$63,$39,$A6,$63,$3B,$C6,$63,$3D,$E6,$63,$3F,$06,$64
>01ca78		31 26 63 33 46 63 35 66 63 37 86 63 39 a6 63 3b
>01ca88		c6 63 3d e6 63 3f 06 64
>01ca90		41 26 64 43 46 64 45 66		.text $41,$26,$64,$43,$46,$64,$45,$66,$64,$47,$86,$64,$49,$A6,$64,$4B,$C6,$64,$4D,$E6,$64,$4F,$06,$65,$51,$26,$65,$53,$46,$65,$55,$66
>01ca98		64 47 86 64 49 a6 64 4b c6 64 4d e6 64 4f 06 65
>01caa8		51 26 65 53 46 65 55 66
>01cab0		65 57 86 65 59 a6 65 5b		.text $65,$57,$86,$65,$59,$A6,$65,$5B,$C6,$65,$5D,$E6,$65,$5F,$06,$66,$61,$26,$66,$63,$46,$66,$65,$66,$66,$67,$86,$66,$69,$A6,$66,$6B
>01cab8		c6 65 5d e6 65 5f 06 66 61 26 66 63 46 66 65 66
>01cac8		66 67 86 66 69 a6 66 6b
>01cad0		c6 66 6d e6 66 6f 06 67		.text $C6,$66,$6D,$E6,$66,$6F,$06,$67,$71,$26,$67,$73,$46,$67,$75,$66,$67,$77,$86,$67,$79,$A6,$67,$7B,$C6,$67,$7D,$E6,$67,$7F,$06,$68
>01cad8		71 26 67 73 46 67 75 66 67 77 86 67 79 a6 67 7b
>01cae8		c6 67 7d e6 67 7f 06 68
>01caf0		81 26 68 83 46 68 85 66		.text $81,$26,$68,$83,$46,$68,$85,$66,$68,$87,$86,$68,$89,$A6,$68,$8B,$C6,$68,$8D,$E6,$68,$8F,$06,$69,$91,$26,$69,$93,$46,$69,$95,$66
>01caf8		68 87 86 68 89 a6 68 8b c6 68 8d e6 68 8f 06 69
>01cb08		91 26 69 93 46 69 95 66
>01cb10		69 97 86 69 99 a6 69 9b		.text $69,$97,$86,$69,$99,$A6,$69,$9B,$C6,$69,$9D,$E6,$69,$9F,$06,$6A,$A1,$26,$6A,$A3,$46,$6A,$A5,$66,$6A,$A7,$86,$6A,$A9,$A6,$6A,$AB
>01cb18		c6 69 9d e6 69 9f 06 6a a1 26 6a a3 46 6a a5 66
>01cb28		6a a7 86 6a a9 a6 6a ab
>01cb30		c6 6a ad e6 6a af 06 6b		.text $C6,$6A,$AD,$E6,$6A,$AF,$06,$6B,$B1,$26,$6B,$B3,$46,$6B,$B5,$66,$6B,$B7,$86,$6B,$B9,$A6,$6B,$BB,$C6,$6B,$BD,$E6,$6B,$BF,$06,$6C
>01cb38		b1 26 6b b3 46 6b b5 66 6b b7 86 6b b9 a6 6b bb
>01cb48		c6 6b bd e6 6b bf 06 6c
>01cb50		c1 26 6c c3 46 6c c5 66		.text $C1,$26,$6C,$C3,$46,$6C,$C5,$66,$6C,$C7,$86,$6C,$C9,$A6,$6C,$CB,$C6,$6C,$CD,$E6,$6C,$CF,$06,$6D,$D1,$26,$6D,$D3,$46,$6D,$D5,$66
>01cb58		6c c7 86 6c c9 a6 6c cb c6 6c cd e6 6c cf 06 6d
>01cb68		d1 26 6d d3 46 6d d5 66
>01cb70		6d d7 86 6d d9 a6 6d db		.text $6D,$D7,$86,$6D,$D9,$A6,$6D,$DB,$C6,$6D,$DD,$E6,$6D,$DF,$06,$6E,$E1,$26,$6E,$E3,$46,$6E,$E5,$66,$6E,$E7,$86,$6E,$E9,$A6,$6E,$EB
>01cb78		c6 6d dd e6 6d df 06 6e e1 26 6e e3 46 6e e5 66
>01cb88		6e e7 86 6e e9 a6 6e eb
>01cb90		c6 6e ed e6 6e ef 06 6f		.text $C6,$6E,$ED,$E6,$6E,$EF,$06,$6F,$F1,$26,$6F,$F3,$46,$6F,$F5,$66,$6F,$F7,$86,$6F,$F9,$A6,$6F,$FB,$C6,$6F,$FD,$E6,$6F,$FF,$06,$70
>01cb98		f1 26 6f f3 46 6f f5 66 6f f7 86 6f f9 a6 6f fb
>01cba8		c6 6f fd e6 6f ff 06 70
>01cbb0		01 27 70 03 47 70 05 67		.text $01,$27,$70,$03,$47,$70,$05,$67,$70,$07,$87,$70,$09,$A7,$70,$0B,$C7,$70,$0D,$E7,$70,$0F,$07,$71,$11,$27,$71,$13,$F7,$FF,$15,$67
>01cbb8		70 07 87 70 09 a7 70 0b c7 70 0d e7 70 0f 07 71
>01cbc8		11 27 71 13 f7 ff 15 67
>01cbd0		71 17 87 71 19 a7 71 1b		.text $71,$17,$87,$71,$19,$A7,$71,$1B,$C7,$71,$1D,$E7,$71,$1F,$07,$72,$21,$27,$72,$23,$47,$72,$25,$67,$72,$27,$87,$72,$29,$A7,$72,$2B
>01cbd8		c7 71 1d e7 71 1f 07 72 21 27 72 23 47 72 25 67
>01cbe8		72 27 87 72 29 a7 72 2b
>01cbf0		c7 72 2d e7 72 2f 07 73		.text $C7,$72,$2D,$E7,$72,$2F,$07,$73,$31,$27,$73,$33,$47,$73,$35,$67,$73,$37,$87,$73,$39,$A7,$73,$3B,$C7,$73,$3D,$E7,$73,$3F,$07,$74
>01cbf8		31 27 73 33 47 73 35 67 73 37 87 73 39 a7 73 3b
>01cc08		c7 73 3d e7 73 3f 07 74
>01cc10		41 27 74 43 47 74 45 67		.text $41,$27,$74,$43,$47,$74,$45,$67,$74,$47,$87,$74,$49,$A7,$74,$4B,$C7,$74,$4D,$E7,$74,$4F,$07,$75,$51,$27,$75,$53,$47,$75,$55,$67
>01cc18		74 47 87 74 49 a7 74 4b c7 74 4d e7 74 4f 07 75
>01cc28		51 27 75 53 47 75 55 67
>01cc30		75 57 87 75 59 a7 75 5b		.text $75,$57,$87,$75,$59,$A7,$75,$5B,$C7,$75,$5D,$E7,$75,$5F,$07,$76,$61,$27,$76,$63,$47,$76,$65,$67,$76,$67,$87,$76,$69,$A7,$76,$6B
>01cc38		c7 75 5d e7 75 5f 07 76 61 27 76 63 47 76 65 67
>01cc48		76 67 87 76 69 a7 76 6b
>01cc50		c7 76 6d e7 76 6f 07 77		.text $C7,$76,$6D,$E7,$76,$6F,$07,$77,$71,$27,$77,$73,$47,$77,$75,$67,$77,$77,$87,$77,$79,$A7,$77,$7B,$C7,$77,$7D,$E7,$77,$7F,$07,$78
>01cc58		71 27 77 73 47 77 75 67 77 77 87 77 79 a7 77 7b
>01cc68		c7 77 7d e7 77 7f 07 78
>01cc70		81 27 78 83 47 78 85 67		.text $81,$27,$78,$83,$47,$78,$85,$67,$78,$87,$87,$78,$89,$A7,$78,$8B,$C7,$78,$8D,$E7,$78,$8F,$07,$79,$91,$27,$79,$93,$47,$79,$95,$67
>01cc78		78 87 87 78 89 a7 78 8b c7 78 8d e7 78 8f 07 79
>01cc88		91 27 79 93 47 79 95 67
>01cc90		79 97 87 79 99 a7 79 9b		.text $79,$97,$87,$79,$99,$A7,$79,$9B,$C7,$79,$9D,$E7,$79,$9F,$07,$7A,$A1,$27,$7A,$A3,$47,$7A,$A5,$67,$7A,$A7,$87,$7A,$A9,$A7,$7A,$AB
>01cc98		c7 79 9d e7 79 9f 07 7a a1 27 7a a3 47 7a a5 67
>01cca8		7a a7 87 7a a9 a7 7a ab
>01ccb0		c7 7a ad e7 7a af 07 7b		.text $C7,$7A,$AD,$E7,$7A,$AF,$07,$7B,$B1,$27,$7B,$B3,$47,$7B,$B5,$67,$7B,$B7,$87,$7B,$B9,$A7,$7B,$BB,$C7,$7B,$BD,$E7,$7B,$BF,$07,$7C
>01ccb8		b1 27 7b b3 47 7b b5 67 7b b7 87 7b b9 a7 7b bb
>01ccc8		c7 7b bd e7 7b bf 07 7c
>01ccd0		c1 27 7c c3 47 7c c5 67		.text $C1,$27,$7C,$C3,$47,$7C,$C5,$67,$7C,$C7,$87,$7C,$C9,$A7,$7C,$CB,$C7,$7C,$CD,$E7,$7C,$CF,$07,$7D,$D1,$27,$7D,$D3,$47,$7D,$D5,$67
>01ccd8		7c c7 87 7c c9 a7 7c cb c7 7c cd e7 7c cf 07 7d
>01cce8		d1 27 7d d3 47 7d d5 67
>01ccf0		7d d7 87 7d d9 a7 7d db		.text $7D,$D7,$87,$7D,$D9,$A7,$7D,$DB,$C7,$7D,$DD,$E7,$7D,$DF,$07,$7E,$E1,$27,$7E,$E3,$47,$7E,$E5,$67,$7E,$E7,$87,$7E,$E9,$A7,$7E,$EB
>01ccf8		c7 7d dd e7 7d df 07 7e e1 27 7e e3 47 7e e5 67
>01cd08		7e e7 87 7e e9 a7 7e eb
>01cd10		c7 7e ed f7 ff ef 07 7f		.text $C7,$7E,$ED,$F7,$FF,$EF,$07,$7F,$F1,$27,$7F,$F3,$47,$7F,$F5,$67,$7F,$F7,$87,$7F,$F9,$A7,$7F,$FB,$C7,$7F,$FD,$E7,$7F,$FF,$07,$80
>01cd18		f1 27 7f f3 47 7f f5 67 7f f7 87 7f f9 a7 7f fb
>01cd28		c7 7f fd e7 7f ff 07 80
>01cd30		01 28 80 03 48 80 05 68		.text $01,$28,$80,$03,$48,$80,$05,$68,$80,$07,$88,$80,$09,$A8,$80,$0B,$C8,$80,$0D,$E8,$80,$0F,$08,$81,$11,$28,$81,$13,$48,$81,$15,$68
>01cd38		80 07 88 80 09 a8 80 0b c8 80 0d e8 80 0f 08 81
>01cd48		11 28 81 13 48 81 15 68
>01cd50		81 17 88 81 19 a8 81 1b		.text $81,$17,$88,$81,$19,$A8,$81,$1B,$C8,$81,$1D,$E8,$81,$1F,$08,$82,$21,$28,$82,$23,$48,$82,$25,$68,$82,$27,$88,$82,$29,$A8,$82,$2B
>01cd58		c8 81 1d e8 81 1f 08 82 21 28 82 23 48 82 25 68
>01cd68		82 27 88 82 29 a8 82 2b
>01cd70		c8 82 2d e8 82 2f 08 83		.text $C8,$82,$2D,$E8,$82,$2F,$08,$83,$31,$28,$83,$33,$48,$83,$35,$68,$83,$37,$88,$83,$39,$A8,$83,$3B,$C8,$83,$3D,$E8,$83,$3F,$08,$84
>01cd78		31 28 83 33 48 83 35 68 83 37 88 83 39 a8 83 3b
>01cd88		c8 83 3d e8 83 3f 08 84
>01cd90		41 28 84 43 48 84 45 68		.text $41,$28,$84,$43,$48,$84,$45,$68,$84,$47,$88,$84,$49,$A8,$84,$4B,$C8,$84,$4D,$E8,$84,$4F,$08,$85,$51,$28,$85,$53,$48,$85,$55,$68
>01cd98		84 47 88 84 49 a8 84 4b c8 84 4d e8 84 4f 08 85
>01cda8		51 28 85 53 48 85 55 68
>01cdb0		85 57 88 85 59 a8 85 5b		.text $85,$57,$88,$85,$59,$A8,$85,$5B,$C8,$85,$5D,$E8,$85,$5F,$08,$86,$61,$28,$86,$63,$48,$86,$65,$68,$86,$67,$88,$86,$69,$A8,$86,$6B
>01cdb8		c8 85 5d e8 85 5f 08 86 61 28 86 63 48 86 65 68
>01cdc8		86 67 88 86 69 a8 86 6b
>01cdd0		c8 86 6d e8 86 6f 08 87		.text $C8,$86,$6D,$E8,$86,$6F,$08,$87,$71,$28,$87,$73,$48,$87,$75,$68,$87,$77,$88,$87,$79,$A8,$87,$7B,$C8,$87,$7D,$E8,$87,$7F,$08,$88
>01cdd8		71 28 87 73 48 87 75 68 87 77 88 87 79 a8 87 7b
>01cde8		c8 87 7d e8 87 7f 08 88
>01cdf0		81 28 88 83 48 88 85 68		.text $81,$28,$88,$83,$48,$88,$85,$68,$88,$87,$88,$88,$89,$A8,$88,$8B,$C8,$88,$8D,$E8,$88,$8F,$08,$89,$91,$28,$89,$93,$48,$89,$95,$68
>01cdf8		88 87 88 88 89 a8 88 8b c8 88 8d e8 88 8f 08 89
>01ce08		91 28 89 93 48 89 95 68
>01ce10		89 97 88 89 99 f8 ff 9b		.text $89,$97,$88,$89,$99,$F8,$FF,$9B,$C8,$89,$9D,$E8,$89,$9F,$08,$8A,$A1,$28,$8A,$A3,$48,$8A,$A5,$68,$8A,$A7,$88,$8A,$A9,$A8,$8A,$AB
>01ce18		c8 89 9d e8 89 9f 08 8a a1 28 8a a3 48 8a a5 68
>01ce28		8a a7 88 8a a9 a8 8a ab
>01ce30		c8 8a ad e8 8a af 08 8b		.text $C8,$8A,$AD,$E8,$8A,$AF,$08,$8B,$FF,$2F,$8B,$B3,$48,$8B,$B5,$68,$8B,$B7,$88,$8B,$B9,$A8,$8B,$BB,$C8,$8B,$BD,$E8,$8B,$BF,$08,$8C
>01ce38		ff 2f 8b b3 48 8b b5 68 8b b7 88 8b b9 a8 8b bb
>01ce48		c8 8b bd e8 8b bf 08 8c
>01ce50		c1 28 8c c3 48 8c c5 68		.text $C1,$28,$8C,$C3,$48,$8C,$C5,$68,$8C,$C7,$88,$8C,$C9,$A8,$8C,$CB,$C8,$8C,$CD,$E8,$8C,$CF,$08,$8D,$D1,$28,$8D,$D3,$48,$8D,$D5,$68
>01ce58		8c c7 88 8c c9 a8 8c cb c8 8c cd e8 8c cf 08 8d
>01ce68		d1 28 8d d3 48 8d d5 68
>01ce70		8d d7 88 8d d9 a8 8d db		.text $8D,$D7,$88,$8D,$D9,$A8,$8D,$DB,$C8,$8D,$DD,$E8,$8D,$DF,$08,$8E,$E1,$28,$8E,$E3,$48,$8E,$E5,$68,$8E,$E7,$88,$8E,$E9,$A8,$8E,$EB
>01ce78		c8 8d dd e8 8d df 08 8e e1 28 8e e3 48 8e e5 68
>01ce88		8e e7 88 8e e9 a8 8e eb
>01ce90		c8 8e ed e8 8e ef 08 8f		.text $C8,$8E,$ED,$E8,$8E,$EF,$08,$8F,$F1,$28,$8F,$F3,$48,$8F,$F5,$68,$8F,$F7,$88,$8F,$F9,$A8,$8F,$FB,$C8,$8F,$FD,$E8,$8F,$FF,$08,$90
>01ce98		f1 28 8f f3 48 8f f5 68 8f f7 88 8f f9 a8 8f fb
>01cea8		c8 8f fd e8 8f ff 08 90
>01ceb0		01 29 90 03 49 90 05 69		.text $01,$29,$90,$03,$49,$90,$05,$69,$90,$07,$89,$90,$09,$A9,$90,$0B,$C9,$90,$0D,$E9,$90,$0F,$09,$91,$11,$29,$91,$FF,$4F,$91,$15,$69
>01ceb8		90 07 89 90 09 a9 90 0b c9 90 0d e9 90 0f 09 91
>01cec8		11 29 91 ff 4f 91 15 69
>01ced0		91 17 89 91 19 a9 91 1b		.text $91,$17,$89,$91,$19,$A9,$91,$1B,$C9,$91,$1D,$E9,$91,$1F,$09,$92,$21,$29,$92,$23,$49,$92,$25,$69,$92,$27,$89,$92,$29,$A9,$92,$2B
>01ced8		c9 91 1d e9 91 1f 09 92 21 29 92 23 49 92 25 69
>01cee8		92 27 89 92 29 a9 92 2b
>01cef0		c9 92 2d e9 92 2f 09 93		.text $C9,$92,$2D,$E9,$92,$2F,$09,$93,$31,$29,$93,$33,$49,$93,$35,$69,$93,$37,$89,$93,$39,$F9,$FF,$3B,$C9,$93,$3D,$E9,$93,$3F,$09,$94
>01cef8		31 29 93 33 49 93 35 69 93 37 89 93 39 f9 ff 3b
>01cf08		c9 93 3d e9 93 3f 09 94
>01cf10		41 29 94 43 49 94 45 69		.text $41,$29,$94,$43,$49,$94,$45,$69,$94,$47,$89,$94,$49,$A9,$94,$4B,$C9,$94,$4D,$E9,$94,$4F,$F9,$FF,$51,$29,$95,$53,$49,$95,$55,$69
>01cf18		94 47 89 94 49 a9 94 4b c9 94 4d e9 94 4f f9 ff
>01cf28		51 29 95 53 49 95 55 69
>01cf30		95 57 89 95 ff af 95 5b		.text $95,$57,$89,$95,$FF,$AF,$95,$5B,$C9,$95,$5D,$F9,$FF,$5F,$09,$96,$61,$29,$96,$63,$49,$96,$65,$69,$96,$67,$89,$96,$69,$A9,$96,$6B
>01cf38		c9 95 5d f9 ff 5f 09 96 61 29 96 63 49 96 65 69
>01cf48		96 67 89 96 69 a9 96 6b
>01cf50		c9 96 6d e9 96 6f 09 97		.text $C9,$96,$6D,$E9,$96,$6F,$09,$97,$71,$29,$97,$73,$49,$97,$75,$69,$97,$77,$89,$97,$79,$A9,$97,$FF,$CF,$97,$7D,$E9,$97,$7F,$09,$98
>01cf58		71 29 97 73 49 97 75 69 97 77 89 97 79 a9 97 ff
>01cf68		cf 97 7d e9 97 7f 09 98
>01cf70		81 29 98 83 49 98 85 69		.text $81,$29,$98,$83,$49,$98,$85,$69,$98,$87,$89,$98,$FF,$AF,$98,$8B,$C9,$98,$8D,$E9,$98,$8F,$09,$99,$91,$29,$99,$93,$49,$99,$95,$69
>01cf78		98 87 89 98 ff af 98 8b c9 98 8d e9 98 8f 09 99
>01cf88		91 29 99 93 49 99 95 69
>01cf90		99 ff 8f 99 99 a9 99 ff		.text $99,$FF,$8F,$99,$99,$A9,$99,$FF,$FF,$FF,$9D,$E9,$99,$9F,$09,$9A,$A1,$29,$9A,$A3,$49,$9A,$A5,$69,$9A,$A7,$89,$9A,$A9,$A9,$9A,$AB
>01cf98		ff ff 9d e9 99 9f 09 9a a1 29 9a a3 49 9a a5 69
>01cfa8		9a a7 89 9a a9 a9 9a ab
>01cfb0		c9 9a ad e9 9a af 09 9b		.text $C9,$9A,$AD,$E9,$9A,$AF,$09,$9B,$B1,$29,$9B,$B3,$49,$9B,$B5,$69,$9B,$B7,$89,$9B,$B9,$A9,$9B,$BB,$C9,$9B,$BD,$E9,$9B,$BF,$09,$9C
>01cfb8		b1 29 9b b3 49 9b b5 69 9b b7 89 9b b9 a9 9b bb
>01cfc8		c9 9b bd e9 9b bf 09 9c
>01cfd0		c1 29 9c c3 49 9c c5 69		.text $C1,$29,$9C,$C3,$49,$9C,$C5,$69,$9C,$C7,$89,$9C,$C9,$A9,$9C,$CB,$C9,$9C,$CD,$E9,$9C,$CF,$09,$9D,$FF,$2F,$9D,$D3,$49,$9D,$D5,$69
>01cfd8		9c c7 89 9c c9 a9 9c cb c9 9c cd e9 9c cf 09 9d
>01cfe8		ff 2f 9d d3 49 9d d5 69
>01cff0		9d d7 89 9d d9 a9 9d db		.text $9D,$D7,$89,$9D,$D9,$A9,$9D,$DB,$C9,$9D,$DD,$E9,$9D,$DF,$09,$9E,$E1,$29,$9E,$E3,$49,$9E,$E5,$69,$9E,$E7,$89,$9E,$E9,$A9,$9E,$EB
>01cff8		c9 9d dd e9 9d df 09 9e e1 29 9e e3 49 9e e5 69
>01d008		9e e7 89 9e e9 a9 9e eb
>01d010		c9 9e ed e9 9e ef 09 9f		.text $C9,$9E,$ED,$E9,$9E,$EF,$09,$9F,$F1,$29,$9F,$F3,$49,$9F,$F5,$69,$9F,$F7,$89,$9F,$F9,$A9,$9F,$FB,$C9,$9F,$FD,$E9,$9F,$FF,$09,$A0
>01d018		f1 29 9f f3 49 9f f5 69 9f f7 89 9f f9 a9 9f fb
>01d028		c9 9f fd e9 9f ff 09 a0
>01d030		01 2a a0 03 4a a0 05 6a		.text $01,$2A,$A0,$03,$4A,$A0,$05,$6A,$A0,$07,$8A,$A0,$09,$AA,$A0,$0B,$CA,$A0,$0D,$EA,$A0,$0F,$0A,$A1,$11,$2A,$A1,$13,$4A,$A1,$FF,$6F
>01d038		a0 07 8a a0 09 aa a0 0b ca a0 0d ea a0 0f 0a a1
>01d048		11 2a a1 13 4a a1 ff 6f
>01d050		a1 17 8a a1 19 aa a1 1b		.text $A1,$17,$8A,$A1,$19,$AA,$A1,$1B,$CA,$A1,$1D,$EA,$A1,$1F,$0A,$A2,$21,$2A,$A2,$23,$4A,$A2,$25,$6A,$A2,$27,$8A,$A2,$29,$AA,$A2,$2B
>01d058		ca a1 1d ea a1 1f 0a a2 21 2a a2 23 4a a2 25 6a
>01d068		a2 27 8a a2 29 aa a2 2b
>01d070		fa ff 2d ea a2 2f 0a a3		.text $FA,$FF,$2D,$EA,$A2,$2F,$0A,$A3,$31,$2A,$A3,$33,$4A,$A3,$35,$6A,$A3,$37,$8A,$A3,$39,$AA,$A3,$3B,$CA,$A3,$3D,$EA,$A3,$3F,$0A,$A4
>01d078		31 2a a3 33 4a a3 35 6a a3 37 8a a3 39 aa a3 3b
>01d088		ca a3 3d ea a3 3f 0a a4
>01d090		41 2a a4 43 4a a4 45 6a		.text $41,$2A,$A4,$43,$4A,$A4,$45,$6A,$A4,$47,$8A,$A4,$49,$AA,$A4,$4B,$CA,$A4,$4D,$EA,$A4,$4F,$0A,$A5,$51,$2A,$A5,$FF,$4F,$A5,$55,$6A
>01d098		a4 47 8a a4 49 aa a4 4b ca a4 4d ea a4 4f 0a a5
>01d0a8		51 2a a5 ff 4f a5 55 6a
>01d0b0		a5 57 8a a5 59 aa a5 5b		.text $A5,$57,$8A,$A5,$59,$AA,$A5,$5B,$CA,$A5,$5D,$EA,$A5,$5F,$FA,$FF,$61,$2A,$A6,$63,$4A,$A6,$65,$6A,$A6,$67,$8A,$A6,$69,$AA,$A6,$6B
>01d0b8		ca a5 5d ea a5 5f fa ff 61 2a a6 63 4a a6 65 6a
>01d0c8		a6 67 8a a6 69 aa a6 6b
>01d0d0		ca a6 6d ea a6 6f 0a a7		.text $CA,$A6,$6D,$EA,$A6,$6F,$0A,$A7,$71,$2A,$A7,$73,$4A,$A7,$75,$6A,$A7,$77,$8A,$A7,$79,$AA,$A7,$7B,$CA,$A7,$7D,$EA,$A7,$7F,$0A,$A8
>01d0d8		71 2a a7 73 4a a7 75 6a a7 77 8a a7 79 aa a7 7b
>01d0e8		ca a7 7d ea a7 7f 0a a8
>01d0f0		81 2a a8 83 4a a8 85 6a		.text $81,$2A,$A8,$83,$4A,$A8,$85,$6A,$A8,$87,$8A,$A8,$89,$AA,$A8,$8B,$CA,$A8,$8D,$EA,$A8,$8F,$0A,$A9,$91,$2A,$A9,$93,$4A,$A9,$95,$6A
>01d0f8		a8 87 8a a8 89 aa a8 8b ca a8 8d ea a8 8f 0a a9
>01d108		91 2a a9 93 4a a9 95 6a
>01d110		a9 97 8a a9 99 aa a9 9b		.text $A9,$97,$8A,$A9,$99,$AA,$A9,$9B,$CA,$A9,$9D,$EA,$A9,$9F,$0A,$AA,$A1,$2A,$AA,$A3,$4A,$AA,$A5,$6A,$AA,$A7,$8A,$AA,$A9,$AA,$AA,$AB
>01d118		ca a9 9d ea a9 9f 0a aa a1 2a aa a3 4a aa a5 6a
>01d128		aa a7 8a aa a9 aa aa ab
>01d130		ca aa ad ea aa af 0a ab		.text $CA,$AA,$AD,$EA,$AA,$AF,$0A,$AB,$B1,$2A,$AB,$B3,$4A,$AB,$B5,$6A,$AB,$B7,$8A,$AB,$B9,$AA,$AB,$BB,$CA,$AB,$BD,$EA,$AB,$BF,$0A,$AC
>01d138		b1 2a ab b3 4a ab b5 6a ab b7 8a ab b9 aa ab bb
>01d148		ca ab bd ea ab bf 0a ac
>01d150		c1 2a ac c3 4a ac c5 6a		.text $C1,$2A,$AC,$C3,$4A,$AC,$C5,$6A,$AC,$C7,$8A,$AC,$C9,$AA,$AC,$CB,$CA,$AC,$CD,$EA,$AC,$CF,$0A,$AD,$D1,$2A,$AD,$D3,$4A,$AD,$D5,$6A
>01d158		ac c7 8a ac c9 aa ac cb ca ac cd ea ac cf 0a ad
>01d168		d1 2a ad d3 4a ad d5 6a
>01d170		ad d7 8a ad d9 aa ad db		.text $AD,$D7,$8A,$AD,$D9,$AA,$AD,$DB,$CA,$AD,$DD,$EA,$AD,$DF,$0A,$AE,$E1,$2A,$AE,$E3,$4A,$AE,$E5,$6A,$AE,$E7,$8A,$AE,$E9,$AA,$AE,$EB
>01d178		ca ad dd ea ad df 0a ae e1 2a ae e3 4a ae e5 6a
>01d188		ae e7 8a ae e9 aa ae eb
>01d190		ca ae ed ea ae ef 0a af		.text $CA,$AE,$ED,$EA,$AE,$EF,$0A,$AF,$F1,$2A,$AF,$F3,$4A,$AF,$F5,$6A,$AF,$F7,$8A,$AF,$F9,$AA,$AF,$FB,$CA,$AF,$FD,$EA,$AF,$FF,$0A,$B0
>01d198		f1 2a af f3 4a af f5 6a af f7 8a af f9 aa af fb
>01d1a8		ca af fd ea af ff 0a b0
>01d1b0		01 2b b0 03 4b b0 05 6b		.text $01,$2B,$B0,$03,$4B,$B0,$05,$6B,$B0,$07,$FB,$FF,$09,$AB,$B0,$0B,$CB,$B0,$0D,$EB,$B0,$0F,$0B,$B1,$FF,$0F,$00,$00,$00,$00,$00,$00
>01d1b8		b0 07 fb ff 09 ab b0 0b cb b0 0d eb b0 0f 0b b1
>01d1c8		ff 0f 00 00 00 00 00 00
>01d1d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d1e8		00 00 00 00 00 00 00 00
>01d1f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d208		00 00 00 00 00 00 00 00
>01d210		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d218		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d228		00 00 00 00 00 00 00 00
>01d230		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d248		00 00 00 00 00 00 00 00
>01d250		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d268		00 00 00 00 00 00 00 00
>01d270		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d288		00 00 00 00 00 00 00 00
>01d290		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d298		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d2a8		00 00 00 00 00 00 00 00
>01d2b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d2c8		00 00 00 00 00 00 00 00
>01d2d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d2d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d2e8		00 00 00 00 00 00 00 00
>01d2f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d308		00 00 00 00 00 00 00 00
>01d310		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d328		00 00 00 00 00 00 00 00
>01d330		49 4f 20 20 20 20 20 20		.text $49,$4F,$20,$20,$20,$20,$20,$20,$53,$59,$53,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$02,$00,$36,$9F,$00,$00
>01d338		53 59 53 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d348		a9 1c 02 00 36 9f 00 00
>01d350		4d 53 44 4f 53 20 20 20		.text $4D,$53,$44,$4F,$53,$20,$20,$20,$53,$59,$53,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$52,$00,$FA,$94,$00,$00
>01d358		53 59 53 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d368		a9 1c 52 00 fa 94 00 00
>01d370		43 4f 4d 4d 41 4e 44 20		.text $43,$4F,$4D,$4D,$41,$4E,$44,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$9D,$00,$60,$D5,$00,$00
>01d378		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d388		a9 1c 9d 00 60 d5 00 00
>01d390		41 55 54 4f 45 58 45 43		.text $41,$55,$54,$4F,$45,$58,$45,$43,$42,$41,$54,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$08,$01,$26,$00,$00,$00
>01d398		42 41 54 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d3a8		a9 1c 08 01 26 00 00 00
>01d3b0		44 42 4c 53 50 41 43 45		.text $44,$42,$4C,$53,$50,$41,$43,$45,$42,$49,$23,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$09,$01,$68,$73,$00,$00
>01d3b8		42 49 23 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d3c8		a9 1c 09 01 68 73 00 00
>01d3d0		44 52 56 53 50 41 43 45		.text $44,$52,$56,$53,$50,$41,$43,$45,$42,$49,$4E,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$43,$01,$F6,$02,$01,$00
>01d3d8		42 49 4e 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d3e8		a9 1c 43 01 f6 02 01 00
>01d3f0		43 48 4f 49 43 45 20 20		.text $43,$48,$4F,$49,$43,$45,$20,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$C5,$01,$DA,$06,$00,$00
>01d3f8		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d408		a9 1c c5 01 da 06 00 00
>01d410		45 44 49 54 20 20 20 20		.text $45,$44,$49,$54,$20,$20,$20,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$C9,$01,$9D,$01,$00,$00
>01d418		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d428		a9 1c c9 01 9d 01 00 00
>01d430		46 4f 52 4d 41 54 20 20		.text $46,$4F,$52,$4D,$41,$54,$20,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$CA,$01,$C5,$59,$00,$00
>01d438		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d448		a9 1c ca 01 c5 59 00 00
>01d450		4b 45 59 42 20 20 20 20		.text $4B,$45,$59,$42,$20,$20,$20,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$F7,$01,$86,$3D,$00,$00
>01d458		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d468		a9 1c f7 01 86 3d 00 00
>01d470		53 59 53 20 20 20 20 20		.text $53,$59,$53,$20,$20,$20,$20,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$16,$02,$D8,$24,$00,$00
>01d478		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d488		a9 1c 16 02 d8 24 00 00
>01d490		45 47 41 20 20 20 20 20		.text $45,$47,$41,$20,$20,$20,$20,$20,$43,$50,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$29,$02,$A4,$47,$00,$00
>01d498		43 50 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d4a8		a9 1c 29 02 a4 47 00 00
>01d4b0		45 47 41 32 20 20 20 20		.text $45,$47,$41,$32,$20,$20,$20,$20,$43,$50,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$4D,$02,$69,$4A,$00,$00
>01d4b8		43 50 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d4c8		a9 1c 4d 02 69 4a 00 00
>01d4d0		45 47 41 33 20 20 20 20		.text $45,$47,$41,$33,$20,$20,$20,$20,$43,$50,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$73,$02,$C6,$3C,$00,$00
>01d4d8		43 50 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d4e8		a9 1c 73 02 c6 3c 00 00
>01d4f0		41 54 54 52 49 42 20 20		.text $41,$54,$54,$52,$49,$42,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$92,$02,$C8,$2B,$00,$00
>01d4f8		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d508		a9 1c 92 02 c8 2b 00 00
>01d510		42 55 53 45 54 55 50 20		.text $42,$55,$53,$45,$54,$55,$50,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$A8,$02,$1F,$20,$01,$00
>01d518		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d528		a9 1c a8 02 1f 20 01 00
>01d530		43 48 4b 44 53 4b 20 20		.text $43,$48,$4B,$44,$53,$4B,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$39,$03,$D1,$2F,$00,$00
>01d538		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d548		a9 1c 39 03 d1 2f 00 00
>01d550		44 45 42 55 47 20 20 20		.text $44,$45,$42,$55,$47,$20,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$51,$03,$66,$3D,$00,$00
>01d558		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d568		a9 1c 51 03 66 3d 00 00
>01d570		44 45 46 52 41 47 20 20		.text $44,$45,$46,$52,$41,$47,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$70,$03,$D9,$34,$01,$00
>01d578		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d588		a9 1c 70 03 d9 34 01 00
>01d590		45 58 50 41 4e 44 20 20		.text $45,$58,$50,$41,$4E,$44,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$0B,$04,$01,$3F,$00,$00
>01d598		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d5a8		a9 1c 0b 04 01 3f 00 00
>01d5b0		46 44 49 53 4b 20 20 20		.text $46,$44,$49,$53,$4B,$20,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$2B,$04,$98,$72,$00,$00
>01d5b8		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d5c8		a9 1c 2b 04 98 72 00 00
>01d5d0		4d 53 43 44 45 58 20 20		.text $4D,$53,$43,$44,$45,$58,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$65,$04,$11,$63,$00,$00
>01d5d8		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d5e8		a9 1c 65 04 11 63 00 00
>01d5f0		4e 4c 53 46 55 4e 43 20		.text $4E,$4C,$53,$46,$55,$4E,$43,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$97,$04,$7C,$1B,$00,$00
>01d5f8		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d608		a9 1c 97 04 7c 1b 00 00
>01d610		51 42 41 53 49 43 20 20		.text $51,$42,$41,$53,$49,$43,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$A5,$04,$05,$F7,$02,$00
>01d618		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d628		a9 1c a5 04 05 f7 02 00
>01d630		53 43 41 4e 44 49 53 4b		.text $53,$43,$41,$4E,$44,$49,$53,$4B,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$21,$06,$66,$E5,$01,$00
>01d638		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d648		a9 1c 21 06 66 e5 01 00
>01d650		53 45 54 55 50 20 20 20		.text $53,$45,$54,$55,$50,$20,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$14,$07,$38,$B2,$01,$00
>01d658		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d668		a9 1c 14 07 38 b2 01 00
>01d670		55 4e 49 4e 53 54 41 4c		.text $55,$4E,$49,$4E,$53,$54,$41,$4C,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$EE,$07,$C7,$57,$01,$00
>01d678		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d688		a9 1c ee 07 c7 57 01 00
>01d690		44 45 4c 4f 4c 44 4f 53		.text $44,$45,$4C,$4F,$4C,$44,$4F,$53,$45,$58,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$9A,$08,$48,$2C,$00,$00
>01d698		45 58 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d6a8		a9 1c 9a 08 48 2c 00 00
>01d6b0		45 4d 4d 33 38 36 20 20		.text $45,$4D,$4D,$33,$38,$36,$20,$20,$45,$58,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$B1,$08,$8A,$C3,$00,$00
>01d6b8		45 58 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d6c8		a9 1c b1 08 8a c3 00 00
>01d6d0		4d 45 4d 20 20 20 20 20		.text $4D,$45,$4D,$20,$20,$20,$20,$20,$45,$58,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$13,$09,$38,$4C,$00,$00
>01d6d8		45 58 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d6e8		a9 1c 13 09 38 4c 00 00
>01d6f0		58 43 4f 50 59 20 20 20		.text $58,$43,$4F,$50,$59,$20,$20,$20,$45,$58,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$3A,$09,$55,$2B,$00,$00
>01d6f8		45 58 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d708		a9 1c 3a 09 55 2b 00 00
>01d710		44 45 46 52 41 47 20 20		.text $44,$45,$46,$52,$41,$47,$20,$20,$48,$4C,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$50,$09,$BC,$10,$00,$00
>01d718		48 4c 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d728		a9 1c 50 09 bc 10 00 00
>01d730		44 4f 53 48 45 4c 50 20		.text $44,$4F,$53,$48,$45,$4C,$50,$20,$48,$4C,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$59,$09,$A0,$09,$00,$00
>01d738		48 4c 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d748		a9 1c 59 09 a0 09 00 00
>01d750		44 4f 53 53 45 54 55 50		.text $44,$4F,$53,$53,$45,$54,$55,$50,$49,$4E,$49,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$5E,$09,$02,$39,$00,$00
>01d758		49 4e 49 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d768		a9 1c 5e 09 02 39 00 00
>01d770		53 43 41 4e 44 49 53 4b		.text $53,$43,$41,$4E,$44,$49,$53,$4B,$49,$4E,$49,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$7B,$09,$08,$1B,$00,$00
>01d778		49 4e 49 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d788		a9 1c 7b 09 08 1b 00 00
>01d790		50 41 43 4b 49 4e 47 20		.text $50,$41,$43,$4B,$49,$4E,$47,$20,$4C,$53,$54,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$89,$09,$69,$1A,$00,$00
>01d798		4c 53 54 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d7a8		a9 1c 89 09 69 1a 00 00
>01d7b0		53 45 54 55 50 20 20 20		.text $53,$45,$54,$55,$50,$20,$20,$20,$4D,$53,$47,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$97,$09,$FD,$06,$00,$00
>01d7b8		4d 53 47 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d7c8		a9 1c 97 09 fd 06 00 00
>01d7d0		43 4f 4e 46 49 47 20 20		.text $43,$4F,$4E,$46,$49,$47,$20,$20,$53,$59,$53,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$9B,$09,$0D,$00,$00,$00
>01d7d8		53 59 53 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d7e8		a9 1c 9b 09 0d 00 00 00
>01d7f0		43 4f 55 4e 54 52 59 20		.text $43,$4F,$55,$4E,$54,$52,$59,$20,$53,$59,$53,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$9C,$09,$38,$69,$00,$00
>01d7f8		53 59 53 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d808		a9 1c 9c 09 38 69 00 00
>01d810		4b 45 59 42 4f 41 52 44		.text $4B,$45,$59,$42,$4F,$41,$52,$44,$53,$59,$53,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$D1,$09,$26,$87,$00,$00
>01d818		53 59 53 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d828		a9 1c d1 09 26 87 00 00
>01d830		4b 45 59 42 52 44 32 20		.text $4B,$45,$59,$42,$52,$44,$32,$20,$53,$59,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$15,$0A,$EF,$2D,$00,$00
>01d838		53 59 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d848		a9 1c 15 0a ef 2d 00 00
>01d850		4e 45 54 57 4f 52 4b 53		.text $4E,$45,$54,$57,$4F,$52,$4B,$53,$54,$58,$54,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$2C,$0A,$EF,$4D,$00,$00
>01d858		54 58 54 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d868		a9 1c 2c 0a ef 4d 00 00
>01d870		4f 53 32 20 20 20 20 20		.text $4F,$53,$32,$20,$20,$20,$20,$20,$54,$58,$54,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$53,$0A,$D6,$18,$00,$00
>01d878		54 58 54 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d888		a9 1c 53 0a d6 18 00 00
>01d890		52 45 41 44 4d 45 20 20		.text $52,$45,$41,$44,$4D,$45,$20,$20,$54,$58,$54,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$60,$0A,$A4,$4F,$01,$00
>01d898		54 58 54 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d8a8		a9 1c 60 0a a4 4f 01 00
>01d8b0		43 4f 55 4e 54 52 59 20		.text $43,$4F,$55,$4E,$54,$52,$59,$20,$54,$58,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$08,$0B,$F1,$10,$00,$00
>01d8b8		54 58 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d8c8		a9 1c 08 0b f1 10 00 00
>01d8d0		44 49 53 4b 20 20 20 20		.text $44,$49,$53,$4B,$20,$20,$20,$20,$20,$20,$31,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E3,$32,$A9,$1C,$00,$00,$00,$00,$00,$00
>01d8d8		20 20 31 28 00 00 00 00 00 00 00 00 00 00 e3 32
>01d8e8		a9 1c 00 00 00 00 00 00
>01d8f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d908		00 00 00 00 00 00 00 00
>01d910		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d928		00 00 00 00 00 00 00 00
>01d930		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d948		00 00 00 00 00 00 00 00
>01d950		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d968		00 00 00 00 00 00 00 00
>01d970		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d988		00 00 00 00 00 00 00 00
>01d990		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d9a8		00 00 00 00 00 00 00 00
>01d9b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d9c8		00 00 00 00 00 00 00 00
>01d9d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d9e8		00 00 00 00 00 00 00 00
>01d9f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01da08		00 00 00 00 00 00 00 00
>01da10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01da18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01da28		00 00 00 00 00 00 00 00
>01da30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01da38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01da48		00 00 00 00 00 00 00 00
>01da50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01da58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01da68		00 00 00 00 00 00 00 00
>01da70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01da78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01da88		00 00 00 00 00 00 00 00
>01da90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01da98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01daa8		00 00 00 00 00 00 00 00
>01dab0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dac8		00 00 00 00 00 00 00 00
>01dad0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dae8		00 00 00 00 00 00 00 00
>01daf0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01daf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01db08		00 00 00 00 00 00 00 00
>01db10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01db18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01db28		00 00 00 00 00 00 00 00
>01db30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01db38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01db48		00 00 00 00 00 00 00 00
>01db50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01db58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01db68		00 00 00 00 00 00 00 00
>01db70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01db78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01db88		00 00 00 00 00 00 00 00
>01db90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01db98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dba8		00 00 00 00 00 00 00 00
>01dbb0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dbb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dbc8		00 00 00 00 00 00 00 00
>01dbd0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dbd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dbe8		00 00 00 00 00 00 00 00
>01dbf0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dbf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dc08		00 00 00 00 00 00 00 00
>01dc10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dc18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dc28		00 00 00 00 00 00 00 00
>01dc30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dc38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dc48		00 00 00 00 00 00 00 00
>01dc50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dc58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dc68		00 00 00 00 00 00 00 00
>01dc70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dc78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dc88		00 00 00 00 00 00 00 00
>01dc90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dc98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dca8		00 00 00 00 00 00 00 00
>01dcb0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dcb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dcc8		00 00 00 00 00 00 00 00
>01dcd0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dcd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dce8		00 00 00 00 00 00 00 00
>01dcf0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dcf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dd08		00 00 00 00 00 00 00 00
>01dd10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dd18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dd28		00 00 00 00 00 00 00 00
>01dd30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dd38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dd48		00 00 00 00 00 00 00 00
>01dd50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dd58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dd68		00 00 00 00 00 00 00 00
>01dd70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dd78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dd88		00 00 00 00 00 00 00 00
>01dd90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dd98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dda8		00 00 00 00 00 00 00 00
>01ddb0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ddb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ddc8		00 00 00 00 00 00 00 00
>01ddd0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ddd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dde8		00 00 00 00 00 00 00 00
>01ddf0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ddf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01de08		00 00 00 00 00 00 00 00
>01de10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01de18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01de28		00 00 00 00 00 00 00 00
>01de30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01de38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01de48		00 00 00 00 00 00 00 00
>01de50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01de58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01de68		00 00 00 00 00 00 00 00
>01de70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01de78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01de88		00 00 00 00 00 00 00 00
>01de90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01de98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dea8		00 00 00 00 00 00 00 00
>01deb0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01deb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dec8		00 00 00 00 00 00 00 00
>01ded0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ded8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dee8		00 00 00 00 00 00 00 00
>01def0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01def8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01df08		00 00 00 00 00 00 00 00
>01df10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01df18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01df28		00 00 00 00 00 00 00 00
>01df30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01df38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01df48		00 00 00 00 00 00 00 00
>01df50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01df58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01df68		00 00 00 00 00 00 00 00
>01df70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01df78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01df88		00 00 00 00 00 00 00 00
>01df90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01df98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dfa8		00 00 00 00 00 00 00 00
>01dfb0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dfb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dfc8		00 00 00 00 00 00 00 00
>01dfd0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dfd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dfe8		00 00 00 00 00 00 00 00
>01dff0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e008		00 00 00 00 00 00 00 00
>01e010		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e028		00 00 00 00 00 00 00 00
>01e030		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e048		00 00 00 00 00 00 00 00
>01e050		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e068		00 00 00 00 00 00 00 00
>01e070		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e088		00 00 00 00 00 00 00 00
>01e090		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e0a8		00 00 00 00 00 00 00 00
>01e0b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e0c8		00 00 00 00 00 00 00 00
>01e0d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e0e8		00 00 00 00 00 00 00 00
>01e0f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e108		00 00 00 00 00 00 00 00
>01e110		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e128		00 00 00 00 00 00 00 00
>01e130		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e148		00 00 00 00 00 00 00 00
>01e150		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e158		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e168		00 00 00 00 00 00 00 00
>01e170		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e188		00 00 00 00 00 00 00 00
>01e190		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e1a8		00 00 00 00 00 00 00 00
>01e1b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e1c8		00 00 00 00 00 00 00 00
>01e1d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e1e8		00 00 00 00 00 00 00 00
>01e1f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e208		00 00 00 00 00 00 00 00
>01e210		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e218		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e228		00 00 00 00 00 00 00 00
>01e230		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e248		00 00 00 00 00 00 00 00
>01e250		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e268		00 00 00 00 00 00 00 00
>01e270		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e288		00 00 00 00 00 00 00 00
>01e290		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e298		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e2a8		00 00 00 00 00 00 00 00
>01e2b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e2c8		00 00 00 00 00 00 00 00
>01e2d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e2d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e2e8		00 00 00 00 00 00 00 00
>01e2f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e308		00 00 00 00 00 00 00 00
>01e310		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e328		00 00 00 00 00 00 00 00
>01e330		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e348		00 00 00 00 00 00 00 00
>01e350		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e358		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e368		00 00 00 00 00 00 00 00
>01e370		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e388		00 00 00 00 00 00 00 00
>01e390		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e3a8		00 00 00 00 00 00 00 00
>01e3b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e3c8		00 00 00 00 00 00 00 00
>01e3d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e3d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e3e8		00 00 00 00 00 00 00 00
>01e3f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e408		00 00 00 00 00 00 00 00
>01e410		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e428		00 00 00 00 00 00 00 00
>01e430		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e448		00 00 00 00 00 00 00 00
>01e450		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e468		00 00 00 00 00 00 00 00
>01e470		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e488		00 00 00 00 00 00 00 00
>01e490		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e4a8		00 00 00 00 00 00 00 00
>01e4b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e4c8		00 00 00 00 00 00 00 00
>01e4d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e4d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e4e8		00 00 00 00 00 00 00 00
>01e4f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e508		00 00 00 00 00 00 00 00
>01e510		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e518		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e528		00 00 00 00 00 00 00 00
>01e530		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e548		00 00 00 00 00 00 00 00
>01e550		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e568		00 00 00 00 00 00 00 00
>01e570		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e588		00 00 00 00 00 00 00 00
>01e590		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e5a8		00 00 00 00 00 00 00 00
>01e5b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e5b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e5c8		00 00 00 00 00 00 00 00
>01e5d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e5d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e5e8		00 00 00 00 00 00 00 00
>01e5f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e5f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e608		00 00 00 00 00 00 00 00
>01e610		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e628		00 00 00 00 00 00 00 00
>01e630		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e648		00 00 00 00 00 00 00 00
>01e650		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e668		00 00 00 00 00 00 00 00
>01e670		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e688		00 00 00 00 00 00 00 00
>01e690		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e6a8		00 00 00 00 00 00 00 00
>01e6b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e6b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e6c8		00 00 00 00 00 00 00 00
>01e6d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e6d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e6e8		00 00 00 00 00 00 00 00
>01e6f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e6f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e708		00 00 00 00 00 00 00 00
>01e710		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e728		00 00 00 00 00 00 00 00
>01e730		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e748		00 00 00 00 00 00 00 00
>01e750		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e768		00 00 00 00 00 00 00 00
>01e770		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e788		00 00 00 00 00 00 00 00
>01e790		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e7a8		00 00 00 00 00 00 00 00
>01e7b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e7b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e7c8		00 00 00 00 00 00 00 00
>01e7d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e7e8		00 00 00 00 00 00 00 00
>01e7f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e7f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e808		00 00 00 00 00 00 00 00
>01e810		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e828		00 00 00 00 00 00 00 00
>01e830		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e838		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e848		00 00 00 00 00 00 00 00
>01e850		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e868		00 00 00 00 00 00 00 00
>01e870		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e888		00 00 00 00 00 00 00 00
>01e890		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e8a8		00 00 00 00 00 00 00 00
>01e8b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e8b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e8c8		00 00 00 00 00 00 00 00
>01e8d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e8e8		00 00 00 00 00 00 00 00
>01e8f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e908		00 00 00 00 00 00 00 00
>01e910		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e928		00 00 00 00 00 00 00 00
>01e930		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e948		00 00 00 00 00 00 00 00
>01e950		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e968		00 00 00 00 00 00 00 00
>01e970		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e988		00 00 00 00 00 00 00 00
>01e990		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e9a8		00 00 00 00 00 00 00 00
>01e9b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e9c8		00 00 00 00 00 00 00 00
>01e9d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e9e8		00 00 00 00 00 00 00 00
>01e9f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ea08		00 00 00 00 00 00 00 00
>01ea10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ea18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ea28		00 00 00 00 00 00 00 00
>01ea30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ea38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ea48		00 00 00 00 00 00 00 00
>01ea50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ea58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ea68		00 00 00 00 00 00 00 00
>01ea70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ea78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ea88		00 00 00 00 00 00 00 00
>01ea90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ea98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eaa8		00 00 00 00 00 00 00 00
>01eab0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eac8		00 00 00 00 00 00 00 00
>01ead0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ead8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eae8		00 00 00 00 00 00 00 00
>01eaf0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eaf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eb08		00 00 00 00 00 00 00 00
>01eb10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eb18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eb28		00 00 00 00 00 00 00 00
>01eb30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eb38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eb48		00 00 00 00 00 00 00 00
>01eb50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eb58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eb68		00 00 00 00 00 00 00 00
>01eb70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eb78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eb88		00 00 00 00 00 00 00 00
>01eb90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eb98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eba8		00 00 00 00 00 00 00 00
>01ebb0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ebb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ebc8		00 00 00 00 00 00 00 00
>01ebd0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ebd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ebe8		00 00 00 00 00 00 00 00
>01ebf0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ebf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ec08		00 00 00 00 00 00 00 00
>01ec10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ec18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ec28		00 00 00 00 00 00 00 00
>01ec30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ec38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ec48		00 00 00 00 00 00 00 00
>01ec50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ec58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ec68		00 00 00 00 00 00 00 00
>01ec70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ec78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ec88		00 00 00 00 00 00 00 00
>01ec90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ec98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eca8		00 00 00 00 00 00 00 00
>01ecb0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ecb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ecc8		00 00 00 00 00 00 00 00
>01ecd0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ecd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ece8		00 00 00 00 00 00 00 00
>01ecf0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ecf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ed08		00 00 00 00 00 00 00 00
>01ed10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ed18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ed28		00 00 00 00 00 00 00 00
>01ed30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ed38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ed48		00 00 00 00 00 00 00 00
>01ed50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ed58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ed68		00 00 00 00 00 00 00 00
>01ed70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ed78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ed88		00 00 00 00 00 00 00 00
>01ed90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ed98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eda8		00 00 00 00 00 00 00 00
>01edb0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01edb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01edc8		00 00 00 00 00 00 00 00
>01edd0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01edd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ede8		00 00 00 00 00 00 00 00
>01edf0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01edf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ee08		00 00 00 00 00 00 00 00
>01ee10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ee18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ee28		00 00 00 00 00 00 00 00
>01ee30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ee38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ee48		00 00 00 00 00 00 00 00
>01ee50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ee58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ee68		00 00 00 00 00 00 00 00
>01ee70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ee78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ee88		00 00 00 00 00 00 00 00
>01ee90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ee98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eea8		00 00 00 00 00 00 00 00
>01eeb0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eec8		00 00 00 00 00 00 00 00
>01eed0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eed8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eee8		00 00 00 00 00 00 00 00
>01eef0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ef08		00 00 00 00 00 00 00 00
>01ef10		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ef18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ef28		00 00 00 00 00 00 00 00
>01ef30		e9 35 01 06 16 00 00 00		.text $E9,$35,$01,$06,$16,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ef38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ef48		00 00 00 00 00 00 00 00
>01ef50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ef58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ef68		00 00 00 00 00 00 00 00
>01ef70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ef78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ef88		00 00 00 00 00 00 00 00
>01ef90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ef98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01efa8		00 00 00 00 00 00 00 00
>01efb0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01efb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01efc8		00 00 00 00 00 00 00 00
>01efd0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01efd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01efe8		00 00 00 00 00 00 00 00
>01eff0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f008		00 00 00 00 00 00 00 00
>01f010		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f028		00 00 00 00 00 00 00 00
>01f030		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f038		00 00 00 00 00 00 00 00 00 ff ff 00 00 00 00 00
>01f048		00 00 00 00 00 00 00 00
>01f050		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$2E,$89,$1E,$23,$01,$2E,$88,$2E
>01f058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f068		2e 89 1e 23 01 2e 88 2e
>01f070		2f 01 2e 88 16 2d 01 2e		.text $2F,$01,$2E,$88,$16,$2D,$01,$2E,$89,$36,$31,$01,$1E,$2E,$8F,$06,$33,$01,$33,$C9,$8E,$D9,$06,$8E,$C1,$8B,$36,$78,$00,$8E,$1E,$7A
>01f078		89 36 31 01 1e 2e 8f 06 33 01 33 c9 8e d9 06 8e
>01f088		c1 8b 36 78 00 8e 1e 7a
>01f090		00 bf 22 05 b9 0b 00 fc		.text $00,$BF,$22,$05,$B9,$0B,$00,$FC,$F3,$A4,$06,$1F,$C7,$06,$78,$00,$22,$05,$8C,$1E,$7A,$00,$07,$8B,$0E,$0B,$7C,$2E,$89,$0E,$1B,$01
>01f098		f3 a4 06 1f c7 06 78 00 22 05 8c 1e 7a 00 07 8b
>01f0a8		0e 0b 7c 2e 89 0e 1b 01
>01f0b0		8a 0e 0d 7c 2e 88 0e 37		.text $8A,$0E,$0D,$7C,$2E,$88,$0E,$37,$01,$8B,$0E,$18,$7C,$2E,$89,$0E,$2B,$01,$8B,$0E,$1A,$7C,$2E,$89,$0E,$05,$01,$8B,$0E,$16,$7C,$2E
>01f0b8		01 8b 0e 18 7c 2e 89 0e 2b 01 8b 0e 1a 7c 2e 89
>01f0c8		0e 05 01 8b 0e 16 7c 2e
>01f0d0		89 0e 15 01 8b 0e 0e 7c		.text $89,$0E,$15,$01,$8B,$0E,$0E,$7C,$2E,$89,$0E,$1D,$01,$8B,$0E,$1C,$7C,$2E,$89,$0E,$17,$01,$8B,$0E,$13,$7C,$2E,$89,$0E,$27,$01,$80
>01f0d8		2e 89 0e 1d 01 8b 0e 1c 7c 2e 89 0e 17 01 8b 0e
>01f0e8		13 7c 2e 89 0e 27 01 80
>01f0f0		3e 26 7c 29 75 1e 2e a3		.text $3E,$26,$7C,$29,$75,$1E,$2E,$A3,$25,$01,$A1,$1E,$7C,$2E,$A3,$19,$01,$83,$F9,$00,$75,$0E,$A1,$20,$7C,$2E,$A3,$27,$01,$A1,$22,$7C
>01f0f8		25 01 a1 1e 7c 2e a3 19 01 83 f9 00 75 0e a1 20
>01f108		7c 2e a3 27 01 a1 22 7c
>01f110		2e a3 29 01 fc 33 f6 8b		.text $2E,$A3,$29,$01,$FC,$33,$F6,$8B,$FE,$CD,$12,$B1,$06,$D3,$E0,$33,$DB,$8E,$DB,$8B,$1E,$BC,$00,$8E,$1E,$BE,$00,$81,$7F,$03,$52,$50
>01f118		fe cd 12 b1 06 d3 e0 33 db 8e db 8b 1e bc 00 8e
>01f128		1e be 00 81 7f 03 52 50
>01f130		75 0f 80 7f 05 4c 75 09		.text $75,$0F,$80,$7F,$05,$4C,$75,$09,$8B,$D0,$B8,$06,$4A,$CD,$2F,$8B,$C2,$B1,$04,$2E,$8B,$16,$1B,$01,$D3,$EA,$42,$2B,$C2,$2E,$A3,$35
>01f138		8b d0 b8 06 4a cd 2f 8b c2 b1 04 2e 8b 16 1b 01
>01f148		d3 ea 42 2b c2 2e a3 35
>01f150		01 ba a6 05 d3 ea 42 2b		.text $01,$BA,$A6,$05,$D3,$EA,$42,$2B,$C2,$8E,$C0,$0E,$1F,$B9,$A6,$05,$F3,$A4,$06,$B8,$38,$02,$50,$CB,$8C,$C8,$8E,$D0,$BC,$05,$01,$33
>01f158		c2 8e c0 0e 1f b9 a6 05 f3 a4 06 b8 38 02 50 cb
>01f168		8c c8 8e d0 bc 05 01 33
>01f170		c0 8e d8 a1 0b 7c 33 db		.text $C0,$8E,$D8,$A1,$0B,$7C,$33,$DB,$8A,$1E,$0D,$7C,$F7,$E3,$2E,$A3,$07,$01,$2E,$C6,$06,$2E,$01,$01,$2E,$8B,$16,$29,$01,$2E,$A1,$27
>01f178		8a 1e 0d 7c f7 e3 2e a3 07 01 2e c6 06 2e 01 01
>01f188		2e 8b 16 29 01 2e a1 27
>01f190		01 2e 2b 06 1d 01 83 da		.text $01,$2E,$2B,$06,$1D,$01,$83,$DA,$00,$2E,$8B,$1E,$15,$01,$D1,$E3,$2B,$C3,$83,$DA,$00,$8B,$1E,$11,$7C,$B1,$04,$D3,$EB,$2B,$C3,$83
>01f198		00 2e 8b 1e 15 01 d1 e3 2b c3 83 da 00 8b 1e 11
>01f1a8		7c b1 04 d3 eb 2b c3 83
>01f1b0		da 00 33 c9 8a 0e 0d 7c		.text $DA,$00,$33,$C9,$8A,$0E,$0D,$7C,$50,$8B,$C2,$33,$D2,$F7,$F1,$2E,$A3,$0D,$01,$58,$F7,$F1,$3D,$F6,$0F,$72,$06,$2E,$C6,$06,$2E,$01
>01f1b8		50 8b c2 33 d2 f7 f1 2e a3 0d 01 58 f7 f1 3d f6
>01f1c8		0f 72 06 2e c6 06 2e 01
>01f1d0		04 a1 1a 05 48 48 2e a3		.text $04,$A1,$1A,$05,$48,$48,$2E,$A3,$1F,$01,$B8,$03,$00,$2E,$F6,$36,$37,$01,$80,$FC,$00,$74,$5C,$32,$E4,$50,$2E,$8B,$0E,$23,$01,$2E
>01f1d8		1f 01 b8 03 00 2e f6 36 37 01 80 fc 00 74 5c 32
>01f1e8		e4 50 2e 8b 0e 23 01 2e
>01f1f0		89 0e 09 01 2e 8b 0e 25		.text $89,$0E,$09,$01,$2E,$8B,$0E,$25,$01,$2E,$89,$0E,$0B,$01,$2E,$F6,$26,$37,$01,$2E,$01,$06,$09,$01,$2E,$83,$16,$0B,$01,$00,$A1,$1A
>01f1f8		01 2e 89 0e 0b 01 2e f6 26 37 01 2e 01 06 09 01
>01f208		2e 83 16 0b 01 00 a1 1a
>01f210		05 48 48 33 db 2e 8a 1e		.text $05,$48,$48,$33,$DB,$2E,$8A,$1E,$37,$01,$F7,$E3,$2E,$01,$06,$09,$01,$2E,$11,$16,$0B,$01,$58,$50,$2E,$F7,$26,$07,$01,$BF,$00,$07
>01f218		37 01 f7 e3 2e 01 06 09 01 2e 11 16 0b 01 58 50
>01f228		2e f7 26 07 01 bf 00 07
>01f230		03 f8 33 c0 8e c0 2e a0		.text $03,$F8,$33,$C0,$8E,$C0,$2E,$A0,$37,$01,$2E,$A3,$13,$01,$E8,$A3,$00,$58,$40,$40,$2E,$01,$06,$1F,$01,$48,$1E,$2E,$F7,$26,$07,$01
>01f238		37 01 2e a3 13 01 e8 a3 00 58 40 40 2e 01 06 1f
>01f248		01 48 1e 2e f7 26 07 01
>01f250		2d a6 05 8b c8 b8 70 00		.text $2D,$A6,$05,$8B,$C8,$B8,$70,$00,$8E,$D8,$8E,$C0,$BE,$A6,$05,$33,$FF,$F3,$A4,$2E,$89,$3E,$21,$01,$1F,$32,$E4,$2E,$A0,$37,$01,$2E
>01f258		8e d8 8e c0 be a6 05 33 ff f3 a4 2e 89 3e 21 01
>01f268		1f 32 e4 2e a0 37 01 2e
>01f270		a3 13 01 2e ff 36 13 01		.text $A3,$13,$01,$2E,$FF,$36,$13,$01,$E8,$18,$01,$2E,$8F,$06,$13,$01,$2E,$A3,$1F,$01,$2E,$80,$3E,$30,$01,$FF,$74,$40,$33,$D2,$2D,$02
>01f278		e8 18 01 2e 8f 06 13 01 2e a3 1f 01 2e 80 3e 30
>01f288		01 ff 74 40 33 d2 2d 02
>01f290		00 32 ed 2e 8a 0e 37 01		.text $00,$32,$ED,$2E,$8A,$0E,$37,$01,$F7,$E1,$2E,$03,$06,$23,$01,$2E,$13,$16,$25,$01,$2E,$A3,$09,$01,$2E,$89,$16,$0B,$01,$2E,$8B,$3E
>01f298		f7 e1 2e 03 06 23 01 2e 13 16 25 01 2e a3 09 01
>01f2a8		2e 89 16 0b 01 2e 8b 3e
>01f2b0		21 01 2e ff 36 13 01 b8		.text $21,$01,$2E,$FF,$36,$13,$01,$B8,$70,$00,$8E,$C0,$E8,$25,$00,$58,$2E,$F7,$26,$1B,$01,$2E,$01,$06,$21,$01,$EB,$9D,$2E,$8A,$2E,$2F
>01f2b8		70 00 8e c0 e8 25 00 58 2e f7 26 1b 01 2e 01 06
>01f2c8		21 01 eb 9d 2e 8a 2e 2f
>01f2d0		01 2e 8a 16 2d 01 2e 8b		.text $01,$2E,$8A,$16,$2D,$01,$2E,$8B,$1E,$23,$01,$2E,$A1,$25,$01,$EA,$00,$00,$70,$00,$B9,$05,$00,$51,$2E,$A1,$09,$01,$2E,$8B,$16,$0B
>01f2d8		1e 23 01 2e a1 25 01 ea 00 00 70 00 b9 05 00 51
>01f2e8		2e a1 09 01 2e 8b 16 0b
>01f2f0		01 50 8b c2 33 d2 2e f7		.text $01,$50,$8B,$C2,$33,$D2,$2E,$F7,$36,$2B,$01,$2E,$A3,$0D,$01,$58,$2E,$F7,$36,$2B,$01,$2E,$8B,$1E,$2B,$01,$2B,$DA,$8B,$F3,$2E,$39
>01f2f8		36 2b 01 2e a3 0d 01 58 2e f7 36 2b 01 2e 8b 1e
>01f308		2b 01 2b da 8b f3 2e 39
>01f310		36 13 01 73 05 2e 8b 36		.text $36,$13,$01,$73,$05,$2E,$8B,$36,$13,$01,$FE,$C2,$8A,$DA,$2E,$8B,$16,$0D,$01,$50,$8B,$C2,$33,$D2,$2E,$F7,$36,$05,$01,$2E,$A3,$0D
>01f318		13 01 fe c2 8a da 2e 8b 16 0d 01 50 8b c2 33 d2
>01f328		2e f7 36 05 01 2e a3 0d
>01f330		01 58 2e f7 36 05 01 8a		.text $01,$58,$2E,$F7,$36,$05,$01,$8A,$F2,$B1,$06,$D2,$E4,$0A,$E3,$8A,$E8,$8A,$CC,$8B,$DF,$2E,$8A,$16,$2D,$01,$8B,$C6,$B4,$02,$50,$57
>01f338		f2 b1 06 d2 e4 0a e3 8a e8 8a cc 8b df 2e 8a 16
>01f348		2d 01 8b c6 b4 02 50 57
>01f350		cd 13 5f 58 59 73 18 8b		.text $CD,$13,$5F,$58,$59,$73,$18,$8B,$DF,$32,$E4,$51,$2E,$8A,$16,$2D,$01,$57,$CD,$13,$5F,$59,$49,$74,$03,$E9,$7B,$FF,$E9,$F3,$00,$32
>01f358		df 32 e4 51 2e 8a 16 2d 01 57 cd 13 5f 59 49 74
>01f368		03 e9 7b ff e9 f3 00 32
>01f370		e4 2e 29 06 13 01 74 1a		.text $E4,$2E,$29,$06,$13,$01,$74,$1A,$2E,$01,$06,$09,$01,$2E,$83,$16,$0B,$01,$00,$33,$DB,$8A,$D8,$2E,$A1,$1B,$01,$F7,$E3,$03,$F8,$E9
>01f378		2e 01 06 09 01 2e 83 16 0b 01 00 33 db 8a d8 2e
>01f388		a1 1b 01 f7 e3 03 f8 e9
>01f390		52 ff c3 06 2e a1 35 01		.text $52,$FF,$C3,$06,$2E,$A1,$35,$01,$8E,$C0,$2E,$C6,$06,$30,$01,$FF,$2E,$A1,$1F,$01,$2E,$80,$3E,$2E,$01,$01,$75,$48,$8B,$F0,$D1,$E8
>01f398		8e c0 2e c6 06 30 01 ff 2e a1 1f 01 2e 80 3e 2e
>01f3a8		01 01 75 48 8b f0 d1 e8
>01f3b0		03 f0 52 33 d2 e8 5a 00		.text $03,$F0,$52,$33,$D2,$E8,$5A,$00,$5A,$75,$1D,$26,$8A,$07,$2E,$A2,$0F,$01,$46,$52,$33,$D2,$E8,$49,$00,$5A,$26,$A0,$00,$00,$2E,$A2
>01f3b8		5a 75 1d 26 8a 07 2e a2 0f 01 46 52 33 d2 e8 49
>01f3c8		00 5a 26 a0 00 00 2e a2
>01f3d0		10 01 2e a1 0f 01 eb 03		.text $10,$01,$2E,$A1,$0F,$01,$EB,$03,$26,$8B,$07,$2E,$F7,$06,$1F,$01,$01,$00,$75,$05,$25,$FF,$0F,$EB,$04,$B1,$04,$D3,$E8,$3D,$F8,$0F
>01f3d8		26 8b 07 2e f7 06 1f 01 01 00 75 05 25 ff 0f eb
>01f3e8		04 b1 04 d3 e8 3d f8 0f
>01f3f0		73 1e eb 16 52 33 d2 d1		.text $73,$1E,$EB,$16,$52,$33,$D2,$D1,$E0,$83,$D2,$00,$8B,$F0,$E8,$11,$00,$5A,$26,$8B,$07,$3D,$F8,$FF,$73,$06,$2E,$C6,$06,$30,$01,$00
>01f3f8		e0 83 d2 00 8b f0 e8 11 00 5a 26 8b 07 3d f8 ff
>01f408		73 06 2e c6 06 30 01 00
>01f410		07 c3 50 56 57 8b c6 2e		.text $07,$C3,$50,$56,$57,$8B,$C6,$2E,$8B,$0E,$1B,$01,$F7,$F1,$2E,$3B,$06,$11,$01,$74,$34,$2E,$A3,$11,$01,$52,$33,$D2,$2E,$03,$06,$17
>01f418		8b 0e 1b 01 f7 f1 2e 3b 06 11 01 74 34 2e a3 11
>01f428		01 52 33 d2 2e 03 06 17
>01f430		01 2e 13 16 19 01 2e 03		.text $01,$2E,$13,$16,$19,$01,$2E,$03,$06,$1D,$01,$83,$D2,$00,$2E,$A3,$09,$01,$2E,$89,$16,$0B,$01,$2E,$C7,$06,$13,$01,$01,$00,$33,$FF
>01f438		06 1d 01 83 d2 00 2e a3 09 01 2e 89 16 0b 01 2e
>01f448		c7 06 13 01 01 00 33 ff
>01f450		e8 91 fe 5a 2e 8b 0e 1b		.text $E8,$91,$FE,$5A,$2E,$8B,$0E,$1B,$01,$49,$3B,$D1,$8B,$DA,$5F,$5E,$58,$C3,$0E,$1F,$BE,$5E,$05,$E8,$16,$00,$32,$E4,$CD,$16,$33,$DB
>01f458		01 49 3b d1 8b da 5f 5e 58 c3 0e 1f be 5e 05 e8
>01f468		16 00 32 e4 cd 16 33 db
>01f470		8e db c4 1e 31 01 be 78		.text $8E,$DB,$C4,$1E,$31,$01,$BE,$78,$00,$89,$1C,$8C,$44,$02,$CD,$19,$AC,$0A,$C0,$74,$08,$B4,$0E,$B3,$07,$CD,$10,$EB,$F3,$C3,$0D,$0A
>01f478		00 89 1c 8c 44 02 cd 19 ac 0a c0 74 08 b4 0e b3
>01f488		07 cd 10 eb f3 c3 0d 0a
>01f490		4e 6f 6e 2d 53 79 73 74		.text $4E,$6F,$6E,$2D,$53,$79,$73,$74,$65,$6D,$20,$64,$69,$73,$6B,$20,$6F,$72,$20,$64,$69,$73,$6B,$20,$65,$72,$72,$6F,$72,$0D,$0A,$52
>01f498		65 6d 20 64 69 73 6b 20 6f 72 20 64 69 73 6b 20
>01f4a8		65 72 72 6f 72 0d 0a 52
>01f4b0		65 70 6c 61 63 65 20 61		.text $65,$70,$6C,$61,$63,$65,$20,$61,$6E,$64,$20,$70,$72,$65,$73,$73,$20,$61,$6E,$79,$20,$6B,$65,$79,$20,$77,$68,$65,$6E,$20,$72,$65
>01f4b8		6e 64 20 70 72 65 73 73 20 61 6e 79 20 6b 65 79
>01f4c8		20 77 68 65 6e 20 72 65
>01f4d0		61 64 79 0d 0a 00 e9 f8		.text $61,$64,$79,$0D,$0A,$00,$E9,$F8,$17,$00,$00,$EA,$93,$08,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f4d8		17 00 00 ea 93 08 70 00 00 00 00 00 00 00 00 00
>01f4e8		00 00 00 00 00 00 00 00
>01f4f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$35,$00,$70,$00,$13,$80,$F5,$06,$00,$07,$43,$4F,$4E,$20,$20,$20,$20,$20,$47,$00,$70,$00,$00
>01f4f8		00 35 00 70 00 13 80 f5 06 00 07 43 4f 4e 20 20
>01f508		20 20 20 47 00 70 00 00
>01f510		80 f5 06 21 07 41 55 58		.text $80,$F5,$06,$21,$07,$41,$55,$58,$20,$20,$20,$20,$20,$59,$00,$70,$00,$C0,$A0,$F5,$06,$05,$07,$50,$52,$4E,$20,$20,$20,$20,$20,$6B
>01f518		20 20 20 20 20 59 00 70 00 c0 a0 f5 06 05 07 50
>01f528		52 4e 20 20 20 20 20 6b
>01f530		00 70 00 08 80 f5 06 39		.text $00,$70,$00,$08,$80,$F5,$06,$39,$07,$43,$4C,$4F,$43,$4B,$24,$20,$20,$7B,$00,$70,$00,$C2,$08,$F5,$06,$3E,$07,$04,$FE,$00,$00,$00
>01f538		07 43 4c 4f 43 4b 24 20 20 7b 00 70 00 c2 08 f5
>01f548		06 3e 07 04 fe 00 00 00
>01f550		00 8d 00 70 00 00 80 f5		.text $00,$8D,$00,$70,$00,$00,$80,$F5,$06,$21,$07,$43,$4F,$4D,$31,$20,$20,$20,$20,$9F,$00,$70,$00,$C0,$A0,$F5,$06,$0C,$07,$4C,$50,$54
>01f558		06 21 07 43 4f 4d 31 20 20 20 20 9f 00 70 00 c0
>01f568		a0 f5 06 0c 07 4c 50 54
>01f570		31 20 20 20 20 b8 00 70		.text $31,$20,$20,$20,$20,$B8,$00,$70,$00,$C0,$A0,$F5,$06,$13,$07,$4C,$50,$54,$32,$20,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$CA,$00
>01f578		00 c0 a0 f5 06 13 07 4c 50 54 32 20 20 20 20 00
>01f588		00 00 00 00 00 00 ca 00
>01f590		70 00 c0 a0 f5 06 1a 07		.text $70,$00,$C0,$A0,$F5,$06,$1A,$07,$4C,$50,$54,$33,$20,$20,$20,$20,$DC,$00,$70,$00,$00,$80,$F5,$06,$27,$07,$43,$4F,$4D,$32,$20,$20
>01f598		4c 50 54 33 20 20 20 20 dc 00 70 00 00 80 f5 06
>01f5a8		27 07 43 4f 4d 32 20 20
>01f5b0		20 20 ee 00 70 00 00 80		.text $20,$20,$EE,$00,$70,$00,$00,$80,$F5,$06,$2D,$07,$43,$4F,$4D,$33,$20,$20,$20,$20,$FF,$FF,$70,$00,$00,$80,$F5,$06,$33,$07,$43,$4F
>01f5b8		f5 06 2d 07 43 4f 4d 33 20 20 20 20 ff ff 70 00
>01f5c8		00 80 f5 06 33 07 43 4f
>01f5d0		4d 34 20 20 20 20 10 00		.text $4D,$34,$20,$20,$20,$20,$10,$00,$00,$00,$00,$13,$00,$00,$00,$00,$15,$00,$00,$00,$00,$19,$00,$00,$00,$00,$1B,$00,$00,$00,$00,$4E
>01f5d8		00 00 00 13 00 00 00 00 15 00 00 00 00 19 00 00
>01f5e8		00 00 1b 00 00 00 00 4e
>01f5f0		03 70 00 00 ff 00 02 00		.text $03,$70,$00,$00,$FF,$00,$02,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$09,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00
>01f5f8		00 00 00 01 00 00 00 00 00 00 09 00 00 00 00 00
>01f608		00 00 00 00 00 08 00 00
>01f610		00 50 cc 80 40 10 08 06		.text $00,$50,$CC,$80,$40,$10,$08,$06,$04,$03,$00,$0A,$02,$06,$04,$04,$0F,$08,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f618		04 03 00 0a 02 06 04 04 0f 08 00 0c 00 00 00 00
>01f628		00 00 00 00 00 00 00 00
>01f630		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f648		00 00 00 00 00 00 00 00
>01f650		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f668		00 00 00 00 00 00 00 00
>01f670		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f688		00 00 00 00 00 00 00 00
>01f690		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f6a8		00 00 00 00 00 00 00 00
>01f6b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f6b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f6c8		00 00 00 00 00 00 00 00
>01f6d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f6d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f6e8		00 00 00 00 00 00 00 00
>01f6f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f6f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f708		00 00 00 00 00 00 00 00
>01f710		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f728		00 00 00 00 00 00 00 00
>01f730		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f748		00 00 00 00 00 00 00 00
>01f750		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f768		00 00 00 00 00 00 00 00
>01f770		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f788		00 00 00 00 00 00 00 00
>01f790		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f7a8		00 00 00 00 00 00 00 00
>01f7b0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f7b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f7c8		00 00 00 00 00 00 00 00
>01f7d0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f7e8		00 00 00 00 00 00 00 00
>01f7f0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f7f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f808		00 00 00 00 00 00 00 00
>01f810		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$B2,$03,$70,$00,$00,$00,$00,$02,$FF,$01,$00,$02
>01f818		00 00 00 00 00 00 00 00 00 00 00 00 b2 03 70 00
>01f828		00 00 00 02 ff 01 00 02
>01f830		40 00 68 01 00 02 00 09		.text $40,$00,$68,$01,$00,$02,$00,$09,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$02,$01,$01,$00
>01f838		00 01 00 00 00 00 00 00 00 00 00 00 00 00 03 20
>01f848		00 28 00 00 02 01 01 00
>01f850		02 e0 00 68 01 f0 02 00		.text $02,$E0,$00,$68,$01,$F0,$02,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$4E
>01f858		09 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f868		00 00 ff ff ff ff ff 4e
>01f870		4f 20 4e 41 4d 45 20 20		.text $4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$16,$04,$70,$00,$00,$01,$00,$02
>01f878		20 20 00 00 00 00 00 46 41 54 31 32 20 20 20 00
>01f888		16 04 70 00 00 01 00 02
>01f890		ff 01 00 02 40 00 68 01		.text $FF,$01,$00,$02,$40,$00,$68,$01,$00,$02,$00,$09,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00
>01f898		00 02 00 09 00 01 00 00 00 00 00 00 00 00 00 00
>01f8a8		00 00 03 20 00 28 00 00
>01f8b0		02 01 01 00 02 e0 00 68		.text $02,$01,$01,$00,$02,$E0,$00,$68,$01,$F0,$02,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF
>01f8b8		01 f0 02 00 09 00 02 00 00 00 00 00 00 00 00 00
>01f8c8		00 00 00 00 00 00 ff ff
>01f8d0		ff ff ff 4e 4f 20 4e 41		.text $FF,$FF,$FF,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$7A,$04,$70,$00
>01f8d8		4d 45 20 20 20 20 00 00 00 00 00 46 41 54 31 32
>01f8e8		20 20 20 00 7a 04 70 00
>01f8f0		00 00 00 02 ff 01 00 02		.text $00,$00,$00,$02,$FF,$01,$00,$02,$40,$00,$68,$01,$00,$02,$00,$09,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20
>01f8f8		40 00 68 01 00 02 00 09 00 01 00 00 00 00 00 00
>01f908		00 00 00 00 00 00 03 20
>01f910		00 28 00 00 02 01 01 00		.text $00,$28,$00,$00,$02,$01,$01,$00,$02,$E0,$00,$68,$01,$F0,$02,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f918		02 e0 00 68 01 f0 02 00 09 00 02 00 00 00 00 00
>01f928		00 00 00 00 00 00 00 00
>01f930		00 00 ff ff ff ff ff 4e		.text $00,$00,$FF,$FF,$FF,$FF,$FF,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00
>01f938		4f 20 4e 41 4d 45 20 20 20 20 00 00 00 00 00 46
>01f948		41 54 31 32 20 20 20 00
>01f950		ff ff 70 00 00 00 00 02		.text $FF,$FF,$70,$00,$00,$00,$00,$02,$FF,$01,$00,$02,$40,$00,$68,$01,$00,$02,$00,$09,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f958		ff 01 00 02 40 00 68 01 00 02 00 09 00 01 00 00
>01f968		00 00 00 00 00 00 00 00
>01f970		00 00 03 20 00 28 00 00		.text $00,$00,$03,$20,$00,$28,$00,$00,$02,$01,$01,$00,$02,$E0,$00,$68,$01,$F0,$02,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f978		02 01 01 00 02 e0 00 68 01 f0 02 00 09 00 02 00
>01f988		00 00 00 00 00 00 00 00
>01f990		00 00 00 00 00 00 ff ff		.text $00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32
>01f998		ff ff ff 4e 4f 20 4e 41 4d 45 20 20 20 20 00 00
>01f9a8		00 00 00 46 41 54 31 32
>01f9b0		20 20 20 00 03 09 70 a0		.text $20,$20,$20,$00,$03,$09,$70,$A0,$05,$02,$02,$00,$01,$00,$50,$00,$50,$00,$50,$00,$50,$00,$00,$00,$00,$00,$13,$50,$1F,$1C,$1F,$1E
>01f9b8		05 02 02 00 01 00 50 00 50 00 50 00 50 00 00 00
>01f9c8		00 00 13 50 1f 1c 1f 1e
>01f9d0		1f 1e 1f 1f 1e 1f 1e 1f		.text $1F,$1E,$1F,$1F,$1E,$1F,$1E,$1F,$FF,$14,$70,$00,$2E,$14,$70,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$46,$41,$54,$31,$36,$20
>01f9d8		ff 14 70 00 2e 14 70 00 00 46 41 54 31 32 20 20
>01f9e8		20 00 46 41 54 31 36 20
>01f9f0		20 20 00 4e 4f 20 4e 41		.text $20,$20,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$24
>01f9f8		4d 45 20 20 20 20 00 00 00 00 00 00 00 00 00 00
>01fa08		00 00 00 00 00 00 00 24
>01fa10		00 00 00 01 02 00 00 02		.text $00,$00,$00,$01,$02,$00,$00,$02,$02,$00,$00,$03,$02,$00,$00,$04,$02,$00,$00,$05,$02,$00,$00,$06,$02,$00,$00,$07,$02,$00,$00,$08
>01fa18		02 00 00 03 02 00 00 04 02 00 00 05 02 00 00 06
>01fa28		02 00 00 07 02 00 00 08
>01fa30		02 00 00 09 02 00 00 0a		.text $02,$00,$00,$09,$02,$00,$00,$0A,$02,$00,$00,$0B,$02,$00,$00,$0C,$02,$00,$00,$0D,$02,$00,$00,$0E,$02,$00,$00,$0F,$02,$00,$00,$10
>01fa38		02 00 00 0b 02 00 00 0c 02 00 00 0d 02 00 00 0e
>01fa48		02 00 00 0f 02 00 00 10
>01fa50		02 00 00 11 02 00 00 12		.text $02,$00,$00,$11,$02,$00,$00,$12,$02,$00,$00,$13,$02,$00,$00,$14,$02,$00,$00,$15,$02,$00,$00,$16,$02,$00,$00,$17,$02,$00,$00,$18
>01fa58		02 00 00 13 02 00 00 14 02 00 00 15 02 00 00 16
>01fa68		02 00 00 17 02 00 00 18
>01fa70		02 00 00 19 02 00 00 1a		.text $02,$00,$00,$19,$02,$00,$00,$1A,$02,$00,$00,$1B,$02,$00,$00,$1C,$02,$00,$00,$1D,$02,$00,$00,$1E,$02,$00,$00,$1F,$02,$00,$00,$20
>01fa78		02 00 00 1b 02 00 00 1c 02 00 00 1d 02 00 00 1e
>01fa88		02 00 00 1f 02 00 00 20
>01fa90		02 00 00 21 02 00 00 22		.text $02,$00,$00,$21,$02,$00,$00,$22,$02,$00,$00,$23,$02,$00,$00,$24,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fa98		02 00 00 23 02 00 00 24 02 00 00 00 00 00 00 00
>01faa8		00 00 00 00 00 00 00 00
>01fab0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fac8		00 00 00 00 00 00 00 00
>01fad0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fae8		00 00 00 00 00 00 00 00
>01faf0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01faf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fb08		00 00 00 00 00 00 00 00
>01fb10		ff ff ff ff ff 00 00 02		.text $FF,$FF,$FF,$FF,$FF,$00,$00,$02,$FF,$FF,$FF,$FF,$08,$FF,$FF,$FF,$FF,$09,$FF,$FF,$FF,$FF,$0A,$FF,$FF,$FF,$FF,$0B,$FF,$FF,$FF,$FF
>01fb18		ff ff ff ff 08 ff ff ff ff 09 ff ff ff ff 0a ff
>01fb28		ff ff ff 0b ff ff ff ff
>01fb30		0c ff ff ff ff 0d ff ff		.text $0C,$FF,$FF,$FF,$FF,$0D,$FF,$FF,$FF,$FF,$0E,$FF,$FF,$FF,$FF,$70,$FF,$FF,$FF,$FF,$72,$FF,$FF,$FF,$FF,$73,$FF,$FF,$FF,$FF,$74,$FF
>01fb38		ff ff 0e ff ff ff ff 70 ff ff ff ff 72 ff ff ff
>01fb48		ff 73 ff ff ff ff 74 ff
>01fb50		ff ff ff 76 ff ff ff ff		.text $FF,$FF,$FF,$76,$FF,$FF,$FF,$FF,$77,$FF,$FF,$FF,$FF,$54,$03,$B8,$03,$1C,$04,$80,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fb58		77 ff ff ff ff 54 03 b8 03 1c 04 80 04 00 00 00
>01fb68		00 00 00 00 00 00 00 00
>01fb70		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fb78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fb88		00 00 00 00 00 00 00 00
>01fb90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$00,$3B,$00,$5A,$00,$78,$00,$97,$00,$B5,$00,$D4,$00,$F3,$00,$11,$01,$30,$01,$4E
>01fb98		00 00 00 1f 00 3b 00 5a 00 78 00 97 00 b5 00 d4
>01fba8		00 f3 00 11 01 30 01 4e
>01fbb0		01 00 00 00 43 00 cc 02		.text $01,$00,$00,$00,$43,$00,$CC,$02,$96,$03,$CC,$02,$02,$13,$CC,$02,$4B,$15,$CC,$02,$2E,$C6,$06,$0C,$00,$03,$CF,$2E,$89,$1E,$12,$00
>01fbb8		96 03 cc 02 02 13 cc 02 4b 15 cc 02 2e c6 06 0c
>01fbc8		00 03 cf 2e 89 1e 12 00
>01fbd0		2e 8c 06 14 00 cb e8 40		.text $2E,$8C,$06,$14,$00,$CB,$E8,$40,$00,$E4,$00,$E8,$3B,$00,$FB,$00,$00,$00,$E8,$34,$00,$FB,$00,$00,$01,$E8,$2D,$00,$FB,$00,$01,$02
>01fbd8		00 e4 00 e8 3b 00 fb 00 00 00 e8 34 00 fb 00 00
>01fbe8		01 e8 2d 00 fb 00 01 02
>01fbf0		e8 26 00 fb 00 02 03 e8		.text $E8,$26,$00,$FB,$00,$02,$03,$E8,$1F,$00,$30,$01,$00,$E8,$19,$00,$30,$01,$01,$E8,$13,$00,$30,$01,$02,$E8,$0D,$00,$30,$01,$03,$E8
>01fbf8		1f 00 30 01 00 e8 19 00 30 01 01 e8 13 00 30 01
>01fc08		02 e8 0d 00 30 01 03 e8
>01fc10		07 00 47 01 e8 02 00 a2		.text $07,$00,$47,$01,$E8,$02,$00,$A2,$04,$2E,$80,$3E,$0D,$00,$00,$74,$0D,$50,$2E,$A1,$03,$00,$2E,$39,$06,$14,$00,$58,$75,$05,$2E,$FF
>01fc18		04 2e 80 3e 0d 00 00 74 0d 50 2e a1 03 00 2e 39
>01fc28		06 14 00 58 75 05 2e ff
>01fc30		2e de 06 e8 63 00 eb f6		.text $2E,$DE,$06,$E8,$63,$00,$EB,$F6,$50,$56,$57,$55,$53,$B4,$0E,$BB,$07,$00,$CD,$10,$5B,$5D,$5F,$5E,$58,$CF,$2E,$80,$3E,$0D,$00,$00
>01fc38		50 56 57 55 53 b4 0e bb 07 00 cd 10 5b 5d 5f 5e
>01fc48		58 cf 2e 80 3e 0d 00 00
>01fc50		74 08 e8 56 00 75 03 e8		.text $74,$08,$E8,$56,$00,$75,$03,$E8,$45,$00,$2E,$8C,$1E,$1C,$00,$9C,$2E,$FF,$1E,$EA,$06,$2E,$8E,$1E,$1C,$00,$CA,$02,$00,$8E,$1E,$1C
>01fc58		45 00 2e 8c 1e 1c 00 9c 2e ff 1e ea 06 2e 8e 1e
>01fc68		1c 00 ca 02 00 8e 1e 1c
>01fc70		00 9c 2e ff 1e b4 00 2e		.text $00,$9C,$2E,$FF,$1E,$B4,$00,$2E,$8C,$1E,$1C,$00,$0E,$1F,$9C,$2E,$80,$3E,$0D,$00,$00,$74,$08,$E8,$21,$00,$75,$03,$E8,$10,$00,$9D
>01fc78		8c 1e 1c 00 0e 1f 9c 2e 80 3e 0d 00 00 74 08 e8
>01fc88		21 00 75 03 e8 10 00 9d
>01fc90		cb 90 00 ff ff 80 00 00		.text $CB,$90,$00,$FF,$FF,$80,$00,$00,$00,$E8,$0F,$00,$74,$01,$C3,$50,$53,$B4,$05,$2E,$FF,$1E,$0E,$00,$5B,$58,$C3,$1E,$06,$51,$56,$57
>01fc98		00 e8 0f 00 74 01 c3 50 53 b4 05 2e ff 1e 0e 00
>01fca8		5b 58 c3 1e 06 51 56 57
>01fcb0		2e c5 36 bb 07 2e c4 3e		.text $2E,$C5,$36,$BB,$07,$2E,$C4,$3E,$BF,$07,$B9,$08,$00,$F3,$A7,$5F,$5E,$59,$07,$1F,$C3,$50,$53,$B4,$06,$2E,$FF,$1E,$0E,$00,$5B,$58
>01fcb8		bf 07 b9 08 00 f3 a7 5f 5e 59 07 1f c3 50 53 b4
>01fcc8		06 2e ff 1e 0e 00 5b 58
>01fcd0		c3 0e 1f 8e 06 1a 00 b9		.text $C3,$0E,$1F,$8E,$06,$1A,$00,$B9,$05,$00,$BE,$00,$01,$AC,$98,$D1,$E0,$D1,$E0,$8B,$F8,$AD,$AB,$AD,$AB,$E2,$F2,$80,$3E,$40,$06,$00
>01fcd8		05 00 be 00 01 ac 98 d1 e0 d1 e0 8b f8 ad ab ad
>01fce8		ab e2 f2 80 3e 40 06 00
>01fcf0		74 22 be 41 06 b9 0e 00		.text $74,$22,$BE,$41,$06,$B9,$0E,$00,$AC,$98,$8B,$F8,$AD,$8B,$D8,$AD,$83,$FB,$FF,$74,$0D,$3D,$FF,$FF,$74,$08,$03,$FF,$03,$FF,$93,$AB
>01fcf8		ac 98 8b f8 ad 8b d8 ad 83 fb ff 74 0d 3d ff ff
>01fd08		74 08 03 ff 03 ff 93 ab
>01fd10		93 ab e2 e4 80 3e 0d 00		.text $93,$AB,$E2,$E4,$80,$3E,$0D,$00,$00,$74,$03,$E8,$30,$00,$CD,$19,$3D,$53,$4F,$74,$05,$2E,$FF,$2E,$0B,$01,$1E,$50,$B8,$40,$00,$8E
>01fd18		00 74 03 e8 30 00 cd 19 3d 53 4f 74 05 2e ff 2e
>01fd28		0b 01 1e 50 b8 40 00 8e
>01fd30		d8 a0 17 00 24 0c 3c 0c		.text $D8,$A0,$17,$00,$24,$0C,$3C,$0C,$75,$0C,$0E,$1F,$80,$3E,$0D,$00,$00,$74,$03,$E8,$08,$00,$58,$1F,$F9,$2E,$FF,$2E,$0B,$01,$50,$51
>01fd38		75 0c 0e 1f 80 3e 0d 00 00 74 03 e8 08 00 58 1f
>01fd48		f9 2e ff 2e 0b 01 50 51
>01fd50		57 06 e8 44 ff b8 ff ff		.text $57,$06,$E8,$44,$FF,$B8,$FF,$FF,$8E,$C0,$BF,$10,$00,$B9,$10,$00,$33,$C0,$F3,$AB,$07,$5F,$59,$58,$C3,$2E,$FF,$2E,$E6,$06,$E9,$A3
>01fd58		8e c0 bf 10 00 b9 10 00 33 c0 f3 ab 07 5f 59 58
>01fd68		c3 2e ff 2e e6 06 e9 a3
>01fd70		fe cb 03 00 00 00 00 00		.text $FE,$CB,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$AE,$08,$70,$00,$00,$00,$50,$00,$02,$00,$0E,$00,$50,$00,$14,$00
>01fd78		00 00 00 00 00 00 00 00 ae 08 70 00 00 00 50 00
>01fd88		02 00 0e 00 50 00 14 00
>01fd90		0c 00 70 00 01 00 00 00		.text $0C,$00,$70,$00,$01,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$57,$06,$53,$50,$33,$FF,$8E,$C7,$BB
>01fd98		00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 57
>01fda8		06 53 50 33 ff 8e c7 bb
>01fdb0		15 00 b8 84 16 cd 2f 8c		.text $15,$00,$B8,$84,$16,$CD,$2F,$8C,$C0,$0B,$C7,$74,$0B,$0E,$B8,$F2,$08,$50,$06,$57,$B8,$01,$00,$CB,$58,$5B,$07,$5F,$CB,$FF,$FF,$8C
>01fdb8		c0 0b c7 74 0b 0e b8 f2 08 50 06 57 b8 01 00 cb
>01fdc8		58 5b 07 5f cb ff ff 8c
>01fdd0		0b 73 04 00 00 00 4e 4f		.text $0B,$73,$04,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$80,$FF
>01fdd8		20 4e 41 4d 45 20 20 20 20 00 4e 4f 20 4e 41 4d
>01fde8		45 20 20 20 20 00 80 ff
>01fdf0		ff 00 00 50 03 00 02 01		.text $FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fdf8		01 00 02 10 00 00 00 f8 01 00 00 00 00 00 00 00
>01fe08		00 00 00 00 00 00 00 00
>01fe10		00 03 20 00 28 00 00 00		.text $00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fe18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fe28		00 00 00 00 00 00 00 00
>01fe30		00 00 00 00 00 ff 01 00		.text $00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20
>01fe38		00 00 4e 4f 20 4e 41 4d 45 20 20 20 20 00 00 00
>01fe48		00 00 46 41 54 31 32 20
>01fe50		20 20 00 ff ff 00 00 50		.text $20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fe58		03 00 02 01 01 00 02 10 00 00 00 f8 01 00 00 00
>01fe68		00 00 00 00 00 00 00 00
>01fe70		00 00 00 00 00 03 20 00		.text $00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fe78		28 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fe88		00 00 00 00 00 00 00 00
>01fe90		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41
>01fe98		00 ff 01 00 00 00 4e 4f 20 4e 41 4d 45 20 20 20
>01fea8		20 00 00 00 00 00 46 41
>01feb0		54 31 32 20 20 20 00 ff		.text $54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00
>01feb8		ff 00 00 50 03 00 02 01 01 00 02 10 00 00 00 f8
>01fec8		01 00 00 00 00 00 00 00
>01fed0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fed8		00 03 20 00 28 00 00 00 00 00 00 00 00 00 00 00
>01fee8		00 00 00 00 00 00 00 00
>01fef0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00
>01fef8		00 00 00 00 00 ff 01 00 00 00 4e 4f 20 4e 41 4d
>01ff08		45 20 20 20 20 00 00 00
>01ff10		00 00 46 41 54 31 32 20		.text $00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00
>01ff18		20 20 00 ff ff 00 00 50 03 00 02 01 01 00 02 10
>01ff28		00 00 00 f8 01 00 00 00
>01ff30		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ff38		00 00 00 00 00 03 20 00 28 00 00 00 00 00 00 00
>01ff48		00 00 00 00 00 00 00 00
>01ff50		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20
>01ff58		00 00 00 00 00 00 00 00 00 ff 01 00 00 00 4e 4f
>01ff68		20 4e 41 4d 45 20 20 20
>01ff70		20 00 00 00 00 00 46 41		.text $20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8
>01ff78		54 31 32 20 20 20 00 ff ff 00 00 50 03 00 02 01
>01ff88		01 00 02 10 00 00 00 f8
>01ff90		01 00 00 00 00 00 00 00		.text $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ff98		00 00 00 00 00 00 00 00 00 03 20 00 28 00 00 00
>01ffa8		00 00 00 00 00 00 00 00
>01ffb0		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D
>01ffb8		00 00 00 00 00 00 00 00 00 00 00 00 00 ff 01 00
>01ffc8		00 00 4e 4f 20 4e 41 4d
>01ffd0		45 20 20 20 20 00 00 00		.text $45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10
>01ffd8		00 00 46 41 54 31 32 20 20 20 00 ff ff 00 00 50
>01ffe8		03 00 02 01 01 00 02 10
>01fff0		00 00 00 f8 01 00 00 00		.text $00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00
>01fff8		00 00 00 00 00 00 00 00 00 00 00 00 00 03 20 00
>020008	010008	28 00 00 00 00 00 00 00
>020010	010010	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F
>020018	010018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020028	010028	00 ff 01 00 00 00 4e 4f
>020030	010030	20 4e 41 4d 45 20 20 20		.text $20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01
>020038	010038	20 00 00 00 00 00 46 41 54 31 32 20 20 20 00 ff
>020048	010048	ff 00 00 50 03 00 02 01
>020050	010050	01 00 02 10 00 00 00 f8		.text $01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00
>020058	010058	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020068	010068	00 03 20 00 28 00 00 00
>020070	010070	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00
>020078	010078	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020088	010088	00 00 00 00 00 ff 01 00
>020090	010090	00 00 4e 4f 20 4e 41 4d		.text $00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50
>020098	010098	45 20 20 20 20 00 00 00 00 00 46 41 54 31 32 20
>0200a8	0100a8	20 20 00 ff ff 00 00 50
>0200b0	0100b0	03 00 02 01 01 00 02 10		.text $03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00
>0200b8	0100b8	00 00 00 f8 01 00 00 00 00 00 00 00 00 00 00 00
>0200c8	0100c8	00 00 00 00 00 03 20 00
>0200d0	0100d0	28 00 00 00 00 00 00 00		.text $28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0200d8	0100d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0200e8	0100e8	00 00 00 00 00 00 00 00
>0200f0	0100f0	00 ff 01 00 00 00 4e 4f		.text $00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF
>0200f8	0100f8	20 4e 41 4d 45 20 20 20 20 00 00 00 00 00 46 41
>020108	010108	54 31 32 20 20 20 00 ff
>020110	010110	ff 00 00 50 03 00 02 01		.text $FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020118	010118	01 00 02 10 00 00 00 f8 01 00 00 00 00 00 00 00
>020128	010128	00 00 00 00 00 00 00 00
>020130	010130	00 03 20 00 28 00 00 00		.text $00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020138	010138	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020148	010148	00 00 00 00 00 00 00 00
>020150	010150	00 00 00 00 00 ff 01 00		.text $00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20
>020158	010158	00 00 4e 4f 20 4e 41 4d 45 20 20 20 20 00 00 00
>020168	010168	00 00 46 41 54 31 32 20
>020170	010170	20 20 00 ff ff 00 00 50		.text $20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020178	010178	03 00 02 01 01 00 02 10 00 00 00 f8 01 00 00 00
>020188	010188	00 00 00 00 00 00 00 00
>020190	010190	00 00 00 00 00 03 20 00		.text $00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020198	010198	28 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0201a8	0101a8	00 00 00 00 00 00 00 00
>0201b0	0101b0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41
>0201b8	0101b8	00 ff 01 00 00 00 4e 4f 20 4e 41 4d 45 20 20 20
>0201c8	0101c8	20 00 00 00 00 00 46 41
>0201d0	0101d0	54 31 32 20 20 20 00 ff		.text $54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00
>0201d8	0101d8	ff 00 00 50 03 00 02 01 01 00 02 10 00 00 00 f8
>0201e8	0101e8	01 00 00 00 00 00 00 00
>0201f0	0101f0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0201f8	0101f8	00 03 20 00 28 00 00 00 00 00 00 00 00 00 00 00
>020208	010208	00 00 00 00 00 00 00 00
>020210	010210	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00
>020218	010218	00 00 00 00 00 ff 01 00 00 00 4e 4f 20 4e 41 4d
>020228	010228	45 20 20 20 20 00 00 00
>020230	010230	00 00 46 41 54 31 32 20		.text $00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00
>020238	010238	20 20 00 ff ff 00 00 50 03 00 02 01 01 00 02 10
>020248	010248	00 00 00 f8 01 00 00 00
>020250	010250	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020258	010258	00 00 00 00 00 03 20 00 28 00 00 00 00 00 00 00
>020268	010268	00 00 00 00 00 00 00 00
>020270	010270	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20
>020278	010278	00 00 00 00 00 00 00 00 00 ff 01 00 00 00 4e 4f
>020288	010288	20 4e 41 4d 45 20 20 20
>020290	010290	20 00 00 00 00 00 46 41		.text $20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8
>020298	010298	54 31 32 20 20 20 00 ff ff 00 00 50 03 00 02 01
>0202a8	0102a8	01 00 02 10 00 00 00 f8
>0202b0	0102b0	01 00 00 00 00 00 00 00		.text $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0202b8	0102b8	00 00 00 00 00 00 00 00 00 03 20 00 28 00 00 00
>0202c8	0102c8	00 00 00 00 00 00 00 00
>0202d0	0102d0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D
>0202d8	0102d8	00 00 00 00 00 00 00 00 00 00 00 00 00 ff 01 00
>0202e8	0102e8	00 00 4e 4f 20 4e 41 4d
>0202f0	0102f0	45 20 20 20 20 00 00 00		.text $45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10
>0202f8	0102f8	00 00 46 41 54 31 32 20 20 20 00 ff ff 00 00 50
>020308	010308	03 00 02 01 01 00 02 10
>020310	010310	00 00 00 f8 01 00 00 00		.text $00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00
>020318	010318	00 00 00 00 00 00 00 00 00 00 00 00 00 03 20 00
>020328	010328	28 00 00 00 00 00 00 00
>020330	010330	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F
>020338	010338	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020348	010348	00 ff 01 00 00 00 4e 4f
>020350	010350	20 4e 41 4d 45 20 20 20		.text $20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01
>020358	010358	20 00 00 00 00 00 46 41 54 31 32 20 20 20 00 ff
>020368	010368	ff 00 00 50 03 00 02 01
>020370	010370	01 00 02 10 00 00 00 f8		.text $01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00
>020378	010378	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020388	010388	00 03 20 00 28 00 00 00
>020390	010390	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00
>020398	010398	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0203a8	0103a8	00 00 00 00 00 ff 01 00
>0203b0	0103b0	00 00 4e 4f 20 4e 41 4d		.text $00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50
>0203b8	0103b8	45 20 20 20 20 00 00 00 00 00 46 41 54 31 32 20
>0203c8	0103c8	20 20 00 ff ff 00 00 50
>0203d0	0103d0	03 00 02 01 01 00 02 10		.text $03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00
>0203d8	0103d8	00 00 00 f8 01 00 00 00 00 00 00 00 00 00 00 00
>0203e8	0103e8	00 00 00 00 00 03 20 00
>0203f0	0103f0	28 00 00 00 00 00 00 00		.text $28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0203f8	0103f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020408	010408	00 00 00 00 00 00 00 00
>020410	010410	00 ff 01 00 00 00 4e 4f		.text $00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF
>020418	010418	20 4e 41 4d 45 20 20 20 20 00 00 00 00 00 46 41
>020428	010428	54 31 32 20 20 20 00 ff
>020430	010430	ff 00 00 50 03 00 02 01		.text $FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020438	010438	01 00 02 10 00 00 00 f8 01 00 00 00 00 00 00 00
>020448	010448	00 00 00 00 00 00 00 00
>020450	010450	00 03 20 00 28 00 00 00		.text $00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020458	010458	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020468	010468	00 00 00 00 00 00 00 00
>020470	010470	00 00 00 00 00 ff 01 00		.text $00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20
>020478	010478	00 00 4e 4f 20 4e 41 4d 45 20 20 20 20 00 00 00
>020488	010488	00 00 46 41 54 31 32 20
>020490	010490	20 20 00 ff ff 00 00 50		.text $20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020498	010498	03 00 02 01 01 00 02 10 00 00 00 f8 01 00 00 00
>0204a8	0104a8	00 00 00 00 00 00 00 00
>0204b0	0104b0	00 00 00 00 00 03 20 00		.text $00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0204b8	0104b8	28 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0204c8	0104c8	00 00 00 00 00 00 00 00
>0204d0	0104d0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41
>0204d8	0104d8	00 ff 01 00 00 00 4e 4f 20 4e 41 4d 45 20 20 20
>0204e8	0104e8	20 00 00 00 00 00 46 41
>0204f0	0104f0	54 31 32 20 20 20 00 ff		.text $54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00
>0204f8	0104f8	ff 00 00 50 03 00 02 01 01 00 02 10 00 00 00 f8
>020508	010508	01 00 00 00 00 00 00 00
>020510	010510	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020518	010518	00 03 20 00 28 00 00 00 00 00 00 00 00 00 00 00
>020528	010528	00 00 00 00 00 00 00 00
>020530	010530	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00
>020538	010538	00 00 00 00 00 ff 01 00 00 00 4e 4f 20 4e 41 4d
>020548	010548	45 20 20 20 20 00 00 00
>020550	010550	00 00 46 41 54 31 32 20		.text $00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00
>020558	010558	20 20 00 ff ff 00 00 50 03 00 02 01 01 00 02 10
>020568	010568	00 00 00 f8 01 00 00 00
>020570	010570	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020578	010578	00 00 00 00 00 03 20 00 28 00 00 00 00 00 00 00
>020588	010588	00 00 00 00 00 00 00 00
>020590	010590	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20
>020598	010598	00 00 00 00 00 00 00 00 00 ff 01 00 00 00 4e 4f
>0205a8	0105a8	20 4e 41 4d 45 20 20 20
>0205b0	0105b0	20 00 00 00 00 00 46 41		.text $20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8
>0205b8	0105b8	54 31 32 20 20 20 00 ff ff 00 00 50 03 00 02 01
>0205c8	0105c8	01 00 02 10 00 00 00 f8
>0205d0	0105d0	01 00 00 00 00 00 00 00		.text $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0205d8	0105d8	00 00 00 00 00 00 00 00 00 03 20 00 28 00 00 00
>0205e8	0105e8	00 00 00 00 00 00 00 00
>0205f0	0105f0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D
>0205f8	0105f8	00 00 00 00 00 00 00 00 00 00 00 00 00 ff 01 00
>020608	010608	00 00 4e 4f 20 4e 41 4d
>020610	010610	45 20 20 20 20 00 00 00		.text $45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10
>020618	010618	00 00 46 41 54 31 32 20 20 20 00 ff ff 00 00 50
>020628	010628	03 00 02 01 01 00 02 10
>020630	010630	00 00 00 f8 01 00 00 00		.text $00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00
>020638	010638	00 00 00 00 00 00 00 00 00 00 00 00 00 03 20 00
>020648	010648	28 00 00 00 00 00 00 00
>020650	010650	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F
>020658	010658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020668	010668	00 ff 01 00 00 00 4e 4f
>020670	010670	20 4e 41 4d 45 20 20 20		.text $20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01
>020678	010678	20 00 00 00 00 00 46 41 54 31 32 20 20 20 00 ff
>020688	010688	ff 00 00 50 03 00 02 01
>020690	010690	01 00 02 10 00 00 00 f8		.text $01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00
>020698	010698	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0206a8	0106a8	00 03 20 00 28 00 00 00
>0206b0	0106b0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00
>0206b8	0106b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0206c8	0106c8	00 00 00 00 00 ff 01 00
>0206d0	0106d0	00 00 4e 4f 20 4e 41 4d		.text $00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50
>0206d8	0106d8	45 20 20 20 20 00 00 00 00 00 46 41 54 31 32 20
>0206e8	0106e8	20 20 00 ff ff 00 00 50
>0206f0	0106f0	03 00 02 01 01 00 02 10		.text $03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00
>0206f8	0106f8	00 00 00 f8 01 00 00 00 00 00 00 00 00 00 00 00
>020708	010708	00 00 00 00 00 03 20 00
>020710	010710	28 00 00 00 00 00 00 00		.text $28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020718	010718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020728	010728	00 00 00 00 00 00 00 00
>020730	010730	00 ff 01 00 00 00 4e 4f		.text $00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF
>020738	010738	20 4e 41 4d 45 20 20 20 20 00 00 00 00 00 46 41
>020748	010748	54 31 32 20 20 20 00 ff
>020750	010750	ff 00 00 50 03 00 02 01		.text $FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020758	010758	01 00 02 10 00 00 00 f8 01 00 00 00 00 00 00 00
>020768	010768	00 00 00 00 00 00 00 00
>020770	010770	00 03 20 00 28 00 00 00		.text $00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020778	010778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020788	010788	00 00 00 00 00 00 00 00
>020790	010790	00 00 00 00 00 ff 01 00		.text $00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20
>020798	010798	00 00 4e 4f 20 4e 41 4d 45 20 20 20 20 00 00 00
>0207a8	0107a8	00 00 46 41 54 31 32 20
>0207b0	0107b0	20 20 00 00 80 fa 80 72		.text $20,$20,$00,$00,$80,$FA,$80,$72,$0A,$80,$FC,$02,$74,$0A,$80,$FC,$0A,$74,$05,$2E,$FF,$2E,$06,$01,$53,$51,$52,$57,$1E,$06,$50,$B8
>0207b8	0107b8	0a 80 fc 02 74 0a 80 fc 0a 74 05 2e ff 2e 06 01
>0207c8	0107c8	53 51 52 57 1e 06 50 b8
>0207d0	0107d0	40 00 8e d8 c6 06 74 00		.text $40,$00,$8E,$D8,$C6,$06,$74,$00,$00,$80,$E2,$7F,$3A,$16,$75,$00,$72,$07,$C6,$06,$74,$00,$01,$EB,$20,$53,$8C,$C0,$C1,$EB,$04,$03
>0207d8	0107d8	00 80 e2 7f 3a 16 75 00 72 07 c6 06 74 00 01 eb
>0207e8	0107e8	20 53 8c c0 c1 eb 04 03
>0207f0	0107f0	c3 8e c0 5b 83 e3 0f 0e		.text $C3,$8E,$C0,$5B,$83,$E3,$0F,$0E,$E8,$DF,$00,$72,$0C,$58,$50,$E8,$1A,$00,$BA,$F6,$03,$EE,$E8,$6B,$00,$58,$8A,$26,$74,$00,$0A,$E4
>0207f8	0107f8	e8 df 00 72 0c 58 50 e8 1a 00 ba f6 03 ee e8 6b
>020808	010808	00 58 8a 26 74 00 0a e4
>020810	010810	74 01 f9 07 1f 5f 5a 59		.text $74,$01,$F9,$07,$1F,$5F,$5A,$59,$5B,$CA,$02,$00,$A2,$43,$00,$C6,$06,$48,$00,$20,$80,$FC,$02,$74,$05,$C6,$06,$48,$00,$22,$8A,$C1
>020818	010818	5b ca 02 00 a2 43 00 c6 06 48 00 20 80 fc 02 74
>020828	010828	05 c6 06 48 00 22 8a c1
>020830	010830	24 3f a2 44 00 88 2e 45		.text $24,$3F,$A2,$44,$00,$88,$2E,$45,$00,$8A,$C1,$C0,$E8,$06,$A2,$46,$00,$8B,$C2,$C0,$E0,$04,$80,$E4,$0F,$0A,$C4,$0C,$A0,$A2,$47,$00
>020838	010838	00 8a c1 c0 e8 06 a2 46 00 8b c2 c0 e0 04 80 e4
>020848	010848	0f 0a c4 0c a0 a2 47 00
>020850	010850	06 53 0e e8 5c 00 26 8b		.text $06,$53,$0E,$E8,$5C,$00,$26,$8B,$47,$05,$C1,$E8,$02,$A2,$42,$00,$26,$8A,$47,$08,$5B,$07,$8A,$26,$76,$00,$80,$E4,$C0,$0A,$E0,$88
>020858	010858	47 05 c1 e8 02 a2 42 00 26 8a 47 08 5b 07 8a 26
>020868	010868	76 00 80 e4 c0 0a e0 88
>020870	010870	26 76 00 c3 8b fb 0e e8		.text $26,$76,$00,$C3,$8B,$FB,$0E,$E8,$40,$00,$75,$35,$0E,$E8,$42,$00,$75,$2F,$B9,$00,$01,$BA,$F0,$01,$FC,$FA,$6D,$E2,$FD,$FB,$F6,$06
>020878	010878	40 00 75 35 0e e8 42 00 75 2f b9 00 01 ba f0 01
>020888	010888	fc fa 6d e2 fd fb f6 06
>020890	010890	48 00 02 74 10 0e e8 31		.text $48,$00,$02,$74,$10,$0E,$E8,$31,$00,$72,$16,$B9,$04,$00,$BA,$F0,$01,$FA,$F3,$6C,$FB,$0E,$E8,$29,$00,$75,$06,$FE,$0E,$43,$00,$75
>020898	010898	00 72 16 b9 04 00 ba f0 01 fa f3 6c fb 0e e8 29
>0208a8	0108a8	00 75 06 fe 0e 43 00 75
>0208b0	0108b0	cb c3 68 65 ff ea 8e 2f		.text $CB,$C3,$68,$65,$FF,$EA,$8E,$2F,$00,$F0,$68,$65,$FF,$EA,$1E,$2E,$00,$F0,$68,$65,$FF,$EA,$7F,$2E,$00,$F0,$68,$65,$FF,$EA,$E2,$2E
>0208b8	0108b8	00 f0 68 65 ff ea 1e 2e 00 f0 68 65 ff ea 7f 2e
>0208c8	0108c8	00 f0 68 65 ff ea e2 2e
>0208d0	0108d0	00 f0 68 65 ff ea f8 2e		.text $00,$F0,$68,$65,$FF,$EA,$F8,$2E,$00,$F0,$68,$65,$FF,$EA,$69,$2F,$00,$F0,$80,$FC,$15,$77,$05,$2E,$FF,$2E,$06,$01,$80,$FA,$80,$72
>0208d8	0108d8	00 f0 68 65 ff ea 69 2f 00 f0 80 fc 15 77 05 2e
>0208e8	0108e8	ff 2e 06 01 80 fa 80 72
>0208f0	0108f0	f6 1e 50 b8 40 00 8e d8		.text $F6,$1E,$50,$B8,$40,$00,$8E,$D8,$58,$9C,$2E,$FF,$1E,$06,$01,$1F,$CA,$02,$00,$00,$2E,$FF,$36,$F0,$04,$2E,$81,$3E,$F0,$04,$89,$1C
>0208f8	0108f8	58 9c 2e ff 1e 06 01 1f ca 02 00 00 2e ff 36 f0
>020908	010908	04 2e 81 3e f0 04 89 1c
>020910	010910	73 0e 2e c6 06 f4 04 13		.text $73,$0E,$2E,$C6,$06,$F4,$04,$13,$2E,$C6,$06,$F5,$04,$50,$EB,$13,$2E,$C6,$06,$F4,$04,$14,$2E,$C6,$06,$F5,$04,$00,$2E,$81,$2E,$F0
>020918	010918	2e c6 06 f5 04 50 eb 13 2e c6 06 f4 04 14 2e c6
>020928	010928	06 f5 04 00 2e 81 2e f0
>020930	010930	04 89 1c 33 d2 2e a1 f0		.text $04,$89,$1C,$33,$D2,$2E,$A1,$F0,$04,$BB,$B5,$05,$F7,$F3,$2E,$89,$16,$F0,$04,$B3,$04,$F6,$E3,$2E,$00,$06,$F5,$04,$2E,$FF,$06,$F0
>020938	010938	04 bb b5 05 f7 f3 2e 89 16 f0 04 b3 04 f6 e3 2e
>020948	010948	00 06 f5 04 2e ff 06 f0
>020950	010950	04 2e 81 3e f0 04 6e 01		.text $04,$2E,$81,$3E,$F0,$04,$6E,$01,$76,$26,$2E,$FE,$06,$F5,$04,$2E,$81,$2E,$F0,$04,$6E,$01,$B9,$03,$00,$2E,$81,$3E,$F0,$04,$6D,$01
>020958	010958	76 26 2e fe 06 f5 04 2e 81 2e f0 04 6e 01 b9 03
>020968	010968	00 2e 81 3e f0 04 6d 01
>020970	010970	76 14 2e fe 06 f5 04 2e		.text $76,$14,$2E,$FE,$06,$F5,$04,$2E,$81,$2E,$F0,$04,$6D,$01,$E2,$E9,$2E,$C6,$06,$F7,$04,$1D,$33,$DB,$33,$D2,$2E,$A1,$F0,$04,$BE,$F6
>020978	010978	81 2e f0 04 6d 01 e2 e9 2e c6 06 f7 04 1d 33 db
>020988	010988	33 d2 2e a1 f0 04 be f6
>020990	010990	04 b9 0c 00 fe c3 8a 14		.text $04,$B9,$0C,$00,$FE,$C3,$8A,$14,$3B,$C2,$76,$05,$46,$2B,$C2,$E2,$F3,$2E,$C6,$06,$F7,$04,$1C,$8A,$D3,$2E,$8A,$36,$F5,$04,$2E,$8A
>020998	010998	3b c2 76 05 46 2b c2 e2 f3 2e c6 06 f7 04 1c 8a
>0209a8	0109a8	d3 2e 8a 36 f5 04 2e 8a
>0209b0	0109b0	0e f4 04 2e ff 1e 02 05		.text $0E,$F4,$04,$2E,$FF,$1E,$02,$05,$86,$D0,$2E,$FF,$1E,$02,$05,$86,$F0,$2E,$FF,$1E,$02,$05,$86,$C8,$2E,$FF,$1E,$02,$05,$8A,$E8,$2E
>0209b8	0109b8	86 d0 2e ff 1e 02 05 86 f0 2e ff 1e 02 05 86 c8
>0209c8	0109c8	2e ff 1e 02 05 8a e8 2e
>0209d0	0109d0	8f 06 f0 04 cb 51 d4 0a		.text $8F,$06,$F0,$04,$CB,$51,$D4,$0A,$B1,$04,$D2,$E4,$0A,$C4,$59,$CB,$0E,$1F,$8F,$06,$BB,$06,$8F,$06,$BD,$06,$9D,$E8,$13,$00,$FA,$89
>0209d8	0109d8	b1 04 d2 e4 0a c4 59 cb 0e 1f 8f 06 bb 06 8f 06
>0209e8	0109e8	bd 06 9d e8 13 00 fa 89
>0209f0	0109f0	36 f0 04 fb e8 cb 00 fa		.text $36,$F0,$04,$FB,$E8,$CB,$00,$FA,$B4,$01,$CD,$1A,$FB,$FF,$2E,$BB,$06,$50,$51,$52,$32,$E4,$CD,$1A,$5A,$59,$58,$50,$53,$51,$52,$2E
>0209f8	0109f8	b4 01 cd 1a fb ff 2e bb 06 50 51 52 32 e4 cd 1a
>020a08	010a08	5a 59 58 50 53 51 52 2e
>020a10	010a10	c7 06 db 06 01 00 b4 04		.text $C7,$06,$DB,$06,$01,$00,$B4,$04,$CD,$1A,$73,$03,$E9,$93,$00,$88,$2E,$BF,$06,$88,$0E,$C0,$06,$88,$36,$C1,$06,$88,$16,$C2,$06,$2E
>020a18	010a18	cd 1a 73 03 e9 93 00 88 2e bf 06 88 0e c0 06 88
>020a28	010a28	36 c1 06 88 16 c2 06 2e
>020a30	010a30	c7 06 db 06 02 00 e8 49		.text $C7,$06,$DB,$06,$02,$00,$E8,$49,$01,$72,$77,$2E,$C7,$06,$DB,$06,$03,$00,$E8,$E6,$00,$72,$6B,$2E,$C7,$06,$DB,$06,$00,$00,$E8,$AA
>020a38	010a38	01 72 77 2e c7 06 db 06 03 00 e8 e6 00 72 6b 2e
>020a48	010a48	c7 06 db 06 00 00 e8 aa
>020a50	010a50	00 a0 c0 06 98 80 3e bf		.text $00,$A0,$C0,$06,$98,$80,$3E,$BF,$06,$14,$75,$03,$05,$64,$00,$2D,$50,$00,$B1,$04,$F6,$F1,$8A,$DC,$98,$B9,$B5,$05,$F7,$E1,$2E,$A3
>020a58	010a58	06 14 75 03 05 64 00 2d 50 00 b1 04 f6 f1 8a dc
>020a68	010a68	98 b9 b5 05 f7 e1 2e a3
>020a70	010a70	db 06 8a c3 98 0b c0 74		.text $DB,$06,$8A,$C3,$98,$0B,$C0,$74,$0C,$B9,$6D,$01,$F7,$E1,$2E,$01,$06,$DB,$06,$EB,$07,$80,$3E,$C1,$06,$02,$76,$05,$2E,$FF,$06,$DB
>020a78	010a78	0c b9 6d 01 f7 e1 2e 01 06 db 06 eb 07 80 3e c1
>020a88	010a88	06 02 76 05 2e ff 06 db
>020a90	010a90	06 8a 0e c2 06 32 ed 49		.text $06,$8A,$0E,$C2,$06,$32,$ED,$49,$2E,$01,$0E,$DB,$06,$8A,$0E,$C1,$06,$32,$ED,$49,$D1,$E1,$BE,$C3,$06,$03,$F1,$8B,$04,$2E,$01,$06
>020a98	010a98	2e 01 0e db 06 8a 0e c1 06 32 ed 49 d1 e1 be c3
>020aa8	010aa8	06 03 f1 8b 04 2e 01 06
>020ab0	010ab0	db 06 2e 8b 36 db 06 5a		.text $DB,$06,$2E,$8B,$36,$DB,$06,$5A,$59,$5B,$58,$C3,$33,$C9,$33,$D2,$EB,$38,$B4,$02,$CD,$1A,$72,$F4,$88,$2E,$BF,$06,$88,$0E,$C0,$06
>020ab8	010ab8	59 5b 58 c3 33 c9 33 d2 eb 38 b4 02 cd 1a 72 f4
>020ac8	010ac8	88 2e bf 06 88 0e c0 06
>020ad0	010ad0	88 36 c1 06 c6 06 c2 06		.text $88,$36,$C1,$06,$C6,$06,$C2,$06,$00,$E8,$A6,$00,$72,$DE,$E8,$88,$00,$72,$D9,$E8,$15,$00,$8A,$2E,$BF,$06,$8A,$0E,$C0,$06,$8A,$36
>020ad8	010ad8	00 e8 a6 00 72 de e8 88 00 72 d9 e8 15 00 8a 2e
>020ae8	010ae8	bf 06 8a 0e c0 06 8a 36
>020af0	010af0	c1 06 8a 16 c2 06 ff 1e		.text $C1,$06,$8A,$16,$C2,$06,$FF,$1E,$E2,$06,$C3,$A0,$BF,$06,$E8,$1F,$00,$A2,$BF,$06,$A0,$C0,$06,$E8,$16,$00,$A2,$C0,$06,$A0,$C1,$06
>020af8	010af8	e2 06 c3 a0 bf 06 e8 1f 00 a2 bf 06 a0 c0 06 e8
>020b08	010b08	16 00 a2 c0 06 a0 c1 06
>020b10	010b10	e8 0d 00 a2 c1 06 a0 c2		.text $E8,$0D,$00,$A2,$C1,$06,$A0,$C2,$06,$E8,$04,$00,$A2,$C2,$06,$C3,$8A,$E0,$24,$0F,$B1,$04,$D2,$EC,$D5,$0A,$C3,$80,$3E,$BF,$06,$20
>020b18	010b18	06 e8 04 00 a2 c2 06 c3 8a e0 24 0f b1 04 d2 ec
>020b28	010b28	d5 0a c3 80 3e bf 06 20
>020b30	010b30	77 35 74 0e 80 3e bf 06		.text $77,$35,$74,$0E,$80,$3E,$BF,$06,$19,$72,$2C,$80,$3E,$C0,$06,$80,$72,$25,$80,$3E,$C0,$06,$99,$77,$1E,$80,$3E,$C1,$06,$12,$77,$17
>020b38	010b38	19 72 2c 80 3e c0 06 80 72 25 80 3e c0 06 99 77
>020b48	010b48	1e 80 3e c1 06 12 77 17
>020b50	010b50	80 3e c1 06 00 76 10 80		.text $80,$3E,$C1,$06,$00,$76,$10,$80,$3E,$C2,$06,$31,$77,$09,$80,$3E,$C2,$06,$00,$76,$02,$F8,$C3,$F9,$C3,$80,$3E,$BF,$06,$24,$77,$10
>020b58	010b58	3e c2 06 31 77 09 80 3e c2 06 00 76 02 f8 c3 f9
>020b68	010b68	c3 80 3e bf 06 24 77 10
>020b70	010b70	80 3e c0 06 59 77 09 80		.text $80,$3E,$C0,$06,$59,$77,$09,$80,$3E,$C1,$06,$59,$77,$02,$F8,$C3,$F9,$C3,$B9,$04,$00,$BB,$BF,$06,$8A,$07,$8A,$E0,$25,$0F,$F0,$3C
>020b78	010b78	3e c1 06 59 77 02 f8 c3 f9 c3 b9 04 00 bb bf 06
>020b88	010b88	8a 07 8a e0 25 0f f0 3c
>020b90	010b90	0a 77 16 d0 ec d0 ec d0		.text $0A,$77,$16,$D0,$EC,$D0,$EC,$D0,$EC,$D0,$EC,$80,$E4,$0F,$80,$FC,$0A,$77,$06,$43,$49,$75,$E1,$F8,$C3,$F9,$C3,$90,$00,$00,$00,$00
>020b98	010b98	ec d0 ec 80 e4 0f 80 fc 0a 77 06 43 49 75 e1 f8
>020ba8	010ba8	c3 f9 c3 90 00 00 00 00
>020bb0	010bb0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$02,$00,$00,$FF,$FF,$02,$09,$28,$00,$00,$02,$00,$01,$40,$00,$00,$00,$00,$08,$01,$02
>020bb8	010bb8	00 80 00 02 00 00 ff ff 02 09 28 00 00 02 00 01
>020bc8	010bc8	40 00 00 00 00 08 01 02
>020bd0	010bd0	70 00 00 00 00 20 02 04		.text $70,$00,$00,$00,$00,$20,$02,$04,$00,$01,$00,$00,$A8,$7F,$03,$08,$00,$02,$00,$00,$FF,$FF,$04,$10,$00,$04,$00,$00,$00,$00,$A8,$7F
>020bd8	010bd8	00 01 00 00 a8 7f 03 08 00 02 00 00 ff ff 04 10
>020be8	010be8	00 04 00 00 00 00 a8 7f
>020bf0	010bf0	03 08 00 02 00 00 04 00		.text $03,$08,$00,$02,$00,$00,$04,$00,$00,$00,$02,$04,$00,$02,$40,$00,$08,$00,$00,$00,$03,$08,$00,$02,$40,$00,$10,$00,$00,$00,$04,$10
>020bf8	010bf8	00 00 02 04 00 02 40 00 08 00 00 00 03 08 00 02
>020c08	010c08	40 00 10 00 00 00 04 10
>020c10	010c10	00 02 40 00 20 00 00 00		.text $00,$02,$40,$00,$20,$00,$00,$00,$05,$20,$00,$02,$40,$00,$40,$00,$00,$00,$06,$40,$00,$02,$40,$00,$80,$00,$00,$00,$07,$80,$00,$02
>020c18	010c18	05 20 00 02 40 00 40 00 00 00 06 40 00 02 40 00
>020c28	010c28	80 00 00 00 07 80 00 02
>020c30	010c30	40 00 00 00 87 06 19 09		.text $40,$00,$00,$00,$87,$06,$19,$09,$00,$00,$00,$00,$30,$31,$2F,$31,$30,$2F,$38,$34,$00,$90,$00,$02,$02,$01,$00,$02,$70,$00,$D0,$02
>020c38	010c38	00 00 00 00 30 31 2f 31 30 2f 38 34 00 90 00 02
>020c48	010c48	02 01 00 02 70 00 d0 02
>020c50	010c50	fd 02 00 09 00 02 00 00		.text $FD,$02,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$00,$02,$01,$01,$00,$02,$E0,$00,$60,$09,$F9,$07,$00,$0F,$00,$02
>020c58	010c58	00 00 00 00 00 00 00 90 00 02 01 01 00 02 e0 00
>020c68	010c68	60 09 f9 07 00 0f 00 02
>020c70	010c70	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$00,$02,$02,$01,$00,$02,$70,$00,$A0,$05,$F9,$03,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00
>020c78	010c78	00 90 00 02 02 01 00 02 70 00 a0 05 f9 03 00 09
>020c88	010c88	00 02 00 00 00 00 00 00
>020c90	010c90	00 00 00 90 00 02 02 01		.text $00,$00,$00,$90,$00,$02,$02,$01,$00,$02,$F0,$00,$80,$16,$F0,$09,$00,$24,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$70,$17
>020c98	010c98	00 02 f0 00 80 16 f0 09 00 24 00 02 00 00 00 00
>020ca8	010ca8	00 00 00 00 00 90 70 17
>020cb0	010cb0	8a 17 a4 17 a4 17 a4 17		.text $8A,$17,$A4,$17,$A4,$17,$A4,$17,$A4,$17,$A4,$17,$A4,$17,$A4,$17,$BE,$17,$C8,$00,$2E,$FF,$36,$EC,$17,$2E,$FF,$36,$E0,$06,$55,$CB
>020cb8	010cb8	a4 17 a4 17 a4 17 a4 17 be 17 c8 00 2e ff 36 ec
>020cc8	010cc8	17 2e ff 36 e0 06 55 cb
>020cd0	010cd0	00 fa 50 33 c0 8e d8 58		.text $00,$FA,$50,$33,$C0,$8E,$D8,$58,$2E,$A3,$DA,$16,$2E,$89,$1E,$D8,$16,$0E,$07,$51,$57,$1E,$B8,$73,$04,$8E,$D8,$BE,$35,$57,$AC,$0A
>020cd8	010cd8	2e a3 da 16 2e 89 1e d8 16 0e 07 51 57 1e b8 73
>020ce8	010ce8	04 8e d8 be 35 57 ac 0a
>020cf0	010cf0	c0 74 09 b4 0e bb 07 00		.text $C0,$74,$09,$B4,$0E,$BB,$07,$00,$CD,$10,$EB,$F2,$1F,$B9,$05,$00,$BE,$00,$01,$2E,$AC,$98,$D1,$E0,$D1,$E0,$8B,$F8,$87,$F7,$AD,$AB
>020cf8	010cf8	cd 10 eb f2 1f b9 05 00 be 00 01 2e ac 98 d1 e0
>020d08	010d08	d1 e0 8b f8 87 f7 ad ab
>020d10	010d10	ad ab 87 f7 e2 ed 5f 59		.text $AD,$AB,$87,$F7,$E2,$ED,$5F,$59,$2E,$A1,$06,$01,$2E,$A3,$B4,$00,$2E,$A1,$08,$01,$2E,$A3,$B6,$00,$C7,$06,$4C,$00,$74,$07,$8C,$0E
>020d18	010d18	2e a1 06 01 2e a3 b4 00 2e a1 08 01 2e a3 b6 00
>020d28	010d28	c7 06 4c 00 74 07 8c 0e
>020d30	010d30	4e 00 c7 06 54 00 4a 08		.text $4E,$00,$C7,$06,$54,$00,$4A,$08,$8C,$0E,$56,$00,$C7,$06,$64,$00,$FB,$07,$8C,$0E,$66,$00,$FB,$CD,$11,$A9,$01,$00,$75,$36,$50,$53
>020d38	010d38	8c 0e 56 00 c7 06 64 00 fb 07 8c 0e 66 00 fb cd
>020d48	010d48	11 a9 01 00 75 36 50 53
>020d50	010d50	51 52 57 06 b4 08 b2 00		.text $51,$52,$57,$06,$B4,$08,$B2,$00,$CD,$13,$72,$05,$2E,$88,$16,$FA,$17,$07,$5F,$5A,$59,$5B,$58,$72,$1B,$2E,$80,$3E,$FA,$17,$00,$74
>020d58	010d58	cd 13 72 05 2e 88 16 fa 17 07 5f 5a 59 5b 58 72
>020d68	010d68	1b 2e 80 3e fa 17 00 74
>020d70	010d70	08 2e a0 fa 17 fe c8 eb		.text $08,$2E,$A0,$FA,$17,$FE,$C8,$EB,$0F,$2E,$C6,$06,$ED,$16,$01,$B8,$01,$00,$EB,$0A,$D0,$C0,$D0,$C0,$25,$03,$00,$75,$06,$40,$2E,$FE
>020d78	010d78	0f 2e c6 06 ed 16 01 b8 01 00 eb 0a d0 c0 d0 c0
>020d88	010d88	25 03 00 75 06 40 2e fe
>020d90	010d90	06 78 00 40 8a c8 f6 c2		.text $06,$78,$00,$40,$8A,$C8,$F6,$C2,$80,$75,$02,$33,$C0,$33,$D2,$FA,$8E,$D2,$BC,$00,$07,$FB,$51,$8A,$E5,$50,$B4,$C0,$CD,$15,$72,$17
>020d98	010d98	80 75 02 33 c0 33 d2 fa 8e d2 bc 00 07 fb 51 8a
>020da8	010da8	e5 50 b4 c0 cd 15 72 17
>020db0	010db0	80 fc 00 75 12 26 8a 47		.text $80,$FC,$00,$75,$12,$26,$8A,$47,$02,$2E,$A2,$3E,$06,$26,$8A,$47,$03,$2E,$A2,$3F,$06,$EB,$0D,$BE,$FF,$FF,$8E,$C6,$26,$A0,$0E,$00
>020db8	010db8	02 2e a2 3e 06 26 8a 47 03 2e a2 3f 06 eb 0d be
>020dc8	010dc8	ff ff 8e c6 26 a0 0e 00
>020dd0	010dd0	2e a2 3e 06 b0 20 e6 20		.text $2E,$A2,$3E,$06,$B0,$20,$E6,$20,$2E,$80,$3E,$3E,$06,$00,$75,$10,$E4,$66,$A8,$20,$74,$0A,$B0,$0F,$E6,$50,$E4,$50,$A8,$01,$74,$14
>020dd8	010dd8	2e 80 3e 3e 06 00 75 10 e4 66 a8 20 74 0a b0 0f
>020de8	010de8	e6 50 e4 50 a8 01 74 14
>020df0	010df0	b0 03 e8 86 09 b0 02 e8		.text $B0,$03,$E8,$86,$09,$B0,$02,$E8,$81,$09,$B0,$01,$E8,$7C,$09,$32,$C0,$E8,$77,$09,$B0,$02,$E8,$6A,$09,$B0,$01,$E8,$65,$09,$32,$C0
>020df8	010df8	81 09 b0 01 e8 7c 09 32 c0 e8 77 09 b0 02 e8 6a
>020e08	010e08	09 b0 01 e8 65 09 32 c0
>020e10	010e10	e8 60 09 33 d2 8e da 8e		.text $E8,$60,$09,$33,$D2,$8E,$DA,$8E,$C2,$33,$C0,$BF,$34,$05,$AB,$AB,$8C,$C8,$C7,$06,$6C,$00,$EE,$06,$A3,$6E,$00,$C7,$06,$A4,$00,$62
>020e18	010e18	c2 33 c0 bf 34 05 ab ab 8c c8 c7 06 6c 00 ee 06
>020e28	010e28	a3 6e 00 c7 06 a4 00 62
>020e30	010e30	07 a3 a6 00 bf 04 00 bb		.text $07,$A3,$A6,$00,$BF,$04,$00,$BB,$F4,$06,$93,$AB,$93,$AB,$83,$C7,$04,$93,$AB,$93,$AB,$93,$AB,$93,$AB,$89,$16,$00,$05,$89,$16,$04
>020e38	010e38	f4 06 93 ab 93 ab 83 c7 04 93 ab 93 ab 93 ab 93
>020e48	010e48	ab 89 16 00 05 89 16 04
>020e50	010e50	05 a0 2c 05 2e a2 26 01		.text $05,$A0,$2C,$05,$2E,$A2,$26,$01,$2E,$80,$3E,$3E,$06,$FD,$72,$0B,$C7,$06,$2B,$05,$0F,$02,$C6,$06,$22,$05,$DF,$CD,$12,$B1,$06,$D3
>020e58	010e58	2e 80 3e 3e 06 fd 72 0b c7 06 2b 05 0f 02 c6 06
>020e68	010e68	22 05 df cd 12 b1 06 d3
>020e70	010e70	e0 59 2e 89 0e d6 16 50		.text $E0,$59,$2E,$89,$0E,$D6,$16,$50,$1E,$53,$33,$DB,$8E,$DB,$8B,$1E,$BC,$00,$8E,$1E,$BE,$00,$81,$7F,$03,$52,$50,$75,$0F,$80,$7F,$05
>020e78	010e78	1e 53 33 db 8e db 8b 1e bc 00 8e 1e be 00 81 7f
>020e88	010e88	03 52 50 75 0f 80 7f 05
>020e90	010e90	4c 75 09 8b d0 b8 06 4a		.text $4C,$75,$09,$8B,$D0,$B8,$06,$4A,$CD,$2F,$8B,$C2,$5B,$1F,$2D,$40,$00,$2E,$A3,$DF,$16,$2D,$40,$00,$2E,$A3,$E1,$16,$58,$BA,$73,$04
>020e98	010e98	cd 2f 8b c2 5b 1f 2d 40 00 2e a3 df 16 2d 40 00
>020ea8	010ea8	2e a3 e1 16 58 ba 73 04
>020eb0	010eb0	8e da c7 06 75 02 23 00		.text $8E,$DA,$C7,$06,$75,$02,$23,$00,$8C,$0E,$77,$02,$A3,$94,$02,$FE,$C1,$88,$0E,$98,$02,$C7,$06,$73,$02,$09,$0A,$B8,$73,$04,$8E,$C0
>020eb8	010eb8	8c 0e 77 02 a3 94 02 fe c1 88 0e 98 02 c7 06 73
>020ec8	010ec8	02 09 0a b8 73 04 8e c0
>020ed0	010ed0	33 c0 8e d8 a1 3e 00 26		.text $33,$C0,$8E,$D8,$A1,$3E,$00,$26,$3B,$06,$94,$02,$76,$05,$3D,$00,$F0,$75,$0A,$C7,$06,$3C,$00,$F4,$06,$8C,$0E,$3E,$00,$33,$C9,$8E
>020ed8	010ed8	3b 06 94 02 76 05 3d 00 f0 75 0a c7 06 3c 00 f4
>020ee8	010ee8	06 8c 0e 3e 00 33 c9 8e
>020ef0	010ef0	d9 8a 0e 96 04 f6 c1 10		.text $D9,$8A,$0E,$96,$04,$F6,$C1,$10,$74,$0C,$2E,$C6,$06,$E5,$04,$10,$2E,$C6,$06,$E6,$04,$11,$0E,$1F,$0E,$07,$E8,$B7,$09,$C7,$06,$00
>020ef8	010ef8	74 0c 2e c6 06 e5 04 10 2e c6 06 e6 04 11 0e 1f
>020f08	010f08	0e 07 e8 b7 09 c7 06 00
>020f10	010f10	00 18 09 58 32 e4 a2 75		.text $00,$18,$09,$58,$32,$E4,$A2,$75,$00,$A2,$25,$01,$D1,$E0,$01,$06,$5E,$17,$1E,$B8,$00,$F0,$8E,$D8,$81,$3E,$EA,$FF,$43,$4F,$75,$1F
>020f18	010f18	00 a2 25 01 d1 e0 01 06 5e 17 1e b8 00 f0 8e d8
>020f28	010f28	81 3e ea ff 43 4f 75 1f
>020f30	010f30	81 3e ec ff 4d 50 75 17		.text $81,$3E,$EC,$FF,$4D,$50,$75,$17,$81,$3E,$EE,$FF,$41,$51,$75,$0F,$B8,$00,$E4,$CD,$15,$72,$08,$83,$CB,$40,$B8,$80,$E4,$CD,$15,$1F
>020f38	010f38	81 3e ee ff 41 51 75 0f b8 00 e4 cd 15 72 08 83
>020f48	010f48	cb 40 b8 80 e4 cd 15 1f
>020f50	010f50	b2 80 b4 08 cd 13 72 04		.text $B2,$80,$B4,$08,$CD,$13,$72,$04,$88,$16,$5D,$17,$32,$D2,$0E,$1F,$C6,$06,$2C,$01,$09,$BF,$19,$01,$80,$3E,$ED,$16,$01,$75,$0B,$8B
>020f58	010f58	88 16 5d 17 32 d2 0e 1f c6 06 2c 01 09 bf 19 01
>020f68	010f68	80 3e ed 16 01 75 0b 8b
>020f70	010f70	3d 8b 3d c7 05 ff ff e9		.text $3D,$8B,$3D,$C7,$05,$FF,$FF,$E9,$14,$01,$3A,$16,$75,$00,$72,$03,$E9,$07,$01,$33,$C9,$8B,$3D,$B6,$00,$C6,$06,$EC,$16,$28,$1E,$57
>020f78	010f78	14 01 3a 16 75 00 72 03 e9 07 01 33 c9 8b 3d b6
>020f88	010f88	00 c6 06 ec 16 28 1e 57
>020f90	010f90	52 51 06 b4 08 cd 13 72		.text $52,$51,$06,$B4,$08,$CD,$13,$72,$78,$80,$FD,$00,$75,$06,$B5,$27,$B1,$09,$B6,$01,$FE,$C6,$FE,$C5,$88,$36,$EA,$16,$80,$E1,$3F,$88
>020f98	010f98	78 80 fd 00 75 06 b5 27 b1 09 b6 01 fe c6 fe c5
>020fa8	010fa8	88 36 ea 16 80 e1 3f 88
>020fb0	010fb0	0e eb 16 88 2e ec 16 3a		.text $0E,$EB,$16,$88,$2E,$EC,$16,$3A,$0E,$2C,$01,$76,$04,$88,$0E,$2C,$01,$07,$59,$5A,$5F,$1F,$B4,$15,$CD,$13,$72,$0D,$80,$FC,$02,$75
>020fb8	010fb8	0e 2c 01 76 04 88 0e 2c 01 07 59 5a 5f 1f b4 15
>020fc8	010fc8	cd 13 72 0d 80 fc 02 75
>020fd0	010fd0	08 80 c9 02 c6 06 77 00		.text $08,$80,$C9,$02,$C6,$06,$77,$00,$01,$80,$3E,$EC,$16,$28,$75,$0B,$80,$3E,$EB,$16,$09,$76,$54,$B6,$07,$EB,$50,$80,$3E,$EC,$16,$50
>020fd8	010fd8	01 80 3e ec 16 28 75 0b 80 3e eb 16 09 76 54 b6
>020fe8	010fe8	07 eb 50 80 3e ec 16 50
>020ff0	010ff0	75 f5 b6 09 80 3e eb 16		.text $75,$F5,$B6,$09,$80,$3E,$EB,$16,$24,$74,$40,$80,$3E,$EB,$16,$0F,$74,$0B,$80,$3E,$EB,$16,$09,$75,$DE,$B6,$02,$EB,$2E,$B6,$01,$EB
>020ff8	010ff8	24 74 40 80 3e eb 16 0f 74 0b 80 3e eb 16 09 75
>021008	011008	de b6 02 eb 2e b6 01 eb
>021010	011010	2a 07 59 5a 5f 1f b4 15		.text $2A,$07,$59,$5A,$5F,$1F,$B4,$15,$CD,$13,$72,$1F,$80,$FC,$02,$75,$1A,$80,$C9,$02,$C6,$06,$77,$00,$01,$C6,$06,$EC,$16,$50,$B6,$01
>021018	011018	cd 13 72 1f 80 fc 02 75 1a 80 c9 02 c6 06 77 00
>021028	011028	01 c6 06 ec 16 50 b6 01
>021030	011030	b0 0f 3a 06 2c 01 76 03		.text $B0,$0F,$3A,$06,$2C,$01,$76,$03,$A2,$2C,$01,$80,$C9,$20,$8A,$FA,$80,$3E,$78,$00,$02,$75,$05,$FE,$CF,$80,$F1,$20,$33,$C0,$A0,$EA
>021038	011038	a2 2c 01 80 c9 20 8a fa 80 3e 78 00 02 75 05 fe
>021048	011048	cf 80 f1 20 33 c0 a0 ea
>021050	011050	16 89 45 36 a0 eb 16 89		.text $16,$89,$45,$36,$A0,$EB,$16,$89,$45,$34,$89,$4D,$23,$88,$75,$22,$88,$55,$05,$88,$7D,$04,$8A,$1E,$EC,$16,$88,$5D,$25,$80,$3E,$78
>021058	011058	45 34 89 4d 23 88 75 22 88 55 05 88 7d 04 8a 1e
>021068	011068	ec 16 88 5d 25 80 3e 78
>021070	011070	00 01 75 11 c6 06 78 00		.text $00,$01,$75,$11,$C6,$06,$78,$00,$02,$83,$C9,$10,$09,$4D,$23,$8B,$3D,$FE,$C2,$EB,$B6,$FE,$C2,$E9,$F0,$FE,$C7,$05,$FF,$FF,$8A,$36
>021078	011078	02 83 c9 10 09 4d 23 8b 3d fe c2 eb b6 fe c2 e9
>021088	011088	f0 fe c7 05 ff ff 8a 36
>021090	011090	5d 17 0a f6 74 5b b2 80		.text $5D,$17,$0A,$F6,$74,$5B,$B2,$80,$52,$8B,$3E,$60,$17,$8A,$1E,$75,$00,$B7,$00,$E8,$53,$02,$72,$08,$E8,$CF,$07,$73,$03,$E8,$DF,$07
>021098	011098	52 8b 3e 60 17 8a 1e 75 00 b7 00 e8 53 02 72 08
>0210a8	0110a8	e8 cf 07 73 03 e8 df 07
>0210b0	0110b0	5a fe c2 fe ce 75 e1 e8		.text $5A,$FE,$C2,$FE,$CE,$75,$E1,$E8,$CB,$06,$8A,$36,$5D,$17,$B2,$80,$B7,$01,$52,$53,$8B,$3E,$60,$17,$8A,$1E,$75,$00,$E8,$2A,$02,$72
>0210b8	0110b8	cb 06 8a 36 5d 17 b2 80 b7 01 52 53 8b 3e 60 17
>0210c8	0110c8	8a 1e 75 00 e8 2a 02 72
>0210d0	0110d0	0e e8 a6 07 73 09 e8 b6		.text $0E,$E8,$A6,$07,$73,$09,$E8,$B6,$07,$5B,$5A,$FE,$C7,$EB,$E3,$5B,$5A,$FE,$C2,$FE,$CE,$75,$D9,$80,$3E,$25,$01,$02,$76,$03,$E8,$83
>0210d8	0110d8	07 5b 5a fe c7 eb e3 5b 5a fe c2 fe ce 75 d9 80
>0210e8	0110e8	3e 25 01 02 76 03 e8 83
>0210f0	0110f0	01 8b 3e 60 17 81 ff 19		.text $01,$8B,$3E,$60,$17,$81,$FF,$19,$09,$75,$0D,$BF,$18,$09,$80,$3E,$77,$00,$00,$75,$03,$BF,$FE,$08,$0E,$07,$FC,$80,$3E,$3E,$06,$FC
>0210f8	0110f8	09 75 0d bf 18 09 80 3e 77 00 00 75 03 bf fe 08
>021108	011108	0e 07 fc 80 3e 3e 06 fc
>021110	011110	75 23 80 3e 5d 17 00 74		.text $75,$23,$80,$3E,$5D,$17,$00,$74,$1C,$97,$BE,$00,$F0,$8E,$C6,$BE,$66,$17,$BF,$F5,$FF,$B9,$09,$00,$F3,$A6,$97,$75,$08,$B9,$0C,$14
>021118	011118	1c 97 be 00 f0 8e c6 be 66 17 bf f5 ff b9 09 00
>021128	011128	f3 a6 97 75 08 b9 0c 14
>021130	011130	be de 12 eb 4b b8 00 f0		.text $BE,$DE,$12,$EB,$4B,$B8,$00,$F0,$8E,$C0,$26,$81,$3E,$EA,$FF,$43,$4F,$75,$4B,$26,$81,$3E,$EC,$FF,$4D,$50,$75,$42,$26,$81,$3E,$EE
>021138	011138	8e c0 26 81 3e ea ff 43 4f 75 4b 26 81 3e ec ff
>021148	011148	4d 50 75 42 26 81 3e ee
>021150	011150	ff 41 51 75 39 26 a1 fb		.text $FF,$41,$51,$75,$39,$26,$A1,$FB,$FF,$86,$E0,$3D,$36,$38,$77,$2E,$72,$18,$26,$A1,$F5,$FF,$86,$E0,$3D,$38,$30,$77,$21,$72,$0B,$26
>021158	011158	ff 86 e0 3d 36 38 77 2e 72 18 26 a1 f5 ff 86 e0
>021168	011168	3d 38 30 77 21 72 0b 26
>021170	011170	a1 f8 ff 86 e0 3d 34 30		.text $A1,$F8,$FF,$86,$E0,$3D,$34,$30,$73,$14,$B9,$2D,$14,$BE,$0C,$14,$0E,$07,$89,$3E,$B4,$00,$8C,$0E,$B6,$00,$2B,$CE,$F3,$A4,$0E,$07
>021178	011178	73 14 b9 2d 14 be 0c 14 0e 07 89 3e b4 00 8c 0e
>021188	011188	b6 00 2b ce f3 a4 0e 07
>021190	011190	80 3e f3 04 01 75 18 89		.text $80,$3E,$F3,$04,$01,$75,$18,$89,$3E,$06,$05,$B9,$D1,$00,$BE,$2E,$14,$F3,$A4,$89,$3E,$02,$05,$B9,$0B,$00,$BE,$FF,$14,$F3,$A4,$57
>021198	011198	3e 06 05 b9 d1 00 be 2e 14 f3 a4 89 3e 02 05 b9
>0211a8	0111a8	0b 00 be ff 14 f3 a4 57
>0211b0	0111b0	b8 01 41 b3 01 26 8a 3d		.text $B8,$01,$41,$B3,$01,$26,$8A,$3D,$F9,$CD,$15,$5F,$72,$1B,$C6,$06,$79,$00,$01,$1E,$33,$C0,$8E,$D8,$89,$3E,$B0,$01,$8C,$0E,$B2,$01
>0211b8	0111b8	f9 cd 15 5f 72 1b c6 06 79 00 01 1e 33 c0 8e d8
>0211c8	0111c8	89 3e b0 01 8c 0e b2 01
>0211d0	0111d0	1f be 0a 15 b9 cb 01 f3		.text $1F,$BE,$0A,$15,$B9,$CB,$01,$F3,$A4,$0E,$1F,$83,$C7,$0F,$D1,$EF,$D1,$EF,$D1,$EF,$D1,$EF,$81,$C7,$70,$00,$89,$3E,$03,$00,$A1,$D6
>0211d8	0111d8	a4 0e 1f 83 c7 0f d1 ef d1 ef d1 ef d1 ef 81 c7
>0211e8	0111e8	70 00 89 3e 03 00 a1 d6
>0211f0	0111f0	16 bd d7 04 0e e8 cc fa		.text $16,$BD,$D7,$04,$0E,$E8,$CC,$FA,$BD,$06,$06,$0E,$E8,$C5,$FA,$06,$1F,$33,$FF,$26,$8A,$05,$26,$A2,$D7,$16,$26,$A1,$D6,$16,$06,$1E
>0211f8	0111f8	bd 06 06 0e e8 c5 fa 06 1f 33 ff 26 8a 05 26 a2
>021208	011208	d7 16 26 a1 d6 16 06 1e
>021210	011210	07 0e 1f bd d7 04 0e e8		.text $07,$0E,$1F,$BD,$D7,$04,$0E,$E8,$AA,$FA,$06,$1F,$07,$8B,$5D,$06,$2E,$89,$1E,$E4,$16,$8A,$5D,$1F,$26,$88,$1E,$DE,$16,$8A,$4D,$08
>021218	011218	aa fa 06 1f 07 8b 5d 06 2e 89 1e e4 16 8a 5d 1f
>021228	011228	26 88 1e de 16 8a 4d 08
>021230	011230	8b 45 17 26 29 06 d8 16		.text $8B,$45,$17,$26,$29,$06,$D8,$16,$8B,$45,$19,$26,$19,$06,$DA,$16,$32,$ED,$1E,$33,$FF,$8E,$DF,$8B,$1E,$3A,$05,$1F,$B8,$73,$04,$8E
>021238	011238	8b 45 19 26 19 06 da 16 32 ed 1e 33 ff 8e df 8b
>021248	011248	1e 3a 05 1f b8 73 04 8e
>021250	011250	c0 26 8e 06 73 02 e8 16		.text $C0,$26,$8E,$06,$73,$02,$E8,$16,$07,$2E,$F6,$06,$DE,$16,$40,$75,$06,$81,$FB,$F7,$0F,$EB,$03,$83,$FB,$F7,$72,$E0,$E8,$49,$04,$EA
>021258	011258	07 2e f6 06 de 16 40 75 06 81 fb f7 0f eb 03 83
>021268	011268	fb f7 72 e0 e8 49 04 ea
>021270	011270	69 02 73 04 2e 8b 3e 19		.text $69,$02,$73,$04,$2E,$8B,$3E,$19,$01,$80,$7D,$04,$80,$74,$09,$8B,$3D,$83,$FF,$FF,$75,$F3,$EB,$50,$B0,$02,$88,$45,$05,$8B,$3D,$FE
>021278	011278	01 80 7d 04 80 74 09 8b 3d 83 ff ff 75 f3 eb 50
>021288	011288	b0 02 88 45 05 8b 3d fe
>021290	011290	c0 83 ff ff 75 f4 2e 8b		.text $C0,$83,$FF,$FF,$75,$F4,$2E,$8B,$3E,$19,$01,$8B,$3D,$2E,$8A,$26,$25,$01,$80,$EC,$02,$8B,$3D,$88,$45,$05,$FE,$C0,$FE,$CC,$75,$F5
>021298	011298	3e 19 01 8b 3d 2e 8a 26 25 01 80 ec 02 8b 3d 88
>0212a8	0112a8	45 05 fe c0 fe cc 75 f5
>0212b0	0112b0	2e a0 d6 16 3c 02 72 20		.text $2E,$A0,$D6,$16,$3C,$02,$72,$20,$2E,$2A,$06,$25,$01,$72,$04,$04,$02,$EB,$05,$2E,$02,$06,$75,$00,$2E,$A2,$D6,$16,$FE,$C0,$1E,$BF
>0212b8	0112b8	2e 2a 06 25 01 72 04 04 02 eb 05 2e 02 06 75 00
>0212c8	0112c8	2e a2 d6 16 fe c0 1e bf
>0212d0	0112d0	73 04 8e df a2 98 02 1f		.text $73,$04,$8E,$DF,$A2,$98,$02,$1F,$C3,$2E,$A1,$E1,$16,$8E,$C0,$BB,$00,$02,$B8,$01,$02,$32,$F6,$B9,$01,$00,$CD,$13,$72,$09,$26,$81
>0212d8	0112d8	c3 2e a1 e1 16 8e c0 bb 00 02 b8 01 02 32 f6 b9
>0212e8	0112e8	01 00 cd 13 72 09 26 81
>0212f0	0112f0	3e fe 03 55 aa 74 01 f9		.text $3E,$FE,$03,$55,$AA,$74,$01,$F9,$C3,$57,$53,$1E,$06,$88,$5D,$05,$88,$55,$04,$80,$4D,$23,$01,$C6,$45,$22,$05,$C6,$06,$DE,$16,$00
>0212f8	0112f8	c3 57 53 1e 06 88 5d 05 88 55 04 80 4d 23 01 c6
>021308	011308	45 22 05 c6 06 de 16 00
>021310	011310	8a f7 52 b4 08 cd 13 fe		.text $8A,$F7,$52,$B4,$08,$CD,$13,$FE,$C6,$88,$75,$15,$5A,$72,$63,$80,$E1,$3F,$88,$4D,$13,$52,$E8,$B0,$FF,$5A,$72,$56,$BB,$C2,$03,$26
>021318	011318	c6 88 75 15 5a 72 63 80 e1 3f 88 4d 13 52 e8 b0
>021328	011328	ff 5a 72 56 bb c2 03 26
>021330	011330	f6 47 fc 80 74 18 26 80		.text $F6,$47,$FC,$80,$74,$18,$26,$80,$3F,$01,$74,$0C,$26,$80,$3F,$04,$74,$06,$26,$80,$3F,$06,$75,$06,$0A,$F6,$74,$3A,$FE,$CE,$83,$C3
>021338	011338	3f 01 74 0c 26 80 3f 04 74 06 26 80 3f 06 75 06
>021348	011348	0a f6 74 3a fe ce 83 c3
>021350	011350	10 81 fb 02 04 75 d8 bb		.text $10,$81,$FB,$02,$04,$75,$D8,$BB,$C2,$03,$26,$F6,$47,$FC,$80,$75,$18,$26,$80,$3F,$01,$74,$0C,$26,$80,$3F,$04,$74,$06,$26,$80,$3F
>021358	011358	c2 03 26 f6 47 fc 80 75 18 26 80 3f 01 74 0c 26
>021368	011368	80 3f 04 74 06 26 80 3f
>021370	011370	06 75 06 0a f6 74 0f fe		.text $06,$75,$06,$0A,$F6,$74,$0F,$FE,$CE,$83,$C3,$10,$81,$FB,$02,$04,$75,$D8,$F9,$E9,$E7,$02,$2E,$88,$16,$E3,$16,$26,$8B,$47,$04,$26
>021378	011378	ce 83 c3 10 81 fb 02 04 75 d8 f9 e9 e7 02 2e 88
>021388	011388	16 e3 16 26 8b 47 04 26
>021390	011390	8b 57 06 2d 01 00 83 da		.text $8B,$57,$06,$2D,$01,$00,$83,$DA,$00,$26,$03,$47,$08,$26,$13,$57,$0A,$73,$05,$80,$0E,$DE,$16,$80,$26,$8B,$47,$04,$89,$45,$17,$26
>021398	011398	00 26 03 47 08 26 13 57 0a 73 05 80 0e de 16 80
>0213a8	0113a8	26 8b 47 04 89 45 17 26
>0213b0	0113b0	8b 47 06 89 45 19 26 8b		.text $8B,$47,$06,$89,$45,$19,$26,$8B,$57,$0A,$26,$8B,$47,$08,$89,$55,$1D,$89,$45,$1B,$83,$FA,$00,$77,$05,$3D,$40,$00,$72,$B4,$8B,$55
>0213b8	0113b8	57 0a 26 8b 47 08 89 55 1d 89 45 1b 83 fa 00 77
>0213c8	0113c8	05 3d 40 00 72 b4 8b 55
>0213d0	0113d0	19 8b 45 17 33 db 8a 5d		.text $19,$8B,$45,$17,$33,$DB,$8A,$5D,$13,$50,$8B,$C2,$33,$D2,$F7,$F3,$2E,$A3,$29,$05,$58,$F7,$F3,$8A,$CA,$FE,$C1,$33,$DB,$8A,$5D,$15
>0213d8	0113d8	13 50 8b c2 33 d2 f7 f3 2e a3 29 05 58 f7 f3 8a
>0213e8	0113e8	ca fe c1 33 db 8a 5d 15
>0213f0	0113f0	50 33 d2 2e a1 29 05 f7		.text $50,$33,$D2,$2E,$A1,$29,$05,$F7,$F3,$2E,$A3,$29,$05,$58,$F7,$F3,$2E,$83,$3E,$29,$05,$00,$77,$7C,$3D,$00,$04,$77,$77,$83,$7D,$47
>0213f8	0113f8	f3 2e a3 29 05 58 f7 f3 2e 83 3e 29 05 00 77 7c
>021408	011408	3d 00 04 77 77 83 7d 47
>021410	011410	01 75 03 03 45 49 d0 cc		.text $01,$75,$03,$03,$45,$49,$D0,$CC,$D0,$CC,$80,$E4,$C0,$0A,$CC,$8A,$E8,$8A,$F2,$2E,$8A,$16,$E3,$16,$0E,$07,$BB,$4E,$01,$B8,$01,$02
>021418	011418	d0 cc 80 e4 c0 0a cc 8a e8 8a f2 2e 8a 16 e3 16
>021428	011428	0e 07 bb 4e 01 b8 01 02
>021430	011430	cd 13 bb 4e 01 53 50 2e		.text $CD,$13,$BB,$4E,$01,$53,$50,$2E,$80,$3F,$E9,$74,$0D,$2E,$80,$3F,$EB,$75,$29,$2E,$80,$7F,$02,$90,$75,$22,$BB,$59,$01,$2E,$8A,$47
>021438	011438	80 3f e9 74 0d 2e 80 3f eb 75 29 2e 80 7f 02 90
>021448	011448	75 22 bb 59 01 2e 8a 47
>021450	011450	0a 24 f0 3c f0 75 15 2e		.text $0A,$24,$F0,$3C,$F0,$75,$15,$2E,$81,$3F,$00,$02,$75,$0E,$2E,$8A,$47,$02,$0A,$C0,$74,$06,$D0,$E8,$73,$FC,$74,$05,$58,$5B,$E9,$36
>021458	011458	81 3f 00 02 75 0e 2e 8a 47 02 0a c0 74 06 d0 e8
>021468	011468	73 fc 74 05 58 5b e9 36
>021470	011470	01 58 5b 2e 81 7f 08 32		.text $01,$58,$5B,$2E,$81,$7F,$08,$32,$2E,$75,$0F,$2E,$80,$7F,$0A,$30,$75,$08,$EB,$2F,$E9,$FB,$FE,$E9,$22,$01,$E8,$E5,$01,$2E,$81,$7F
>021478	011478	2e 75 0f 2e 80 7f 0a 30 75 08 eb 2f e9 fb fe e9
>021488	011488	22 01 e8 e5 01 2e 81 7f
>021490	011490	08 30 2e 75 0d 2e 8a 47		.text $08,$30,$2E,$75,$0D,$2E,$8A,$47,$07,$2C,$31,$24,$FE,$74,$14,$E9,$05,$01,$2E,$81,$7F,$08,$33,$2E,$72,$DD,$75,$07,$2E,$80,$7F,$0A
>021498	011498	07 2c 31 24 fe 74 14 e9 05 01 2e 81 7f 08 33 2e
>0214a8	0114a8	72 dd 75 07 2e 80 7f 0a
>0214b0	0114b0	31 72 d4 2e 80 3e 74 01		.text $31,$72,$D4,$2E,$80,$3E,$74,$01,$29,$75,$57,$2E,$80,$3E,$5E,$01,$00,$75,$4F,$57,$1E,$1E,$07,$0E,$1F,$BE,$59,$01,$83,$C7,$06,$2E
>0214b8	0114b8	29 75 57 2e 80 3e 5e 01 00 75 4f 57 1e 1e 07 0e
>0214c8	0114c8	1f be 59 01 83 c7 06 2e
>0214d0	0114d0	83 7c 08 00 75 23 2e 83		.text $83,$7C,$08,$00,$75,$23,$2E,$83,$7C,$15,$00,$75,$1C,$2E,$83,$7C,$17,$00,$75,$15,$8B,$45,$08,$2E,$89,$44,$08,$8B,$45,$15,$2E,$89
>0214d8	0114d8	7c 15 00 75 1c 2e 83 7c 17 00 75 15 8b 45 08 2e
>0214e8	0114e8	89 44 08 8b 45 15 2e 89
>0214f0	0114f0	44 15 8b 45 17 2e 89 44		.text $44,$15,$8B,$45,$17,$2E,$89,$44,$17,$B9,$19,$00,$F3,$A4,$1F,$5F,$06,$1E,$07,$0E,$1F,$BD,$51,$07,$0E,$E8,$B8,$F7,$06,$1F,$07,$E9
>0214f8	0114f8	17 b9 19 00 f3 a4 1f 5f 06 1e 07 0e 1f bd 51 07
>021508	011508	0e e8 b8 f7 06 1f 07 e9
>021510	011510	53 01 be 59 01 33 d2 2e		.text $53,$01,$BE,$59,$01,$33,$D2,$2E,$8B,$44,$08,$0B,$C0,$75,$0E,$2E,$8B,$44,$15,$2E,$8B,$54,$17,$8B,$CA,$0B,$C8,$74,$06,$89,$45,$1B
>021518	011518	8b 44 08 0b c0 75 0e 2e 8b 44 15 2e 8b 54 17 8b
>021528	011528	ca 0b c8 74 06 89 45 1b
>021530	011530	89 55 1d 8b 45 1b 8b 55		.text $89,$55,$1D,$8B,$45,$1B,$8B,$55,$1D,$2E,$8B,$5C,$03,$89,$5D,$09,$2B,$C3,$83,$DA,$00,$2E,$8B,$5C,$0B,$89,$5D,$11,$D1,$E3,$2B,$C3
>021538	011538	1d 2e 8b 5c 03 89 5d 09 2b c3 83 da 00 2e 8b 5c
>021548	011548	0b 89 5d 11 d1 e3 2b c3
>021550	011550	83 da 00 2e 8b 5c 06 89		.text $83,$DA,$00,$2E,$8B,$5C,$06,$89,$5D,$0C,$B1,$04,$D3,$EB,$2B,$C3,$83,$DA,$00,$33,$C9,$2E,$8A,$4C,$02,$88,$4D,$08,$50,$8B,$C2,$33
>021558	011558	5d 0c b1 04 d3 eb 2b c3 83 da 00 33 c9 2e 8a 4c
>021568	011568	02 88 4d 08 50 8b c2 33
>021570	011570	d2 f7 f1 2e a3 29 05 58		.text $D2,$F7,$F1,$2E,$A3,$29,$05,$58,$F7,$F1,$2E,$83,$3E,$29,$05,$00,$77,$1C,$3D,$F6,$0F,$72,$05,$80,$0E,$DE,$16,$40,$06,$1E,$07,$0E
>021578	011578	f7 f1 2e 83 3e 29 05 00 77 1c 3d f6 0f 72 05 80
>021588	011588	0e de 16 40 06 1e 07 0e
>021590	011590	1f bd 51 07 0e e8 2c f7		.text $1F,$BD,$51,$07,$0E,$E8,$2C,$F7,$06,$1F,$07,$E9,$A6,$00,$2E,$80,$0E,$DE,$16,$80,$E9,$BE,$00,$81,$4D,$23,$00,$02,$8B,$55,$1D,$8B
>021598	011598	06 1f 07 e9 a6 00 2e 80 0e de 16 80 e9 be 00 81
>0215a8	0115a8	4d 23 00 02 8b 55 1d 8b
>0215b0	0115b0	45 1b be 16 17 2e 3b 14		.text $45,$1B,$BE,$16,$17,$2E,$3B,$14,$72,$0D,$77,$06,$2E,$3B,$44,$02,$76,$05,$83,$C6,$0A,$EB,$EE,$8A,$4C,$08,$08,$0E,$DE,$16,$2E,$8B
>0215b8	0115b8	72 0d 77 06 2e 3b 44 02 76 05 83 c6 0a eb ee 8a
>0215c8	0115c8	4c 08 08 0e de 16 2e 8b
>0215d0	0115d0	4c 04 2e 8b 54 06 89 55		.text $4C,$04,$2E,$8B,$54,$06,$89,$55,$0C,$8B,$55,$1D,$8B,$45,$1B,$88,$6D,$08,$F6,$06,$DE,$16,$40,$75,$1E,$33,$DB,$8A,$DD,$4B,$03,$D8
>0215d8	0115d8	0c 8b 55 1d 8b 45 1b 88 6d 08 f6 06 de 16 40 75
>0215e8	0115e8	1e 33 db 8a dd 4b 03 d8
>0215f0	0115f0	d3 eb 43 80 e3 fe 8b f3		.text $D3,$EB,$43,$80,$E3,$FE,$8B,$F3,$D1,$EB,$03,$DE,$81,$C3,$FF,$01,$D0,$EF,$88,$7D,$11,$EB,$3D,$B1,$04,$52,$8B,$55,$0C,$D3,$EA,$2B
>0215f8	0115f8	d1 eb 03 de 81 c3 ff 01 d0 ef 88 7d 11 eb 3d b1
>021608	011608	04 52 8b 55 0c d3 ea 2b
>021610	011610	c2 5a 83 da 00 2d 01 00		.text $C2,$5A,$83,$DA,$00,$2D,$01,$00,$83,$DA,$00,$B3,$02,$8A,$7D,$08,$03,$C3,$83,$D2,$00,$2D,$01,$00,$83,$DA,$00,$F7,$F3,$89,$45,$11
>021618	011618	83 da 00 b3 02 8a 7d 08 03 c3 83 d2 00 2d 01 00
>021628	011628	83 da 00 f7 f3 89 45 11
>021630	011630	8a 1e de 16 88 5d 1f 1e		.text $8A,$1E,$DE,$16,$88,$5D,$1F,$1E,$1E,$07,$0E,$1F,$BD,$D9,$05,$0E,$E8,$81,$F6,$1F,$8B,$55,$1D,$8B,$45,$1B,$83,$FA,$00,$77,$16,$83
>021638	011638	1e 07 0e 1f bd d9 05 0e e8 81 f6 1f 8b 55 1d 8b
>021648	011648	45 1b 83 fa 00 77 16 83
>021650	011650	7d 19 00 77 10 03 45 17		.text $7D,$19,$00,$77,$10,$03,$45,$17,$72,$0B,$8B,$45,$1B,$89,$45,$0E,$C7,$45,$1B,$00,$00,$8A,$1E,$DE,$16,$88,$5D,$1F,$F8,$07,$1F,$5B
>021658	011658	72 0b 8b 45 1b 89 45 0e c7 45 1b 00 00 8a 1e de
>021668	011668	16 88 5d 1f f8 07 1f 5b
>021670	011670	5f c3 50 52 56 2e 80 3e		.text $5F,$C3,$50,$52,$56,$2E,$80,$3E,$74,$01,$29,$74,$31,$2E,$81,$7F,$07,$31,$30,$75,$07,$2E,$80,$7F,$0A,$30,$75,$22,$BE,$59,$01,$2E
>021678	011678	74 01 29 74 31 2e 81 7f 07 31 30 75 07 2e 80 7f
>021688	011688	0a 30 75 22 be 59 01 2e
>021690	011690	83 7c 08 00 74 18 2e 8b		.text $83,$7C,$08,$00,$74,$18,$2E,$8B,$44,$08,$2E,$03,$44,$11,$73,$0E,$75,$0C,$2E,$FF,$4C,$08,$83,$6D,$1B,$01,$83,$5D,$1D,$00,$5E,$5A
>021698	011698	44 08 2e 03 44 11 73 0e 75 0c 2e ff 4c 08 83 6d
>0216a8	0116a8	1b 01 83 5d 1d 00 5e 5a
>0216b0	0116b0	58 c3 02 00 03 00 00 02		.text $58,$C3,$02,$00,$03,$00,$00,$02,$33,$DB,$C4,$3E,$19,$01,$06,$57,$26,$8A,$5D,$22,$80,$FB,$05,$75,$3E,$33,$D2,$26,$8B,$45,$0E,$0B
>0216b8	0116b8	33 db c4 3e 19 01 06 57 26 8a 5d 22 80 fb 05 75
>0216c8	0116c8	3e 33 d2 26 8b 45 0e 0b
>0216d0	0116d0	c0 75 08 26 8b 55 1d 26		.text $C0,$75,$08,$26,$8B,$55,$1D,$26,$8B,$45,$1B,$52,$50,$26,$8B,$45,$15,$26,$F7,$65,$13,$8B,$C8,$58,$5A,$50,$8B,$C2,$33,$D2,$F7,$F1
>0216d8	0116d8	8b 45 1b 52 50 26 8b 45 15 26 f7 65 13 8b c8 58
>0216e8	0116e8	5a 50 8b c2 33 d2 f7 f1
>0216f0	0116f0	2e a3 29 05 58 f7 f1 0b		.text $2E,$A3,$29,$05,$58,$F7,$F1,$0B,$D2,$74,$01,$40,$26,$89,$45,$25,$06,$1F,$8D,$75,$06,$EB,$56,$0E,$1F,$2E,$80,$3E,$ED,$16,$01,$74
>0216f8	0116f8	d2 74 01 40 26 89 45 25 06 1f 8d 75 06 eb 56 0e
>021708	011708	1f 2e 80 3e ed 16 01 74
>021710	011710	54 80 fb 07 75 40 33 d2		.text $54,$80,$FB,$07,$75,$40,$33,$D2,$8B,$45,$25,$F7,$65,$36,$F7,$65,$34,$89,$45,$2F,$48,$B2,$01,$3D,$F6,$0F,$72,$06,$D1,$E8,$D0,$E2
>021718	011718	8b 45 25 f7 65 36 f7 65 34 89 45 2f 48 b2 01 3d
>021728	011728	f6 0f 72 06 d1 e8 d0 e2
>021730	011730	eb f5 80 fa 01 74 05 c7		.text $EB,$F5,$80,$FA,$01,$74,$05,$C7,$45,$2D,$F0,$00,$88,$55,$29,$2E,$F7,$26,$DE,$21,$2E,$F7,$36,$DC,$21,$33,$D2,$2E,$F7,$36,$E0,$21
>021738	011738	45 2d f0 00 88 55 29 2e f7 26 de 21 2e f7 36 dc
>021748	011748	21 33 d2 2e f7 36 e0 21
>021750	011750	40 89 45 32 eb 0f d1 e3		.text $40,$89,$45,$32,$EB,$0F,$D1,$E3,$BE,$D8,$17,$8B,$30,$8D,$7D,$27,$B9,$19,$00,$F3,$A4,$5F,$07,$26,$C4,$3D,$83,$FF,$FF,$74,$03,$E9
>021758	011758	be d8 17 8b 30 8d 7d 27 b9 19 00 f3 a4 5f 07 26
>021768	011768	c4 3d 83 ff ff 74 03 e9
>021770	011770	4c ff c3 98 8b d0 b4 01		.text $4C,$FF,$C3,$98,$8B,$D0,$B4,$01,$CD,$17,$C3,$98,$8B,$D0,$B0,$A3,$B4,$00,$CD,$14,$C3,$8A,$36,$5D,$17,$80,$FE,$00,$74,$31,$B2,$80
>021778	011778	cd 17 c3 98 8b d0 b0 a3 b4 00 cd 14 c3 8a 36 5d
>021788	011788	17 80 fe 00 74 31 b2 80
>021790	011790	52 88 16 5c 17 b4 08 cd		.text $52,$88,$16,$5C,$17,$B4,$08,$CD,$13,$FE,$C6,$33,$C0,$8A,$C6,$A3,$62,$17,$80,$E1,$3F,$8A,$C1,$A3,$64,$17,$06,$8A,$16,$5C,$17,$E8
>021798	011798	13 fe c6 33 c0 8a c6 a3 62 17 80 e1 3f 8a c1 a3
>0217a8	0117a8	64 17 06 8a 16 5c 17 e8
>0217b0	0117b0	27 fb 72 03 e8 09 00 07		.text $27,$FB,$72,$03,$E8,$09,$00,$07,$5A,$FE,$C2,$FE,$CE,$75,$D1,$C3,$81,$C3,$C2,$01,$26,$80,$3F,$05,$74,$0B,$83,$C3,$10,$81,$FB,$02
>0217b8	0117b8	5a fe c2 fe ce 75 d1 c3 81 c3 c2 01 26 80 3f 05
>0217c8	0117c8	74 0b 83 c3 10 81 fb 02
>0217d0	0117d0	04 75 f1 eb 7c e8 a2 00		.text $04,$75,$F1,$EB,$7C,$E8,$A2,$00,$73,$77,$8B,$3E,$60,$17,$C7,$45,$47,$01,$00,$83,$4D,$23,$01,$C6,$45,$22,$05,$C6,$06,$DE,$16,$00
>0217d8	0117d8	73 77 8b 3e 60 17 c7 45 47 01 00 83 4d 23 01 c6
>0217e8	0117e8	45 22 05 c6 06 de 16 00
>0217f0	0117f0	a1 62 17 89 45 15 a1 64		.text $A1,$62,$17,$89,$45,$15,$A1,$64,$17,$89,$45,$13,$A0,$5C,$17,$88,$45,$04,$A0,$75,$00,$88,$45,$05,$26,$83,$7F,$0A,$00,$77,$07,$26
>0217f8	0117f8	17 89 45 13 a0 5c 17 88 45 04 a0 75 00 88 45 05
>021808	011808	26 83 7f 0a 00 77 07 26
>021810	011810	83 7f 08 40 72 3b 83 eb		.text $83,$7F,$08,$40,$72,$3B,$83,$EB,$04,$26,$8A,$77,$02,$80,$E6,$C0,$D0,$C6,$D0,$C6,$26,$8A,$57,$03,$89,$55,$49,$26,$8B,$4F,$02,$26
>021818	011818	04 26 8a 77 02 80 e6 c0 d0 c6 d0 c6 26 8a 57 03
>021828	011828	89 55 49 26 8b 4f 02 26
>021830	011830	8a 77 01 8a 16 5c 17 bb		.text $8A,$77,$01,$8A,$16,$5C,$17,$BB,$00,$02,$B8,$01,$02,$CD,$13,$72,$10,$BB,$C2,$03,$06,$E8,$0A,$00,$07,$72,$03,$E8,$41,$00,$E9,$73
>021838	011838	00 02 b8 01 02 cd 13 72 10 bb c2 03 06 e8 0a 00
>021848	011848	07 72 03 e8 41 00 e9 73
>021850	011850	ff c3 57 53 1e 06 26 80		.text $FF,$C3,$57,$53,$1E,$06,$26,$80,$3F,$01,$74,$1B,$26,$80,$3F,$04,$74,$15,$26,$80,$3F,$06,$74,$0F,$83,$C3,$10,$81,$FB,$02,$04,$75
>021858	011858	3f 01 74 1b 26 80 3f 04 74 15 26 80 3f 06 74 0f
>021868	011868	83 c3 10 81 fb 02 04 75
>021870	011870	e5 f9 07 1f 5b 5f c3 e9		.text $E5,$F9,$07,$1F,$5B,$5F,$C3,$E9,$0C,$FB,$80,$3E,$75,$00,$1A,$72,$0D,$06,$B8,$73,$04,$8E,$C0,$26,$C6,$06,$84,$03,$01,$07,$C3,$56
>021878	011878	0c fb 80 3e 75 00 1a 72 0d 06 b8 73 04 8e c0 26
>021888	011888	c6 06 84 03 01 07 c3 56
>021890	011890	53 8b 36 19 01 83 3c ff		.text $53,$8B,$36,$19,$01,$83,$3C,$FF,$74,$04,$8B,$34,$EB,$F7,$89,$3C,$8C,$5C,$02,$C7,$05,$FF,$FF,$8C,$5D,$02,$8D,$5D,$06,$8B,$36,$5E
>021898	011898	74 04 8b 34 eb f7 89 3c 8c 5c 02 c7 05 ff ff 8c
>0218a8	0118a8	5d 02 8d 5d 06 8b 36 5e
>0218b0	0118b0	17 89 1c 83 06 5e 17 02		.text $17,$89,$1C,$83,$06,$5E,$17,$02,$FE,$06,$75,$00,$83,$06,$60,$17,$64,$5B,$5E,$C3,$50,$51,$52,$55,$33,$ED,$33,$C9,$33,$D2,$B4,$02
>0218b8	0118b8	fe 06 75 00 83 06 60 17 64 5b 5e c3 50 51 52 55
>0218c8	0118c8	33 ed 33 c9 33 d2 b4 02
>0218d0	0118d0	cd 1a 83 f9 00 75 12 83		.text $CD,$1A,$83,$F9,$00,$75,$12,$83,$FA,$00,$75,$0D,$83,$FD,$01,$74,$1C,$45,$B9,$00,$40,$E2,$FE,$EB,$E1,$2E,$C6,$06,$F3,$04,$01,$E8
>0218d8	0118d8	fa 00 75 0d 83 fd 01 74 1c 45 b9 00 40 e2 fe eb
>0218e8	0118e8	e1 2e c6 06 f3 04 01 e8
>0218f0	0118f0	10 00 56 e8 0b f1 fa 89		.text $10,$00,$56,$E8,$0B,$F1,$FA,$89,$36,$F0,$04,$FB,$5E,$5D,$5A,$59,$58,$C3,$50,$2E,$80,$3E,$3E,$06,$FC,$75,$25,$2E,$80,$3E,$3F,$06
>0218f8	0118f8	36 f0 04 fb 5e 5d 5a 59 58 c3 50 2e 80 3e 3e 06
>021908	011908	fc 75 25 2e 80 3e 3f 06
>021910	011910	06 74 08 2e 80 3e 3f 06		.text $06,$74,$08,$2E,$80,$3E,$3F,$06,$04,$73,$15,$B0,$8A,$B4,$26,$E8,$30,$00,$B0,$8B,$E8,$0B,$00,$24,$07,$8A,$E0,$B0,$0B,$E8,$22,$00
>021918	011918	04 73 15 b0 8a b4 26 e8 30 00 b0 8b e8 0b 00 24
>021928	011928	07 8a e0 b0 0b e8 22 00
>021930	011930	58 c3 9c fa 53 50 0c 80		.text $58,$C3,$9C,$FA,$53,$50,$0C,$80,$E6,$70,$90,$E4,$71,$8B,$D8,$58,$24,$80,$0C,$0F,$E6,$70,$90,$E4,$71,$8B,$C3,$5B,$0E,$E8,$01,$00
>021938	011938	e6 70 90 e4 71 8b d8 58 24 80 0c 0f e6 70 90 e4
>021948	011948	71 8b c3 5b 0e e8 01 00
>021950	011950	c3 cf 9c 50 fa 50 0c 80		.text $C3,$CF,$9C,$50,$FA,$50,$0C,$80,$E6,$70,$90,$8A,$C4,$E6,$71,$58,$24,$80,$0C,$0F,$E6,$70,$90,$E4,$71,$58,$0E,$E8,$E3,$FF,$C3,$51
>021958	011958	e6 70 90 8a c4 e6 71 58 24 80 0c 0f e6 70 90 e4
>021968	011968	71 58 0e e8 e3 ff c3 51
>021970	011970	57 2e 89 0e dc 16 8b c3		.text $57,$2E,$89,$0E,$DC,$16,$8B,$C3,$48,$48,$F7,$E1,$2E,$03,$06,$D8,$16,$2E,$13,$16,$DA,$16,$1E,$50,$53,$2E,$8B,$36,$DF,$16,$8E,$DE
>021978	011978	48 48 f7 e1 2e 03 06 d8 16 2e 13 16 da 16 1e 50
>021988	011988	53 2e 8b 36 df 16 8e de
>021990	011990	8b f3 2e f6 06 de 16 40		.text $8B,$F3,$2E,$F6,$06,$DE,$16,$40,$75,$3E,$D1,$EE,$03,$F3,$52,$33,$D2,$E8,$7E,$00,$5A,$8B,$07,$75,$19,$8A,$07,$2E,$A2,$E6,$16,$46
>021998	011998	75 3e d1 ee 03 f3 52 33 d2 e8 7e 00 5a 8b 07 75
>0219a8	0119a8	19 8a 07 2e a2 e6 16 46
>0219b0	0119b0	52 33 d2 e8 6c 00 5a a0		.text $52,$33,$D2,$E8,$6C,$00,$5A,$A0,$00,$00,$2E,$A2,$E7,$16,$2E,$A1,$E6,$16,$5B,$53,$D1,$EB,$73,$08,$D1,$E8,$D1,$E8,$D1,$E8,$D1,$E8
>0219b8	0119b8	00 00 2e a2 e7 16 2e a1 e6 16 5b 53 d1 eb 73 08
>0219c8	0119c8	d1 e8 d1 e8 d1 e8 d1 e8
>0219d0	0119d0	8b d8 81 e3 ff 0f eb 0e		.text $8B,$D8,$81,$E3,$FF,$0F,$EB,$0E,$52,$33,$D2,$D1,$E6,$83,$D2,$00,$E8,$3F,$00,$5A,$8B,$1F,$5E,$58,$1F,$2B,$F3,$83,$FE,$FF,$75,$07
>0219d8	0119d8	52 33 d2 d1 e6 83 d2 00 e8 3f 00 5a 8b 1f 5e 58
>0219e8	0119e8	1f 2b f3 83 fe ff 75 07
>0219f0	0119f0	2e 01 0e dc 16 eb 8f 53		.text $2E,$01,$0E,$DC,$16,$EB,$8F,$53,$52,$50,$2E,$A1,$D6,$16,$2E,$8B,$0E,$DC,$16,$5A,$2E,$8F,$06,$2B,$05,$1E,$0E,$1F,$0E,$BD,$E5,$08
>0219f8	0119f8	52 50 2e a1 d6 16 2e 8b 0e dc 16 5a 2e 8f 06 2b
>021a08	011a08	05 1e 0e 1f 0e bd e5 08
>021a10	011a10	e8 b1 f2 1f 5b 5f 2e a1		.text $E8,$B1,$F2,$1F,$5B,$5F,$2E,$A1,$DC,$16,$86,$E0,$D1,$E0,$03,$F8,$59,$C3,$50,$51,$57,$56,$06,$1E,$8B,$C6,$2E,$8B,$0E,$E4,$16,$F7
>021a18	011a18	dc 16 86 e0 d1 e0 03 f8 59 c3 50 51 57 56 06 1e
>021a28	011a28	8b c6 2e 8b 0e e4 16 f7
>021a30	011a30	f1 90 06 1e 57 50 0e 1f		.text $F1,$90,$06,$1E,$57,$50,$0E,$1F,$2E,$A1,$D6,$16,$BD,$D7,$04,$0E,$E8,$81,$F2,$58,$26,$03,$45,$09,$5F,$1F,$07,$2E,$3B,$06,$E8,$16
>021a38	011a38	2e a1 d6 16 bd d7 04 0e e8 81 f2 58 26 03 45 09
>021a48	011a48	5f 1f 07 2e 3b 06 e8 16
>021a50	011a50	74 2a 2e a3 e8 16 52 2e		.text $74,$2A,$2E,$A3,$E8,$16,$52,$2E,$C7,$06,$2B,$05,$00,$00,$8B,$D0,$B9,$01,$00,$2E,$A1,$D6,$16,$1E,$07,$33,$FF,$1E,$0E,$1F,$0E,$BD
>021a58	011a58	c7 06 2b 05 00 00 8b d0 b9 01 00 2e a1 d6 16 1e
>021a68	011a68	07 33 ff 1e 0e 1f 0e bd
>021a70	011a70	e5 08 e8 4f f2 1f 5a 2e		.text $E5,$08,$E8,$4F,$F2,$1F,$5A,$2E,$8B,$0E,$E4,$16,$49,$3B,$D1,$8B,$DA,$1F,$07,$5E,$5F,$59,$58,$C3,$00,$00,$00,$00,$00,$00,$00,$00
>021a78	011a78	8b 0e e4 16 49 3b d1 8b da 1f 07 5e 5f 59 58 c3
>021a88	011a88	00 00 00 00 00 00 00 00
>021a90	011a90	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>021a98	011a98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>021aa8	011aa8	00 00 00 00 00 00 00 00
>021ab0	011ab0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$70,$00,$2E,$8E,$06,$30,$00,$BF,$E0,$06
>021ab8	011ab8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 70 00
>021ac8	011ac8	2e 8e 06 30 00 bf e0 06
>021ad0	011ad0	b9 04 00 ab 47 47 e2 fb		.text $B9,$04,$00,$AB,$47,$47,$E2,$FB,$CB,$56,$50,$51,$52,$57,$55,$1E,$06,$53,$8B,$EC,$8B,$76,$12,$2E,$8E,$1E,$30,$00,$8B,$44,$02,$A2
>021ad8	011ad8	cb 56 50 51 52 57 55 1e 06 53 8b ec 8b 76 12 2e
>021ae8	011ae8	8e 1e 30 00 8b 44 02 a2
>021af0	011af0	21 00 88 26 e7 04 8b 34		.text $21,$00,$88,$26,$E7,$04,$8B,$34,$C4,$1E,$12,$00,$26,$8A,$47,$01,$26,$8A,$67,$0D,$26,$8B,$4F,$12,$26,$8B,$57,$14,$81,$FE,$A2,$04
>021af8	011af8	c4 1e 12 00 26 8a 47 01 26 8a 67 0d 26 8b 4f 12
>021b08	011b08	26 8b 57 14 81 fe a2 04
>021b10	011b10	75 17 c7 06 2b 05 00 00		.text $75,$17,$C7,$06,$2B,$05,$00,$00,$83,$FA,$FF,$75,$0C,$26,$8B,$57,$1C,$89,$16,$2B,$05,$26,$8B,$57,$1A,$97,$26,$8A,$47,$02,$2E,$3A
>021b18	011b18	83 fa ff 75 0c 26 8b 57 1c 89 16 2b 05 26 8b 57
>021b28	011b28	1a 97 26 8a 47 02 2e 3a
>021b30	011b30	04 73 2c 98 d1 e0 03 f0		.text $04,$73,$2C,$98,$D1,$E0,$03,$F0,$97,$26,$C4,$7F,$0E,$FC,$2E,$FF,$54,$01,$72,$02,$B4,$01,$2E,$8E,$1E,$30,$00,$C5,$1E,$12,$00,$89
>021b38	011b38	97 26 c4 7f 0e fc 2e ff 54 01 72 02 b4 01 2e 8e
>021b48	011b48	1e 30 00 c5 1e 12 00 89
>021b50	011b50	47 03 5b 07 1f 5d 5f 5a		.text $47,$03,$5B,$07,$1F,$5D,$5F,$5A,$59,$58,$5E,$83,$C4,$02,$CB,$E8,$09,$00,$EB,$E2,$00,$00,$00,$00,$00,$00,$00,$B0,$03,$C4,$1E,$12
>021b58	011b58	59 58 5e 83 c4 02 cb e8 09 00 eb e2 00 00 00 00
>021b68	011b68	00 00 00 b0 03 c4 1e 12
>021b70	011b70	00 26 29 4f 12 b4 81 f9		.text $00,$26,$29,$4F,$12,$B4,$81,$F9,$C3,$00,$0B,$FB,$01,$FB,$01,$FB,$01,$D5,$00,$5C,$01,$9F,$01,$FB,$01,$09,$02,$FD,$01,$FD,$01,$FB
>021b78	011b78	c3 00 0b fb 01 fb 01 fb 01 d5 00 5c 01 9f 01 fb
>021b88	011b88	01 09 02 fd 01 fd 01 fb
>021b90	011b90	01 1a fb 01 fb 01 fb 01		.text $01,$1A,$FB,$01,$FB,$01,$FB,$01,$D5,$00,$1A,$02,$C8,$01,$FB,$01,$FB,$01,$1F,$02,$1F,$02,$51,$02,$FB,$01,$FB,$01,$FB,$01,$FB,$01
>021b98	011b98	d5 00 1a 02 c8 01 fb 01 fb 01 1f 02 1f 02 51 02
>021ba8	011ba8	fb 01 fb 01 fb 01 fb 01
>021bb0	011bb0	fb 01 8b 02 fb 01 fb 01		.text $FB,$01,$8B,$02,$FB,$01,$FB,$01,$BA,$02,$FB,$01,$FB,$01,$FB,$01,$FB,$01,$FB,$01,$F0,$02,$0B,$FB,$01,$FB,$01,$FB,$01,$D5,$00,$0D
>021bb8	011bb8	ba 02 fb 01 fb 01 fb 01 fb 01 fb 01 f0 02 0b fb
>021bc8	011bc8	01 fb 01 fb 01 d5 00 0d
>021bd0	011bd0	03 35 03 fb 01 6c 03 74		.text $03,$35,$03,$FB,$01,$6C,$03,$74,$03,$74,$03,$55,$03,$0A,$FB,$01,$FB,$01,$FB,$01,$D5,$00,$35,$04,$C8,$01,$FB,$01,$FB,$01,$DB,$03
>021bd8	011bd8	03 74 03 55 03 0a fb 01 fb 01 fb 01 d5 00 35 04
>021be8	011be8	c8 01 fb 01 fb 01 db 03
>021bf0	011bf0	db 03 e3 06 e8 05 00 aa		.text $DB,$03,$E3,$06,$E8,$05,$00,$AA,$E2,$FA,$F8,$C3,$8A,$26,$E5,$04,$32,$C0,$86,$06,$0C,$00,$0A,$C0,$75,$2A,$CD,$16,$0B,$C0,$74,$EC
>021bf8	011bf8	e2 fa f8 c3 8a 26 e5 04 32 c0 86 06 0c 00 0a c0
>021c08	011c08	75 2a cd 16 0b c0 74 ec
>021c10	011c10	3d 00 72 75 04 b0 10 eb		.text $3D,$00,$72,$75,$04,$B0,$10,$EB,$1B,$80,$3E,$E5,$04,$00,$74,$0C,$3C,$E0,$75,$08,$0A,$E4,$74,$0C,$32,$C0,$EB,$04,$0A,$C0,$75,$04
>021c18	011c18	1b 80 3e e5 04 00 74 0c 3c e0 75 08 0a e4 74 0c
>021c28	011c28	32 c0 eb 04 0a c0 75 04
>021c30	011c30	88 26 0c 00 c3 a0 0c 00		.text $88,$26,$0C,$00,$C3,$A0,$0C,$00,$0A,$C0,$75,$4D,$8A,$26,$E6,$04,$CD,$16,$75,$1E,$80,$3E,$79,$00,$00,$74,$13,$C4,$1E,$12,$00,$26
>021c38	011c38	0a c0 75 4d 8a 26 e6 04 cd 16 75 1e 80 3e 79 00
>021c48	011c48	00 74 13 c4 1e 12 00 26
>021c50	011c50	f7 47 03 00 04 74 07 b8		.text $F7,$47,$03,$00,$04,$74,$07,$B8,$00,$41,$32,$DB,$CD,$15,$F9,$B4,$03,$C3,$0B,$C0,$75,$08,$8A,$26,$E5,$04,$CD,$16,$EB,$C7,$3D,$00
>021c58	011c58	00 41 32 db cd 15 f9 b4 03 c3 0b c0 75 08 8a 26
>021c68	011c68	e5 04 cd 16 eb c7 3d 00
>021c70	011c70	72 75 04 b0 10 eb 12 80		.text $72,$75,$04,$B0,$10,$EB,$12,$80,$3E,$E5,$04,$00,$74,$0B,$3C,$E0,$75,$07,$80,$FC,$00,$74,$02,$B0,$00,$C4,$1E,$12,$00,$26,$88,$47
>021c78	011c78	3e e5 04 00 74 0b 3c e0 75 07 80 fc 00 74 02 b0
>021c88	011c88	00 c4 1e 12 00 26 88 47
>021c90	011c90	0d f8 c3 e3 fc 26 8a 05		.text $0D,$F8,$C3,$E3,$FC,$26,$8A,$05,$47,$CD,$29,$E2,$F8,$F8,$C3,$C6,$06,$0C,$00,$00,$B4,$01,$CD,$16,$74,$F3,$32,$E4,$CD,$16,$EB,$F4
>021c98	011c98	47 cd 29 e2 f8 f8 c3 c6 06 0c 00 00 b4 01 cd 16
>021ca8	011ca8	74 f3 32 e4 cd 16 eb f4
>021cb0	011cb0	e8 ba fe f8 c3 e3 2e bb		.text $E8,$BA,$FE,$F8,$C3,$E3,$2E,$BB,$02,$00,$E8,$37,$00,$75,$1D,$26,$8A,$05,$32,$E4,$E8,$2F,$00,$74,$19,$80,$FC,$FF,$75,$09,$B0,$0C
>021cb8	011cb8	02 00 e8 37 00 75 1d 26 8a 05 32 e4 e8 2f 00 74
>021cc8	011cc8	19 80 fc ff 75 09 b0 0c
>021cd0	011cd0	c6 06 0c 00 00 eb 08 f6		.text $C6,$06,$0C,$00,$00,$EB,$08,$F6,$C4,$01,$74,$06,$4B,$75,$DB,$E9,$8B,$FE,$47,$E2,$D2,$F8,$C3,$E8,$0A,$00,$75,$F3,$F6,$C4,$80,$75
>021cd8	011cd8	c4 01 74 06 4b 75 db e9 8b fe 47 e2 d2 f8 c3 e8
>021ce8	011ce8	0a 00 75 f3 f6 c4 80 75
>021cf0	011cf0	f4 e9 6a ff b4 02 8b 16		.text $F4,$E9,$6A,$FF,$B4,$02,$8B,$16,$21,$00,$CD,$17,$50,$80,$E4,$30,$80,$FC,$30,$58,$75,$06,$80,$E4,$DF,$80,$CC,$08,$F6,$C4,$28,$74
>021cf8	011cf8	21 00 cd 17 50 80 e4 30 80 fc 30 58 75 06 80 e4
>021d08	011d08	df 80 cc 08 f6 c4 28 74
>021d10	011d10	0a b0 09 f6 c4 20 75 02		.text $0A,$B0,$09,$F6,$C4,$20,$75,$02,$FE,$C0,$C3,$B0,$02,$F6,$C4,$01,$C3,$8B,$F7,$51,$53,$32,$FF,$8A,$1E,$E7,$04,$D1,$E3,$8B,$8F,$E8
>021d18	011d18	fe c0 c3 b0 02 f6 c4 01 c3 8b f7 51 53 32 ff 8a
>021d28	011d28	1e e7 04 d1 e3 8b 8f e8
>021d30	011d30	04 5b e8 bf ff 75 15 f6		.text $04,$5B,$E8,$BF,$FF,$75,$15,$F6,$C4,$80,$E1,$F6,$59,$74,$0E,$26,$AC,$32,$E4,$E8,$B0,$FF,$75,$05,$E2,$D9,$F8,$C3,$59,$E9,$1D,$FE
>021d38	011d38	c4 80 e1 f6 59 74 0e 26 ac 32 e4 e8 b0 ff 75 05
>021d48	011d48	e2 d9 f8 c3 59 e9 1d fe
>021d50	011d50	c4 3e 12 00 26 80 7d 0d		.text $C4,$3E,$12,$00,$26,$80,$7D,$0D,$05,$74,$03,$E9,$0D,$FE,$26,$8A,$45,$0E,$26,$C4,$7D,$13,$32,$FF,$8A,$1E,$E7,$04,$D1,$E3,$8B,$8F
>021d58	011d58	05 74 03 e9 0d fe 26 8a 45 0e 26 c4 7d 13 32 ff
>021d68	011d68	8a 1e e7 04 d1 e3 8b 8f
>021d70	011d70	e8 04 3c 65 74 07 3c 45		.text $E8,$04,$3C,$65,$74,$07,$3C,$45,$75,$E1,$26,$8B,$0D,$89,$8F,$E8,$04,$26,$89,$0D,$F8,$C3,$C4,$3E,$12,$00,$26,$80,$7D,$0D,$05,$75
>021d78	011d78	75 e1 26 8b 0d 89 8f e8 04 26 89 0d f8 c3 c4 3e
>021d88	011d88	12 00 26 80 7d 0d 05 75
>021d90	011d90	0e 26 8a 45 0e 3c 65 74		.text $0E,$26,$8A,$45,$0E,$3C,$65,$74,$04,$3C,$45,$75,$02,$F8,$C3,$F9,$E9,$C8,$FD,$E3,$11,$E8,$7B,$00,$32,$C0,$86,$07,$0A,$C0,$75,$03
>021d98	011d98	04 3c 45 75 02 f8 c3 f9 e9 c8 fd e3 11 e8 7b 00
>021da8	011da8	32 c0 86 07 0a c0 75 03
>021db0	011db0	e8 05 00 aa e2 fa f8 c3		.text $E8,$05,$00,$AA,$E2,$FA,$F8,$C3,$B4,$02,$E8,$3E,$00,$F6,$C4,$0E,$75,$01,$C3,$58,$32,$C0,$0C,$B0,$E9,$A2,$FD,$E8,$55,$00,$8A,$07
>021db8	011db8	b4 02 e8 3e 00 f6 c4 0e 75 01 c3 58 32 c0 0c b0
>021dc8	011dc8	e9 a2 fd e8 55 00 8a 07
>021dd0	011dd0	0a c0 75 11 e8 22 00 f6		.text $0A,$C0,$75,$11,$E8,$22,$00,$F6,$C4,$01,$74,$0C,$A8,$20,$74,$08,$E8,$D5,$FF,$88,$07,$E9,$A1,$FE,$E9,$73,$FE,$E8,$0B,$00,$A8,$20
>021dd8	011dd8	c4 01 74 0c a8 20 74 08 e8 d5 ff 88 07 e9 a1 fe
>021de8	011de8	e9 73 fe e8 0b 00 a8 20
>021df0	011df0	74 f6 f6 c4 20 74 f1 f8		.text $74,$F6,$F6,$C4,$20,$74,$F1,$F8,$C3,$B4,$03,$8B,$16,$21,$00,$CD,$14,$C3,$E8,$1E,$00,$C6,$07,$00,$F8,$C3,$E3,$AA,$26,$8A,$05,$47
>021df8	011df8	c3 b4 03 8b 16 21 00 cd 14 c3 e8 1e 00 c6 07 00
>021e08	011e08	f8 c3 e3 aa 26 8a 05 47
>021e10	011e10	b4 01 e8 e6 ff f6 c4 80		.text $B4,$01,$E8,$E6,$FF,$F6,$C4,$80,$74,$05,$B0,$0A,$E9,$4E,$FD,$E2,$EB,$F8,$C3,$8B,$1E,$21,$00,$81,$C3,$16,$00,$C3,$B0,$3C,$F6,$E5
>021e18	011e18	74 05 b0 0a e9 4e fd e2 eb f8 c3 8b 1e 21 00 81
>021e28	011e28	c3 16 00 c3 b0 3c f6 e5
>021e30	011e30	b5 00 03 c1 b9 70 17 8b		.text $B5,$00,$03,$C1,$B9,$70,$17,$8B,$DA,$F7,$E1,$8B,$C8,$B0,$64,$F6,$E7,$03,$C8,$83,$D2,$00,$B7,$00,$03,$CB,$83,$D2,$00,$92,$91,$BB
>021e38	011e38	da f7 e1 8b c8 b0 64 f6 e7 03 c8 83 d2 00 b7 00
>021e48	011e48	03 cb 83 d2 00 92 91 bb
>021e50	011e50	0b e9 f7 e3 87 d1 92 f7		.text $0B,$E9,$F7,$E3,$87,$D1,$92,$F7,$E3,$03,$C1,$83,$D2,$00,$92,$BB,$05,$00,$F6,$F3,$8A,$C8,$B5,$00,$8A,$C4,$98,$92,$F7,$F3,$8B,$D0
>021e58	011e58	e3 03 c1 83 d2 00 92 bb 05 00 f6 f3 8a c8 b5 00
>021e68	011e68	8a c4 98 92 f7 f3 8b d0
>021e70	011e70	cb 26 8b 05 50 80 3e f3		.text $CB,$26,$8B,$05,$50,$80,$3E,$F3,$04,$00,$74,$26,$26,$8A,$45,$03,$FF,$1E,$02,$05,$8A,$E8,$26,$8A,$45,$02,$FF,$1E,$02,$05,$8A,$C8
>021e78	011e78	04 00 74 26 26 8a 45 03 ff 1e 02 05 8a e8 26 8a
>021e88	011e88	45 02 ff 1e 02 05 8a c8
>021e90	011e90	26 8a 45 05 ff 1e 02 05		.text $26,$8A,$45,$05,$FF,$1E,$02,$05,$8A,$F0,$B2,$00,$FA,$B4,$03,$CD,$1A,$FB,$26,$8B,$4D,$02,$26,$8B,$55,$04,$FF,$1E,$E2,$06,$FA,$B4
>021e98	011e98	8a f0 b2 00 fa b4 03 cd 1a fb 26 8b 4d 02 26 8b
>021ea8	011ea8	55 04 ff 1e e2 06 fa b4
>021eb0	011eb0	01 cd 1a 8f 06 f0 04 fb		.text $01,$CD,$1A,$8F,$06,$F0,$04,$FB,$80,$3E,$F3,$04,$00,$74,$0A,$FF,$1E,$06,$05,$FA,$B4,$05,$CD,$1A,$FB,$F8,$C3,$E8,$4E,$00,$8B,$36
>021eb8	011eb8	80 3e f3 04 00 74 0a ff 1e 06 05 fa b4 05 cd 1a
>021ec8	011ec8	fb f8 c3 e8 4e 00 8b 36
>021ed0	011ed0	f0 04 8b c1 8b da d1 e2		.text $F0,$04,$8B,$C1,$8B,$DA,$D1,$E2,$D1,$D1,$D1,$E2,$D1,$D1,$03,$D3,$13,$C1,$92,$B9,$0B,$E9,$F7,$F1,$8B,$D8,$33,$C0,$F7,$F1,$8B,$D3
>021ed8	011ed8	d1 d1 d1 e2 d1 d1 03 d3 13 c1 92 b9 0b e9 f7 f1
>021ee8	011ee8	8b d8 33 c0 f7 f1 8b d3
>021ef0	011ef0	b9 c8 00 f7 f1 80 fa 64		.text $B9,$C8,$00,$F7,$F1,$80,$FA,$64,$72,$03,$80,$EA,$64,$F5,$8A,$DA,$D1,$D0,$B2,$00,$D1,$D2,$B9,$3C,$00,$F7,$F1,$8A,$FA,$F6,$F1,$86
>021ef8	011ef8	72 03 80 ea 64 f5 8a da d1 d0 b2 00 d1 d2 b9 3c
>021f08	011f08	00 f7 f1 8a fa f6 f1 86
>021f10	011f10	c4 50 8b c6 ab 58 ab 8b		.text $C4,$50,$8B,$C6,$AB,$58,$AB,$8B,$C3,$AB,$F8,$C3,$32,$E4,$CD,$1A,$80,$3E,$F2,$04,$00,$75,$07,$32,$E4,$01,$06,$F0,$04,$C3,$0A,$C0
>021f18	011f18	c3 ab f8 c3 32 e4 cd 1a 80 3e f2 04 00 75 07 32
>021f28	011f28	e4 01 06 f0 04 c3 0a c0
>021f30	011f30	74 04 ff 06 f0 04 c3 00		.text $74,$04,$FF,$06,$F0,$04,$C3,$00,$1A,$42,$17,$EB,$04,$92,$05,$D5,$00,$57,$08,$3D,$08,$58,$05,$58,$05,$49,$08,$41,$08,$58,$05,$58
>021f38	011f38	1a 42 17 eb 04 92 05 d5 00 57 08 3d 08 58 05 58
>021f48	011f48	05 49 08 41 08 58 05 58
>021f50	011f50	05 d5 00 0a 08 1a 08 31		.text $05,$D5,$00,$0A,$08,$1A,$08,$31,$08,$58,$05,$58,$05,$58,$05,$6B,$0C,$58,$05,$58,$05,$58,$05,$24,$11,$42,$11,$9A,$12,$C4,$3E,$19
>021f58	011f58	08 58 05 58 05 58 05 6b 0c 58 05 58 05 58 05 24
>021f68	011f68	11 42 11 9a 12 c4 3e 19
>021f70	011f70	01 26 38 45 05 74 09 26		.text $01,$26,$38,$45,$05,$74,$09,$26,$C4,$3D,$83,$FF,$FF,$75,$F2,$F9,$C3,$E8,$E9,$FF,$BE,$01,$00,$26,$F6,$45,$24,$01,$74,$17,$26,$81
>021f78	011f78	c4 3d 83 ff ff 75 f2 f9 c3 e8 e9 ff be 01 00 26
>021f88	011f88	f6 45 24 01 74 17 26 81
>021f90	011f90	65 23 ff fe c6 06 1e 01		.text $65,$23,$FF,$FE,$C6,$06,$1E,$01,$FF,$26,$F6,$45,$23,$01,$74,$0C,$BE,$FF,$FF,$EB,$2C,$26,$F6,$45,$23,$01,$75,$25,$33,$F6,$80,$3E
>021f98	011f98	ff 26 f6 45 23 01 74 0c be ff ff eb 2c 26 f6 45
>021fa8	011fa8	23 01 75 25 33 f6 80 3e
>021fb0	011fb0	77 00 00 74 0a e8 f8 12		.text $77,$00,$00,$74,$0A,$E8,$F8,$12,$72,$36,$E8,$55,$14,$75,$12,$BE,$01,$00,$A0,$1E,$01,$26,$3A,$45,$04,$75,$05,$E8,$28,$00,$EB,$01
>021fb8	011fb8	72 36 e8 55 14 75 12 be 01 00 a0 1e 01 26 3a 45
>021fc8	011fc8	04 75 05 e8 28 00 eb 01
>021fd0	011fd0	4e 06 c4 1e 12 00 26 89		.text $4E,$06,$C4,$1E,$12,$00,$26,$89,$77,$0E,$07,$0B,$F6,$79,$0F,$80,$3E,$77,$00,$00,$74,$03,$E8,$B2,$13,$C6,$06,$1E,$01,$FF,$F8,$C3
>021fd8	011fd8	77 0e 07 0b f6 79 0f 80 3e 77 00 00 74 03 e8 b2
>021fe8	011fe8	13 c6 06 1e 01 ff f8 c3
>021ff0	011ff0	e8 98 06 b4 81 c3 be 01		.text $E8,$98,$06,$B4,$81,$C3,$BE,$01,$00,$E8,$20,$FF,$26,$8B,$45,$47,$2B,$D0,$26,$8B,$45,$49,$1B,$C8,$75,$1A,$0B,$D2,$75,$11,$FE,$06
>021ff8	011ff8	00 e8 20 ff 26 8b 45 47 2b d0 26 8b 45 49 1b c8
>022008	012008	75 1a 0b d2 75 11 fe 06
>022010	012010	1d 01 80 3e 1d 01 05 72		.text $1D,$01,$80,$3E,$1D,$01,$05,$72,$0C,$FE,$0E,$1D,$01,$EB,$05,$83,$FA,$24,$76,$01,$4E,$C3,$EB,$C8,$26,$8A,$25,$E8,$3F,$FF,$26,$F6
>022018	012018	0c fe 0e 1d 01 eb 05 83 fa 24 76 01 4e c3 eb c8
>022028	012028	26 8a 25 e8 3f ff 26 f6
>022030	012030	45 23 01 75 23 e8 37 00		.text $45,$23,$01,$75,$23,$E8,$37,$00,$C6,$06,$0A,$05,$01,$E8,$5C,$00,$72,$B1,$80,$3E,$0A,$05,$02,$C6,$06,$0A,$05,$00,$74,$0A,$80,$3E
>022038	012038	c6 06 0a 05 01 e8 5c 00 72 b1 80 3e 0a 05 02 c6
>022048	012048	06 0a 05 00 74 0a 80 3e
>022050	012050	77 00 00 74 03 e8 c1 13		.text $77,$00,$00,$74,$03,$E8,$C1,$13,$83,$C7,$06,$8C,$C1,$C4,$1E,$12,$00,$26,$88,$67,$0D,$26,$89,$7F,$12,$26,$89,$4F,$14,$F8,$C3,$57
>022058	012058	83 c7 06 8c c1 c4 1e 12 00 26 88 67 0d 26 89 7f
>022068	012068	12 26 89 4f 14 f8 c3 57
>022070	012070	33 c9 26 89 4d 57 26 89		.text $33,$C9,$26,$89,$4D,$57,$26,$89,$4D,$59,$B9,$0B,$00,$BE,$1D,$05,$83,$C7,$4B,$F3,$A4,$26,$F6,$45,$1F,$40,$BE,$14,$05,$75,$03,$BE
>022078	012078	4d 59 b9 0b 00 be 1d 05 83 c7 4b f3 a4 26 f6 45
>022088	012088	1f 40 be 14 05 75 03 be
>022090	012090	0b 05 b9 08 00 83 c7 05		.text $0B,$05,$B9,$08,$00,$83,$C7,$05,$F3,$A4,$5F,$C3,$26,$F6,$45,$23,$05,$74,$03,$E9,$9E,$00,$51,$52,$53,$E8,$AD,$00,$72,$09,$0B,$DB
>022098	012098	f3 a4 5f c3 26 f6 45 23 05 74 03 e9 9e 00 51 52
>0220a8	0120a8	53 e8 ad 00 72 09 0b db
>0220b0	0120b0	75 08 e8 fa 00 eb 5c e9		.text $75,$08,$E8,$FA,$00,$EB,$5C,$E9,$8B,$00,$E8,$61,$01,$72,$F8,$80,$3E,$77,$00,$00,$74,$03,$E8,$E7,$12,$26,$80,$7D,$22,$02,$75,$1A
>0220b8	0120b8	8b 00 e8 61 01 72 f8 80 3e 77 00 00 74 03 e8 e7
>0220c8	0120c8	12 26 80 7d 22 02 75 1a
>0220d0	0120d0	80 fc f9 75 7a bb de 04		.text $80,$FC,$F9,$75,$7A,$BB,$DE,$04,$8A,$87,$00,$00,$8B,$8F,$03,$00,$8B,$97,$05,$00,$8B,$9F,$01,$00,$EB,$29,$80,$FC,$F8,$72,$60,$B0
>0220d8	0120d8	8a 87 00 00 8b 8f 03 00 8b 97 05 00 8b 9f 01 00
>0220e8	0120e8	eb 29 80 fc f8 72 60 b0
>0220f0	0120f0	01 bb 08 40 b9 40 01 ba		.text $01,$BB,$08,$40,$B9,$40,$01,$BA,$01,$01,$F6,$C4,$02,$75,$07,$FE,$C0,$FE,$C3,$83,$C1,$28,$F6,$C4,$01,$74,$08,$03,$C9,$B7,$70,$FE
>0220f8	0120f8	01 01 f6 c4 02 75 07 fe c0 fe c3 83 c1 28 f6 c4
>022108	012108	01 74 08 03 c9 b7 70 fe
>022110	012110	c6 fe c2 26 88 75 08 26		.text $C6,$FE,$C2,$26,$88,$75,$08,$26,$88,$7D,$0C,$26,$89,$4D,$0E,$26,$88,$65,$10,$26,$88,$45,$11,$26,$88,$5D,$13,$26,$88,$55,$15,$26
>022118	012118	88 7d 0c 26 89 4d 0e 26 88 65 10 26 88 45 11 26
>022128	012128	88 5d 13 26 88 55 15 26
>022130	012130	c7 45 19 00 00 26 c7 45		.text $C7,$45,$19,$00,$00,$26,$C7,$45,$17,$00,$00,$26,$C7,$45,$1D,$00,$00,$5B,$5A,$59,$C3,$C6,$06,$0A,$05,$00,$E8,$3E,$05,$EB,$F2,$C6
>022138	012138	17 00 00 26 c7 45 1d 00 00 5b 5a 59 c3 c6 06 0a
>022148	012148	05 00 e8 3e 05 eb f2 c6
>022150	012150	06 0a 05 00 b0 07 f9 eb		.text $06,$0A,$05,$00,$B0,$07,$F9,$EB,$E8,$B6,$00,$B9,$01,$00,$E8,$CA,$00,$72,$4B,$33,$DB,$80,$3E,$4E,$01,$69,$74,$15,$80,$3E,$4E,$01
>022158	012158	e8 b6 00 b9 01 00 e8 ca 00 72 4b 33 db 80 3e 4e
>022168	012168	01 69 74 15 80 3e 4e 01
>022170	012170	e9 74 0e 80 3e 4e 01 eb		.text $E9,$74,$0E,$80,$3E,$4E,$01,$EB,$75,$31,$80,$3E,$50,$01,$90,$75,$2A,$A0,$63,$01,$24,$F0,$3C,$F0,$75,$21,$A0,$63,$01,$3C,$F0,$74
>022178	012178	75 31 80 3e 50 01 90 75 2a a0 63 01 24 f0 3c f0
>022188	012188	75 21 a0 63 01 3c f0 74
>022190	012190	1b a8 01 75 17 81 3e 56		.text $1B,$A8,$01,$75,$17,$81,$3E,$56,$01,$33,$2E,$75,$07,$80,$3E,$58,$01,$32,$73,$08,$C6,$06,$5B,$01,$01,$EB,$01,$43,$F8,$C3,$C3,$8A
>022198	012198	01 33 2e 75 07 80 3e 58 01 32 73 08 c6 06 5b 01
>0221a8	0121a8	01 eb 01 43 f8 c3 c3 8a
>0221b0	0121b0	36 5b 01 8a 3e 5f 01 8b		.text $36,$5B,$01,$8A,$3E,$5F,$01,$8B,$0E,$61,$01,$8A,$26,$63,$01,$A0,$64,$01,$8A,$1E,$66,$01,$8A,$16,$68,$01,$80,$3E,$0A,$05,$01,$75
>0221b8	0121b8	0e 61 01 8a 26 63 01 a0 64 01 8a 1e 66 01 8a 16
>0221c8	0121c8	68 01 80 3e 0a 05 01 75
>0221d0	0121d0	14 e8 13 00 72 05 c6 06		.text $14,$E8,$13,$00,$72,$05,$C6,$06,$0A,$05,$02,$80,$3E,$77,$00,$01,$75,$03,$E8,$27,$12,$F8,$C3,$80,$3E,$74,$01,$29,$75,$2E,$51,$8B
>0221d8	0121d8	0a 05 02 80 3e 77 00 01 75 03 e8 27 12 f8 c3 80
>0221e8	0121e8	3e 74 01 29 75 2e 51 8b
>0221f0	0121f0	0e 75 01 26 89 4d 57 8b		.text $0E,$75,$01,$26,$89,$4D,$57,$8B,$0E,$77,$01,$26,$89,$4D,$59,$57,$56,$B9,$0B,$00,$BE,$79,$01,$83,$C7,$4B,$F3,$A4,$B9,$08,$00,$BE
>0221f8	0121f8	0e 77 01 26 89 4d 59 57 56 b9 0b 00 be 79 01 83
>022208	012208	c7 4b f3 a4 b9 08 00 be
>022210	012210	84 01 83 c7 05 f3 a4 5e		.text $84,$01,$83,$C7,$05,$F3,$A4,$5E,$5F,$59,$F8,$C3,$F9,$C3,$B6,$00,$B9,$02,$00,$E8,$05,$00,$72,$02,$8A,$27,$C3,$55,$BD,$03,$00,$26
>022218	012218	5f 59 f8 c3 f9 c3 b6 00 b9 02 00 e8 05 00 72 02
>022228	012228	8a 27 c3 55 bd 03 00 26
>022230	012230	8a 55 04 bb 4e 01 06 1e		.text $8A,$55,$04,$BB,$4E,$01,$06,$1E,$07,$B8,$01,$02,$CD,$13,$07,$73,$4C,$E8,$80,$04,$74,$44,$26,$F6,$45,$23,$01,$75,$E9,$80,$3E,$38
>022238	012238	07 b8 01 02 cd 13 07 73 4c e8 80 04 74 44 26 f6
>022248	012248	45 23 01 75 e9 80 3e 38
>022250	012250	06 00 75 12 50 1e c5 36		.text $06,$00,$75,$12,$50,$1E,$C5,$36,$2D,$01,$8A,$44,$09,$C6,$44,$09,$0F,$1F,$A2,$2A,$01,$58,$06,$1E,$07,$B8,$01,$02,$CD,$13,$07,$9C
>022258	012258	2d 01 8a 44 09 c6 44 09 0f 1f a2 2a 01 58 06 1e
>022268	012268	07 b8 01 02 cd 13 07 9c
>022270	012270	80 3e 38 06 00 75 0e 50		.text $80,$3E,$38,$06,$00,$75,$0E,$50,$A0,$2A,$01,$1E,$C5,$36,$2D,$01,$88,$44,$09,$1F,$58,$9D,$73,$05,$EB,$B7,$B2,$FF,$F9,$88,$16,$76
>022278	012278	a0 2a 01 1e c5 36 2d 01 88 44 09 1f 58 9d 73 05
>022288	012288	eb b7 b2 ff f9 88 16 76
>022290	012290	00 88 16 1e 01 26 88 6d		.text $00,$88,$16,$1E,$01,$26,$88,$6D,$46,$9C,$E8,$07,$04,$9D,$5D,$C3,$80,$3E,$77,$00,$00,$74,$07,$E8,$C3,$FC,$26,$FF,$45,$20,$F8,$C3
>022298	012298	46 9c e8 07 04 9d 5d c3 80 3e 77 00 00 74 07 e8
>0222a8	0122a8	c3 fc 26 ff 45 20 f8 c3
>0222b0	0122b0	80 3e 77 00 00 74 0e e8		.text $80,$3E,$77,$00,$00,$74,$0E,$E8,$B3,$FC,$26,$83,$7D,$20,$00,$74,$04,$26,$FF,$4D,$20,$F8,$C3,$E8,$A3,$FC,$26,$F6,$45,$23,$01,$75
>0222b8	0122b8	b3 fc 26 83 7d 20 00 74 04 26 ff 4d 20 f8 c3 e8
>0222c8	0122c8	a3 fc 26 f6 45 23 01 75
>0222d0	0122d0	02 f8 c3 b4 03 f9 c3 c7		.text $02,$F8,$C3,$B4,$03,$F9,$C3,$C7,$06,$20,$01,$03,$01,$EB,$06,$C7,$06,$20,$01,$03,$00,$E8,$98,$00,$73,$EC,$E9,$80,$F8,$E8,$8B,$00
>0222d8	0122d8	06 20 01 03 01 eb 06 c7 06 20 01 03 00 e8 98 00
>0222e8	0122e8	73 ec e9 80 f8 e8 8b 00
>0222f0	0122f0	eb f6 50 53 26 8b 5d 23		.text $EB,$F6,$50,$53,$26,$8B,$5D,$23,$F6,$C3,$21,$75,$73,$F6,$C3,$10,$74,$6E,$26,$8A,$45,$04,$06,$57,$C4,$3E,$19,$01,$26,$38,$45,$04
>0222f8	0122f8	f6 c3 21 75 73 f6 c3 10 74 6e 26 8a 45 04 06 57
>022308	012308	c4 3e 19 01 26 38 45 04
>022310	012310	75 53 b3 20 26 84 5d 23		.text $75,$53,$B3,$20,$26,$84,$5D,$23,$74,$4B,$26,$30,$5D,$23,$5F,$07,$26,$08,$5D,$23,$80,$3E,$7A,$00,$01,$75,$17,$26,$80,$7D,$04,$00
>022318	012318	74 4b 26 30 5d 23 5f 07 26 08 5d 23 80 3e 7a 00
>022328	012328	01 75 17 26 80 7d 04 00
>022330	012330	75 3e 26 8a 45 05 06 8e		.text $75,$3E,$26,$8A,$45,$05,$06,$8E,$06,$1A,$00,$26,$A2,$04,$05,$07,$EB,$2E,$80,$3E,$78,$00,$02,$75,$17,$50,$26,$8A,$45,$05,$8A,$E0
>022338	012338	06 1a 00 26 a2 04 05 07 eb 2e 80 3e 78 00 02 75
>022348	012348	17 50 26 8a 45 05 8a e0
>022350	012350	06 8e 06 1a 00 26 86 06		.text $06,$8E,$06,$1A,$00,$26,$86,$06,$04,$05,$07,$3A,$E0,$58,$74,$10,$E8,$C6,$0E,$EB,$0B,$26,$C4,$3D,$83,$FF,$FF,$75,$9F,$F9,$5F,$07
>022358	012358	04 05 07 3a e0 58 74 10 e8 c6 0e eb 0b 26 c4 3d
>022368	012368	83 ff ff 75 9f f9 5f 07
>022370	012370	5b 58 c3 b0 08 eb 02 b0		.text $5B,$58,$C3,$B0,$08,$EB,$02,$B0,$07,$F9,$C3,$C6,$06,$20,$01,$02,$8B,$DF,$8C,$06,$37,$05,$E8,$E4,$FB,$26,$8A,$45,$10,$A2,$1F,$01
>022378	012378	07 f9 c3 c6 06 20 01 02 8b df 8c 06 37 05 e8 e4
>022388	012388	fb 26 8a 45 10 a2 1f 01
>022390	012390	e3 e8 26 f6 45 24 02 75		.text $E3,$E8,$26,$F6,$45,$24,$02,$75,$DE,$89,$0E,$22,$01,$89,$26,$35,$01,$8B,$C2,$33,$F6,$03,$D1,$83,$D6,$00,$26,$83,$7D,$0E,$00,$74
>022398	012398	de 89 0e 22 01 89 26 35 01 8b c2 33 f6 03 d1 83
>0223a8	0123a8	d6 00 26 83 7d 0e 00 74
>0223b0	0123b0	0d 83 fe 00 75 bd 26 3b		.text $0D,$83,$FE,$00,$75,$BD,$26,$3B,$55,$0E,$77,$B7,$EB,$12,$03,$36,$2B,$05,$26,$3B,$75,$1D,$72,$08,$77,$A9,$26,$3B,$55,$1B,$77,$A3
>0223b8	0123b8	55 0e 77 b7 eb 12 03 36 2b 05 26 3b 75 1d 72 08
>0223c8	0123c8	77 a9 26 3b 55 1b 77 a3
>0223d0	0123d0	8b 16 2b 05 26 03 45 17		.text $8B,$16,$2B,$05,$26,$03,$45,$17,$26,$13,$55,$19,$A3,$2D,$05,$06,$8E,$06,$1A,$00,$26,$C4,$36,$78,$00,$89,$36,$2D,$01,$8C,$06,$2F
>0223d8	0123d8	26 13 55 19 a3 2d 05 06 8e 06 1a 00 26 c4 36 78
>0223e8	0123e8	00 89 36 2d 01 8c 06 2f
>0223f0	0123f0	01 07 26 f6 45 23 01 75		.text $01,$07,$26,$F6,$45,$23,$01,$75,$10,$E8,$F6,$FE,$80,$3E,$77,$00,$00,$74,$03,$E8,$F1,$0E,$E8,$4A,$00,$8B,$C2,$33,$D2,$26,$F7,$75
>0223f8	0123f8	10 e8 f6 fe 80 3e 77 00 00 74 03 e8 f1 0e e8 4a
>022408	012408	00 8b c2 33 d2 26 f7 75
>022410	012410	13 a3 29 05 a1 2d 05 26		.text $13,$A3,$29,$05,$A1,$2D,$05,$26,$F7,$75,$13,$FE,$C2,$88,$16,$31,$01,$26,$8B,$4D,$15,$50,$33,$D2,$A1,$29,$05,$F7,$F1,$A3,$29,$05
>022418	012418	f7 75 13 fe c2 88 16 31 01 26 8b 4d 15 50 33 d2
>022428	012428	a1 29 05 f7 f1 a3 29 05
>022430	012430	58 f7 f1 83 3e 29 05 00		.text $58,$F7,$F1,$83,$3E,$29,$05,$00,$77,$16,$3D,$00,$04,$77,$11,$88,$16,$32,$01,$A3,$33,$01,$A1,$22,$01,$E8,$87,$00,$E8,$4D,$00,$C3
>022438	012438	77 16 3d 00 04 77 11 88 16 32 01 a3 33 01 a1 22
>022448	012448	01 e8 87 00 e8 4d 00 c3
>022450	012450	e9 20 ff 26 8a 45 04 a2		.text $E9,$20,$FF,$26,$8A,$45,$04,$A2,$1E,$01,$80,$3E,$38,$06,$00,$75,$3A,$A0,$2C,$01,$1E,$C5,$36,$2D,$01,$88,$44,$04,$8A,$44,$0A,$8A
>022458	012458	1e 01 80 3e 38 06 00 75 3a a0 2c 01 1e c5 36 2d
>022468	012468	01 88 44 04 8a 44 0a 8a
>022470	012470	64 04 1f a2 26 01 88 26		.text $64,$04,$1F,$A2,$26,$01,$88,$26,$2B,$01,$1E,$C5,$36,$2D,$01,$26,$80,$7D,$22,$02,$75,$05,$B0,$04,$86,$44,$0A,$32,$C0,$FE,$C0,$86
>022478	012478	2b 01 1e c5 36 2d 01 26 80 7d 22 02 75 05 b0 04
>022488	012488	86 44 0a 32 c0 fe c0 86
>022490	012490	44 09 1f a2 27 01 b0 0f		.text $44,$09,$1F,$A2,$27,$01,$B0,$0F,$A2,$28,$01,$C3,$26,$F6,$45,$23,$01,$75,$2F,$E8,$FE,$01,$9C,$80,$3E,$38,$06,$00,$75,$23,$50,$06
>022498	012498	a2 28 01 c3 26 f6 45 23 01 75 2f e8 fe 01 9c 80
>0224a8	0124a8	3e 38 06 00 75 23 50 06
>0224b0	0124b0	c4 36 2d 01 a0 2b 01 26		.text $C4,$36,$2D,$01,$A0,$2B,$01,$26,$88,$44,$04,$A0,$27,$01,$8A,$26,$26,$01,$26,$88,$44,$09,$26,$C6,$44,$03,$02,$26,$88,$64,$0A,$07
>0224b8	0124b8	88 44 04 a0 27 01 8a 26 26 01 26 88 44 09 26 c6
>0224c8	0124c8	44 03 02 26 88 64 0a 07
>0224d0	0124d0	58 9d c3 0b c0 74 fb 26		.text $58,$9D,$C3,$0B,$C0,$74,$FB,$26,$F6,$45,$23,$01,$74,$0D,$F6,$06,$2F,$05,$80,$74,$06,$E8,$29,$00,$33,$C0,$C3,$26,$8A,$4D,$13,$FE
>0224d8	0124d8	f6 45 23 01 74 0d f6 06 2f 05 80 74 06 e8 29 00
>0224e8	0124e8	33 c0 c3 26 8a 4d 13 fe
>0224f0	0124f0	c1 2a 0e 31 01 32 ed 3b		.text $C1,$2A,$0E,$31,$01,$32,$ED,$3B,$C1,$73,$02,$8B,$C8,$50,$51,$8B,$C1,$E8,$0D,$00,$59,$58,$2B,$C1,$D0,$E1,$02,$F9,$EB,$C5,$E9,$EC
>0224f8	0124f8	c1 73 02 8b c8 50 51 8b c1 e8 0d 00 59 58 2b c1
>022508	012508	d0 e1 02 f9 eb c5 e9 ec
>022510	012510	00 bd 05 00 26 f6 45 23		.text $00,$BD,$05,$00,$26,$F6,$45,$23,$01,$74,$08,$80,$FC,$04,$74,$03,$BD,$02,$00,$89,$2E,$32,$05,$89,$2E,$34,$05,$8A,$26,$20,$01,$50
>022518	012518	01 74 08 80 fc 04 74 03 bd 02 00 89 2e 32 05 89
>022528	012528	2e 34 05 8a 26 20 01 50
>022530	012530	8b 16 33 01 26 f6 45 23		.text $8B,$16,$33,$01,$26,$F6,$45,$23,$01,$74,$0B,$26,$83,$7D,$47,$01,$75,$04,$26,$03,$55,$49,$D0,$CE,$D0,$CE,$0A,$36,$31,$01,$8B,$CA
>022538	012538	01 74 0b 26 83 7d 47 01 75 04 26 03 55 49 d0 ce
>022548	012548	d0 ce 0a 36 31 01 8b ca
>022550	012550	86 e9 8a 36 32 01 26 8a		.text $86,$E9,$8A,$36,$32,$01,$26,$8A,$55,$04,$26,$80,$7D,$22,$05,$74,$13,$80,$3E,$76,$00,$FF,$74,$0A,$80,$FC,$02,$74,$07,$80,$FC,$04
>022558	012558	55 04 26 80 7d 22 05 74 13 80 3e 76 00 ff 74 0a
>022568	012568	80 fc 02 74 07 80 fc 04
>022570	012570	74 02 eb 56 e8 fc 00 72		.text $74,$02,$EB,$56,$E8,$FC,$00,$72,$95,$88,$16,$76,$00,$26,$88,$6D,$46,$81,$3E,$20,$01,$03,$01,$74,$52,$58,$26,$F6,$45,$23,$01,$74
>022578	012578	95 88 16 76 00 26 88 6d 46 81 3e 20 01 03 01 74
>022588	012588	52 58 26 f6 45 23 01 74
>022590	012590	07 f6 06 2f 05 80 75 30		.text $07,$F6,$06,$2F,$05,$80,$75,$30,$80,$E1,$3F,$32,$E4,$29,$06,$22,$01,$02,$C8,$88,$0E,$31,$01,$26,$3A,$4D,$13,$76,$1B,$C6,$06,$31
>022598	012598	80 e1 3f 32 e4 29 06 22 01 02 c8 88 0e 31 01 26
>0225a8	0125a8	3a 4d 13 76 1b c6 06 31
>0225b0	0125b0	01 01 8a 36 32 01 fe c6		.text $01,$01,$8A,$36,$32,$01,$FE,$C6,$26,$3A,$75,$15,$72,$06,$32,$F6,$FF,$06,$33,$01,$88,$36,$32,$01,$F8,$C3,$3A,$16,$76,$00,$75,$06
>0225b8	0125b8	26 3a 75 15 72 06 32 f6 ff 06 33 01 88 36 32 01
>0225c8	0125c8	f8 c3 3a 16 76 00 75 06
>0225d0	0125d0	26 3a 6d 46 74 9e e8 75		.text $26,$3A,$6D,$46,$74,$9E,$E8,$75,$00,$EB,$9C,$58,$50,$B4,$04,$E8,$91,$00,$73,$A5,$80,$FC,$11,$75,$0B,$FF,$0E,$34,$05,$74,$9A,$E8
>0225d8	0125d8	00 eb 9c 58 50 b4 04 e8 91 00 73 a5 80 fc 11 75
>0225e8	0125e8	0b ff 0e 34 05 74 9a e8
>0225f0	0125f0	58 05 eb 3e e8 53 05 ff		.text $58,$05,$EB,$3E,$E8,$53,$05,$FF,$0E,$32,$05,$EB,$1C,$80,$3E,$77,$00,$00,$74,$03,$E8,$66,$0D,$80,$3E,$36,$05,$01,$75,$08,$BD,$01
>0225f8	0125f8	0e 32 05 eb 1c 80 3e 77 00 00 74 03 e8 66 0d 80
>022608	012608	3e 36 05 01 75 08 bd 01
>022610	012610	00 c6 06 36 05 00 e8 ab		.text $00,$C6,$06,$36,$05,$00,$E8,$AB,$00,$74,$20,$26,$F6,$45,$23,$01,$75,$05,$80,$FC,$80,$74,$14,$80,$FC,$CC,$74,$0A,$C7,$06,$34,$05
>022618	012618	00 74 20 26 f6 45 23 01 75 05 80 fc 80 74 14 80
>022628	012628	fc cc 74 0a c7 06 34 05
>022630	012630	05 00 58 e9 f9 fe bd 01		.text $05,$00,$58,$E9,$F9,$FE,$BD,$01,$00,$EB,$F7,$E8,$4D,$00,$C6,$06,$1E,$01,$FF,$8B,$0E,$22,$01,$8B,$26,$35,$01,$E9,$58,$FE,$80,$3E
>022638	012638	00 eb f7 e8 4d 00 c6 06 1e 01 ff 8b 0e 22 01 8b
>022648	012648	26 35 01 e9 58 fe 80 3e
>022650	012650	38 06 00 75 1e 06 50 a0		.text $38,$06,$00,$75,$1E,$06,$50,$A0,$28,$01,$C4,$36,$2D,$01,$26,$88,$44,$09,$58,$07,$E8,$0C,$00,$06,$C4,$36,$2D,$01,$26,$C6,$44,$09
>022658	012658	28 01 c4 36 2d 01 26 88 44 09 58 07 e8 0c 00 06
>022668	012668	c4 36 2d 01 26 c6 44 09
>022670	012670	01 07 c3 26 f6 45 1f 80		.text $01,$07,$C3,$26,$F6,$45,$1F,$80,$75,$0D,$06,$8E,$06,$37,$05,$CD,$13,$8C,$06,$37,$05,$07,$C3,$F9,$B4,$80,$C3,$51,$06,$1E,$07,$8A
>022678	012678	75 0d 06 8e 06 37 05 cd 13 8c 06 37 05 07 c3 f9
>022688	012688	b4 80 c3 51 06 1e 07 8a
>022690	012690	c4 a2 44 01 b9 09 00 bf		.text $C4,$A2,$44,$01,$B9,$09,$00,$BF,$3C,$01,$F2,$AE,$8A,$85,$08,$00,$07,$59,$F9,$C3,$50,$E8,$74,$F8,$26,$3B,$55,$47,$75,$06,$26,$3B
>022698	012698	3c 01 f2 ae 8a 85 08 00 07 59 f9 c3 50 e8 74 f8
>0226a8	0126a8	26 3b 55 47 75 06 26 3b
>0226b0	0126b0	4d 49 74 0d c6 06 1d 01		.text $4D,$49,$74,$0D,$C6,$06,$1D,$01,$00,$26,$89,$55,$47,$26,$89,$4D,$49,$F8,$58,$C3,$E8,$83,$04,$80,$FC,$06,$74,$02,$4D,$C3,$0A,$E4
>0226b8	0126b8	00 26 89 55 47 26 89 4d 49 f8 58 c3 e8 83 04 80
>0226c8	0126c8	fc 06 74 02 4d c3 0a e4
>0226d0	0126d0	c3 00 08 a7 0c e8 0e 86		.text $C3,$00,$08,$A7,$0C,$E8,$0E,$86,$0E,$A3,$0C,$A3,$0C,$A3,$0C,$9A,$11,$69,$12,$C1,$12,$07,$F3,$0C,$EF,$0E,$C1,$0D,$A3,$0C,$A3,$0C
>0226d8	0126d8	0e a3 0c a3 0c a3 0c 9a 11 69 12 c1 12 07 f3 0c
>0226e8	0126e8	ef 0e c1 0d a3 0c a3 0c
>0226f0	0126f0	a3 0c d2 11 80 12 60 40		.text $A3,$0C,$D2,$11,$80,$12,$60,$40,$61,$41,$62,$42,$66,$46,$67,$47,$68,$E8,$69,$F8,$06,$C4,$1E,$12,$00,$26,$80,$7F,$0D,$08,$26,$8A
>0226f8	0126f8	61 41 62 42 66 46 67 47 68 e8 69 f8 06 c4 1e 12
>022708	012708	00 26 80 7f 0d 08 26 8a
>022710	012710	47 0e 07 75 25 be 3c 0c		.text $47,$0E,$07,$75,$25,$BE,$3C,$0C,$A8,$20,$75,$03,$BE,$4F,$0C,$24,$DF,$2C,$40,$2E,$3A,$04,$77,$12,$98,$D1,$E0,$46,$03,$F0,$2E,$FF
>022718	012718	a8 20 75 03 be 4f 0c 24 df 2c 40 2e 3a 04 77 12
>022728	012728	98 d1 e0 46 03 f0 2e ff
>022730	012730	14 2e 8e 1e 30 00 b4 81		.text $14,$2E,$8E,$1E,$30,$00,$B4,$81,$C3,$5A,$E9,$2E,$F4,$C5,$1E,$12,$00,$C5,$5F,$13,$26,$8A,$45,$22,$88,$47,$01,$26,$8B,$45,$23,$25
>022738	012738	c3 5a e9 2e f4 c5 1e 12 00 c5 5f 13 26 8a 45 22
>022748	012748	88 47 01 26 8b 45 23 25
>022750	012750	03 00 89 47 02 26 8b 45		.text $03,$00,$89,$47,$02,$26,$8B,$45,$25,$89,$47,$04,$32,$C0,$88,$47,$06,$8D,$75,$27,$F6,$07,$01,$74,$12,$1E,$2E,$8E,$1E,$30,$00,$E8
>022758	012758	25 89 47 04 32 c0 88 47 06 8d 75 27 f6 07 01 74
>022768	012768	12 1e 2e 8e 1e 30 00 e8
>022770	012770	80 fb e8 27 f9 1f 72 10		.text $80,$FB,$E8,$27,$F9,$1F,$72,$10,$8D,$75,$06,$8D,$7F,$07,$B9,$19,$00,$1E,$06,$1F,$07,$F3,$A4,$F8,$C3,$C5,$1E,$12,$00,$C5,$5F,$13
>022778	012778	8d 75 06 8d 7f 07 b9 19 00 1e 06 1f 07 f3 a4 f8
>022788	012788	c3 c5 1e 12 00 c5 5f 13
>022790	012790	26 81 4d 23 40 01 f6 07		.text $26,$81,$4D,$23,$40,$01,$F6,$07,$02,$75,$7C,$8A,$47,$01,$26,$88,$45,$22,$8B,$47,$04,$26,$89,$45,$25,$8B,$47,$02,$1E,$2E,$8E,$1E
>022798	012798	02 75 7c 8a 47 01 26 88 45 22 8b 47 04 26 89 45
>0227a8	0127a8	25 8b 47 02 1e 2e 8e 1e
>0227b0	0127b0	30 00 80 3e 77 00 00 1f		.text $30,$00,$80,$3E,$77,$00,$00,$1F,$75,$03,$25,$FD,$FF,$25,$03,$00,$26,$8B,$4D,$23,$81,$E1,$F4,$FD,$0B,$C1,$26,$89,$45,$23,$8A,$47
>0227b8	0127b8	75 03 25 fd ff 25 03 00 26 8b 4d 23 81 e1 f4 fd
>0227c8	0127c8	0b c1 26 89 45 23 8a 47
>0227d0	0127d0	06 1e 2e 8e 1e 30 00 a2		.text $06,$1E,$2E,$8E,$1E,$30,$00,$A2,$37,$06,$1F,$26,$81,$4D,$23,$80,$00,$57,$F6,$07,$01,$75,$15,$26,$F7,$45,$23,$04,$00,$74,$05,$26
>0227d8	0127d8	37 06 1f 26 81 4d 23 80 00 57 f6 07 01 75 15 26
>0227e8	0127e8	f7 45 23 04 00 74 05 26
>0227f0	0127f0	83 65 23 fb b9 1f 00 8d		.text $83,$65,$23,$FB,$B9,$1F,$00,$8D,$7D,$27,$EB,$0B,$26,$83,$4D,$23,$04,$B9,$19,$00,$8D,$7D,$06,$8D,$77,$07,$F3,$A4,$1E,$2E,$8E,$1E
>0227f8	0127f8	7d 27 eb 0b 26 83 4d 23 04 b9 19 00 8d 7d 06 8d
>022808	012808	77 07 f3 a4 1e 2e 8e 1e
>022810	012810	30 00 e8 ec 03 1f 5f 8b		.text $30,$00,$E8,$EC,$03,$1F,$5F,$8B,$4F,$26,$1E,$2E,$8E,$1E,$30,$00,$89,$0E,$39,$05,$1F,$26,$83,$65,$23,$F7,$F6,$07,$04,$74,$05,$26
>022818	012818	4f 26 1e 2e 8e 1e 30 00 89 0e 39 05 1f 26 83 65
>022828	012828	23 f7 f6 07 04 74 05 26
>022830	012830	83 4d 23 08 83 f9 3f 77		.text $83,$4D,$23,$08,$83,$F9,$3F,$77,$1A,$E3,$16,$BF,$3B,$05,$8D,$77,$28,$2E,$8E,$06,$30,$00,$47,$47,$AD,$AA,$AD,$E8,$E8,$01,$AA,$E2
>022838	012838	1a e3 16 bf 3b 05 8d 77 28 2e 8e 06 30 00 47 47
>022848	012848	ad aa ad e8 e8 01 aa e2
>022850	012850	f5 f8 c3 b0 0c f9 c3 c5		.text $F5,$F8,$C3,$B0,$0C,$F9,$C3,$C5,$1E,$12,$00,$C5,$5F,$13,$F6,$07,$01,$74,$0E,$1E,$2E,$8E,$1E,$30,$00,$E8,$41,$02,$1F,$88,$07,$F8
>022858	012858	1e 12 00 c5 5f 13 f6 07 01 74 0e 1e 2e 8e 1e 30
>022868	012868	00 e8 41 02 1f 88 07 f8
>022870	012870	c3 26 80 7d 22 05 75 08		.text $C3,$26,$80,$7D,$22,$05,$75,$08,$2E,$8E,$1E,$30,$00,$E9,$9C,$00,$8B,$4F,$01,$8B,$57,$03,$F6,$07,$02,$2E,$8E,$1E,$30,$00,$74,$03
>022878	012878	2e 8e 1e 30 00 e9 9c 00 8b 4f 01 8b 57 03 f6 07
>022888	012888	02 2e 8e 1e 30 00 74 03
>022890	012890	e9 e6 00 e8 17 02 3c 01		.text $E9,$E6,$00,$E8,$17,$02,$3C,$01,$74,$06,$3C,$03,$75,$07,$EB,$67,$52,$E8,$A5,$01,$5A,$E8,$4A,$FA,$8B,$C2,$A3,$39,$01,$88,$0E,$38
>022898	012898	74 06 3c 03 75 07 eb 67 52 e8 a5 01 5a e8 4a fa
>0228a8	0128a8	8b c2 a3 39 01 88 0e 38
>0228b0	0128b0	01 8a e1 bb 3b 05 8b 0e		.text $01,$8A,$E1,$BB,$3B,$05,$8B,$0E,$39,$05,$89,$07,$83,$C3,$04,$E2,$F9,$B9,$05,$00,$51,$BB,$3B,$05,$A0,$39,$05,$B4,$05,$8C,$1E,$37
>0228b8	0128b8	39 05 89 07 83 c3 04 e2 f9 b9 05 00 51 bb 3b 05
>0228c8	0128c8	a0 39 05 b4 05 8c 1e 37
>0228d0	0128d0	05 e8 8e 02 59 72 16 51		.text $05,$E8,$8E,$02,$59,$72,$16,$51,$53,$33,$DB,$89,$1E,$37,$05,$A0,$39,$05,$B4,$04,$B1,$01,$E8,$79,$02,$5B,$59,$73,$29,$E8,$5A,$02
>0228d8	0128d8	53 33 db 89 1e 37 05 a0 39 05 b4 04 b1 01 e8 79
>0228e8	0128e8	02 5b 59 73 29 e8 5a 02
>0228f0	0128f0	c6 06 39 06 01 50 51 52		.text $C6,$06,$39,$06,$01,$50,$51,$52,$E8,$B2,$01,$3C,$01,$75,$03,$E8,$47,$01,$5A,$59,$58,$E2,$BD,$C6,$06,$39,$06,$01,$80,$FC,$06,$75
>0228f8	0128f8	e8 b2 01 3c 01 75 03 e8 47 01 5a 59 58 e2 bd c6
>022908	012908	06 39 06 01 80 fc 06 75
>022910	012910	02 b4 80 e9 75 fd c6 06		.text $02,$B4,$80,$E9,$75,$FD,$C6,$06,$39,$06,$00,$C3,$1E,$C5,$1E,$12,$00,$C5,$5F,$13,$8B,$4F,$03,$8B,$47,$01,$8B,$57,$05,$8A,$1F,$1F
>022918	012918	39 06 00 c3 1e c5 1e 12 00 c5 5f 13 8b 4f 03 8b
>022928	012928	47 01 8b 57 05 8a 1f 1f
>022930	012930	c6 06 20 01 04 89 0e 33		.text $C6,$06,$20,$01,$04,$89,$0E,$33,$01,$A2,$32,$01,$8B,$0E,$39,$05,$F6,$C3,$02,$74,$23,$8B,$C2,$0A,$E4,$75,$2E,$F6,$E1,$0A,$E4,$75
>022938	012938	01 a2 32 01 8b 0e 39 05 f6 c3 02 74 23 8b c2 0a
>022948	012948	e4 75 2e f6 e1 0a e4 75
>022950	012950	28 8b c8 26 f7 45 23 01		.text $28,$8B,$C8,$26,$F7,$45,$23,$01,$00,$74,$0D,$F7,$06,$2F,$05,$80,$00,$74,$05,$C6,$06,$36,$05,$01,$33,$C0,$33,$DB,$89,$1E,$37,$05
>022958	012958	00 74 0d f7 06 2f 05 80 00 74 05 c6 06 36 05 01
>022968	012968	33 c0 33 db 89 1e 37 05
>022970	012970	e8 3f 00 c6 06 36 05 00		.text $E8,$3F,$00,$C6,$06,$36,$05,$00,$C3,$B4,$01,$E9,$0D,$FD,$C6,$06,$20,$01,$02,$EB,$05,$C6,$06,$20,$01,$03,$06,$C4,$1E,$12,$00,$26
>022978	012978	c3 b4 01 e9 0d fd c6 06 20 01 02 eb 05 c6 06 20
>022988	012988	01 03 06 c4 1e 12 00 26
>022990	012990	c4 5f 13 26 8b 47 03 a3		.text $C4,$5F,$13,$26,$8B,$47,$03,$A3,$33,$01,$26,$8B,$47,$01,$A2,$32,$01,$26,$8B,$47,$05,$26,$8B,$4F,$07,$26,$C4,$5F,$09,$8C,$06,$37
>022998	012998	33 01 26 8b 47 01 a2 32 01 26 8b 47 05 26 8b 4f
>0229a8	0129a8	07 26 c4 5f 09 8c 06 37
>0229b0	0129b0	05 07 89 26 35 01 e8 39		.text $05,$07,$89,$26,$35,$01,$E8,$39,$F9,$80,$3E,$38,$06,$01,$74,$07,$50,$51,$E8,$8E,$FA,$59,$58,$BE,$3B,$05,$D1,$E0,$D1,$E0,$03,$F0
>0229b8	0129b8	f9 80 3e 38 06 01 74 07 50 51 e8 8e fa 59 58 be
>0229c8	0129c8	3b 05 d1 e0 d1 e0 03 f0
>0229d0	0129d0	ba 01 00 26 f7 45 23 08		.text $BA,$01,$00,$26,$F7,$45,$23,$08,$00,$74,$02,$87,$D1,$51,$52,$46,$46,$AC,$A2,$31,$01,$26,$F7,$45,$23,$01,$00,$74,$15,$F7,$06,$2F
>0229d8	0129d8	00 74 02 87 d1 51 52 46 46 ac a2 31 01 26 f7 45
>0229e8	0129e8	23 01 00 74 15 f7 06 2f
>0229f0	0129f0	05 80 00 74 0d 89 16 22		.text $05,$80,$00,$74,$0D,$89,$16,$22,$01,$8B,$C2,$E8,$13,$FB,$5A,$59,$F8,$C3,$AC,$50,$56,$1E,$50,$8A,$26,$2C,$01,$C5,$36,$2D,$01,$88
>0229f8	0129f8	01 8b c2 e8 13 fb 5a 59 f8 c3 ac 50 56 1e 50 8a
>022a08	012a08	26 2c 01 c5 36 2d 01 88
>022a10	012a10	44 03 88 64 04 58 1f 8a		.text $44,$03,$88,$64,$04,$58,$1F,$8A,$C2,$A3,$22,$01,$E8,$F2,$FA,$5E,$58,$E8,$1D,$00,$03,$D8,$5A,$59,$E2,$B3,$80,$3E,$38,$06,$01,$74
>022a18	012a18	c2 a3 22 01 e8 f2 fa 5e 58 e8 1d 00 03 d8 5a 59
>022a28	012a28	e2 b3 80 3e 38 06 01 74
>022a30	012a30	03 e8 68 fa f8 c3 80 fc		.text $03,$E8,$68,$FA,$F8,$C3,$80,$FC,$02,$77,$03,$8A,$C4,$C3,$B0,$03,$C3,$8A,$C8,$B8,$80,$00,$D3,$E0,$C3,$80,$3E,$39,$06,$01,$74,$0E
>022a38	012a38	02 77 03 8a c4 c3 b0 03 c3 8a c8 b8 80 00 d3 e0
>022a48	012a48	c3 80 3e 39 06 01 74 0e
>022a50	012a50	26 f7 45 23 80 00 74 4c		.text $26,$F7,$45,$23,$80,$00,$74,$4C,$26,$81,$65,$23,$7F,$FF,$C6,$06,$39,$06,$00,$C6,$06,$3B,$01,$50,$B0,$04,$26,$80,$7D,$22,$02,$74
>022a58	012a58	26 81 65 23 7f ff c6 06 39 06 00 c6 06 3b 01 50
>022a68	012a68	b0 04 26 80 7d 22 02 74
>022a70	012a70	1b 26 80 7d 22 01 74 04		.text $1B,$26,$80,$7D,$22,$01,$74,$04,$B0,$01,$EB,$10,$B0,$02,$80,$3E,$37,$06,$00,$75,$07,$B0,$03,$C6,$06,$3B,$01,$54,$1E,$56,$8E,$1E
>022a78	012a78	b0 01 eb 10 b0 02 80 3e 37 06 00 75 07 b0 03 c6
>022a88	012a88	06 3b 01 54 1e 56 8e 1e
>022a90	012a90	1a 00 c5 36 78 00 c6 44		.text $1A,$00,$C5,$36,$78,$00,$C6,$44,$09,$0F,$5E,$1F,$B4,$17,$26,$8A,$55,$04,$CD,$13,$26,$8A,$65,$13,$88,$26,$37,$01,$C3,$51,$52,$80
>022a98	012a98	09 0f 5e 1f b4 17 26 8a 55 04 cd 13 26 8a 65 13
>022aa8	012aa8	88 26 37 01 c3 51 52 80
>022ab0	012ab0	3e 39 06 01 74 26 32 c0		.text $3E,$39,$06,$01,$74,$26,$32,$C0,$80,$3E,$38,$06,$01,$75,$03,$E9,$85,$00,$06,$56,$8E,$06,$1A,$00,$26,$C4,$36,$78,$00,$89,$36,$2D
>022ab8	012ab8	80 3e 38 06 01 75 03 e9 85 00 06 56 8e 06 1a 00
>022ac8	012ac8	26 c4 36 78 00 89 36 2d
>022ad0	012ad0	01 8c 06 2f 01 26 c6 44		.text $01,$8C,$06,$2F,$01,$26,$C6,$44,$09,$0F,$5E,$07,$26,$8B,$4D,$25,$49,$80,$E5,$03,$D0,$CD,$D0,$CD,$86,$E9,$26,$0A,$4D,$13,$26,$8A
>022ad8	012ad8	09 0f 5e 07 26 8b 4d 25 49 80 e5 03 d0 cd d0 cd
>022ae8	012ae8	86 e9 26 0a 4d 13 26 8a
>022af0	012af0	55 04 06 1e 56 57 b4 18		.text $55,$04,$06,$1E,$56,$57,$B4,$18,$CD,$13,$72,$33,$80,$3E,$39,$06,$01,$74,$25,$06,$8E,$06,$1A,$00,$26,$C4,$36,$78,$00,$89,$36,$3A
>022af8	012af8	cd 13 72 33 80 3e 39 06 01 74 25 06 8e 06 1a 00
>022b08	012b08	26 c4 36 78 00 89 36 3a
>022b10	012b10	06 8c 06 3c 06 8e 06 1a		.text $06,$8C,$06,$3C,$06,$8E,$06,$1A,$00,$26,$89,$3E,$78,$00,$26,$8F,$06,$7A,$00,$C6,$06,$38,$06,$01,$32,$C0,$A2,$39,$06,$EB,$14,$80
>022b18	012b18	00 26 89 3e 78 00 26 8f 06 7a 00 c6 06 38 06 01
>022b28	012b28	32 c0 a2 39 06 eb 14 80
>022b30	012b30	fc 0c 74 09 80 fc 80 74		.text $FC,$0C,$74,$09,$80,$FC,$80,$74,$08,$B0,$01,$EB,$06,$B0,$02,$EB,$02,$B0,$03,$5F,$5E,$1F,$07,$5A,$59,$C3,$50,$80,$3E,$38,$06,$01
>022b38	012b38	08 b0 01 eb 06 b0 02 eb 02 b0 03 5f 5e 1f 07 5a
>022b48	012b48	59 c3 50 80 3e 38 06 01
>022b50	012b50	75 05 c6 06 39 06 01 32		.text $75,$05,$C6,$06,$39,$06,$01,$32,$E4,$CD,$13,$C6,$06,$76,$00,$FF,$58,$C3,$53,$56,$F6,$06,$38,$06,$01,$75,$36,$50,$06,$26,$80,$7D
>022b58	012b58	e4 cd 13 c6 06 76 00 ff 58 c3 53 56 f6 06 38 06
>022b68	012b68	01 75 36 50 06 26 80 7d
>022b70	012b70	22 02 9c 8e 06 1a 00 26		.text $22,$02,$9C,$8E,$06,$1A,$00,$26,$C4,$36,$78,$00,$89,$36,$2D,$01,$8C,$06,$2F,$01,$A0,$37,$01,$26,$88,$44,$04,$A0,$3B,$01,$26,$88
>022b78	012b78	c4 36 78 00 89 36 2d 01 8c 06 2f 01 a0 37 01 26
>022b88	012b88	88 44 04 a0 3b 01 26 88
>022b90	012b90	44 07 26 c6 44 09 0f 9d		.text $44,$07,$26,$C6,$44,$09,$0F,$9D,$75,$05,$26,$C6,$44,$0A,$04,$07,$58,$8B,$16,$39,$01,$8A,$EA,$26,$8A,$55,$04,$8A,$36,$38,$01,$06
>022b98	012b98	75 05 26 c6 44 0a 04 07 58 8b 16 39 01 8a ea 26
>022ba8	012ba8	8a 55 04 8a 36 38 01 06
>022bb0	012bb0	8e 06 37 05 cd 13 07 5e		.text $8E,$06,$37,$05,$CD,$13,$07,$5E,$5B,$C3,$E8,$B0,$F3,$26,$8A,$45,$04,$C4,$3E,$19,$01,$26,$38,$45,$04,$75,$08,$26,$F7,$45,$23,$20
>022bb8	012bb8	5b c3 e8 b0 f3 26 8a 45 04 c4 3e 19 01 26 38 45
>022bc8	012bc8	04 75 08 26 f7 45 23 20
>022bd0	012bd0	00 75 15 26 c4 3d eb ed		.text $00,$75,$15,$26,$C4,$3D,$EB,$ED,$E8,$92,$F3,$C6,$06,$7A,$00,$01,$E8,$0F,$F7,$C6,$06,$7A,$00,$00,$32,$C9,$26,$F7,$45,$23,$10,$00
>022bd8	012bd8	e8 92 f3 c6 06 7a 00 01 e8 0f f7 c6 06 7a 00 00
>022be8	012be8	32 c9 26 f7 45 23 10 00
>022bf0	012bf0	74 06 26 8a 4d 05 fe c1		.text $74,$06,$26,$8A,$4D,$05,$FE,$C1,$C5,$1E,$12,$00,$88,$4F,$01,$F8,$C3,$50,$32,$C0,$A2,$39,$06,$86,$06,$38,$06,$0A,$C0,$74,$1E,$56
>022bf8	012bf8	c5 1e 12 00 88 4f 01 f8 c3 50 32 c0 a2 39 06 86
>022c08	012c08	06 38 06 0a c0 74 1e 56
>022c10	012c10	1e 06 c5 36 3a 06 2e 8e		.text $1E,$06,$C5,$36,$3A,$06,$2E,$8E,$06,$30,$00,$26,$8E,$06,$1A,$00,$26,$89,$36,$78,$00,$26,$8C,$1E,$7A,$00,$07,$1F,$5E,$58,$F8,$C3
>022c18	012c18	06 30 00 26 8e 06 1a 00 26 89 36 78 00 26 8c 1e
>022c28	012c28	7a 00 07 1f 5e 58 f8 c3
>022c30	012c30	e8 a1 00 26 8a 45 05 c6		.text $E8,$A1,$00,$26,$8A,$45,$05,$C6,$06,$20,$01,$02,$E8,$7D,$00,$72,$26,$80,$3E,$63,$01,$F0,$72,$1C,$80,$3E,$74,$01,$29,$75,$15,$C4
>022c38	012c38	06 20 01 02 e8 7d 00 72 26 80 3e 63 01 f0 72 1c
>022c48	012c48	80 3e 74 01 29 75 15 c4
>022c50	012c50	3e 12 00 26 c4 7f 13 be		.text $3E,$12,$00,$26,$C4,$7F,$13,$BE,$75,$01,$83,$C7,$02,$B9,$17,$00,$F3,$A4,$F8,$C3,$B0,$07,$F9,$C3,$E8,$69,$00,$26,$8A,$45,$05,$8A
>022c58	012c58	75 01 83 c7 02 b9 17 00 f3 a4 f8 c3 b0 07 f9 c3
>022c68	012c68	e8 69 00 26 8a 45 05 8a
>022c70	012c70	d0 c6 06 20 01 02 52 e8		.text $D0,$C6,$06,$20,$01,$02,$52,$E8,$42,$00,$5A,$72,$3E,$80,$3E,$63,$01,$F0,$72,$34,$80,$3E,$74,$01,$29,$75,$2D,$06,$57,$1E,$07,$BF
>022c78	012c78	42 00 5a 72 3e 80 3e 63 01 f0 72 34 80 3e 74 01
>022c88	012c88	29 75 2d 06 57 1e 07 bf
>022c90	012c90	75 01 c5 36 12 00 c5 74		.text $75,$01,$C5,$36,$12,$00,$C5,$74,$13,$83,$C6,$02,$B9,$17,$00,$F3,$A4,$06,$1F,$5F,$07,$E8,$3F,$F5,$8A,$C2,$C6,$06,$20,$01,$03,$E8
>022c98	012c98	13 83 c6 02 b9 17 00 f3 a4 06 1f 5f 07 e8 3f f5
>022ca8	012ca8	8a c2 c6 06 20 01 03 e8
>022cb0	012cb0	0a 00 c6 06 1e 01 ff c3		.text $0A,$00,$C6,$06,$1E,$01,$FF,$C3,$B0,$07,$F9,$C3,$06,$57,$53,$1E,$07,$BF,$4E,$01,$33,$D2,$89,$16,$2B,$05,$B9,$01,$00,$E8,$B0,$F6
>022cb8	012cb8	b0 07 f9 c3 06 57 53 1e 07 bf 4e 01 33 d2 89 16
>022cc8	012cc8	2b 05 b9 01 00 e8 b0 f6
>022cd0	012cd0	5b 5f 07 c3 26 8a 55 04		.text $5B,$5F,$07,$C3,$26,$8A,$55,$04,$0A,$D2,$78,$22,$26,$F7,$45,$23,$04,$00,$75,$1A,$80,$3E,$77,$00,$01,$75,$13,$E8,$24,$07,$74,$0E
>022cd8	012cd8	0a d2 78 22 26 f7 45 23 04 00 75 1a 80 3e 77 00
>022ce8	012ce8	01 75 13 e8 24 07 74 0e
>022cf0	012cf0	b4 16 cd 13 73 08 53 bb		.text $B4,$16,$CD,$13,$73,$08,$53,$BB,$40,$00,$E8,$ED,$06,$5B,$C3,$C5,$1E,$12,$00,$C5,$5F,$13,$B0,$00,$26,$F7,$45,$23,$00,$02,$75,$02
>022cf8	012cf8	40 00 e8 ed 06 5b c3 c5 1e 12 00 c5 5f 13 b0 00
>022d08	012d08	26 f7 45 23 00 02 75 02
>022d10	012d10	fe c0 88 47 01 c3 c5 1e		.text $FE,$C0,$88,$47,$01,$C3,$C5,$1E,$12,$00,$C5,$5F,$13,$26,$81,$65,$23,$FF,$FD,$80,$7F,$01,$00,$75,$06,$26,$81,$4D,$23,$00,$02,$C3
>022d18	012d18	12 00 c5 5f 13 26 81 65 23 ff fd 80 7f 01 00 75
>022d28	012d28	06 26 81 4d 23 00 02 c3

;******  Return to file: Floppy.asm


;******  Return to file: kernel.asm


;******  Processing file: FAT12.asm


;******  Processing file: FAT12_def.asm

=$19800						FAT12_ADDRESS_BUFFER_512 = $19800 ; RAM address where to store the sector read by the floppy READ_DATA function
=$19a00						FAT12_FAT_ADDRESS_BUFFER_512 = $19A00 ; RAM address where to store the sector read by the floppy READ_DATA function

;******  Return to file: FAT12.asm

=$19000						Byte_Per_Sector = $19000 ; 512 for a Floppy disk
=$19002						Sector_Per_Cluster = $19002 ; 1
=$19004						Nb_Of_reserved_Cluster = $19004 ; 1 , this number include the boot sector
=$19006						Nb_Of_FAT = $19006 ; 2
=$19008						Max_Root_Entry = $19008 ; 224  => 14 sector for the root directory and 32Byte foe en entry (14 * 512 / 32)
=$1900a						Total_Sector_Count = $1900A ; 2880 => 80 track of 18 sector on each 2 dide (80*18*2)
=$1900c						Sector_per_Fat = $1900C
=$1900e						Sector_per_Track = $1900E
=$19010						Nb_of_Head = $19010
=$19012						Total_Sector_Count_FAT32 = $19012
=$19016						Boot_Signature = $19016
=$19018						Volume_ID = $19018
=$1901c						Volume_Label =  $1901C
=$19027						File_System_Type =  $19027
=$1902f						Sector_loaded_in_ram = $1902F ; updated by any function readding Sector from FDD like : IFAT12_READ_BOOT_SECTOR / IFAT12_GET_ROOT_DIR_POS
=$19031						Root_entry_Sector_index = $19031 ; hold the sector index position of the fists Root directory sectoe
=$19033						Root_entry_value = $19033 ; store the 32 byte of root entry
=$19053						Fat12_Sector_index = $19053 ; store the sector index of the first fat sector
=$19055						Fat12_next_entry = $19055  ; store the 12 bit fat entry
=$19057						Fat12_Sector_loaded_in_ram = $19057 ; store the actual fat sector loades in ram
.019060						IFAT12_READ_BOOT_SECTOR
.019060		c2 30		rep #$30	                REP #$30        ; set A&X long
.019062		a9 01 00	lda #$0001	                  LDA #`FAT12_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.019065		48		pha		                  PHA
.019066		a9 00 98	lda #$9800	                  LDA #<>FAT12_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.019069		48		pha		                  PHA
.01906a		a5 00		lda $00		                  LDA $0 ; read sector 0 (where the boot sector is stored)
.01906c		22 42 a2 01	jsl $01a242	                  JSL IFDD_READ
.019070		fa		plx		                  PLX
.019071		fa		plx		                  PLX;
.019072		8f 2f 90 01	sta $01902f	                  STA Sector_loaded_in_ram
.019076		a2 0b 00	ldx #$000b	                  LDX #11
.019079		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.01907d		8f 00 90 01	sta $019000	                  STA Byte_Per_Sector
.019081		a2 0d 00	ldx #$000d	                  LDX #13 ;
.019084		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.019088		29 ff 00	and #$00ff	                  AND #$FF
.01908b		8f 02 90 01	sta $019002	                  STA Sector_Per_Cluster
.01908f		a2 0e 00	ldx #$000e	                  LDX #14 ;
.019092		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.019096		8f 04 90 01	sta $019004	                  STA Nb_Of_reserved_Cluster
.01909a		a2 10 00	ldx #$0010	                  LDX #16 ;
.01909d		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190a1		29 ff 00	and #$00ff	                  AND #$FF
.0190a4		8f 06 90 01	sta $019006	                  STA Nb_Of_FAT
.0190a8		a2 11 00	ldx #$0011	                  LDX #17 ;
.0190ab		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190af		8f 08 90 01	sta $019008	                  STA Max_Root_Entry
.0190b3		a2 13 00	ldx #$0013	                  LDX #19 ;
.0190b6		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190ba		8f 0a 90 01	sta $01900a	                  STA Total_Sector_Count
.0190be		a2 16 00	ldx #$0016	                  LDX #22 ;
.0190c1		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190c5		8f 0c 90 01	sta $01900c	                  STA Sector_per_Fat
.0190c9		a2 18 00	ldx #$0018	                  LDX #24 ;
.0190cc		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190d0		8f 0e 90 01	sta $01900e	                  STA Sector_per_Track
.0190d4		a2 1a 00	ldx #$001a	                  LDX #26 ;
.0190d7		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190db		8f 10 90 01	sta $019010	                  STA Nb_of_Head
.0190df		a2 20 00	ldx #$0020	                  LDX #32 ;
.0190e2		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190e6		8f 12 90 01	sta $019012	                  STA Total_Sector_Count_FAT32
.0190ea		a2 22 00	ldx #$0022	                  LDX #34 ;
.0190ed		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190f1		8f 14 90 01	sta $019014	                  STA Total_Sector_Count_FAT32+2
.0190f5		a2 26 00	ldx #$0026	                  LDX #38 ;
.0190f8		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190fc		29 ff 00	and #$00ff	                  AND #$FF
.0190ff		8f 16 90 01	sta $019016	                  STA Boot_Signature
.019103		a2 27 00	ldx #$0027	                  LDX #39
.019106		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.01910a		8f 18 90 01	sta $019018	                  STA Volume_ID
.01910e		a2 29 00	ldx #$0029	                  LDX #41
.019111		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.019115		8f 1a 90 01	sta $01901a	                  STA Volume_ID+2
.019119		a9 00 98	lda #$9800	                  LDA #<>FAT12_ADDRESS_BUFFER_512
.01911c		69 2b 00	adc #$002b	                  ADC #43
.01911f		aa		tax		                  TAX
.019120		a0 1c 90	ldy #$901c	                  LDY #<>Volume_Label
.019123		a9 0a 00	lda #$000a	                  LDA #11-1
.019126		54 01 01	mvn $01,$01	                  MVN `Volume_Label , `FAT12_ADDRESS_BUFFER_512
.019129		a9 00 98	lda #$9800	                  LDA #<>FAT12_ADDRESS_BUFFER_512
.01912c		69 36 00	adc #$0036	                  ADC #54
.01912f		aa		tax		                  TAX
.019130		a0 27 90	ldy #$9027	                  LDY #<>File_System_Type
.019133		a9 07 00	lda #$0007	                  LDA #8-1
.019136		54 01 01	mvn $01,$01	                  MVN `File_System_Type, `FAT12_ADDRESS_BUFFER_512
.019139		af 00 90 01	lda $019000	                  LDA Byte_Per_Sector
.01913d		c9 00 02	cmp #$0200	                  CMP #512
.019140		d0 56		bne $019198	                  BNE ERROR_BLOCK_SEIZE
.019142		af 02 90 01	lda $019002	                  LDA Sector_Per_Cluster
.019146		c9 01 00	cmp #$0001	                  CMP #1
.019149		d0 52		bne $01919d	                  BNE ERROR_SECTOR_PER_CLUSTER
.01914b		af 04 90 01	lda $019004	                  LDA Nb_Of_reserved_Cluster
.01914f		c9 01 00	cmp #$0001	                  CMP #1
.019152		90 4e		bcc $0191a2	                  BCC ERROR_RESERVED_SECTOR
.019154		af 06 90 01	lda $019006	                  LDA Nb_Of_FAT
.019158		c9 01 00	cmp #$0001	                  CMP #1
.01915b		90 4a		bcc $0191a7	                  BCC ERROR_NB_FAT
.01915d		af 08 90 01	lda $019008	                  LDA Max_Root_Entry
.019161		c9 e0 00	cmp #$00e0	                  CMP #224
.019164		d0 46		bne $0191ac	                  BNE ERROR_NB_ROOT_ENTRY
.019166		af 0a 90 01	lda $01900a	                  LDA Total_Sector_Count
.01916a		c9 40 0b	cmp #$0b40	                  CMP #2880
.01916d		d0 42		bne $0191b1	                  BNE ERROR_NB_TOTAL_SECTOR_COUNT
.01916f		af 0c 90 01	lda $01900c	                  LDA Sector_per_Fat
.019173		c9 09 00	cmp #$0009	                  CMP #9
.019176		d0 3e		bne $0191b6	                  BNE ERROR_SECTOR_PER_FAT
.019178		af 0e 90 01	lda $01900e	                  LDA Sector_per_Track
.01917c		c9 12 00	cmp #$0012	                  CMP #18
.01917f		d0 3a		bne $0191bb	                  BNE ERROR_SECTOR_PER_TRACK
.019181		af 10 90 01	lda $019010	                  LDA Nb_of_Head
.019185		c9 01 00	cmp #$0001	                  CMP #1
.019188		90 36		bcc $0191c0	                  BCC ERROR_NB_HEAD_NULL
.01918a		af 16 90 01	lda $019016	                  LDA Boot_Signature
.01918e		c9 29 00	cmp #$0029	                  CMP #$29
.019191		d0 32		bne $0191c5	                  BNE ERROR_BOOT_SIGNATURE
.019193		a9 01 00	lda #$0001	                  LDA #1
.019196		80 30		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.019198		a9 ff ff	lda #$ffff	ERROR_BLOCK_SEIZE LDA #-1
.01919b		80 2b		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.01919d						ERROR_SECTOR_PER_CLUSTER
.01919d		a9 fe ff	lda #$fffe	                  LDA #-2
.0191a0		80 26		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191a2						ERROR_RESERVED_SECTOR
.0191a2		a9 fd ff	lda #$fffd	                  LDA #-3
.0191a5		80 21		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191a7		a9 fc ff	lda #$fffc	ERROR_NB_FAT      LDA #-4
.0191aa		80 1c		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191ac						ERROR_NB_ROOT_ENTRY
.0191ac		a9 fb ff	lda #$fffb	                  LDA #-5
.0191af		80 17		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191b1						ERROR_NB_TOTAL_SECTOR_COUNT
.0191b1		a9 fa ff	lda #$fffa	                  LDA #-6
.0191b4		80 12		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191b6						ERROR_SECTOR_PER_FAT
.0191b6		a9 f9 ff	lda #$fff9	                  LDA #-7
.0191b9		80 0d		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191bb						ERROR_SECTOR_PER_TRACK
.0191bb		a9 f8 ff	lda #$fff8	                  LDA #-8
.0191be		80 08		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191c0						ERROR_NB_HEAD_NULL
.0191c0		a9 f7 ff	lda #$fff7	                  LDA #-9
.0191c3		80 03		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191c5						ERROR_BOOT_SIGNATURE
.0191c5		a9 f6 ff	lda #$fff6	                  LDA #-10
.0191c8						RETURN_IFAT12_READ_BOOT_SECTOR
.0191c8		6b		rtl		                  RTL
.0191c9						IFAT12_GET_ROOT_DIR_POS
.0191c9		c2 30		rep #$30	                REP #$30        ; set A&X long
.0191cb		af 06 90 01	lda $019006	                  LDA Nb_Of_FAT;
.0191cf		aa		tax		                  TAX
.0191d0		af 0c 90 01	lda $01900c	                  LDA Sector_per_Fat
.0191d4		ca		dex		ADD_ONE_FAT       DEC X
.0191d5		e0 00 00	cpx #$0000	                  CPX #0
.0191d8		f0 07		beq $0191e1	                  BEQ FDD_END_LOOP_FAT_SECTOR_USAGE
.0191da		18		clc		                  CLC
.0191db		6f 0c 90 01	adc $01900c	                  ADC Sector_per_Fat
.0191df		80 f3		bra $0191d4	                  BRA ADD_ONE_FAT
.0191e1						FDD_END_LOOP_FAT_SECTOR_USAGE
.0191e1		18		clc		                  CLC
.0191e2		6f 04 90 01	adc $019004	                  ADC Nb_Of_reserved_Cluster ; at this point we have the sector where the Root directory is starting
.0191e6		8f 31 90 01	sta $019031	                  STA Root_entry_Sector_index
.0191ea		6b		rtl		                  RTL
.0191eb						IFAT12_GET_ROOT_FIRST_ENTRY
.0191eb		c2 30		rep #$30	                REP #$30        ; set A&X long
.0191ed		6b		rtl		                  RTL
.0191ee						IFAT12_GET_ROOT_NEXT_ENTRY
.0191ee		c2 30		rep #$30	                REP #$30        ; set A&X long
.0191f0		6b		rtl		                  RTL
.0191f1						IFAT12_GET_ROOT_ENTRY
.0191f1		c2 30		rep #$30	                REP #$30        ; set A&X long
.0191f3		cf 08 90 01	cmp $019008	                  CMP Max_Root_Entry
.0191f7		10 47		bpl $019240	                  BPL FAT23_ERROR_NB_ROOT_ENTRY_INDEX
.0191f9		48		pha		                  PHA ; Save the root entry index we want to read
.0191fa		a2 00 00	ldx #$0000	                  LDX #0 ; compute in witch sector the desired root entry is, 16 entry per sector so we just need to divit the sector size by 16
.0191fd						KEEP_SHIFT_ROOT_ENTRY_INDEX
.0191fd		4a		lsr a		                  LSR
.0191fe		e8		inx		                  INC X
.0191ff		e0 04 00	cpx #$0004	                  CPX #4 ; divide by 16
.019202		d0 f9		bne $0191fd	                  BNE KEEP_SHIFT_ROOT_ENTRY_INDEX
.019204		18		clc		                  CLC ; reset the carry flag potencialy set by CPX
.019205		6f 31 90 01	adc $019031	                  ADC Root_entry_Sector_index ; add the relative sector position of the rrot entry to the start root entry position shoud be 19 (0 based index)
.019209		cf 2f 90 01	cmp $01902f	                  CMP Sector_loaded_in_ram
.01920d		f0 16		beq $019225	                  BEQ FDD_SECTOR_ALREADDY_LOADDES_IN_RAM
.01920f		8f 2f 90 01	sta $01902f	                  STA Sector_loaded_in_ram ; save the new sector loaded
.019213		a9 01 00	lda #$0001	                  LDA #`FAT12_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.019216		48		pha		                  PHA
.019217		a9 00 98	lda #$9800	                  LDA #<>FAT12_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.01921a		48		pha		                  PHA
.01921b		af 2f 90 01	lda $01902f	                  LDA Sector_loaded_in_ram ; read the ROOT directory sector saved at the begining of the function
.01921f		22 42 a2 01	jsl $01a242	                  JSL IFDD_READ
.019223		fa		plx		                  PLX
.019224		fa		plx		                  PLX
.019225						FDD_SECTOR_ALREADDY_LOADDES_IN_RAM
.019225		68		pla		                  PLA ; GET the root entry FDD_INDEX
.019226		48		pha		                  PHA
.019227		29 0f 00	and #$000f	                  AND #$0F ; get only the 4 first byte to get the 16 value ofset in the root entry sector loades in ram (16 entry per sector)
.01922a		0a		asl a		                  ASL
.01922b		0a		asl a		                  ASL
.01922c		0a		asl a		                  ASL
.01922d		0a		asl a		                  ASL ; now A contain the ofset to read the root entry from
.01922e		18		clc		                  CLC
.01922f		69 00 98	adc #$9800	                  ADC #<>FAT12_ADDRESS_BUFFER_512
.019232		aa		tax		                  TAX
.019233		a9 33 90	lda #$9033	                  LDA #<>Root_entry_value
.019236		a8		tay		                  TAY
.019237		a9 1f 00	lda #$001f	                  LDA #31
.01923a		54 01 01	mvn $01,$01	                  MVN `Root_entry_value, `FAT12_ADDRESS_BUFFER_512
.01923d		68		pla		                  PLA
.01923e		80 03		bra $019243	                  BRA RETURN_IFAT12_IFAT12_GET_ROOT_ENTRY
.019240						FAT23_ERROR_NB_ROOT_ENTRY_INDEX
.019240		a9 ff ff	lda #$ffff	                  LDA #-1
.019243						RETURN_IFAT12_IFAT12_GET_ROOT_ENTRY
.019243		6b		rtl		                  RTL
.019244						IFAT12_GET_FAT_POS
.019244		af 04 90 01	lda $019004	                  LDA Nb_Of_reserved_Cluster
.019248		8f 53 90 01	sta $019053	                  STA Fat12_Sector_index
.01924c		6b		rtl		                  RTL
.01924d						IFAT_GET_FAT_ENTRY
.01924d		48		pha		                  PHA
.01924e		a2 00 00	ldx #$0000	                  LDX #0
.019251		c9 54 01	cmp #$0154	                  CMP #340
.019254		90 06		bcc $01925c	                  BCC FAT12_ENTRY_SECTOR_LOCATION_FIND
.019256						FAT12_FAT_ENTRY_NEXT_SECTOR
.019256		e8		inx		                  INC X
.019257		e9 54 01	sbc #$0154	                  SBC #340
.01925a		10 fa		bpl $019256	                  BPL FAT12_FAT_ENTRY_NEXT_SECTOR
.01925c						FAT12_ENTRY_SECTOR_LOCATION_FIND
.01925c		8a		txa		                  TXA
.01925d		6f 04 90 01	adc $019004	                  ADC Nb_Of_reserved_Cluster
.019261		cf 57 90 01	cmp $019057	                  CMP Fat12_Sector_loaded_in_ram
.019265		f0 16		beq $01927d	                  BEQ FAT12_COMPUT_OFSET_IN_CLUSTER ; dont need to load the fat sector because it's alreaddy loaded
.019267		8f 57 90 01	sta $019057	                  STA Fat12_Sector_loaded_in_ram
.01926b		a9 01 00	lda #$0001	                  LDA #`FAT12_FAT_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.01926e		48		pha		                  PHA
.01926f		a9 00 9a	lda #$9a00	                  LDA #<>FAT12_FAT_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.019272		48		pha		                  PHA
.019273		af 57 90 01	lda $019057	                  LDA Fat12_Sector_loaded_in_ram ; read the ROOT directory sector saved at the begining of the function
.019277		22 42 a2 01	jsl $01a242	                  JSL IFDD_READ
.01927b		fa		plx		                  PLX
.01927c		fa		plx		                  PLX
.01927d						FAT12_COMPUT_OFSET_IN_CLUSTER
.01927d		a3 01		lda $01,s	                  LDA 1,S
.01927f		29 01 00	and #$0001	                  AND #1
.019282		c9 00 00	cmp #$0000	                  CMP #0
.019285		68		pla		                  PLA ; get the fat entry
.019286		48		pha		                  PHA ; save it back again
.019287		d0 51		bne $0192da	                  BNE FAT12_ODD_FAT_ENTRY
.019289		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.01928d		0a		asl a		                  ASL ; A*2
.01928e		18		clc		                  CLC ; clear the carry flag
.01928f		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry ; A*3
.019293		4a		lsr a		                  LSR
.019294		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.019298		a9 00 9a	lda #$9a00	                  LDA #<>FAT12_FAT_ADDRESS_BUFFER_512
.01929b		18		clc		                  CLC
.01929c		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry
.0192a0		aa		tax		                  TAX
.0192a1		a9 55 90	lda #$9055	                  LDA #<>Fat12_next_entry
.0192a4		a8		tay		                  TAY
.0192a5		a9 00 00	lda #$0000	                  LDA #0 ; read one byte only
.0192a8		54 01 01	mvn $01,$01	                  MVN `Fat12_next_entry,`FAT12_FAT_ADDRESS_BUFFER_512
.0192ab		af 55 90 01	lda $019055	                  LDA Fat12_next_entry
.0192af		48		pha		                  PHA
.0192b0		a9 55 90	lda #$9055	                  LDA #<>Fat12_next_entry
.0192b3		a8		tay		                  TAY
.0192b4		a9 00 00	lda #$0000	                  LDA #0 ; read one byte only
.0192b7		54 01 01	mvn $01,$01	                  MVN `Fat12_next_entry,`FAT12_FAT_ADDRESS_BUFFER_512
.0192ba		af 55 90 01	lda $019055	                  LDA Fat12_next_entry
.0192be		29 0f 00	and #$000f	                  AND #$0F
.0192c1		0a		asl a		                  ASL
.0192c2		0a		asl a		                  ASL
.0192c3		0a		asl a		                  ASL
.0192c4		0a		asl a		                  ASL
.0192c5		0a		asl a		                  ASL
.0192c6		0a		asl a		                  ASL
.0192c7		0a		asl a		                  ASL
.0192c8		0a		asl a		                  ASL
.0192c9		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.0192cd		68		pla		                  PLA
.0192ce		18		clc		                  CLC
.0192cf		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry
.0192d3		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.0192d7		68		pla		                  PLA ; get the initial fat entry, Fat12_next_entry contain the next fat entry and sector to read
.0192d8		80 4f		bra $019329	                  BRA RETURN_IFAT12_GET_FAT_ENTRY
.0192da						FAT12_ODD_FAT_ENTRY
.0192da		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.0192de		0a		asl a		                  ASL ; A*2
.0192df		18		clc		                  CLC ; clear the carry flag
.0192e0		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry ; A*3
.0192e4		4a		lsr a		                  LSR
.0192e5		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.0192e9		a9 00 9a	lda #$9a00	                  LDA #<>FAT12_FAT_ADDRESS_BUFFER_512
.0192ec		18		clc		                  CLC
.0192ed		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry
.0192f1		aa		tax		                  TAX
.0192f2		a9 55 90	lda #$9055	                  LDA #<>Fat12_next_entry
.0192f5		a8		tay		                  TAY
.0192f6		a9 00 00	lda #$0000	                  LDA #0 ; read one byte only
.0192f9		54 01 01	mvn $01,$01	                  MVN `Fat12_next_entry,`FAT12_FAT_ADDRESS_BUFFER_512
.0192fc		af 55 90 01	lda $019055	                  LDA Fat12_next_entry
.019300		29 f0 00	and #$00f0	                  AND #$F0
.019303		4a		lsr a		                  LSR
.019304		4a		lsr a		                  LSR
.019305		4a		lsr a		                  LSR
.019306		4a		lsr a		                  LSR
.019307		48		pha		                  PHA ; save the low part of the fat entry
.019308		a9 55 90	lda #$9055	                  LDA #<>Fat12_next_entry
.01930b		a8		tay		                  TAY
.01930c		a9 00 00	lda #$0000	                  LDA #0 ; read one byte only
.01930f		54 01 01	mvn $01,$01	                  MVN `Fat12_next_entry,`FAT12_FAT_ADDRESS_BUFFER_512
.019312		af 55 90 01	lda $019055	                  LDA Fat12_next_entry
.019316		0a		asl a		                  ASL
.019317		0a		asl a		                  ASL
.019318		0a		asl a		                  ASL
.019319		0a		asl a		                  ASL
.01931a		8f 55 90 01	sta $019055	                  STA Fat12_next_entry ; save the low fat entry
.01931e		68		pla		                  PLA ; get the low paart
.01931f		18		clc		                  CLC
.019320		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry ; add the low part to the hi part
.019324		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.019328		68		pla		                  PLA ; get the initial fat entry, Fat12_next_entry contain the next fat entry and sector to read
.019329						RETURN_IFAT12_GET_FAT_ENTRY
.019329		6b		rtl		                  RTL
.01932a						ILOAD_FILE
.01932a		22 60 90 01	jsl $019060	                  JSL IFAT12_READ_BOOT_SECTOR
.01932e		c9 01 00	cmp #$0001	                  CMP #$0001
.019331		f0 05		beq $019338	                  BEQ ILOAD_FILE_FAT_12_BOOT_SECTOR_PARSING_OK
.019333		a9 ff ff	lda #$ffff	                  LDA #-1
.019336		80 4d		bra $019385	                  BRA ILOAD_FILE_RETURN_ERROR_temp
.019338						ILOAD_FILE_FAT_12_BOOT_SECTOR_PARSING_OK
.019338		22 c9 91 01	jsl $0191c9	                  JSL IFAT12_GET_ROOT_DIR_POS
.01933c		c2 30		rep #$30	                REP #$30        ; set A&X long
.01933e		a9 00 00	lda #$0000	                  LDA #$00 ; sellect the first entry
.019341		48		pha		                  PHA
.019342						ILOAD_FILE_READ_NEXT_ROOT_ENTRY
.019342		22 f1 91 01	jsl $0191f1	                  JSL IFAT12_GET_ROOT_ENTRY
.019346		af 3e 90 01	lda $01903e	                  LDA Root_entry_value + 11 ; get the flag Byte to test if it a file or a directory
.01934a		29 10 00	and #$0010	                  AND #$10
.01934d		c9 10 00	cmp #$0010	                  CMP #$10
.019350		d0 0b		bne $01935d	                  BNE ILOAD_FILE_ENTRY ; if equal we read a directory so just read the next one
.019352						ILOAD_FILE_STRING_NOT_MATCHED
.019352		68		pla		                  PLA   ; get the actual root entry
.019353		cf 08 90 01	cmp $019008	                  CMP Max_Root_Entry ; prevent to loop forever so exit
.019357		f0 26		beq $01937f	                  BEQ ILOAD_FILE_NO_FILE_MATCHED
.019359		1a		inc a		                  INC A ; sellect the next root entry
.01935a		48		pha		                  PHA   ; save the next root entry to read
.01935b		80 e5		bra $019342	                  BRA ILOAD_FILE_READ_NEXT_ROOT_ENTRY
.01935d						ILOAD_FILE_ENTRY
.01935d		c2 30		rep #$30	                REP #$30        ; set A&X long
.01935f		68		pla		                  PLA   ; get the actual root entry
.019360		cf 08 90 01	cmp $019008	                  CMP Max_Root_Entry ; prevent to loop forever so exit
.019364		f0 19		beq $01937f	                  BEQ ILOAD_FILE_NO_FILE_MATCHED
.019366		1a		inc a		                  INC A ; sellect the next root entry
.019367		48		pha		                  PHA   ; save the next root entry to read
.019368		a2 ff ff	ldx #$ffff	                  LDX #-1
.01936b		a0 ff ff	ldy #$ffff	                  LDY #-1
.01936e						ILOAD_FILE_CHAR_MATCHING
.01936e		e8		inx		                  INC X
.01936f		c8		iny		                  INC Y
.019370		e0 0b 00	cpx #$000b	                  CPX #11 ; FAT12 file or folder size
.019373		f0 12		beq $019387	                  BEQ ILOAD_FILE_STRING_MATCHED
.019375		b3 06		lda ($06,s),y	                  LDA (6,S),Y ; load the "y" char file name we want to read
.019377		df 33 90 01	cmp $019033,x	                  CMP Root_entry_value,X
.01937b		f0 f1		beq $01936e	                  BEQ ILOAD_FILE_CHAR_MATCHING
.01937d		80 d3		bra $019352	                  BRA ILOAD_FILE_STRING_NOT_MATCHED
.01937f						ILOAD_FILE_NO_FILE_MATCHED
.01937f		68		pla		                  PLA
.019380		a9 fe ff	lda #$fffe	                  LDA #-2
.019383		80 62		bra $0193e7	                  BRA ILOAD_FILE_RETURN_ERROR
.019385						ILOAD_FILE_RETURN_ERROR_temp
.019385		80 60		bra $0193e7	                  BRA ILOAD_FILE_RETURN_ERROR
.019387						ILOAD_FILE_STRING_MATCHED
.019387		68		pla		                  PLA
.019388		af 4d 90 01	lda $01904d	                  LDA Root_entry_value + 26 ; get the first fat entry for the fil from the root directory entry we matched
.01938c		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.019390						ILOAD_FILE_Read_next_sector
.019390		a3 0a		lda $0a,s	                  LDA 10,S ; load the byte nb 3 (bank byte)
.019392		48		pha		                  PHA
.019393		a3 0c		lda $0c,s	                  LDA 12,S ; load the low world part of the buffer address
.019395		48		pha		                  PHA
.019396		af 55 90 01	lda $019055	                  LDA Fat12_next_entry ; sector to read
.01939a		69 21 00	adc #$0021	                  ADC #1+9+9+14 ; skip the reserved sector ,  the 2 fat and the root sector
.01939d		22 42 a2 01	jsl $01a242	                  JSL IFDD_READ
.0193a1		fa		plx		                  PLX
.0193a2		fa		plx		                  PLX
.0193a3		a3 0c		lda $0c,s	                  LDA 12,S ; load the low world part of the buffer address
.0193a5		18		clc		                  CLC
.0193a6		a9 00 00	lda #$0000	                  LDA #0
.0193a9		48		pha		                  PHA ; save the conter vaue
.0193aa		48		pha		                  PHA ; save the
.0193ab						ILOAD_FILE_Add_More_Sector_Per_Cluster
.0193ab		a3 04		lda $04,s	                  LDA 4,S ; load the Byte per cluster value
.0193ad		6f 00 90 01	adc $019000	                  ADC Byte_Per_Sector
.0193b1		83 04		sta $04,s	                  STA 4,S
.0193b3		af 02 90 01	lda $019002	                  LDA Sector_Per_Cluster
.0193b7		c3 02		cmp $02,s	                  CMP 2,S
.0193b9		f0 07		beq $0193c2	                  BEQ ILOAD_FILE_Read_Next_Data
.0193bb		a3 02		lda $02,s	                  LDA 2,S
.0193bd		1a		inc a		                  INC A
.0193be		83 02		sta $02,s	                  STA 2,S
.0193c0		80 e9		bra $0193ab	                  BRA ILOAD_FILE_Add_More_Sector_Per_Cluster
.0193c2						ILOAD_FILE_Read_Next_Data
.0193c2		fa		plx		                  PLX ; removing the compter valuer from the stack
.0193c3		a3 0e		lda $0e,s	                  LDA 14,S ; load the low world part of the buffer address
.0193c5		18		clc		                  CLC
.0193c6		63 02		adc $02,s	                  ADC 2,S
.0193c8		90 09		bcc $0193d3	                  BCC ILOAD_FILE_New_Buiffer_Address_computed
.0193ca		83 0e		sta $0e,s	                  STA 14,S ; Save the low world part of the buffer address
.0193cc		a3 0c		lda $0c,s	                  LDA 12,S ; load the byte nb 3 (bank byte)
.0193ce		69 01 00	adc #$0001	                  ADC #1
.0193d1		83 0c		sta $0c,s	                  STA 12,S ; Save the byte nb 3 (bank byte)
.0193d3						ILOAD_FILE_New_Buiffer_Address_computed
.0193d3		fa		plx		                  PLX ; get the Byte per cluster count out of the stack
.0193d4		af 55 90 01	lda $019055	                  LDA Fat12_next_entry ; sector to read
.0193d8		22 4d 92 01	jsl $01924d	                  JSL IFAT_GET_FAT_ENTRY
.0193dc		af 55 90 01	lda $019055	                  LDA Fat12_next_entry
.0193e0		c9 fe 0f	cmp #$0ffe	                  CMP #$FFE
.0193e3		b0 02		bcs $0193e7	                  BCS ILOAD_FILE_END_OF_FILE
.0193e5		80 a9		bra $019390	                  BRA ILOAD_FILE_Read_next_sector
.0193e7						ILOAD_FILE_END_OF_FILE
.0193e7						ILOAD_FILE_RETURN_ERROR
.0193e7		6b		rtl		                  RTL

;******  Return to file: kernel.asm


;******  Processing file: uart.s

=$af13f8					UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8					UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.160000						UART_SELECT
.160000		08		php		            PHP
.160001		c2 20		rep #$20	                REP #$20        ; set A long
.160003		c9 02 00	cmp #$0002	            CMP #2
.160006		f0 07		beq $16000f	            BEQ is_COM2
.160008		c2 20		rep #$20	                REP #$20        ; set A long
.16000a		a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.16000d		80 05		bra $160014	            BRA setaddr
.16000f						is_COM2
.16000f		c2 20		rep #$20	                REP #$20        ; set A long
.160011		a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.160014		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.160018		e2 20		sep #$20	                SEP #$20        ; set A short
.16001a		a9 af		lda #$af	            LDA #`UART1_BASE
.16001c		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.160020		28		plp		            PLP
.160021		6b		rtl		            RTL
.160022						UART_SETBPS
.160022		08		php		            PHP
.160023		0b		phd		            PHD
.160024		48		pha		                PHA             ; begin setdp macro
.160025		08		php			PHP
.160026		c2 20		rep #$20	                REP #$20        ; set A long
.160028		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.16002b		5b		tcd		                TCD
.16002c		28		plp			PLP
.16002d		68		pla		                PLA             ; end setdp macro
.16002e		c2 30		rep #$30	                REP #$30        ; set A&X long
.160030		48		pha		            PHA
.160031		e2 20		sep #$20	                SEP #$20        ; set A short
.160033		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.160036		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.160038		09 80		ora #$80	            ORA #LCR_DLB
.16003a		97 00		sta [$0700],y	            STA [CURRUART],Y
.16003c		c2 20		rep #$20	                REP #$20        ; set A long
.16003e		68		pla		            PLA
.16003f		a0 00 00	ldy #$0000	            LDY #UART_DLL
.160042		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.160044		e2 20		sep #$20	                SEP #$20        ; set A short
.160046		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.160049		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.16004b		49 80		eor #$80	            EOR #LCR_DLB
.16004d		97 00		sta [$0700],y	            STA [CURRUART],Y
.16004f		2b		pld		            PLD
.160050		28		plp		            PLP
.160051		6b		rtl		            RTL
.160052						UART_SETLCR
.160052		08		php		            PHP
.160053		0b		phd		            PHD
.160054		48		pha		                PHA             ; begin setdp macro
.160055		08		php			PHP
.160056		c2 20		rep #$20	                REP #$20        ; set A long
.160058		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.16005b		5b		tcd		                TCD
.16005c		28		plp			PLP
.16005d		68		pla		                PLA             ; end setdp macro
.16005e		e2 20		sep #$20	                SEP #$20        ; set A short
.160060		c2 10		rep #$10	                REP #$10        ; set X long
.160062		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.160064		a0 03 00	ldy #$0003	            LDY #UART_LCR
.160067		97 00		sta [$0700],y	            STA [CURRUART],Y
.160069		2b		pld		            PLD
.16006a		28		plp		            PLP
.16006b		6b		rtl		            RTL
.16006c						UART_INIT
.16006c		08		php		            PHP
.16006d		0b		phd		            PHD
.16006e		c2 30		rep #$30	                REP #$30        ; set A&X long
.160070		48		pha		                PHA             ; begin setdp macro
.160071		08		php			PHP
.160072		c2 20		rep #$20	                REP #$20        ; set A long
.160074		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.160077		5b		tcd		                TCD
.160078		28		plp			PLP
.160079		68		pla		                PLA             ; end setdp macro
.16007a		a9 01 00	lda #$0001	            LDA #UART_115200
.16007d		22 22 00 16	jsl $160022	            JSL UART_SETBPS
.160081		e2 20		sep #$20	                SEP #$20        ; set A short
.160083		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.160085		22 52 00 16	jsl $160052	            JSL UART_SETLCR
.160089		a9 e1		lda #$e1	            LDA #%11100001
.16008b		a0 02 00	ldy #$0002	            LDY #UART_FCR
.16008e		97 00		sta [$0700],y	            STA [CURRUART],Y
.160090		2b		pld		            PLD
.160091		28		plp		            PLP
.160092		6b		rtl		            RTL
.160093						UART_HASBYT
.160093						UART_GETC
.160093						UART_PUTC
.160093		08		php		            PHP
.160094		0b		phd		            PHD
.160095		c2 30		rep #$30	                REP #$30        ; set A&X long
.160097		48		pha		                PHA             ; begin setdp macro
.160098		08		php			PHP
.160099		c2 20		rep #$20	                REP #$20        ; set A long
.16009b		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.16009e		5b		tcd		                TCD
.16009f		28		plp			PLP
.1600a0		68		pla		                PLA             ; end setdp macro
.1600a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1600a3		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.1600a4		a0 05 00	ldy #$0005	            LDY #UART_LSR
.1600a7		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.1600a9		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.1600ab		f0 fa		beq $1600a7	            BEQ wait_putc
.1600ad		68		pla		            PLA
.1600ae		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.1600b1		97 00		sta [$0700],y	            STA [CURRUART],Y
.1600b3		2b		pld		            PLD
.1600b4		28		plp		            PLP
.1600b5		6b		rtl		            RTL
.1600b6						UART_PUTS
.1600b6		08		php		            PHP
.1600b7		e2 20		sep #$20	                SEP #$20        ; set A short
.1600b9		bd 00 00	lda $af0000,x	put_loop    LDA #0,B,X
.1600bc		f0 07		beq $1600c5	            BEQ done
.1600be		22 93 00 16	jsl $160093	            JSL UART_PUTC
.1600c2		e8		inx		            INX
.1600c3		80 f4		bra $1600b9	            BRA put_loop
.1600c5		28		plp		done        PLP
.1600c6		6b		rtl		            RTL
.1600c7						UART_PUTHEX
.1600c7		08		php		            PHP
.1600c8		48		pha		            PHA               ; save the value before converting the High part into ASCII
.1600c9		4a		lsr a		            LSR A             ; Extracting the high part of the byte
.1600ca		4a		lsr a		            LSR A
.1600cb		4a		lsr a		            LSR A
.1600cc		4a		lsr a		            LSR A
.1600cd		29 0f		and #$0f	            AND #$F
.1600cf		aa		tax		            LDX A
.1600d0		bf a3 18 19	lda $1918a3,x	            LDA hex_digits,x
.1600d4		a2 00 00	ldx #$0000	            LDX #0
.1600d7		22 93 00 16	jsl $160093	            JSL UART_PUTC
.1600db		68		pla		            PLA             ; get the original value out of the stack
.1600dc		29 0f		and #$0f	            AND #$F         ; Extracting the low part of the byte
.1600de		aa		tax		            LDX A
.1600df		bf a3 18 19	lda $1918a3,x	            LDA hex_digits,x
.1600e3		a2 00 00	ldx #$0000	            LDX #0
.1600e6		22 93 00 16	jsl $160093	            JSL UART_PUTC
.1600ea		28		plp		            PLP
.1600eb		6b		rtl		            RTL
.1600ec						UART_PUTHEX_2
.1600ec		08		php		            PHP
.1600ed		c2 30		rep #$30	                REP #$30        ; set A&X long
.1600ef		da		phx		            PHX
.1600f0		48		pha		            PHA             ; save the value before converting the High part into ASCII
.1600f1		a9 00 00	lda #$0000	            LDA #$0
.1600f4		e2 20		sep #$20	                SEP #$20        ; set A short
.1600f6		a3 01		lda $01,s	            LDA #1, S       ; get the original value out of the stack
.1600f8		4a		lsr a		            LSR A             ; Extracting the high part of the byte
.1600f9		4a		lsr a		            LSR A
.1600fa		4a		lsr a		            LSR A
.1600fb		4a		lsr a		            LSR A
.1600fc		29 0f		and #$0f	            AND #$F
.1600fe		aa		tax		            LDX A
.1600ff		bf a3 18 19	lda $1918a3,x	            LDA hex_digits,x
.160103		a2 00 00	ldx #$0000	            LDX #$0
.160106		22 93 00 16	jsl $160093	            JSL UART_PUTC
.16010a		a3 01		lda $01,s	            LDA #1, S       ; get the original value out of the stack
.16010c		29 0f		and #$0f	            AND #$F         ; Extracting the low part of the byte
.16010e		aa		tax		            LDX A
.16010f		bf a3 18 19	lda $1918a3,x	            LDA hex_digits,x
.160113		a2 00 00	ldx #$0000	            LDX #$0
.160116		22 93 00 16	jsl $160093	            JSL UART_PUTC
.16011a		c2 30		rep #$30	                REP #$30        ; set A&X long
.16011c		68		pla		            PLA
.16011d		fa		plx		            PLX
.16011e		28		plp		            PLP
.16011f		6b		rtl		            RTL

;******  Return to file: kernel.asm


;******  Processing file: kernel_jumptable.asm

.190000		5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.190004		5c 8b 12 19	jmp $19128b	RESTORE         JML IRESTORE
.190008		5c 65 07 19	jmp $190765	BREAK           JML IBREAK
.19000c		5c ac 07 19	jmp $1907ac	READY           JML IREADY
.190010		5c 8c 12 19	jmp $19128c	SCINIT          JML ISCINIT
.190014		5c 8d 12 19	jmp $19128d	IOINIT          JML IIOINIT
.190018		5c f1 07 19	jmp $1907f1	PUTC            JML IPUTC
.19001c		5c da 07 19	jmp $1907da	PUTS            JML IPUTS
.190020		5c 1e 08 19	jmp $19081e	PUTB            JML IPUTB
.190024		5c 8e 12 19	jmp $19128e	PUTBLOCK        JML IPUTBLOCK
.190028		5c 8f 12 19	jmp $19128f	SETLFS          JML ISETLFS
.19002c		5c 90 12 19	jmp $191290	SETNAM          JML ISETNAM
.190030		5c 91 12 19	jmp $191291	OPEN            JML IOPEN
.190034		5c 92 12 19	jmp $191292	CLOSE           JML ICLOSE
.190038		5c 93 12 19	jmp $191293	SETIN           JML ISETIN
.19003c		5c 94 12 19	jmp $191294	SETOUT          JML ISETOUT
.190040		5c 95 12 19	jmp $191295	GETB            JML IGETB
.190044		5c 96 12 19	jmp $191296	GETBLOCK        JML IGETBLOCK
.190048		5c 97 12 19	jmp $191297	GETCH           JML IGETCH
.19004c		5c d0 07 19	jmp $1907d0	GETCHW          JML IGETCHW
.190050		5c c7 07 19	jmp $1907c7	GETCHE          JML IGETCHE
.190054		5c 98 12 19	jmp $191298	GETS            JML IGETS
.190058		5c 99 12 19	jmp $191299	GETLINE         JML IGETLINE
.19005c		5c 9a 12 19	jmp $19129a	GETFIELD        JML IGETFIELD
.190060		5c 9b 12 19	jmp $19129b	TRIM            JML ITRIM
.190064		5c 9c 12 19	jmp $19129c	PRINTC          JML IPRINTC
.190068		5c 9d 12 19	jmp $19129d	PRINTS          JML IPRINTS
.19006c		5c 1f 08 19	jmp $19081f	PRINTCR         JML IPRINTCR
.190070		5c 9e 12 19	jmp $19129e	PRINTF          JML IPRINTF
.190074		5c 9f 12 19	jmp $19129f	PRINTI          JML IPRINTI
.190078		5c 0a 09 19	jmp $19090a	PRINTH          JML IPRINTH
.19007c		5c a0 12 19	jmp $1912a0	PRINTAI         JML IPRINTAI
.190080		5c a1 12 19	jmp $1912a1	PRINTAH         JML IPRINTAH
.190084		5c ba 08 19	jmp $1908ba	LOCATE          JML ILOCATE
.190088		5c a2 12 19	jmp $1912a2	PUSHKEY         JML IPUSHKEY
.19008c		5c a3 12 19	jmp $1912a3	PUSHKEYS        JML IPUSHKEYS
.190090		5c 40 08 19	jmp $190840	CSRRIGHT        JML ICSRRIGHT
.190094		5c a4 12 19	jmp $1912a4	CSRLEFT         JML ICSRLEFT
.190098		5c 95 08 19	jmp $190895	CSRUP           JML ICSRUP
.19009c		5c b9 08 19	jmp $1908b9	CSRDOWN         JML ICSRDOWN
.1900a0		5c a5 12 19	jmp $1912a5	CSRHOME         JML ICSRHOME
.1900a4		5c f0 08 19	jmp $1908f0	SCROLLUP        JML ISCROLLUP
.1900a8		5c 38 09 19	jmp $190938	CLRSCREEN       JML ICLRSCREEN
.1900ac		5c 9f 09 19	jmp $19099f	INITCHLUT	      JML IINITCHLUT
.1900b0		5c 9a 0c 19	jmp $190c9a	INITSUPERIO	    JML IINITSUPERIO
.1900b4		5c 99 0d 19	jmp $190d99	INITKEYBOARD    JML IINITKEYBOARD
.1900b8		5c 85 0e 19	jmp $190e85	INITRTC         JML IINITRTC
.1900bc		5c bc 0e 19	jmp $190ebc	TESTSID         JML ITESTSID
.1900c0		5c e7 0e 19	jmp $190ee7	TESTMATH        JML ITESTMATH
.1900c4		5c 79 0c 19	jmp $190c79	INITCURSOR      JML IINITCURSOR
.1900c8		5c 4e 0c 19	jmp $190c4e	INITFONTSET     JML IINITFONTSET
.1900cc		5c ce 09 19	jmp $1909ce	INITGAMMATABLE  JML IINITGAMMATABLE
.1900d0		5c ee 09 19	jmp $1909ee	INITALLLUT      JML IINITALLLUT
.1900d4		5c b0 0a 19	jmp $190ab0	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1900d8		5c d9 0a 19	jmp $190ad9	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1900dc		5c 10 0b 19	jmp $190b10	INITTILEMODE    JML IINITTILEMODE
.1900e0		5c 11 0b 19	jmp $190b11	INITSPRITE      JML IINITSPRITE
.1900e4		5c 0e 0f 19	jmp $190f0e	INITCODEC       JML IINITCODEC
.1900e8		5c 57 0f 19	jmp $190f57	RESETCODEC      JML IRESETCODEC
.1900ec		5c c5 0f 19	jmp $190fc5	BMP_PARSER      JML IBMP_PARSER
.1900f0		5c 7a 0f 19	jmp $190f7a	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1900f4		5c af 24 19	jmp $1924af	OPL2_TONE_TEST  JML IOPL2_TONE_TEST

;******  Return to file: kernel.asm

.190400						IBOOT
.190400		18		clc		                CLC           ; clear the carry flag
.190401		fb		xce		                XCE           ; move carry to emulation flag.
.190402		78		sei		                SEI
.190403		c2 30		rep #$30	                REP #$30        ; set A&X long
.190405		a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.190408		1b		tcs		                TAS
.190409		48		pha		                PHA             ; begin setdp macro
.19040a		08		php			PHP
.19040b		c2 20		rep #$20	                REP #$20        ; set A long
.19040d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190410		5b		tcd		                TCD
.190411		28		plp			PLP
.190412		68		pla		                PLA             ; end setdp macro
.190413		e2 20		sep #$20	                SEP #$20        ; set A short
.190415		a2 00 00	ldx #$0000	                LDX #$0000
.190418		a9 00		lda #$00	                LDA #$00
.19041a						CLEAR_MEM_LOOP
.19041a		95 00		sta $00,x	                STA $0000, X
.19041c		e8		inx		                INX
.19041d		e0 00 04	cpx #$0400	                CPX #$0400
.190420		d0 f8		bne $19041a	                BNE CLEAR_MEM_LOOP
.190422		ea		nop		                NOP
.190423		a9 ff		lda #$ff	                LDA #$FF
.190425		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190429		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.19042d		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.190431		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190435		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190439		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19043d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19043f		a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.190442		85 0c		sta $0c		                STA SCREENBEGIN
.190444		e2 20		sep #$20	                SEP #$20        ; set A short
.190446		a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.190448		85 0e		sta $0e		                STA SCREENBEGIN+2
.19044a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19044c		a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.19044f		85 17		sta $17		                STA CURSORPOS
.190451		e2 20		sep #$20	                SEP #$20        ; set A short
.190453		a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.190455		85 19		sta $19		                STA CURSORPOS+2
.190457		a9 00		lda #$00	                LDA #$00
.190459		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.19045d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19045f		a2 48 00	ldx #$0048	                LDX #72
.190462		86 0f		stx $0f		                STX COLS_VISIBLE
.190464		a0 38 00	ldy #$0038	                LDY #56
.190467		84 13		sty $13		                STY LINES_VISIBLE
.190469		a2 80 00	ldx #$0080	                LDX #128
.19046c		86 11		stx $11		                STX COLS_PER_LINE
.19046e		a0 40 00	ldy #$0040	                LDY #64
.190471		84 15		sty $15		                STY LINES_MAX
.190473		22 e4 00 19	jsl $1900e4	                JSL INITCODEC
.190477		22 b0 00 19	jsl $1900b0	                JSL INITSUPERIO
.19047b		22 b8 00 19	jsl $1900b8	                JSL INITRTC
.19047f		22 cc 00 19	jsl $1900cc	                JSL INITGAMMATABLE
.190483		22 d0 00 19	jsl $1900d0	                JSL INITALLLUT
.190487		22 ac 00 19	jsl $1900ac	                JSL INITCHLUT
.19048b		22 c4 00 19	jsl $1900c4	                JSL INITCURSOR
.19048f		22 d4 00 19	jsl $1900d4	                JSL INITVKYTXTMODE
.190493		22 4e 0c 19	jsl $190c4e	                JSL IINITFONTSET
.190497		22 38 09 19	jsl $190938	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.19049b		22 67 09 19	jsl $190967	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.19049f		c2 30		rep #$30	                REP #$30        ; set A&X long
.1904a1						greet
.1904a1		48		pha		                PHA             ; begin setdbr macro
.1904a2		08		php		                PHP
.1904a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1904a5		a9 19		lda #$19		LDA #`greet_msg
.1904a7		48		pha		                PHA
.1904a8		ab		plb		                PLB
.1904a9		28		plp		                PLP
.1904aa		68		pla		                PLA             ; end setdbr macro
.1904ab		a2 a8 12	ldx #$12a8	                LDX #<>greet_msg
.1904ae		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print the first line
.1904b2		a2 91 13	ldx #$1391	                LDX #<>old_pc_style_stat
.1904b5		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print the first line
.1904b9		48		pha		                PHA             ; begin setdp macro
.1904ba		08		php			PHP
.1904bb		c2 20		rep #$20	                REP #$20        ; set A long
.1904bd		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1904c0		5b		tcd		                TCD
.1904c1		28		plp			PLP
.1904c2		68		pla		                PLA             ; end setdp macro
.1904c3		22 b4 00 19	jsl $1900b4	                JSL INITKEYBOARD ;
.1904c7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1904c9		22 f4 00 19	jsl $1900f4	                JSL OPL2_TONE_TEST
.1904cd		c2 20		rep #$20	                REP #$20        ; set A long
.1904cf		a9 01 00	lda #$0001	                LDA #1              ; Select COM1
.1904d2		22 00 00 16	jsl $160000	                JSL UART_SELECT
.1904d6		22 6c 00 16	jsl $16006c	                JSL UART_INIT       ; And initialize it
.1904da		a2 19 18	ldx #$1819	                LDX #<>ready_msg
.1904dd		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.1904e1		a9 0a 00	lda #$000a	                LDA #$A
.1904e4		22 93 00 16	jsl $160093	                JSL UART_PUTC
.1904e8		a9 0d 00	lda #$000d	                LDA #$D
.1904eb		22 93 00 16	jsl $160093	                JSL UART_PUTC
.1904ef		48		pha		                PHA             ; begin setdbr macro
.1904f0		08		php		                PHP
.1904f1		e2 20		sep #$20	                SEP #$20        ; set A short
.1904f3		a9 19		lda #$19		LDA #`minus_line
.1904f5		48		pha		                PHA
.1904f6		ab		plb		                PLB
.1904f7		28		plp		                PLP
.1904f8		68		pla		                PLA             ; end setdbr macro
.1904f9		a2 ec 18	ldx #$18ec	                LDX #<>minus_line
.1904fc		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.190500		22 3c a9 01	jsl $01a93c	                JSL IFDD_PRINT_REG  ; read the FDD register value
.190504		c2 30		rep #$30	                REP #$30        ; set A&X long
.190506		22 8e a1 01	jsl $01a18e	                JSL IFDD_INIT_AT
.19050a		22 3c a9 01	jsl $01a93c	                JSL IFDD_PRINT_REG  ; read the FDD register value
.19050e						seek_loop
.19050e		a5 00		lda $00		                LDA 0
.190510		48		pha		                PHA
.190511		e2 20		sep #$20	                SEP #$20        ; set A short
.190513		48		pha		                PHA             ; begin setdbr macro
.190514		08		php		                PHP
.190515		e2 20		sep #$20	                SEP #$20        ; set A short
.190517		a9 af		lda #$af		LDA #`$AFA200
.190519		48		pha		                PHA
.19051a		ab		plb		                PLB
.19051b		28		plp		                PLP
.19051c		68		pla		                PLA             ; end setdbr macro
.19051d		a2 00 00	ldx #$0000	                LDX #0
.190520		a9 00		lda #$00	                LDA #0
.190522		9d 00 a0	sta $afa000,x	  ERAZE_SCREEN_1  STA $AFA000 ,X
.190525		e8		inx		                INX
.190526		e0 00 20	cpx #$2000	                CPX #$2000
.190529		d0 f7		bne $190522	                BNE ERAZE_SCREEN_1
.19052b		48		pha		                PHA             ; begin setdbr macro
.19052c		08		php		                PHP
.19052d		e2 20		sep #$20	                SEP #$20        ; set A short
.19052f		a9 af		lda #$af		LDA #`$AFA200
.190531		48		pha		                PHA
.190532		ab		plb		                PLB
.190533		28		plp		                PLP
.190534		68		pla		                PLA             ; end setdbr macro
.190535		a2 00 00	ldx #$0000	                LDX #0
.190538		a9 00		lda #$00	seek_loop_2     LDA #0
.19053a		9d 00 a2	sta $afa200,x	ERAZE_SCREEN_2  STA $AFA200 ,X
.19053d		e8		inx		                INX
.19053e		e0 00 20	cpx #$2000	                CPX #$2000
.190541		d0 f7		bne $19053a	                BNE ERAZE_SCREEN_2
.190543		a9 00		lda #$00	                LDA #0                      ; Floppy driver to work with and side
.190545		a2 01 00	ldx #$0001	                LDX #1                      ; MFM:1/FM:0
.190548		22 4c a5 01	jsl $01a54c	                JSL IFDD_READ_ID
.19054c		22 ff a8 01	jsl $01a8ff	                JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.190550		22 55 a4 01	jsl $01a455	                JSL IFDD_SENS_INTERRUPT_STATUS
.190554		22 ff a8 01	jsl $01a8ff	                JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.190558		a9 01		lda #$01	                LDA #$1                     ; ND ("1":non-DMA mode / "0":DMA mode)
.19055a		68		pla		                PLA
.19055b		a9 00		lda #$00	                LDA #$0                     ; HLT (Head Load Time)
.19055d		68		pla		                PLA
.19055e		a9 00		lda #$00	                LDA #$0                     ; HUT (Head Unload Time)
.190560		68		pla		                PLA
.190561		a9 00		lda #$00	                LDA #$0                     ; SRT (Step Rate Time)
.190563		68		pla		                PLA
.190564		22 b1 a4 01	jsl $01a4b1	                JSL IFDD_SPECIFY
.190568		48		pha		                PHA
.190569		48		pha		                PHA
.19056a		48		pha		                PHA
.19056b		48		pha		                PHA
.19056c		22 ff a8 01	jsl $01a8ff	                JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.190570		a9 00		lda #$00	                LDA #0                      ; Floppy driver to work with and side
.190572		a2 01 00	ldx #$0001	                LDX #1                      ; MFM:1/FM:0
.190575		22 4c a5 01	jsl $01a54c	                JSL IFDD_READ_ID
.190579		22 55 a4 01	jsl $01a455	                JSL IFDD_SENS_INTERRUPT_STATUS
.19057d		a9 00		lda #$00	                LDA #0            ; Sellect the floppy disc drive 0
.19057f		22 1b a4 01	jsl $01a41b	                JSL IFDD_RECALIBRATE
.190583		22 ff a8 01	jsl $01a8ff	                JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.190587		22 55 a4 01	jsl $01a455	                JSL IFDD_SENS_INTERRUPT_STATUS
.19058b		22 ff a8 01	jsl $01a8ff	                JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.19058f		e2 20		sep #$20	                SEP #$20        ; set A short
.190591		a9 00		lda #$00	                LDA #$0                    ; R (Sector Adress)
.190593		68		pla		                PLA
.190594		a9 00		lda #$00	                LDA #$0                    ; H (Head Address)
.190596		68		pla		                PLA
.190597		a9 00		lda #$00	                LDA #$0                    ; C (Cylender Adress)
.190599		68		pla		                PLA
.19059a		a9 aa		lda #$aa	                LDA #$AA                    ; D (Byte filler)
.19059c		68		pla		                PLA
.19059d		a9 54		lda #$54	                LDA #$54                    ; GPL (Gap3)
.19059f		68		pla		                PLA
.1905a0		a9 09		lda #$09	                LDA #$9                    ; SC (Sector Per Cylender)
.1905a2		68		pla		                PLA
.1905a3		a9 02		lda #$02	                LDA #$2                    ; N (Byte per sector)
.1905a5		68		pla		                PLA
.1905a6		a9 00		lda #$00	                LDA #$0                    ; HDS/DS1-DS0 (Head DRIVE1-Drive0)
.1905a8		68		pla		                PLA
.1905a9		a9 01		lda #$01	                LDA #$1                    ; MFM
.1905ab		68		pla		                PLA
.1905ac		a9 ff		lda #$ff	                LDA #$FF
.1905ae		48		pha		                PHA
.1905af		48		pha		                PHA
.1905b0		48		pha		                PHA
.1905b1		48		pha		                PHA
.1905b2		48		pha		                PHA
.1905b3		48		pha		                PHA
.1905b4		48		pha		                PHA
.1905b5		48		pha		                PHA
.1905b6		48		pha		                PHA
.1905b7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1905b9		a2 88 13	ldx #$1388	                LDX #5000
.1905bc		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.1905c0		e2 20		sep #$20	                SEP #$20        ; set A short
.1905c2		a5 00		lda $00		                LDA 0
.1905c4		a2 01 00	ldx #$0001	                LDX #1                      ; MFM:1/FM:0
.1905c7		22 4c a5 01	jsl $01a54c	                JSL IFDD_READ_ID
.1905cb		a2 d0 07	ldx #$07d0	                LDX #2000
.1905ce		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.1905d2		22 3c a9 01	jsl $01a93c	                JSL IFDD_PRINT_REG
.1905d6		a2 d0 07	ldx #$07d0	                LDX #2000
.1905d9		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.1905dd		22 55 a4 01	jsl $01a455	                JSL IFDD_SENS_INTERRUPT_STATUS
.1905e1		a2 00 00	ldx #$0000	                LDX #$00
.1905e4		22 55 a4 01	jsl $01a455	                JSL IFDD_SENS_INTERRUPT_STATUS
.1905e8		a2 d0 07	ldx #$07d0	                LDX #2000
.1905eb		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.1905ef		a3 01		lda $01,s	                LDA #1, S            ; read the next sector
.1905f1		1a		inc a		                INC A
.1905f2		83 01		sta $01,s	                STA #1, S
.1905f4		22 3c a9 01	jsl $01a93c	                JSL IFDD_PRINT_REG
.1905f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1905fa		a9 00		lda #$00	                LDA #0
.1905fc		a2 3c 00	ldx #$003c	                LDX #60
.1905ff		22 03 a5 01	jsl $01a503	                JSL IFDD_SEEK
.190603		a2 20 4e	ldx #$4e20	                LDX #20000
.190606		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.19060a		a9 00		lda #$00	                LDA #0            ; Sellect the floppy disc drive 0
.19060c		22 1b a4 01	jsl $01a41b	                JSL IFDD_RECALIBRATE
.190610		82 25 ff	brl $190538	                BRL seek_loop_2
.190613		22 3c a9 01	jsl $01a93c	                JSL IFDD_PRINT_REG  ; read the FDD register value
.190617		c2 30		rep #$30	                REP #$30        ; set A&X long
.190619		a2 20 4e	ldx #$4e20	                LDX #20000
.19061c		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.190620		22 3c a9 01	jsl $01a93c	                JSL IFDD_PRINT_REG  ; read the FDD register value
.190624		c2 30		rep #$30	                REP #$30        ; set A&X long
.190626		a2 f4 01	ldx #$01f4	                LDX #500
.190629		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.19062d		22 3c a9 01	jsl $01a93c	                JSL IFDD_PRINT_REG  ; read the FDD register value
.190631		c2 30		rep #$30	                REP #$30        ; set A&X long
.190633		a2 20 4e	ldx #$4e20	                LDX #20000
.190636		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.19063a		e2 20		sep #$20	                SEP #$20        ; set A short
.19063c		a9 00		lda #$00	                LDA #0
.19063e		a2 0f 00	ldx #$000f	                LDX #15
.190641		22 03 a5 01	jsl $01a503	                JSL IFDD_SEEK
.190645		22 3c a9 01	jsl $01a93c	                JSL IFDD_PRINT_REG  ; read the FDD register value
.190649		c2 30		rep #$30	                REP #$30        ; set A&X long
.19064b		a2 88 13	ldx #$1388	                LDX #5000
.19064e		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.190652		80 00		bra $190654	                BRA next_instruction
.190654						seek_loop_step1
.190654						next_instruction
.190654		48		pha		                PHA             ; begin setdbr macro
.190655		08		php		                PHP
.190656		e2 20		sep #$20	                SEP #$20        ; set A short
.190658		a9 19		lda #$19		LDA #`minus_line
.19065a		48		pha		                PHA
.19065b		ab		plb		                PLB
.19065c		28		plp		                PLP
.19065d		68		pla		                PLA             ; end setdbr macro
.19065e		a2 ec 18	ldx #$18ec	                LDX #<>minus_line
.190661		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.190665		a2 ec 18	ldx #$18ec	                LDX #<>minus_line
.190668		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.19066c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19066e		a2 f4 01	ldx #$01f4	                LDX #500
.190671		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.190675		e2 20		sep #$20	                SEP #$20        ; set A short
.190677		a9 00		lda #$00	                LDA #0
.190679		22 c8 a5 01	jsl $01a5c8	                JSL IFDD_GET_DRIVE_STATUS
.19067d		e2 20		sep #$20	                SEP #$20        ; set A short
.19067f		48		pha		                PHA             ; begin setdbr macro
.190680		08		php		                PHP
.190681		e2 20		sep #$20	                SEP #$20        ; set A short
.190683		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.190685		48		pha		                PHA
.190686		ab		plb		                PLB
.190687		28		plp		                PLP
.190688		68		pla		                PLA             ; end setdbr macro
.190689		ad 00 a0	lda $01a000	                LDA FLOPPY_CMD_BUFFER
.19068c		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.190690		a9 0a		lda #$0a	                LDA #$A
.190692		22 93 00 16	jsl $160093	                JSL UART_PUTC
.190696		a9 0d		lda #$0d	                LDA #$D
.190698		22 93 00 16	jsl $160093	                JSL UART_PUTC
.19069c		48		pha		                PHA             ; begin setdbr macro
.19069d		08		php		                PHP
.19069e		e2 20		sep #$20	                SEP #$20        ; set A short
.1906a0		a9 19		lda #$19		LDA #`minus_line
.1906a2		48		pha		                PHA
.1906a3		ab		plb		                PLB
.1906a4		28		plp		                PLP
.1906a5		68		pla		                PLA             ; end setdbr macro
.1906a6		a2 ec 18	ldx #$18ec	                LDX #<>minus_line
.1906a9		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.1906ad		22 62 a0 01	jsl $01a062	                JSL IFDD_MOTOR_0_OFF
.1906b1		80 a1		bra $190654	                BRA seek_loop_step1
.1906b3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1906b5		a9 19 00	lda #$0019	                LDA #`file_to_load ; load the byte nb 3 (bank byte)
.1906b8		48		pha		                PHA
.1906b9		a9 e1 18	lda #$18e1	                LDA #<>file_to_load ; load the low world part of the buffer address
.1906bc		48		pha		                PHA
.1906bd		a9 01 00	lda #$0001	                LDA #`FAT12_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.1906c0		48		pha		                PHA
.1906c1		a9 00 98	lda #$9800	                LDA #<>FAT12_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.1906c4		48		pha		                PHA
.1906c5		22 60 90 01	jsl $019060	                JSL IFAT12_READ_BOOT_SECTOR
.1906c9		c9 01 00	cmp #$0001	                CMP #$0001
.1906cc		f0 07		beq $1906d5	                BEQ FAT_12_BOOT_SECTOR_PARSING_OK
.1906ce		a2 b4 18	ldx #$18b4	                LDX #<>error_FAT
.1906d1		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print the first line
.1906d5						FAT_12_BOOT_SECTOR_PARSING_OK
.1906d5		22 c9 91 01	jsl $0191c9	                JSL IFAT12_GET_ROOT_DIR_POS
.1906d9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1906db		a9 00 00	lda #$0000	                LDA #$00 ; sellect the first entry
.1906de		48		pha		                PHA
.1906df						FDD_DISPLAY_NEXT_ROOT_ENTRY
.1906df		22 f1 91 01	jsl $0191f1	                JSL IFAT12_GET_ROOT_ENTRY
.1906e3		48		pha		                PHA             ; begin setdbr macro
.1906e4		08		php		                PHP
.1906e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1906e7		a9 01		lda #$01		LDA #`Root_entry_value
.1906e9		48		pha		                PHA
.1906ea		ab		plb		                PLB
.1906eb		28		plp		                PLP
.1906ec		68		pla		                PLA             ; end setdbr macro
.1906ed		a2 33 90	ldx #$9033	                LDX #<>Root_entry_value
.1906f0		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print the first line
.1906f4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1906f6		68		pla		                PLA
.1906f7		c9 14 00	cmp #$0014	                CMP #20 ;Max_Root_Entry ; limit jusy how many enty is displayed
.1906fa		f0 04		beq $190700	                BEQ FDD_END_DISPLAY_ROOT_ENTRY_LOOP
.1906fc		1a		inc a		                INC A
.1906fd		48		pha		                PHA
.1906fe		80 df		bra $1906df	                BRA FDD_DISPLAY_NEXT_ROOT_ENTRY
.190700						FDD_END_DISPLAY_ROOT_ENTRY_LOOP
.190700		68		pla		                PLA
.190701		a9 00 00	lda #$0000	                LDA #0 ; read fthe first root entry
.190704		22 f1 91 01	jsl $0191f1	                JSL IFAT12_GET_ROOT_ENTRY
.190708		80 00		bra $19070a	                BRA FIRST_ROOT_ENTRY_READ
.19070a						READ_NEXT_FILE
.19070a						FIRST_ROOT_ENTRY_READ
.19070a		ad 4d 90	lda $01904d	                LDA Root_entry_value + 26 ; get the first fat entry for the fil from the root directory entry 0
.19070d		8d 55 90	sta $019055	                STA Fat12_next_entry
.190710						Read_next_sector
.190710		a9 01 00	lda #$0001	                LDA #`FAT12_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.190713		48		pha		                PHA
.190714		a9 00 98	lda #$9800	                LDA #<>FAT12_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.190717		48		pha		                PHA
.190718		ad 55 90	lda $019055	                LDA Fat12_next_entry ; sector to read
.19071b		69 21 00	adc #$0021	                ADC #1+9+9+14
.19071e		22 42 a2 01	jsl $01a242	                JSL IFDD_READ
.190722		fa		plx		                PLX
.190723		fa		plx		                PLX
.190724		ad 55 90	lda $019055	                LDA Fat12_next_entry ; sector to read
.190727		22 4d 92 01	jsl $01924d	                JSL IFAT_GET_FAT_ENTRY
.19072b		ad 55 90	lda $019055	                LDA Fat12_next_entry
.19072e		c9 fe 0f	cmp #$0ffe	                CMP #$FFE
.190731		b0 d7		bcs $19070a	                BCS READ_NEXT_FILE
.190733		80 db		bra $190710	                BRA Read_next_sector
.190735		80 fe		bra $190735	end_loop        BRA end_loop
.190737		58		cli		                CLI ; Make sure no Interrupt will come and fuck up Init before this point.
.190738		e2 20		sep #$20	                SEP #$20        ; set A short
.19073a		48		pha		                PHA             ; begin setdbr macro
.19073b		08		php		                PHP
.19073c		e2 20		sep #$20	                SEP #$20        ; set A short
.19073e		a9 19		lda #$19		LDA #`greet_msg
.190740		48		pha		                PHA
.190741		ab		plb		                PLB
.190742		28		plp		                PLP
.190743		68		pla		                PLA             ; end setdbr macro
.190744		ea		nop		endlessloop     NOP
.190745		af 83 0f 00	lda $000f83	                LDA KEY_BUFFER_CMD
.190749		c9 01		cmp #$01	                CMP #$01
.19074b		f0 04		beq $190751	                BEQ GoProcessCommandLine
.19074d		5c 44 07 19	jmp $190744	                JML endlessloop
.190751						GoProcessCommandLine
.190751		a9 00		lda #$00	                LDA #$00  ; Clear the Flag
.190753		8f 83 0f 00	sta $000f83	                STA KEY_BUFFER_CMD
.190757		22 56 30 19	jsl $193056	                JSL PROCESS_COMMAND_LINE
.19075b		a2 19 18	ldx #$1819	                LDX #<>ready_msg
.19075e		22 d1 07 19	jsl $1907d1	                JSL IPRINT
.190762		80 e0		bra $190744	                BRA  endlessloop
.190764		00		brk #		greet_done      BRK             ;Terminate boot routine and go to Ready handler.
.190765						IBREAK
.190765		48		pha		                PHA             ; begin setdp macro
.190766		08		php			PHP
.190767		c2 20		rep #$20	                REP #$20        ; set A long
.190769		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19076c		5b		tcd		                TCD
.19076d		28		plp			PLP
.19076e		68		pla		                PLA             ; end setdp macro
.19076f		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.190770		8f 48 02 00	sta $000248	                STA CPUY
.190774		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.190775		8f 46 02 00	sta $000246	                STA CPUX
.190779		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.19077a		8f 44 02 00	sta $000244	                STA CPUA
.19077e		68		pla		                PLA
.19077f		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.190783		e2 20		sep #$20	                SEP #$20        ; set A short
.190785		68		pla		                PLA             ; Pull Data Bank (8 bits)
.190786		8f 4e 02 00	sta $00024e	                STA CPUDBR
.19078a		68		pla		                PLA             ; Pull Flags (8 bits)
.19078b		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.19078f		c2 20		rep #$20	                REP #$20        ; set A long
.190791		68		pla		                PLA             ; Pull Program Counter (16 bits)
.190792		8f 40 02 00	sta $000240	                STA CPUPC
.190796		e2 20		sep #$20	                SEP #$20        ; set A short
.190798		68		pla		                PLA             ; Pull Program Bank (8 bits)
.190799		8f 42 02 00	sta $000242	                STA CPUPBR
.19079d		c2 20		rep #$20	                REP #$20        ; set A long
.19079f		3b		tsc		                TSA             ; Get the stack
.1907a0		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.1907a4		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.1907a7		1b		tcs		                TAS
.1907a8		5c e0 ff 00	jmp $00ffe0	                JML JMP_READY   ; Run READY routine (usually BASIC or MONITOR)
.1907ac						IREADY
.1907ac		48		pha		                PHA             ; begin setdbr macro
.1907ad		08		php		                PHP
.1907ae		e2 20		sep #$20	                SEP #$20        ; set A short
.1907b0		a9 19		lda #$19		LDA #`ready_msg
.1907b2		48		pha		                PHA
.1907b3		ab		plb		                PLB
.1907b4		28		plp		                PLP
.1907b5		68		pla		                PLA             ; end setdbr macro
.1907b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1907b8		a2 19 18	ldx #$1819	                LDX #<>ready_msg
.1907bb		22 d1 07 19	jsl $1907d1	                JSL IPRINT
.1907bf						IREADYWAIT
.1907bf		22 c7 07 19	jsl $1907c7	                JSL IGETCHE
.1907c3		80 fa		bra $1907bf	                BRA IREADYWAIT
.1907c5		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.1907c6		db		stp		IRETURN         STP
.1907c7		22 d0 07 19	jsl $1907d0	IGETCHE         JSL IGETCHW
.1907cb		22 f1 07 19	jsl $1907f1	                JSL IPUTC
.1907cf		6b		rtl		                RTL
.1907d0						IGETCHW
.1907d0		6b		rtl		                RTL
.1907d1		22 da 07 19	jsl $1907da	IPRINT          JSL IPUTS
.1907d5		22 1f 08 19	jsl $19081f	                JSL IPRINTCR
.1907d9		6b		rtl		                RTL
.1907da		48		pha		IPUTS           PHA
.1907db		08		php		                PHP
.1907dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1907de		c2 10		rep #$10	                REP #$10        ; set X long
.1907e0		bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.1907e3		f0 08		beq $1907ed	                BEQ iputs_done
.1907e5		22 f1 07 19	jsl $1907f1	iputs2          JSL IPUTC
.1907e9		e8		inx		iputs3          INX
.1907ea		4c e0 07	jmp $1907e0	                JMP iputs1
.1907ed		e8		inx		iputs_done      INX
.1907ee		28		plp		                PLP
.1907ef		68		pla		                PLA
.1907f0		6b		rtl		                RTL
.1907f1		0b		phd		IPUTC           PHD
.1907f2		08		php		                PHP             ; stash the flags (we'll be changing M)
.1907f3		48		pha		                PHA             ; begin setdp macro
.1907f4		08		php			PHP
.1907f5		c2 20		rep #$20	                REP #$20        ; set A long
.1907f7		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1907fa		5b		tcd		                TCD
.1907fb		28		plp			PLP
.1907fc		68		pla		                PLA             ; end setdp macro
.1907fd		e2 20		sep #$20	                SEP #$20        ; set A short
.1907ff		c9 0d		cmp #$0d	                CMP #$0D        ; handle CR
.190801		d0 06		bne $190809	                BNE iputc_bs
.190803		22 1f 08 19	jsl $19081f	                JSL IPRINTCR
.190807		80 10		bra $190819	                bra iputc_done
.190809		c9 08		cmp #$08	iputc_bs        CMP #$08        ; backspace
.19080b		d0 06		bne $190813	                BNE iputc_print
.19080d		22 30 08 19	jsl $190830	                JSL IPRINTBS
.190811		80 06		bra $190819	                BRA iputc_done
.190813		87 17		sta [$17]	iputc_print     STA [CURSORPOS] ; Save the character on the screen
.190815		22 40 08 19	jsl $190840	                JSL ICSRRIGHT
.190819						iputc_done
>190819		42 01				                .byte $42, $01
.19081b		28		plp		                PLP
.19081c		2b		pld		                PLD
.19081d		6b		rtl		                RTL
.19081e						IPUTB
.19081e		6b		rtl		                RTL
.19081f		da		phx		IPRINTCR	      PHX
.190820		5a		phy		                PHY
.190821		08		php		                PHP
.190822		a2 00 00	ldx #$0000	                LDX #0
.190825		a4 1c		ldy $1c		                LDY CURSORY
.190827		c8		iny		                INY
.190828		22 ba 08 19	jsl $1908ba	                JSL ILOCATE
.19082c		28		plp		                PLP
.19082d		7a		ply		                PLY
.19082e		fa		plx		                PLX
.19082f		6b		rtl		                RTL
.190830		da		phx		IPRINTBS	PHX
.190831		5a		phy		                PHY
.190832		08		php		                PHP
.190833		a6 1a		ldx $1a		                LDX CURSORX
.190835		a4 1c		ldy $1c		                LDY CURSORY
.190837		ca		dex		                DEX
.190838		22 ba 08 19	jsl $1908ba	                JSL ILOCATE
.19083c		28		plp		                PLP
.19083d		7a		ply		                PLY
.19083e		fa		plx		                PLX
.19083f		6b		rtl		                RTL
.190840						ICSRRIGHT
.190840		da		phx		                PHX
.190841		8b		phb		                PHB
.190842		c2 20		rep #$20	                REP #$20        ; set A long
.190844		c2 10		rep #$10	                REP #$10        ; set X long
.190846		48		pha		                PHA             ; begin setdp macro
.190847		08		php			PHP
.190848		c2 20		rep #$20	                REP #$20        ; set A long
.19084a		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.19084d		5b		tcd		                TCD
.19084e		28		plp			PLP
.19084f		68		pla		                PLA             ; end setdp macro
.190850		e6 17		inc $17		                INC CURSORPOS
.190852		a6 1a		ldx $1a		                LDX CURSORX
.190854		e8		inx		                INX
.190855		e4 0f		cpx $0f		                CPX COLS_VISIBLE
.190857		90 0c		bcc $190865	                BCC icsr_nowrap  ; wrap if the cursor is at or past column 80
.190859		a2 00 00	ldx #$0000	                LDX #0
.19085c		5a		phy		                PHY
.19085d		a4 1c		ldy $1c		                LDY CURSORY
.19085f		c8		iny		                INY
.190860		22 ba 08 19	jsl $1908ba	                JSL ILOCATE
.190864		7a		ply		                PLY
.190865		86 1a		stx $1a		icsr_nowrap     STX CURSORX
.190867		48		pha		                PHA
.190868		8a		txa		                TXA
.190869		8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.19086d		68		pla		                PLA
.19086e		ab		plb		                PLB
.19086f		fa		plx		                PLX
.190870		6b		rtl		                RTL
.190871						ISRLEFT
.190871		da		phx		                PHX
.190872		5a		phy		                PHY
.190873		8b		phb		                PHB
.190874		48		pha		                PHA
.190875		c2 30		rep #$30	                REP #$30        ; set A&X long
.190877		48		pha		                PHA             ; begin setdp macro
.190878		08		php			PHP
.190879		c2 20		rep #$20	                REP #$20        ; set A long
.19087b		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.19087e		5b		tcd		                TCD
.19087f		28		plp			PLP
.190880		68		pla		                PLA             ; end setdp macro
.190881		a5 1a		lda $1a		                LDA CURSORX
.190883		f0 0b		beq $190890	                BEQ isrleft_done_already_zero ; Check that we are not already @ Zero
.190885		a6 1a		ldx $1a		                LDX CURSORX
.190887		ca		dex		                DEX
.190888		86 1a		stx $1a		                STX CURSORX
.19088a		a4 1c		ldy $1c		                LDY CURSORY
.19088c		22 ba 08 19	jsl $1908ba	                JSL ILOCATE
.190890						isrleft_done_already_zero
.190890		68		pla		                PLA
.190891		ab		plb		                PLB
.190892		7a		ply		                PLY
.190893		fa		plx		                PLX
.190894		6b		rtl		                RTL
.190895						ICSRUP
.190895		da		phx		                PHX
.190896		5a		phy		                PHY
.190897		8b		phb		                PHB
.190898		48		pha		                PHA
.190899		c2 30		rep #$30	                REP #$30        ; set A&X long
.19089b		48		pha		                PHA             ; begin setdp macro
.19089c		08		php			PHP
.19089d		c2 20		rep #$20	                REP #$20        ; set A long
.19089f		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1908a2		5b		tcd		                TCD
.1908a3		28		plp			PLP
.1908a4		68		pla		                PLA             ; end setdp macro
.1908a5		a5 1c		lda $1c		                LDA CURSORY
.1908a7		f0 0b		beq $1908b4	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.1908a9		a4 1c		ldy $1c		                LDY CURSORY
.1908ab		88		dey		                DEY
.1908ac		84 1c		sty $1c		                STY CURSORY
.1908ae		a6 1a		ldx $1a		                LDX CURSORX
.1908b0		22 ba 08 19	jsl $1908ba	                JSL ILOCATE
.1908b4						isrup_done_already_zero
.1908b4		68		pla		                PLA
.1908b5		ab		plb		                PLB
.1908b6		7a		ply		                PLY
.1908b7		fa		plx		                PLX
.1908b8		6b		rtl		                RTL
.1908b9						ICSRDOWN
.1908b9		6b		rtl		                RTL
.1908ba		48		pha		ILOCATE         PHA
.1908bb		08		php		                PHP
.1908bc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1908be						ilocate_scroll
.1908be		c4 13		cpy $13		                CPY LINES_VISIBLE
.1908c0		90 07		bcc $1908c9	                BCC ilocate_scrolldone
.1908c2		22 f0 08 19	jsl $1908f0	                JSL ISCROLLUP
.1908c6		88		dey		                DEY
.1908c7		80 f5		bra $1908be	                BRA ilocate_scroll
.1908c9						ilocate_scrolldone
.1908c9		86 1a		stx $1a		                STX CURSORX
.1908cb		84 1c		sty $1c		                STY CURSORY
.1908cd		a5 0c		lda $0c		                LDA SCREENBEGIN
.1908cf						ilocate_row
.1908cf		c0 00 00	cpy #$0000	                CPY #$0
.1908d2		f0 08		beq $1908dc	                BEQ ilocate_right
.1908d4		18		clc		ilocate_down    CLC
.1908d5		65 11		adc $11		                ADC COLS_PER_LINE
.1908d7		88		dey		                DEY
.1908d8		f0 02		beq $1908dc	                BEQ ilocate_right
.1908da		80 f8		bra $1908d4	                BRA ilocate_down
.1908dc		18		clc		ilocate_right   CLC
.1908dd		65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.1908df		85 17		sta $17		                STA CURSORPOS
.1908e1		a4 1c		ldy $1c		                LDY CURSORY
.1908e3		98		tya		                TYA
.1908e4		8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.1908e8		8a		txa		                TXA
.1908e9		8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.1908ed		28		plp		ilocate_done    PLP
.1908ee		68		pla		                PLA
.1908ef		6b		rtl		                RTL
.1908f0						ISCROLLUP
.1908f0		48		pha		                PHA
.1908f1		da		phx		                PHX
.1908f2		5a		phy		                PHY
.1908f3		8b		phb		                PHB
.1908f4		08		php		                PHP
.1908f5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1908f7		18		clc		                CLC
.1908f8		a5 0c		lda $0c		                LDA SCREENBEGIN
.1908fa		a8		tay		                TAY             ; Destination is first row
.1908fb		65 11		adc $11		                ADC COLS_PER_LINE
.1908fd		aa		tax		                TAX             ; Source is second row
.1908fe		a9 ef 1f	lda #$1fef	                LDA #SCREEN_PAGE1-SCREEN_PAGE0-COLS_PER_LINE
.190901		44 00 00	mvp $00,$00	                MVP $00,$00
.190904		28		plp		                PLP
.190905		ab		plb		                PLB
.190906		7a		ply		                PLY
.190907		fa		plx		                PLX
.190908		68		pla		                PLA
.190909		6b		rtl		                RTL
.19090a		08		php		IPRINTH         PHP
.19090b		48		pha		                PHA
.19090c						iprinth1
.19090c		e2 20		sep #$20	                SEP #$20        ; set A short
.19090e		bd 00 00	lda $190000,x	                LDA #0,b,x      ; Read the value to be printed
.190911		4a		lsr a		                LSR
.190912		4a		lsr a		                LSR
.190913		4a		lsr a		                LSR
.190914		4a		lsr a		                LSR
.190915		22 27 09 19	jsl $190927	                JSL iprint_digit
.190919		bd 00 00	lda $190000,x	                LDA #0,b,x
.19091c		22 27 09 19	jsl $190927	                JSL iprint_digit
.190920		ca		dex		                DEX
.190921		88		dey		                DEY
.190922		d0 e8		bne $19090c	                BNE iprinth1
.190924		68		pla		                PLA
.190925		28		plp		                PLP
.190926		6b		rtl		                RTL
.190927		da		phx		iprint_digit    PHX
.190928		c2 20		rep #$20	                REP #$20        ; set A long
.19092a		29 0f 00	and #$000f	                AND #$0F
.19092d		aa		tax		                TAX
.19092e		bf a3 18 19	lda $1918a3,x	                LDA hex_digits,X
.190932		22 f1 07 19	jsl $1907f1	                JSL IPUTC       ; Print the digit
.190936		fa		plx		                PLX
.190937		6b		rtl		                RTL
.190938		0b		phd		ICLRSCREEN	    PHD
.190939		08		php		                PHP
.19093a		48		pha		                PHA
.19093b		da		phx		                PHX
.19093c		e2 20		sep #$20	                SEP #$20        ; set A short
.19093e		c2 10		rep #$10	                REP #$10        ; set X long
.190940		a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.190943		a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.190945		9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.190949		e8		inx		                inx
.19094a		e0 00 20	cpx #$2000	                cpx #$2000
.19094d		d0 f6		bne $190945	                bne iclearloop0
.19094f		a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.190952		a9 ed		lda #$ed	                LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.190954		9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.190958		e8		inx		                inx
.190959		e0 00 20	cpx #$2000	                cpx #$2000
.19095c		d0 f6		bne $190954	                bne iclearloop1
.19095e		c2 10		rep #$10	                REP #$10        ; set X long
.190960		c2 20		rep #$20	                REP #$20        ; set A long
.190962		fa		plx		                PLX
.190963		68		pla		                PLA
.190964		28		plp		                PLP
.190965		2b		pld		                PLD
.190966		6b		rtl		                RTL
.190967		48		pha		ICOLORFLAG      PHA
.190968		da		phx		                PHX
.190969		08		php		                PHP
.19096a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19096c		a2 00		ldx #$00	                LDX #$00
.19096e		bf 19 16 19	lda $191619,x	iclearloop2	    LDA @lgreet_clr_line1,x
.190972		9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.190976		bf 27 16 19	lda $191627,x	                LDA @lgreet_clr_line2,x
.19097a		9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.19097e		bf 35 16 19	lda $191635,x	                LDA @lgreet_clr_line3,x
.190982		9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.190986		bf 43 16 19	lda $191643,x	                LDA @lgreet_clr_line4,x
.19098a		9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.19098e		bf 51 16 19	lda $191651,x	                LDA @lgreet_clr_line5,x
.190992		9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.190996		e8		inx		                inx
.190997		e0 0e		cpx #$0e	                cpx #$0E
.190999		d0 d3		bne $19096e	                bne iclearloop2
.19099b		28		plp		                PLP
.19099c		fa		plx		                PLX
.19099d		68		pla		                PLA
.19099e		6b		rtl		                RTL
.19099f		0b		phd		IINITCHLUT		  PHD
.1909a0		08		php		                PHP
.1909a1		48		pha		                PHA
.1909a2		da		phx		                PHX
.1909a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1909a5		e2 10		sep #$10	                SEP #$10        ; set X short
.1909a7		a2 00		ldx #$00					        LDX	#$00
.1909a9		bf 5f 16 19	lda $19165f,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.1909ad		9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.1909b1		e8		inx		                inx
.1909b2		e0 40		cpx #$40	                cpx #$40
.1909b4		d0 f3		bne $1909a9	                bne lutinitloop0
.1909b6		a2 00		ldx #$00	                LDX	#$00
.1909b8		bf 9f 16 19	lda $19169f,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.1909bc		9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.1909c0		e8		inx		                INX
.1909c1		e0 40		cpx #$40	                CPX #$40
.1909c3		d0 f3		bne $1909b8	                bne lutinitloop1
.1909c5		c2 20		rep #$20	                REP #$20        ; set A long
.1909c7		c2 10		rep #$10	                REP #$10        ; set X long
.1909c9		fa		plx		                PLX
.1909ca		68		pla		                PLA
.1909cb		28		plp		                PLP
.1909cc		2b		pld		                PLD
.1909cd		6b		rtl		                RTL
.1909ce						IINITGAMMATABLE
.1909ce		e2 20		sep #$20	                SEP #$20        ; set A short
.1909d0		c2 10		rep #$10	                REP #$10        ; set X long
.1909d2		a2 00 00	ldx #$0000	                ldx #$0000
.1909d5		bf 00 1e 19	lda $191e00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.1909d9		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.1909dd		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.1909e1		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.1909e5		e8		inx		                inx
.1909e6		e0 00 01	cpx #$0100	                cpx #$0100
.1909e9		d0 ea		bne $1909d5	                bne initgammaloop
.1909eb		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909ed		6b		rtl		                RTL
.1909ee		48		pha		IINITALLLUT     PHA
.1909ef		da		phx		                PHX
.1909f0		a2 00 00	ldx #$0000	                LDX #$0000
.1909f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1909f5		a9 00		lda #$00	                LDA #$00
.1909f7		85 0a		sta $0a		                STA $0A     ; Temp Location
.1909f9						iinit_lut_loop
.1909f9		86 02		stx $02		                STX $02
.1909fb		a6 0a		ldx $0a		                LDX $0A
.1909fd		bf 00 1d 19	lda $191d00,x	                LDA GAMMA_2_2_Tbl, x
.190a01		49 55		eor #$55	                EOR  #$55
.190a03		a6 02		ldx $02		                LDX $02
.190a05		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a09		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a0d		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a11		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a15		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a19		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a1d		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a21		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a25		e8		inx		                inx
.190a26		86 02		stx $02		                STX $02
.190a28		a6 0a		ldx $0a		                LDX $0A
.190a2a		bf 00 1f 19	lda $191f00,x	                LDA RANDOM_LUT_Tbl, x
.190a2e		a6 02		ldx $02		                LDX $02
.190a30		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a34		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a38		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a3c		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a40		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a44		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a48		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a4c		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a50		e8		inx		                inx
.190a51		86 02		stx $02		                STX $02
.190a53		a6 0a		ldx $0a		                LDX $0A
.190a55		bf 00 1e 19	lda $191e00,x	                LDA GAMMA_1_8_Tbl, x
.190a59		49 aa		eor #$aa	                EOR  #$AA
.190a5b		a6 02		ldx $02		                LDX $02
.190a5d		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a61		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a65		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a69		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a6d		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a71		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a75		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a79		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a7d		e8		inx		                inx
.190a7e		a9 ff		lda #$ff	                LDA #$FF
.190a80		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a84		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a88		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a8c		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a90		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a94		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a98		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a9c		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190aa0		e6 0a		inc $0a		                inc $0A
.190aa2		e8		inx		                inx
.190aa3		e0 00 04	cpx #$0400	                cpx #$0400
.190aa6		f0 03		beq $190aab	                beq iinit_lut_exit
.190aa8		82 4e ff	brl $1909f9	                brl iinit_lut_loop
.190aab						iinit_lut_exit
.190aab		c2 30		rep #$30	                REP #$30        ; set A&X long
.190aad		fa		plx		                PLX
.190aae		68		pla		                PLA
.190aaf		6b		rtl		                RTL
.190ab0		48		pha		IINITVKYTXTMODE PHA
.190ab1		e2 20		sep #$20	                SEP #$20        ; set A short
.190ab3		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.190ab5		8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.190ab9		a9 20		lda #$20	                LDA #$20
.190abb		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190abf		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.190ac3		a9 00		lda #$00	                LDA #$00
.190ac5		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190ac9		a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.190acb		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190acf		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190ad1		8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.190ad5		c2 30		rep #$30	                REP #$30        ; set A&X long
.190ad7		68		pla		                PLA
.190ad8		6b		rtl		                RTL
.190ad9						IINITVKYGRPMODE
.190ad9		48		pha		                PHA
.190ada		e2 20		sep #$20	                SEP #$20        ; set A short
.190adc		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190ade		8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.190ae2		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190ae4		8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.190ae8		a9 c0		lda #$c0	                LDA #$C0
.190aea		8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.190aee		a9 00		lda #$00	                LDA #$00
.190af0		8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.190af4		a9 80		lda #$80	                LDA #$80
.190af6		8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.190afa		a9 02		lda #$02	                LDA #$02
.190afc		8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.190b00		a9 e0		lda #$e0	                LDA #$E0
.190b02		8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.190b06		a9 01		lda #$01	                LDA #$01
.190b08		8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.190b0c		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b0e		68		pla		                PLA
.190b0f		6b		rtl		                RTL
.190b10						IINITTILEMODE
.190b10		6b		rtl		                RTL
.190b11		48		pha		IINITSPRITE     PHA
.190b12		e2 20		sep #$20	                SEP #$20        ; set A short
.190b14		a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.190b16		8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.190b1a		8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.190b1e		8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.190b22		8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.190b26		8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.190b2a		8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.190b2e		8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.190b32		8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.190b36		8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.190b3a		8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.190b3e		8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.190b42		8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.190b46		8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.190b4a		8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.190b4e		8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.190b52		8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.190b56		8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.190b5a		a9 09		lda #$09	                LDA #$09
.190b5c		8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.190b60		8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.190b64		8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.190b68		8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.190b6c		8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.190b70		8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.190b74		8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.190b78		8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.190b7c		8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.190b80		8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.190b84		8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.190b88		8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.190b8c		8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.190b90		8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.190b94		8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.190b98		8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.190b9c		8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.190ba0		a9 00		lda #$00	                LDA #$00
.190ba2		8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.190ba6		a9 04		lda #$04	                LDA #$04
.190ba8		8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.190bac		a9 08		lda #$08	                LDA #$08
.190bae		8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.190bb2		a9 0c		lda #$0c	                LDA #$0C
.190bb4		8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.190bb8		a9 10		lda #$10	                LDA #$10
.190bba		8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.190bbe		a9 14		lda #$14	                LDA #$14
.190bc0		8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.190bc4		a9 18		lda #$18	                LDA #$18
.190bc6		8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.190bca		a9 1c		lda #$1c	                LDA #$1C
.190bcc		8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.190bd0		a9 20		lda #$20	                LDA #$20
.190bd2		8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.190bd6		a9 24		lda #$24	                LDA #$24
.190bd8		8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.190bdc		a9 28		lda #$28	                LDA #$28
.190bde		8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.190be2		a9 2c		lda #$2c	                LDA #$2C
.190be4		8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.190be8		a9 30		lda #$30	                LDA #$30
.190bea		8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.190bee		a9 34		lda #$34	                LDA #$34
.190bf0		8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.190bf4		a9 38		lda #$38	                LDA #$38
.190bf6		8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.190bfa		a9 3c		lda #$3c	                LDA #$3C
.190bfc		8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.190c00		a9 40		lda #$40	                LDA #$40
.190c02		8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.190c06		a9 00		lda #$00	                LDA #$00
.190c08		8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.190c0c		8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.190c10		8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.190c14		8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.190c18		8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.190c1c		8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.190c20		8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.190c24		8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.190c28		8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.190c2c		8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.190c30		8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.190c34		8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.190c38		8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.190c3c		8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.190c40		8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.190c44		8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.190c48		8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.190c4c		68		pla		                PLA
.190c4d		6b		rtl		                RTL
.190c4e						IINITFONTSET
.190c4e		e2 20		sep #$20	                SEP #$20        ; set A short
.190c50		c2 10		rep #$10	                REP #$10        ; set X long
.190c52		a2 00 00	ldx #$0000	                LDX #$0000
.190c55						initFontsetbranch0
.190c55		bf 00 f0 1f	lda $1ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.190c59		9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.190c5d		e8		inx		                INX
.190c5e		e0 00 08	cpx #$0800	                CPX #$0800
.190c61		d0 f2		bne $190c55	                BNE initFontsetbranch0
.190c63		ea		nop		                NOP
.190c64		a2 00 00	ldx #$0000	                LDX #$0000
.190c67						initFontsetbranch1
.190c67		bf 00 f8 1f	lda $1ff800,x	                LDA @lFONT_4_BANK1,X
.190c6b		9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.190c6f		e8		inx		                INX
.190c70		e0 00 08	cpx #$0800	                CPX #$0800
.190c73		d0 f2		bne $190c67	                BNE initFontsetbranch1
.190c75		ea		nop		                NOP
.190c76		c2 30		rep #$30	                REP #$30        ; set A&X long
.190c78		6b		rtl		                RTL
.190c79		48		pha		IINITCURSOR     PHA
.190c7a		e2 20		sep #$20	                SEP #$20        ; set A short
.190c7c		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190c7e		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190c82		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190c84		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190c88		c2 30		rep #$30	                REP #$30        ; set A&X long
.190c8a		a9 00 00	lda #$0000	                LDA #$0000;
.190c8d		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190c91		a9 06 00	lda #$0006	                LDA #$0006;
.190c94		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190c98		68		pla		                PLA
.190c99		6b		rtl		                RTL
.190c9a		0b		phd		IINITSUPERIO	  PHD
.190c9b		08		php		                PHP
.190c9c		48		pha		                PHA
.190c9d		e2 20		sep #$20	                SEP #$20        ; set A short
.190c9f		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190ca1		8f 23 11 af	sta $af1123	                STA GP10_REG
.190ca5		af 23 11 af	lda $af1123	                LDA GP10_REG
.190ca9		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190cab		8f 24 11 af	sta $af1124	                STA GP11_REG
.190caf		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190cb1		8f 25 11 af	sta $af1125	                STA GP12_REG
.190cb5		a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190cb7		8f 26 11 af	sta $af1126	        				STA GP13_REG
.190cbb		a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190cbd		8f 27 11 af	sta $af1127	        				STA GP14_REG
.190cc1		a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190cc3		8f 28 11 af	sta $af1128	        				STA GP15_REG
.190cc7		a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190cc9		8f 29 11 af	sta $af1129	        				STA GP16_REG
.190ccd		a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190ccf		8f 2a 11 af	sta $af112a	        				STA GP17_REG
.190cd3		a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190cd5		8f 2b 11 af	sta $af112b	        				STA GP20_REG
.190cd9		a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190cdb		8f 2f 11 af	sta $af112f					        STA GP24_REG
.190cdf		a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190ce1		8f 30 11 af	sta $af1130					        STA GP25_REG
.190ce5		a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190ce7		8f 31 11 af	sta $af1131					        STA GP26_REG
.190ceb		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190ced		8f 33 11 af	sta $af1133					        STA GP30_REG
.190cf1		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190cf3		8f 34 11 af	sta $af1134					        STA GP31_REG
.190cf7		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190cf9		8f 35 11 af	sta $af1135					        STA GP32_REG
.190cfd		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190cff		8f 36 11 af	sta $af1136					        STA GP33_REG
.190d03		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190d05		8f 37 11 af	sta $af1137					        STA GP34_REG
.190d09		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190d0b		8f 38 11 af	sta $af1138					        STA GP35_REG
.190d0f		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190d11		8f 39 11 af	sta $af1139					        STA GP36_REG
.190d15		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190d17		8f 3a 11 af	sta $af113a					        STA GP37_REG
.190d1b		a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190d1d		8f 3d 11 af	sta $af113d					        STA GP42_REG
.190d21		a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190d23		8f 3e 11 af	sta $af113e					        STA GP43_REG
.190d27		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190d29		8f 3f 11 af	sta $af113f					        STA GP50_REG
.190d2d		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190d2f		8f 40 11 af	sta $af1140					        STA GP51_REG
.190d33		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190d35		8f 41 11 af	sta $af1141					        STA GP52_REG
.190d39		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190d3b		8f 42 11 af	sta $af1142					        STA GP53_REG
.190d3f		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190d41		8f 43 11 af	sta $af1143					        STA GP54_REG
.190d45		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190d47		8f 44 11 af	sta $af1144					        STA GP55_REG
.190d4b		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190d4d		8f 45 11 af	sta $af1145					        STA GP56_REG
.190d51		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190d53		8f 46 11 af	sta $af1146					        STA GP57_REG
.190d57		a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.190d59		8f 47 11 af	sta $af1147					        STA GP60_REG
.190d5d		a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.190d5f		8f 48 11 af	sta $af1148					        STA GP61_REG
.190d63		a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190d65		8f 4b 11 af	sta $af114b					        STA GP1_REG
.190d69		a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190d6b		8f 4c 11 af	sta $af114c					        STA GP2_REG
.190d6f		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190d71		8f 4d 11 af	sta $af114d					        STA GP3_REG
.190d75		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190d77		8f 4e 11 af	sta $af114e					        STA GP4_REG
.190d7b		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190d7d		8f 4f 11 af	sta $af114f					        STA GP5_REG
.190d81		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190d83		8f 50 11 af	sta $af1150					        STA GP6_REG
.190d87		a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190d89		8f 5d 11 af	sta $af115d					        STA LED1_REG
.190d8d		a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190d8f		8f 5e 11 af	sta $af115e					        STA LED2_REG
.190d93		c2 20		rep #$20	                REP #$20        ; set A long
.190d95		68		pla		                PLA
.190d96		28		plp						        PLP
.190d97		2b		pld					        	PLD
.190d98		6b		rtl		                RTL
.190d99		0b		phd		IINITKEYBOARD	  PHD
.190d9a		08		php						        PHP
.190d9b		48		pha						        PHA
.190d9c		da		phx						        PHX
.190d9d		e2 20		sep #$20	                SEP #$20        ; set A short
.190d9f		c2 10		rep #$10	                REP #$10        ; set X long
.190da1		18		clc		                CLC
.190da2		20 6f 0e	jsr $190e6f	                JSR Poll_Inbuf ;
.190da5		a9 aa		lda #$aa					        LDA #$0AA			;Send self test command
.190da7		8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.190dab		20 7a 0e	jsr $190e7a	                JSR Poll_Outbuf ;
.190dae		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.190db2		c9 55		cmp #$55					        CMP #$55
.190db4		f0 03		beq $190db9					        BEQ	passAAtest
.190db6		82 a6 00	brl $190e5f	                BRL initkb_loop_out
.190db9		a2 0c 17	ldx #$170c	passAAtest      LDX #<>pass_tst0xAAmsg
.190dbc		22 d1 07 19	jsl $1907d1	                JSL IPRINT      ; print Message
.190dc0		a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.190dc2		8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.190dc6		20 7a 0e	jsr $190e7a	                JSR Poll_Outbuf ;
.190dc9		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.190dcd		c9 00		cmp #$00					        CMP #$00			;Should be 00
.190dcf		f0 03		beq $190dd4					        BEQ	passABtest
.190dd1		82 8b 00	brl $190e5f	                BRL initkb_loop_out
.190dd4		a2 25 17	ldx #$1725	passABtest      LDX #<>pass_tst0xABmsg
.190dd7		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print Message
.190ddb		a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.190ddd		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190de1		20 6f 0e	jsr $190e6f	                JSR Poll_Inbuf ;
.190de4		a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.190de6		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190dea		20 6f 0e	jsr $190e6f	                JSR Poll_Inbuf ;
.190ded		a2 3e 17	ldx #$173e	                LDX #<>pass_cmd0x60msg
.190df0		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print Message
.190df4		a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.190df6		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190dfa		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.190dfd		ca		dex		DLY_LOOP1       DEX
.190dfe		ea		nop		                NOP
.190dff		ea		nop		                NOP
.190e00		ea		nop		                NOP
.190e01		ea		nop		                NOP
.190e02		ea		nop		                NOP
.190e03		ea		nop		                NOP
.190e04		ea		nop		                NOP
.190e05		ea		nop		                NOP
.190e06		e0 00 00	cpx #$0000	                CPX #$0000
.190e09		d0 f2		bne $190dfd	                BNE DLY_LOOP1
.190e0b		20 7a 0e	jsr $190e7a	                JSR Poll_Outbuf ;
.190e0e		af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.190e12		a2 52 17	ldx #$1752	                LDX #<>pass_cmd0xFFmsg
.190e15		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print Message
.190e19		a9 ee		lda #$ee	                LDA #$EE      ; Send Keyboard Reset command
.190e1b		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190e1f		a2 00 40	ldx #$4000	                LDX #$4000
.190e22		ca		dex		DLY_LOOP2       DEX
.190e23		ea		nop		                NOP
.190e24		ea		nop		                NOP
.190e25		ea		nop		                NOP
.190e26		ea		nop		                NOP
.190e27		ea		nop		                NOP
.190e28		ea		nop		                NOP
.190e29		ea		nop		                NOP
.190e2a		ea		nop		                NOP
.190e2b		e0 00 00	cpx #$0000	                CPX #$0000
.190e2e		d0 f2		bne $190e22	                BNE DLY_LOOP2
.190e30		20 7a 0e	jsr $190e7a	                JSR Poll_Outbuf ;
.190e33		a2 6a 17	ldx #$176a	                LDX #<>pass_cmd0xEEmsg
.190e36		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print Message
.190e3a		a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.190e3c		8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.190e40		20 7a 0e	jsr $190e7a	                JSR Poll_Outbuf ;
.190e43		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.190e47		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.190e4b		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.190e4f		af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.190e53		29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.190e55		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190e59		a2 88 17	ldx #$1788	                LDX #<>Success_kb_init
.190e5c		38		sec		                SEC
.190e5d		b0 03		bcs $190e62	                BCS InitSuccess
.190e5f		a2 9a 17	ldx #$179a	initkb_loop_out LDX #<>Failed_kb_init
.190e62		22 d1 07 19	jsl $1907d1	InitSuccess     JSL IPRINT       ; print Message
.190e66		c2 20		rep #$20	                REP #$20        ; set A long
.190e68		c2 10		rep #$10	                REP #$10        ; set X long
.190e6a		fa		plx		                PLX
.190e6b		68		pla		                PLA
.190e6c		28		plp						        PLP
.190e6d		2b		pld						        PLD
.190e6e		6b		rtl		                RTL
.190e6f						Poll_Inbuf
.190e6f		af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.190e73		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.190e75		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.190e77		f0 f6		beq $190e6f					        BEQ Poll_Inbuf
.190e79		60		rts		                RTS
.190e7a						Poll_Outbuf
.190e7a		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.190e7e		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.190e80		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.190e82		d0 f6		bne $190e7a	                BNE Poll_Outbuf
.190e84		60		rts		                RTS
.190e85		48		pha		IINITRTC        PHA
.190e86		e2 20		sep #$20	                SEP #$20        ; set A short
.190e88		a9 00		lda #$00	                LDA #$00
.190e8a		8f 00 08 af	sta $af0800	                STA RTC_SEC     ;Set the Time to 10:10AM
.190e8e		a9 0a		lda #$0a	                LDA #10
.190e90		8f 02 08 af	sta $af0802	                STA RTC_MIN
.190e94		8f 04 08 af	sta $af0804	                STA RTC_HRS
.190e98		a9 0c		lda #$0c	                LDA #12
.190e9a		8f 06 08 af	sta $af0806	                STA RTC_DAY
.190e9e		a9 04		lda #$04	                LDA #04
.190ea0		8f 09 08 af	sta $af0809	                STA RTC_MONTH   ; April 12th, 2018 - Begining of the Project
.190ea4		a9 04		lda #$04	                LDA #04
.190ea6		8f 09 08 af	sta $af0809	                STA RTC_MONTH   ; Thursday
.190eaa		a9 12		lda #$12	                LDA #18
.190eac		8f 0a 08 af	sta $af080a	                STA RTC_YEAR    ; Thursday
.190eb0		af 06 08 af	lda $af0806	                LDA RTC_DAY     ; Read the Day Registers
.190eb4		8f 06 08 af	sta $af0806	                STA RTC_DAY     ; Store it back
.190eb8		c2 20		rep #$20	                REP #$20        ; set A long
.190eba		68		pla		                PLA
.190ebb		6b		rtl		                RTL
.190ebc		48		pha		ITESTSID        PHA
.190ebd		e2 20		sep #$20	                SEP #$20        ; set A short
.190ebf		a9 0f		lda #$0f	                LDA #$0F
.190ec1		8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.190ec5		a9 be		lda #$be	                LDA #$BE
.190ec7		8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.190ecb		a9 f8		lda #$f8	                LDA #$F8
.190ecd		8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.190ed1		a9 11		lda #$11	                LDA #$11
.190ed3		8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.190ed7		a9 25		lda #$25	                LDA #$25
.190ed9		8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.190edd		a9 11		lda #$11	                LDA #$11
.190edf		8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.190ee3		c2 20		rep #$20	                REP #$20        ; set A long
.190ee5		68		pla		                PLA
.190ee6		6b		rtl		                RTL
.190ee7		48		pha		ITESTMATH       PHA
.190ee8		c2 20		rep #$20	                REP #$20        ; set A long
.190eea		a9 34 12	lda #$1234	                LDA #$1234
.190eed		8f 00 01 00	sta $000100	                STA UNSIGNED_MULT_A_LO
.190ef1		a9 aa 55	lda #$55aa	                LDA #$55AA
.190ef4		8f 02 01 00	sta $000102	                STA UNSIGNED_MULT_B_LO
.190ef8		af 04 01 00	lda $000104	                LDA UNSIGNED_MULT_AL_LO
.190efc		8f 00 0e 00	sta $000e00	                STA STEF_BLOB_BEGIN
.190f00		af 06 01 00	lda $000106	                LDA UNSIGNED_MULT_AH_LO
.190f04		8f 02 0e 00	sta $000e02	                STA STEF_BLOB_BEGIN + 2
.190f08		c2 10		rep #$10	                REP #$10        ; set X long
.190f0a		c2 20		rep #$20	                REP #$20        ; set A long
.190f0c		68		pla		                PLA
.190f0d		6b		rtl		                RTL
.190f0e		48		pha		IINITCODEC      PHA
.190f0f		c2 20		rep #$20	                REP #$20        ; set A long
.190f11		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190f14		8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190f18		a9 01 00	lda #$0001	                LDA #$0001
.190f1b		8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190f1f		20 6b 0f	jsr $190f6b	                JSR CODEC_TRF_FINISHED
.190f22		a9 03 2a	lda #$2a03	                LDA #%0010101000000011       ;R21 - Enable All the Analog In
.190f25		8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190f29		a9 01 00	lda #$0001	                LDA #$0001
.190f2c		8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190f30		20 6b 0f	jsr $190f6b	                JSR CODEC_TRF_FINISHED
.190f33		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190f36		8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190f3a		a9 01 00	lda #$0001	                LDA #$0001
.190f3d		8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190f41		20 6b 0f	jsr $190f6b	                JSR CODEC_TRF_FINISHED
.190f44		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190f47		8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190f4b		a9 01 00	lda #$0001	                LDA #$0001
.190f4e		8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190f52		20 6b 0f	jsr $190f6b	                JSR CODEC_TRF_FINISHED
.190f55		68		pla		                PLA
.190f56		6b		rtl		                RTL
.190f57						IRESETCODEC
.190f57		c2 20		rep #$20	                REP #$20        ; set A long
.190f59		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190f5c		8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190f60		a9 01 00	lda #$0001	                LDA #$0001
.190f63		8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190f67		20 6b 0f	jsr $190f6b	                JSR CODEC_TRF_FINISHED
.190f6a		6b		rtl		                RTL
.190f6b						CODEC_TRF_FINISHED
.190f6b		e2 20		sep #$20	                SEP #$20        ; set A short
.190f6d		af 22 e8 af	lda $afe822	CODEC_LOOP      LDA CODEC_WR_CTRL
.190f71		29 01		and #$01	                AND #$01
.190f73		c9 01		cmp #$01	                CMP #$01
.190f75		f0 f6		beq $190f6d	                BEQ CODEC_LOOP
.190f77		c2 20		rep #$20	                REP #$20        ; set A long
.190f79		60		rts		                RTS
.190f7a						IBM_FILL_SCREEN
.190f7a		c2 30		rep #$30	                REP #$30        ; set A&X long
.190f7c		a9 00 00	lda #$0000	                LDA #$0000
.190f7f		a2 00 00	ldx #$0000	                LDX #$0000
.190f82						BM_FILL_SCREEN_LOOPY
.190f82		a0 00 00	ldy #$0000	                LDY #$0000
.190f85		e2 20		sep #$20	                SEP #$20        ; set A short
.190f87						BM_FILL_SCREEN_LOOPX
.190f87		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190f89		c8		iny		                INY
.190f8a		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190f8c		d0 f9		bne $190f87	                BNE BM_FILL_SCREEN_LOOPX
.190f8e		20 99 0f	jsr $190f99	                JSR BM_FILL_COMPUTE_Y_DST
.190f91		e8		inx		                INX
.190f92		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190f94		d0 ec		bne $190f82	                BNE BM_FILL_SCREEN_LOOPY
.190f96		c2 30		rep #$30	                REP #$30        ; set A&X long
.190f98		6b		rtl		                RTL
.190f99						BM_FILL_COMPUTE_Y_DST
.190f99		c2 20		rep #$20	                REP #$20        ; set A long
.190f9b		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190f9d		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190fa1		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190fa3		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190fa7		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190faa		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190fae		a9 00 00	lda #$0000	                LDA #$0000
.190fb1		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190fb5		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190fb9		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190fbb		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190fbf		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190fc1		a9 00 00	lda #$0000	                LDA #$0000
.190fc4		60		rts		                RTS
.190fc5						IBMP_PARSER
.190fc5		c2 30		rep #$30	                REP #$30        ; set A&X long
.190fc7		a0 00 00	ldy #$0000	                LDY #$0000
.190fca		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190fcc		c9 42 4d	cmp #$4d42	                CMP #$4D42
.190fcf		f0 03		beq $190fd4	                BEQ IBMP_PARSER_CONT
.190fd1		82 04 01	brl $1910d8	                BRL BMP_PARSER_END_WITH_ERROR
.190fd4						IBMP_PARSER_CONT
.190fd4		a0 02 00	ldy #$0002	                LDY #$0002
.190fd7		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190fd9		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190fdd		a0 04 00	ldy #$0004	                LDY #$0004
.190fe0		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190fe2		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190fe6		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190fe9		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190fed		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190ff1		18		clc		                CLC
.190ff2		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ff6		85 50		sta $50		                STA BMP_FILE_SIZE
.190ff8		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ffc		85 52		sta $52		                STA BMP_FILE_SIZE+2
.190ffe		a0 12 00	ldy #$0012	                LDY #$0012
.191001		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.191003		85 40		sta $40		                STA BMP_X_SIZE
.191005		a0 16 00	ldy #$0016	                LDY #$0016
.191008		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.19100a		85 42		sta $42		                STA BMP_Y_SIZE
.19100c		a0 2e 00	ldy #$002e	                LDY #$002E
.19100f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.191011		0a		asl a		                ASL A; Multiply by 2
.191012		0a		asl a		                ASL A; Multiply by 2
.191013		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.191015		e0 00 00	cpx #$0000	                CPX #$0000
.191018		d0 05		bne $19101f	                BNE BMP_LUT1_PICK
.19101a		20 e0 10	jsr $1910e0	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.19101d		80 08		bra $191027	                BRA DONE_TRANSFER_LUT;
.19101f						  BMP_LUT1_PICK
.19101f		e0 01 00	cpx #$0001	                CPX #$0001
.191022		d0 03		bne $191027	                BNE BMP_LUT2_PICK
.191024		20 10 11	jsr $191110	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.191027						  BMP_LUT2_PICK
.191027						  DONE_TRANSFER_LUT
.191027		a5 56		lda $56		                LDA BMP_POSITION_Y
.191029		8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.19102d		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.19102f		8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.191033		af 04 01 00	lda $000104	                LDA @lM0_RESULT
.191037		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.19103b		af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.19103f		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.191043		a5 54		lda $54		                LDA BMP_POSITION_X
.191045		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.191049		a9 00 00	lda #$0000	                LDA #$0000
.19104c		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.191050		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.191054		85 f0		sta $f0		                STA USER_TEMP
.191056		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.19105a		85 f2		sta $f2		                STA USER_TEMP+2
.19105c		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.19105e		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.191062		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.191064		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.191068		a5 f0		lda $f0		                LDA USER_TEMP
.19106a		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.19106e		a5 f2		lda $f2		                LDA USER_TEMP+2
.191070		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.191074		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.191078		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.19107a		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.19107e		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.191080		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.191082		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.191086		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.191088		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.19108c		a5 50		lda $50		                LDA BMP_FILE_SIZE
.19108e		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.191092		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.191094		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.191098		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.19109c		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.19109e		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.1910a2		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.1910a4		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.1910a6		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.1910aa		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.1910ac		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.1910b0		18		clc		                CLC
.1910b1		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.1910b3		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.1910b6		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.1910b9		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.1910bd		a9 ff ff	lda #$ffff	                LDA #$FFFF
.1910c0		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.1910c4		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.1910c8		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.1910ca		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.1910ce		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.1910d0		20 40 11	jsr $191140	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.1910d3		a2 f8 17	ldx #$17f8	                LDX #<>bmp_parser_msg0
.1910d6		80 03		bra $1910db	                BRA BMP_PARSER_END_NO_ERROR
.1910d8						BMP_PARSER_END_WITH_ERROR
.1910d8		a2 e4 17	ldx #$17e4	                LDX #<>bmp_parser_err0
.1910db						BMP_PARSER_END_NO_ERROR
.1910db		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print the first line
.1910df		6b		rtl		                RTL
.1910e0						BMP_PARSER_UPDATE_LUT0
.1910e0		38		sec		                SEC
.1910e1		a0 7a 00	ldy #$007a	                LDY #$007A
.1910e4		a2 00 00	ldx #$0000	                LDX #$0000
.1910e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1910e9						BMP_PARSER_UPDATE_LOOP
.1910e9		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.1910eb		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.1910ef		c8		iny		                INY
.1910f0		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.1910f2		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.1910f6		c8		iny		                INY
.1910f7		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.1910f9		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.1910fd		c8		iny		                INY
.1910fe		a9 80		lda #$80	                LDA #$80
.191100		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.191104		c8		iny		                INY ; For the Alpha Value, nobody cares
.191105		e8		inx		                INX
.191106		e8		inx		                INX
.191107		e8		inx		                INX
.191108		e8		inx		                INX
.191109		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.19110b		d0 dc		bne $1910e9	                BNE BMP_PARSER_UPDATE_LOOP
.19110d		c2 20		rep #$20	                REP #$20        ; set A long
.19110f		60		rts		                RTS
.191110						BMP_PARSER_UPDATE_LUT1
.191110		38		sec		                SEC
.191111		a0 36 00	ldy #$0036	                LDY #$0036
.191114		a2 00 00	ldx #$0000	                LDX #$0000
.191117		e2 20		sep #$20	                SEP #$20        ; set A short
.191119						PALETTE_LUT1_LOOP
.191119		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.19111b		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.19111f		c8		iny		                INY
.191120		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.191122		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.191126		c8		iny		                INY
.191127		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.191129		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.19112d		c8		iny		                INY
.19112e		a9 80		lda #$80	                LDA #$80
.191130		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.191134		c8		iny		                INY ; For the Alpha Value, nobody cares
.191135		e8		inx		                INX
.191136		e8		inx		                INX
.191137		e8		inx		                INX
.191138		e8		inx		                INX
.191139		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.19113b		d0 dc		bne $191119	                BNE PALETTE_LUT1_LOOP
.19113d		c2 20		rep #$20	                REP #$20        ; set A long
.19113f		60		rts		                RTS
.191140						BMP_PARSER_DMA_SHIT_OUT
.191140		a2 00 00	ldx #$0000	                LDX #$0000
.191143						BMP_PARSER_LOOPY
.191143		a0 00 00	ldy #$0000	                LDY #$0000
.191146		e2 20		sep #$20	                SEP #$20        ; set A short
.191148						BMP_PARSER_LOOPX
.191148		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.19114a		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.19114c		c8		iny		                INY
.19114d		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.19114f		d0 f7		bne $191148	                BNE BMP_PARSER_LOOPX
.191151		20 5d 11	jsr $19115d	                JSR BMP_PARSER_COMPUTE_Y_SRC
.191154		20 78 11	jsr $191178	                JSR BMP_PARSER_COMPUTE_Y_DST
.191157		e8		inx		                INX
.191158		e4 42		cpx $42		                CPX BMP_Y_SIZE
.19115a		d0 e7		bne $191143	                BNE BMP_PARSER_LOOPY
.19115c		60		rts		                RTS
.19115d						BMP_PARSER_COMPUTE_Y_SRC
.19115d		c2 20		rep #$20	                REP #$20        ; set A long
.19115f		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.191161		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.191165		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.191167		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.19116b		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.19116f		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.191171		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.191175		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.191177		60		rts		                RTS
.191178						BMP_PARSER_COMPUTE_Y_DST
.191178		c2 20		rep #$20	                REP #$20        ; set A long
.19117a		18		clc		                CLC
.19117b		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.19117d		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.19117f		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.191181		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.191183		69 00 00	adc #$0000	                ADC #$0000
.191186		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.191188		60		rts		                RTS
.191189						IRQ_HANDLER
.191189		e2 20		sep #$20	                SEP #$20        ; set A short
.19118b		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0 ; Clear the Pending INTERRUPT
.19118f		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0 ; Clear the Pending INTERRUPT
.191193		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1 ; Clear the Pending INTERRUPT
.191197		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1 ; Clear the Pending INTERRUPT
.19119b		af 42 01 00	lda $000142	                LDA @lINT_PENDING_REG2 ; Clear the Pending INTERRUPT
.19119f		8f 42 01 00	sta $000142	                STA @lINT_PENDING_REG2 ; Clear the Pending INTERRUPT
.1911a3		a2 00 00	ldx #$0000	                ldx #$0000
.1911a6		e2 10		sep #$10	                SEP #$10        ; set X short
.1911a8						IRQ_HANDLER_FETCH
.1911a8		af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF        ; Get Scan Code from KeyBoard
.1911ac		8f 88 0f 00	sta $000f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.1911b0		c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.1911b2		f0 74		beq $191228	                BEQ KB_SET_SHIFT
.1911b4		c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.1911b6		f0 7d		beq $191235	                BEQ KB_CLR_SHIFT
.1911b8		c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.1911ba		d0 03		bne $1911bf	                BNE NOT_KB_SET_CTRL
.1911bc		82 83 00	brl $191242	                BRL KB_SET_CTRL
.1911bf						NOT_KB_SET_CTRL
.1911bf		c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.1911c1		d0 03		bne $1911c6	                BNE KB_CHECK_ALT
.1911c3		82 89 00	brl $19124f	                BRL KB_CLR_CTRL
.1911c6		c9 38		cmp #$38	KB_CHECK_ALT    CMP #$38                ; Left ALT Pressed
.1911c8		d0 03		bne $1911cd	                BNE KB_ALT_UNPRESED
.1911ca		82 8f 00	brl $19125c	                BRL KB_SET_ALT
.1911cd		c9 b8		cmp #$b8	KB_ALT_UNPRESED CMP #$B8                ; Left ALT Unpressed
.1911cf		d0 03		bne $1911d4	                BNE KB_UNPRESSED
.1911d1		82 95 00	brl $191269	                BRL KB_CLR_ALT
.1911d4		29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.1911d6		c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.1911d8		d0 03		bne $1911dd	                BNE KB_NORM_SC
.1911da		82 96 00	brl $191273	                BRL KB_CHECK_B_DONE
.1911dd		af 88 0f 00	lda $000f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.1911e1		aa		tax		                TAX
.1911e2		af 87 0f 00	lda $000f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.1911e6		29 10		and #$10	                AND #$10
.1911e8		c9 10		cmp #$10	                CMP #$10
.1911ea		f0 1b		beq $191207	                BEQ SHIFT_KEY_ON
.1911ec		af 87 0f 00	lda $000f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.1911f0		29 20		and #$20	                AND #$20
.1911f2		c9 20		cmp #$20	                CMP #$20
.1911f4		f0 18		beq $19120e	                BEQ CTRL_KEY_ON
.1911f6		af 87 0f 00	lda $000f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.1911fa		29 40		and #$40	                AND #$40
.1911fc		c9 40		cmp #$40	                CMP #$40
.1911fe		f0 15		beq $191215	                BEQ ALT_KEY_ON
.191200		bf 00 1a 19	lda $191a00,x	                LDA @lScanCode_Press_Set1, x
.191204		82 12 00	brl $191219	                BRL KB_WR_2_SCREEN
.191207		bf 80 1a 19	lda $191a80,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.19120b		82 0b 00	brl $191219	                BRL KB_WR_2_SCREEN
.19120e		bf 00 1b 19	lda $191b00,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.191212		82 04 00	brl $191219	                BRL KB_WR_2_SCREEN
.191215		bf 80 1b 19	lda $191b80,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.191219						KB_WR_2_SCREEN
.191219		48		pha		                PHA
.19121a		c2 10		rep #$10	                REP #$10        ; set X long
.19121c		22 00 30 19	jsl $193000	                JSL SAVECHAR2CMDLINE
.191220		68		pla		                PLA
.191221		22 18 00 19	jsl $190018	                JSL PUTC
.191225		4c 73 12	jmp $191273	                JMP KB_CHECK_B_DONE
.191228		af 87 0f 00	lda $000f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.19122c		09 10		ora #$10	                ORA #$10
.19122e		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.191232		4c 73 12	jmp $191273	                JMP KB_CHECK_B_DONE
.191235		af 87 0f 00	lda $000f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.191239		29 ef		and #$ef	                AND #$EF
.19123b		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.19123f		4c 73 12	jmp $191273	                JMP KB_CHECK_B_DONE
.191242		af 87 0f 00	lda $000f87	KB_SET_CTRL    LDA KEYBOARD_SC_FLG
.191246		09 20		ora #$20	                ORA #$20
.191248		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.19124c		4c 73 12	jmp $191273	                JMP KB_CHECK_B_DONE
.19124f		af 87 0f 00	lda $000f87	KB_CLR_CTRL    LDA KEYBOARD_SC_FLG
.191253		29 df		and #$df	                AND #$DF
.191255		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.191259		4c 73 12	jmp $191273	                JMP KB_CHECK_B_DONE
.19125c		af 87 0f 00	lda $000f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.191260		09 40		ora #$40	                ORA #$40
.191262		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.191266		4c 73 12	jmp $191273	                JMP KB_CHECK_B_DONE
.191269		af 87 0f 00	lda $000f87	KB_CLR_ALT     LDA KEYBOARD_SC_FLG
.19126d		29 bf		and #$bf	                AND #$BF
.19126f		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.191273						KB_CHECK_B_DONE
.191273		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.191277		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.191279		c9 01		cmp #$01	                CMP #OUT_BUF_FULL ; if Still Byte in the Buffer, fetch it out
.19127b		d0 03		bne $191280	                BNE KB_DONE
.19127d		4c a8 11	jmp $1911a8	                JMP IRQ_HANDLER_FETCH
.191280						KB_DONE
.191280		c2 30		rep #$30	                REP #$30        ; set A&X long
.191282		6b		rtl		                RTL
.191283						NMI_HANDLER
.191283		a2 d3 17	ldx #$17d3	                LDX #<>nmi_Msg
.191286		22 d1 07 19	jsl $1907d1	                JSL IPRINT       ; print the Init
.19128a		6b		rtl		                RTL
.19128b		00		brk #		IRESTORE        BRK ; Warm boot routine
.19128c		00		brk #		ISCINIT         BRK ;
.19128d		00		brk #		IIOINIT         BRK ;
.19128e		00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.19128f		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.191290		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.191291		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.191292		00		brk #		ICLOSE          BRK ; Close a channel
.191293		00		brk #		ISETIN          BRK ; Set the current input channel
.191294		00		brk #		ISETOUT         BRK ; Set the current output channel
.191295		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.191296		00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.191297		00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.191298		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.191299		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.19129a		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.19129b		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.19129c		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.19129d		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.19129e		00		brk #		IPRINTF         BRK ; Print a float value
.19129f		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.1912a0		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.1912a1		00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.1912a2		00		brk #		IPUSHKEY        BRK ;
.1912a3		00		brk #		IPUSHKEYS       BRK ;
.1912a4		00		brk #		ICSRLEFT        BRK ;
.1912a5		00		brk #		ICSRHOME        BRK ;
.1912a6		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.1912a7		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.1912a8						KERNEL_DATA
>1912a8		20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, "C256 FOENIX DEVELOPMENT SYSTEM",$0D
>1912b0		0b 0c 0b 0c 0b 0c 43 32 35 36 20 46 4f 45 4e 49
>1912c0		58 20 44 45 56 45 4c 4f 50 4d 45 4e 54 20 53 59
>1912d0		53 54 45 4d 0d
>1912d5		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "May the Power of the 65C816 Bring You Joy!",$0D
>1912dd		0c 0b 0c 0b 0c 20 4d 61 79 20 74 68 65 20 50 6f
>1912ed		77 65 72 20 6f 66 20 74 68 65 20 36 35 43 38 31
>1912fd		36 20 42 72 69 6e 67 20 59 6f 75 20 4a 6f 79 21
>19130d		0d
>19130e		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, "System Designed by: Stefany Allaire",$0D
>191316		0b 0c 0b 0c 20 20 53 79 73 74 65 6d 20 44 65 73
>191326		69 67 6e 65 64 20 62 79 3a 20 53 74 65 66 61 6e
>191336		79 20 41 6c 6c 61 69 72 65 0d
>191340		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, $20, "www.c256foenix.com",$0D
>191348		0c 0b 0c 20 20 20 77 77 77 2e 63 32 35 36 66 6f
>191358		65 6e 69 78 2e 63 6f 6d 0d
>191361		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, $20, $20, "2048KB CODE RAM  4096K VIDEO MEM",$0D, $00
>191369		0b 0c 20 20 20 20 32 30 34 38 4b 42 20 43 4f 44
>191379		45 20 52 41 4d 20 20 34 30 39 36 4b 20 56 49 44
>191389		45 4f 20 4d 45 4d 0d 00
.191391						old_pc_style_stat
>191391		d6 c4 c4 c4 c4 c4 c4 c4		                .text $D6, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C2
>191399		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1913a9		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c2
>1913b5		c4 c4 c4 c4 c4 c4 c4 c4		                .text      $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $B7, $0D
>1913bd		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1913cd		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 b7 0d
>1913d9		ba 20 4d 61 69 6e 20 50		                .text $BA, " Main Processor     : 65C816      ",$B3," Base Memory Size     : 2048K     ",$BA, $0D
>1913e1		72 6f 63 65 73 73 6f 72 20 20 20 20 20 3a 20 36
>1913f1		35 43 38 31 36 20 20 20 20 20 20 b3 20 42 61 73
>191401		65 20 4d 65 6d 6f 72 79 20 53 69 7a 65 20 20 20
>191411		20 20 3a 20 32 30 34 38 4b 20 20 20 20 20 ba 0d
>191421		ba 20 4e 75 6d 65 72 69		                .text $BA, " Numeric Processor  : CFP9518     ",$B3," Video Memory Size    : 4096K     ",$BA, $0D
>191429		63 20 50 72 6f 63 65 73 73 6f 72 20 20 3a 20 43
>191439		46 50 39 35 31 38 20 20 20 20 20 b3 20 56 69 64
>191449		65 6f 20 4d 65 6d 6f 72 79 20 53 69 7a 65 20 20
>191459		20 20 3a 20 34 30 39 36 4b 20 20 20 20 20 ba 0d
>191469		ba 20 46 6c 6f 70 70 79		                .text $BA, " Floppy Driver A:   : Yes         ",$B3," Hard Disk C: Type    : None      ",$BA, $0D
>191471		20 44 72 69 76 65 72 20 41 3a 20 20 20 3a 20 59
>191481		65 73 20 20 20 20 20 20 20 20 20 b3 20 48 61 72
>191491		64 20 44 69 73 6b 20 43 3a 20 54 79 70 65 20 20
>1914a1		20 20 3a 20 4e 6f 6e 65 20 20 20 20 20 20 ba 0d
>1914b1		ba 20 53 44 43 61 72 64		                .text $BA, " SDCard Card Reader : Yes         ",$B3," Serial Port(s)       : $AF:13F8, ",$BA, $0D
>1914b9		20 43 61 72 64 20 52 65 61 64 65 72 20 3a 20 59
>1914c9		65 73 20 20 20 20 20 20 20 20 20 b3 20 53 65 72
>1914d9		69 61 6c 20 50 6f 72 74 28 73 29 20 20 20 20 20
>1914e9		20 20 3a 20 24 41 46 3a 31 33 46 38 2c 20 ba 0d
>1914f9		ba 20 44 69 73 70 6c 61		                .text $BA, " Display Type       : VGA         ",$B3,"                        $AF:12F8  ",$BA, $0D
>191501		79 20 54 79 70 65 20 20 20 20 20 20 20 3a 20 56
>191511		47 41 20 20 20 20 20 20 20 20 20 b3 20 20 20 20
>191521		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>191531		20 20 20 20 24 41 46 3a 31 32 46 38 20 20 ba 0d
>191541		ba 20 46 6f 65 6e 69 78		                .text $BA, " Foenix Kernel Date : 042219      ",$B3," Parallel Ports(s)    : $AF:1378  ",$BA, $0D
>191549		20 4b 65 72 6e 65 6c 20 44 61 74 65 20 3a 20 30
>191559		34 32 32 31 39 20 20 20 20 20 20 b3 20 50 61 72
>191569		61 6c 6c 65 6c 20 50 6f 72 74 73 28 73 29 20 20
>191579		20 20 3a 20 24 41 46 3a 31 33 37 38 20 20 ba 0d
>191589		ba 20 4b 65 79 62 6f 61		                .text $BA, " Keyboard Type      : PS2         ",$B3," Sound Chip Installed : OPL2(2)   ",$BA, $0D
>191591		72 64 20 54 79 70 65 20 20 20 20 20 20 3a 20 50
>1915a1		53 32 20 20 20 20 20 20 20 20 20 b3 20 53 6f 75
>1915b1		6e 64 20 43 68 69 70 20 49 6e 73 74 61 6c 6c 65
>1915c1		64 20 3a 20 4f 50 4c 32 28 32 29 20 20 20 ba 0d
>1915d1		d3 c4 c4 c4 c4 c4 c4 c4		                .text $D3, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C1
>1915d9		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1915e9		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c1
>1915f5		c4 c4 c4 c4 c4 c4 c4 c4		                .text      $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $BD, $00
>1915fd		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>19160d		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 bd 00
>191619		1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>191621		4d 4d 2d 2d 5d 5d
>191627		1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D
>19162f		4d 2d 2d 5d 5d 5d
>191635		1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D
>19163d		2d 2d 5d 5d 5d 5d
>191643		1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D, $5D
>19164b		2d 5d 5d 5d 5d 5d
>191651		1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D, $5D, $5D
>191659		5d 5d 5d 5d 5d 5d
>19165f		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>191663		00 00 80 ff			                .text $00, $00, $80, $FF
>191667		00 80 00 ff			                .text $00, $80, $00, $FF
>19166b		80 00 00 ff			                .text $80, $00, $00, $FF
>19166f		00 80 80 ff			                .text $00, $80, $80, $FF
>191673		80 80 00 ff			                .text $80, $80, $00, $FF
>191677		80 00 80 ff			                .text $80, $00, $80, $FF
>19167b		80 80 80 ff			                .text $80, $80, $80, $FF
>19167f		00 45 ff ff			                .text $00, $45, $FF, $FF
>191683		13 45 8b ff			                .text $13, $45, $8B, $FF
>191687		00 00 20 ff			                .text $00, $00, $20, $FF
>19168b		00 20 00 ff			                .text $00, $20, $00, $FF
>19168f		20 00 00 ff			                .text $20, $00, $00, $FF
>191693		20 20 20 ff			                .text $20, $20, $20, $FF
>191697		40 40 40 ff			                .text $40, $40, $40, $FF
>19169b		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>19169f		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>1916a3		00 00 80 ff			                .text $00, $00, $80, $FF
>1916a7		00 80 00 ff			                .text $00, $80, $00, $FF
>1916ab		80 00 00 ff			                .text $80, $00, $00, $FF
>1916af		00 20 20 ff			                .text $00, $20, $20, $FF
>1916b3		20 20 00 ff			                .text $20, $20, $00, $FF
>1916b7		20 00 20 ff			                .text $20, $00, $20, $FF
>1916bb		20 20 20 ff			                .text $20, $20, $20, $FF
>1916bf		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>1916c3		13 45 8b ff			                .text $13, $45, $8B, $FF
>1916c7		00 00 20 ff			                .text $00, $00, $20, $FF
>1916cb		00 20 00 ff			                .text $00, $20, $00, $FF
>1916cf		40 00 00 ff			                .text $40, $00, $00, $FF
>1916d3		10 10 10 ff			                .text $10, $10, $10, $FF
>1916d7		40 40 40 ff			                .text $40, $40, $40, $FF
>1916db		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>1916df		0d 44 65 62 75 67 20 43		version_msg     .text $0D, "Debug Code Version 0.0.0 - March 26th, 2019", $00
>1916e7		6f 64 65 20 56 65 72 73 69 6f 6e 20 30 2e 30 2e
>1916f7		30 20 2d 20 4d 61 72 63 68 20 32 36 74 68 2c 20
>191707		32 30 31 39 00
>19170c		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>191714		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>191724		00
>191725		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>19172d		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>19173d		00
>19173e		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>191746		20 45 78 65 63 75 74 65 64 2e 0d 00
>191752		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>19175a		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>19176a		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>191772		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>191782		64 2e 2e 2e 0d 00
>191788		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>191790		20 50 72 65 73 65 6e 74 0d 00
>19179a		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>1917a2		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>1917b2		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>1917c2		5b 49 52 51 20 49 6e 74		irq_Msg         .text "[IRQ Interrupt]", $0D, $00
>1917ca		65 72 72 75 70 74 5d 0d 00
>1917d3		5b 4e 4d 49 20 49 6e 74		nmi_Msg         .text "[NMI Interrupt]", $0D, $00
>1917db		65 72 72 75 70 74 5d 0d 00
>1917e4		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>1917ec		54 55 52 45 20 46 4f 55 4e 44 2e 00
>1917f8		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>191800		45 44 2e 00
>191804		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>19180c		47 20 42 4d 50 20 50 41 52 53 45 52 00
>191819		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>191821		47 20 30 32 30 30 30 30		hello_ml        .null "G 020000",$0D
>191829		0d 00
>19182b		48 45 4c 4c 4f 20 57 4f		                .null "HELLO WORLD",$0D
>191833		52 4c 44 0d 00
>191838		0d 00				                .null $0D
>19183a		20 50 43 20 20 20 20 20		                .null " PC     A    X    Y    SP   DBR DP   NVMXDIZC",$0D
>191842		41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>191852		50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>191862		58 44 49 5a 43 0d 00
>191869		3b 30 30 32 31 31 32 20		                .null ";002112 0019 F0AA 0000 D6FF F8  0000 --M-----"
>191871		30 30 31 39 20 46 30 41 41 20 30 30 30 30 20 44
>191881		36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 4d
>191891		2d 2d 2d 2d 2d 00
>191897		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>19189f		52 4f 52 00
>1918a3		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>1918ab		38 39 41 42 43 44 45 46 00
>1918b4		45 72 72 6f 72 20 69 6e		error_FAT       .null "Error in the floppy boot sector, wrong data",$0D
>1918bc		20 74 68 65 20 66 6c 6f 70 70 79 20 62 6f 6f 74
>1918cc		20 73 65 63 74 6f 72 2c 20 77 72 6f 6e 67 20 64
>1918dc		61 74 61 0d 00
>1918e1		4d 53 44 4f 53 20 20 20		file_to_load    .text "MSDOS   SYS"
>1918e9		53 59 53
>1918ec		2d 2d 2d 2d 2d 2d 2d 2d		minus_line       .text "-----------------------------------------------",$0A,$0D,0
>1918f4		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>191904		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>191914		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>19191e						.align 256
>191a00		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191a08		37 38 39 30 2d 3d 08 09
>191a10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191a18		6f 70 5b 5d 0d 00 61 73
>191a20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191a28		27 60 00 5c 7a 78 63 76
>191a30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191a38		00 20 00 00 00 00 00 00
>191a40		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191a48		00 00 00 00 00 00 00 00
>191a50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191a58		00 00 00 00 00 00 00 00
>191a60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191a68		00 00 00 00 00 00 00 00
>191a70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191a78		00 00 00 00 00 00 00 00
>191a80		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>191a88		26 2a 28 29 5f 2b 08 09
>191a90		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>191a98		4f 50 7b 7d 0d 00 41 53
>191aa0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>191aa8		22 7e 00 5c 5a 58 43 56
>191ab0		42 4e 4d 3c 3e 3f 00 2a		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191ab8		00 20 00 00 00 00 00 00
>191ac0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191ac8		00 00 00 00 00 00 00 00
>191ad0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191ad8		00 00 00 00 00 00 00 00
>191ae0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191ae8		00 00 00 00 00 00 00 00
>191af0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191af8		00 00 00 00 00 00 00 00
>191b00		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191b08		37 38 39 30 2d 3d 08 09
>191b10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191b18		6f 70 5b 5d 0d 00 61 73
>191b20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191b28		27 60 00 5c 7a 78 63 76
>191b30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191b38		00 20 00 00 00 00 00 00
>191b40		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191b48		00 00 00 00 00 00 00 00
>191b50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191b58		00 00 00 00 00 00 00 00
>191b60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191b68		00 00 00 00 00 00 00 00
>191b70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191b78		00 00 00 00 00 00 00 00
>191b80		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191b88		37 38 39 30 2d 3d 08 09
>191b90		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191b98		6f 70 5b 5d 0d 00 61 73
>191ba0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191ba8		27 60 00 5c 7a 78 63 76
>191bb0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191bb8		00 20 00 00 00 00 00 00
>191bc0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191bc8		00 00 00 00 00 00 00 00
>191bd0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191bd8		00 00 00 00 00 00 00 00
>191be0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191be8		00 00 00 00 00 00 00 00
>191bf0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191bf8		00 00 00 00 00 00 00 00
>191c00		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191c08		37 38 39 30 2d 3d 08 09
>191c10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191c18		6f 70 5b 5d 0d 00 61 73
>191c20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191c28		27 60 00 5c 7a 78 63 76
>191c30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191c38		00 20 00 00 00 00 00 00
>191c40		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191c48		00 00 00 00 00 00 00 00
>191c50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191c58		00 00 00 00 00 00 00 00
>191c60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191c68		00 00 00 00 00 00 00 00
>191c70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191c78		00 00 00 00 00 00 00 00
>191c80						.align 256
>191d00		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>191d08		34 37 3a 3d 3f 41 44 46
>191d10		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>191d18		57 58 5a 5b 5d 5e 60 61
>191d20		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>191d28		6d 6f 70 71 72 73 75 76
>191d30		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>191d38		80 81 82 83 84 85 86 87
>191d40		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>191d48		8f 90 91 92 93 93 94 95
>191d50		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>191d58		9d 9e 9e 9f a0 a1 a2 a2
>191d60		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>191d68		a9 aa ab ab ac ad ae ae
>191d70		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>191d78		b5 b5 b6 b7 b7 b8 b9 b9
>191d80		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>191d88		bf c0 c0 c1 c2 c2 c3 c4
>191d90		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>191d98		c9 ca ca cb cb cc cd cd
>191da0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>191da8		d2 d3 d4 d4 d5 d5 d6 d6
>191db0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>191db8		db dc dc dd de de df df
>191dc0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>191dc8		e4 e4 e5 e5 e6 e6 e7 e7
>191dd0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>191dd8		ec ec ed ed ee ee ef ef
>191de0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>191de8		f4 f4 f5 f5 f6 f6 f7 f7
>191df0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>191df8		fb fc fc fd fd fe fe ff
>191e00						.align 256
>191e00		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>191e08		25 27 2a 2c 2e 30 32 34
>191e10		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>191e18		44 46 47 49 4a 4c 4d 4f
>191e20		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>191e28		5b 5c 5d 5e 60 61 62 63
>191e30		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>191e38		6d 6e 70 71 72 73 74 75
>191e40		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>191e48		7e 7f 80 81 82 83 84 84
>191e50		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>191e58		8d 8e 8e 8f 90 91 92 93
>191e60		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>191e68		9a 9b 9c 9d 9e 9f 9f a0
>191e70		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>191e78		a7 a8 a9 aa aa ab ac ad
>191e80		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>191e88		b3 b4 b5 b6 b6 b7 b8 b8
>191e90		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>191e98		bf bf c0 c1 c2 c2 c3 c4
>191ea0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>191ea8		ca ca cb cc cc cd ce ce
>191eb0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>191eb8		d4 d5 d6 d6 d7 d7 d8 d9
>191ec0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>191ec8		de df e0 e0 e1 e1 e2 e3
>191ed0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>191ed8		e8 e9 e9 ea ea eb ec ec
>191ee0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>191ee8		f1 f2 f3 f3 f4 f4 f5 f5
>191ef0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>191ef8		fb fb fc fc fd fd fe ff
>191f00						.align 256
>191f00		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>191f08		83 dd ce 39 cd c5 3b 15
>191f10		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>191f18		87 12 31 65 89 27 88 42
>191f20		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>191f28		94 ce 56 ec fe da 58 c9
>191f30		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>191f38		d0 10 2c b2 4b ea 32 61
>191f40		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>191f48		a1 e6 ca 2d b3 ce b0 79
>191f50		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>191f58		5f e3 fb bd 15 2e be f5
>191f60		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>191f68		8d 8f 2c 80 0a 5e 99 36
>191f70		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>191f78		13 52 44 2f e3 ef 44 a2
>191f80		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>191f88		be 23 02 58 0a 52 5e b4
>191f90		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>191f98		d5 cf 3e df c4 9e da bb
>191fa0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>191fa8		77 7d b1 3b 4a 68 35 6e
>191fb0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>191fb8		b5 8f 44 63 55 6f e1 50
>191fc0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>191fc8		57 74 b9 bd 05 14 50 eb
>191fd0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>191fd8		44 bc ec db 22 58 fc be
>191fe0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>191fe8		24 aa 82 11 5c 9f 43 4d
>191ff0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>191ff8		3e 3d 66 7e 0a 1c 6b 74
.1ff000						FONT_4_BANK0
>1ff000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1ff008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1ff018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1ff028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1ff038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1ff048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1ff058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1ff068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1ff078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1ff088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1ff098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1ff0a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1ff0b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1ff0c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1ff0d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1ff0e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1ff0f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1ff108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1ff118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1ff128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1ff138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1ff148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1ff158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1ff168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1ff178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1ff188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1ff198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1ff1a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1ff1b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1ff1c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1ff1d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1ff1e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1ff1f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1ff208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1ff218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1ff228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1ff238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1ff248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1ff258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1ff268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1ff278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1ff288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1ff298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1ff2a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1ff2b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1ff2c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1ff2d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1ff2e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1ff2f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1ff308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1ff318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1ff328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1ff338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1ff348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1ff358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1ff368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1ff378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1ff388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1ff398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1ff3a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1ff3b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1ff3c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1ff3d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1ff3e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1ff3f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1ff408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1ff418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1ff428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1ff438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1ff448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1ff458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1ff468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1ff478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1ff488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1ff498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1ff4a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1ff4b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1ff4c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1ff4d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1ff4e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1ff4f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1ff508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1ff518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1ff528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1ff538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1ff548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1ff558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1ff568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1ff578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1ff588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1ff598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1ff5a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1ff5b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1ff5c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1ff5d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1ff5e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1ff5f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1ff608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1ff618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1ff628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1ff638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1ff648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1ff658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1ff668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1ff678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1ff688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1ff698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1ff6a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1ff6b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1ff6c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1ff6d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1ff6e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1ff6f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1ff708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1ff718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1ff728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1ff738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1ff748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1ff758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1ff768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1ff778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1ff788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1ff798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1ff7a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1ff7b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1ff7c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1ff7d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1ff7e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1ff7f8		00 00 00 00 00 00 00 00
.1ff800						FONT_4_BANK1
>1ff800		00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>1ff808		7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>1ff818		ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>1ff828		ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>1ff838		ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>1ff848		00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>1ff858		00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>1ff868		00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>1ff878		00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>1ff888		ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>1ff898		ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>1ff8a8		ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>1ff8b8		ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>1ff8c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1ff908		10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>1ff918		24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>1ff928		62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>1ff938		10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>1ff948		10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>1ff958		00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>1ff968		00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>1ff978		04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>1ff988		10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>1ff998		38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>1ff9a8		7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>1ff9b8		7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>1ff9c8		38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>1ff9d8		00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>1ff9e8		00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>1ff9f8		38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>1ffa08		10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>1ffa18		38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>1ffa28		7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>1ffa38		38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>1ffa48		38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>1ffa58		24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>1ffa68		44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>1ffa78		38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>1ffa88		38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>1ffa98		3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>1ffaa8		44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>1ffab8		82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>1ffac8		44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>1ffad8		38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>1ffae8		38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>1ffaf8		00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>1ffb08		00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>1ffb18		00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>1ffb28		00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>1ffb38		00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>1ffb48		10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>1ffb58		20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>1ffb68		00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>1ffb78		00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>1ffb88		00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>1ffb98		00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>1ffba8		00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>1ffbb8		00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>1ffbc8		00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>1ffbd8		0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>1ffbe8		30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>1ffbf8		00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>1ffc08		00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>1ffc18		00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>1ffc28		00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>1ffc38		0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>1ffc48		02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>1ffc58		00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>1ffc68		18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>1ffc78		24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>1ffc88		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>1ffc98		ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>1ffca8		ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>1ffcb8		f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>1ffcc8		fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>1ffcd8		3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>1ffce8		0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>1ffcf8		00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>1ffd08		f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>1ffd18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1ffd28		80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>1ffd38		01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>1ffd48		ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>1ffd58		18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>1ffd68		18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>1ffd78		00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>1ffd88		18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>1ffd98		18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>1ffda8		e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>1ffdb8		ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>1ffdc8		00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>1ffdd8		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>1ffde8		18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>1ffdf8		f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>1ffe08		08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>1ffe18		00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>1ffe28		00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>1ffe38		30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>1ffe48		00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>1ffe58		18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>1ffe68		c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>1ffe78		ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>1ffe88		00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>1ffe98		36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>1ffea8		00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>1ffeb8		00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>1ffec8		06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>1ffed8		18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>1ffee8		18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>1ffef8		ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>1fff08		00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>1fff18		00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>1fff28		24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>1fff38		24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>1fff48		24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>1fff58		0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>1fff68		80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>1fff78		cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>1fff88		0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>1fff98		ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>1fffa8		00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>1fffb8		00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>1fffc8		aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>1fffd8		00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>1fffe8		18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>1ffff8		00 00 00 00 00 00 00 00

;******  End of listing
