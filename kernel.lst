
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass --m65816 --long-address --flat -b -o kernel.bin --list kernel.lst kernel.asm
; Tue May 21 16:10:04 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm


;******  Processing file: macros_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: simulator_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020				CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				CMD_PARSER_TMPX  = $000040 ; <<< Command Parser 2Bytes
=$000042				CMD_PARSER_TMPY  = $000042 ; <<< Command Parser 2Bytes
=$000044				CMD_LIST_PTR     = $000044 ; <<< Command Parser 3 Bytes
=$000048				CMD_PARSER_PTR   = $000048 ; <<< Command Parser 3 Bytes
=$00004b				CMD_ATTRIBUTE    = $00004B ; <<< Command Parser 2 Bytes (16bits Attribute Field)
=$00004d				CMD_EXEC_ADDY    = $00004D ; <<< Command Parser 3 Bytes 24 Bits Address Jump to execute the Command
=$000050				KEY_BUFFER_RPOS  = $000050 ;
=$000052				KEY_BUFFER_WPOS  = $000052 ;
=$000054				CMD_VARIABLE_TMP = $000054 ;
=$000056				CMD_ARG_DEV      = $000056 ;
=$000057				CMD_ARG_SA       = $000057 ;
=$00005a				CMD_ARG_EA       = $00005A ;
=$00005d				CMD_VALID        = $00005D ;
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_BLOCK_BEGIN = $000320 ;
=$000324				SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328				SDOS_FILE_SIZE   = $000328 ;
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330				SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334				SDOS_BYTE_PTR    = $000334
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400				SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff				SDOS_BLK_END     = $0006FF ;
=$000700				CURRUART         = $000700  ; 1 byte: the number of the current selected COM port (1 or 2)
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
=$001000				TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$18ff00				ISR_BEGIN        = $18FF00 ; Byte  Beginning of CPU vectors in Direct page
=$18ff00				HRESET           = $18FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$18ff10				HCOP             = $18FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$18ff20				HBRK             = $18FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$18ff30				HABORT           = $18FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$18ff40				HNMI             = $18FF40 ;32 Bytes Handle NMI
=$18ff60				HIRQ             = $18FF60 ;32 Bytes Handle IRQ
=$18ff80				Unused_FF80      = $18FF80 ;End of direct page Interrrupt handlers
=$18ffe0				VECTORS_BEGIN    = $18FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$200000				VECTORS_END      = $200000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: kernel.asm


;******  Processing file: page_00_data.asm

>180000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003	50 00				                .word 80            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007	3c 00				                .word 60            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: kernel.asm


;******  Processing file: page_00_code.asm

.18ff00	18		clc		RHRESET         CLC
.18ff01	fb		xce		                XCE
.18ff02	5c 00 00 19	jmp $190000	                JML BOOT
.18ff10					RHCOP
.18ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff12	8b		phb		                PHB
.18ff13	0b		phd		                PHD
.18ff14	48		pha		                PHA
.18ff15	da		phx		                PHX
.18ff16	5a		phy		                PHY
.18ff17	5c 08 00 19	jmp $190008	                JML BREAK
.18ff20					RHBRK
.18ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff22	8b		phb		                PHB
.18ff23	0b		phd		                PHD
.18ff24	48		pha		                PHA
.18ff25	da		phx		                PHX
.18ff26	5a		phy		                PHY
.18ff27	5c 08 00 19	jmp $190008	                JML BREAK
.18ff30					RHABORT
.18ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff32	8b		phb		                PHB
.18ff33	0b		phd		                PHD
.18ff34	48		pha		                PHA
.18ff35	da		phx		                PHX
.18ff36	5a		phy		                PHY
.18ff37	5c 08 00 19	jmp $190008	                JML BREAK
.18ff40					 RHNMI
.18ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff42	8b		phb		                PHB
.18ff43	0b		phd		                PHD
.18ff44	48		pha		                PHA
.18ff45	da		phx		                PHX
.18ff46	5a		phy		                PHY
.18ff47	22 4b 53 19	jsl $19534b	                JSL NMI_HANDLER
.18ff4b	7a		ply		                PLY
.18ff4c	fa		plx		                PLX
.18ff4d	68		pla		                PLA
.18ff4e	2b		pld		                PLD
.18ff4f	ab		plb		                PLB
.18ff50	40		rti		                RTI
.18ff60					RHIRQ
.18ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff62	8b		phb		                PHB
.18ff63	0b		phd		                PHD
.18ff64	48		pha		                PHA
.18ff65	da		phx		                PHX
.18ff66	5a		phy		                PHY
.18ff67	22 79 51 19	jsl $195179	                JSL IRQ_HANDLER
.18ff6b	7a		ply		                PLY
.18ff6c	fa		plx		                PLX
.18ff6d	68		pla		                PLA
.18ff6e	2b		pld		                PLD
.18ff6f	ab		plb		                PLB
.18ff70	40		rti		                RTI
.18ffe0	5c 68 50 19	jmp $195068	JUMP_READY      JML IMREADY     ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>18ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>18ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>18ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>18ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>18ffec	00 00				                .word $0000    ; FFEC
>18ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.18fff0	5c 72 05 19	jmp $190572	RRETURN         JML IRETURN
>18fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>18fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>18fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>18fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>18fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>18fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: kernel.asm


;******  Processing file: Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: kernel.asm


;******  Processing file: interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$01					FNX0_INT00_SOF    = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL    = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0   = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1   = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2   = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC    = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC    = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE  = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT    = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01					FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02					FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04					FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08					FNX2_INT03_SDMA   = $08  ;System DMA
=$10					FNX2_INT04_VDMA   = $10  ;Video DMA
=$20					FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40					FNX2_INT06_EXT    = $40  ;External Expansion
=$80					FNX2_INT07_ALLONE = $80  ; Not Used - Always 1

;******  Return to file: kernel.asm


;******  Processing file: dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: kernel.asm


;******  Processing file: vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$af0004				BORDER_CTRL_REG         = $AF0004
=$01					Border_Ctrl_Enable      = $01
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BACKGROUND_COLOR_B      = $AF0008 ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af0009				BACKGROUND_COLOR_G      = $AF0009
=$af000a				BACKGROUND_COLOR_R      = $AF000A ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_RESERVED        = $AF0011   ;Not in Use
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$af0401				VDMA_COUNT_REG_L        = $AF0401
=$af0402				VDMA_COUNT_REG_M        = $AF0402
=$af0403				VDMA_COUNT_REG_H        = $AF0403
=$af0404				VDMA_DATA_2_WRITE_L     = $AF0404
=$af0405				VDMA_DATA_2_WRITE_H     = $AF0405
=$af0406				VDMA_STRIDE_L           = $AF0406
=$af0407				VDMA_STRIDE_H           = $AF0407
=$af0408				VDMA_SRC_ADDY_L         = $AF0408
=$af0409				VDMA_SRC_ADDY_M         = $AF0409
=$af040a				VDMA_SRC_ADDY_H         = $AF040A
=$af040b				VDMA_RESERVED_0         = $AF040B
=$af040c				VDMA_DST_ADDY_L         = $AF040C
=$af040d				VDMA_DST_ADDY_M         = $AF040D
=$af040e				VDMA_DST_ADDY_H         = $AF040E
=$af040f				VDMA_RESERVED_1         = $AF040F
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: kernel.asm


;******  Processing file: super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: kernel.asm


;******  Processing file: keyboard_def.asm

=$af1064				STATUS_PORT 	        =	$AF1064
=$af1060				KBD_OUT_BUF 	        =	$AF1060
=$af1060				KBD_INPT_BUF	        = $AF1060
=$af1064				KBD_CMD_BUF		        = $AF1064
=$af1060				KBD_DATA_BUF	        = $AF1060
=$af1060				PORT_A			          =	$AF1060
=$af1061				PORT_B			          =	$AF1061
=$01					OUT_BUF_FULL  =	$01
=$02					INPT_BUF_FULL	=	$02
=$04					SYS_FLAG		  =	$04
=$08					CMD_DATA		  =	$08
=$10					KEYBD_INH     =	$10
=$20					TRANS_TMOUT	  =	$20
=$40					RCV_TMOUT		  =	$40
=$80					PARITY_EVEN		=	$80
=$10					INH_KEYBOARD	=	$10
=$ae					KBD_ENA			  =	$AE
=$ad					KBD_DIS			  =	$AD
=$f1					KB_MENU			  =	$F1
=$f4					KB_ENABLE		  =	$F4
=$f7					KB_MAKEBREAK  =	$F7
=$fe					KB_ECHO			  =	$FE
=$ff					KB_RESET		  =	$FF
=$ed					KB_LED_CMD		=	$ED
=$aa					KB_OK			    =	$AA
=$fa					KB_ACK			  =	$FA
=$ff					KB_OVERRUN		=	$FF
=$fe					KB_RESEND		  =	$FE
=$f0					KB_BREAK		  =	$F0
=$10					KB_FA			    =	$10
=$20					KB_FE			    =	$20
=$40					KB_PR_LED		  =	$40

;******  Return to file: kernel.asm


;******  Processing file: SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: kernel.asm


;******  Processing file: RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: kernel.asm


;******  Processing file: io_def.asm

=$afe800				JOYSTICK0     = $AFE800  ;(R) Joystick 0 - J7 (Next to Buzzer)
=$afe801				JOYSTICK1     = $AFE801  ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2     = $AFE802  ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3     = $AFE803  ;(R) Joystick 3 - J10 (next to SD Card)
=$afe804				DIPSWITCH     = $AFE804  ;(R) $AFE804...$AFE807
=$afe808				SDCARD_DATA   = $AFE808  ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe809				SDCARD_CMD    = $AFE809  ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe810				SDCARD_STAT   = $AFE810  ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe820				CODEC_DATA_LO = $AFE820  ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe821				CODEC_DATA_HI = $AFE821  ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe822				CODEC_WR_CTRL = $AFE822  ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: kernel.asm


;******  Processing file: CMD_Parser.asm

.193000					SAVECHAR2CMDLINE
.193000	0b		phd		                PHD
.193001	e2 20		sep #$20	                SEP #$20        ; set A short
.193003					NOT_CARRIAGE_RETURN
.193003	a6 52		ldx $52		                LDX KEY_BUFFER_WPOS   ; So the Receive Character is saved in the Buffer
.193005	c9 20		cmp #$20	                CMP #$20
.193007	90 22		bcc $19302b	                BCC CHECK_LOWERTHANSPACE
.193009	c9 80		cmp #$80	                CMP #$80
.19300b	b0 39		bcs $193046	                BCS EXIT_SAVE2_CMDLINE
.19300d	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE  ; Make sure we haven't been overboard.
.193010	b0 34		bcs $193046	                BCS EXIT_SAVE2_CMDLINE  ; Stop storing - An error should ensue here...
.193012	c9 61		cmp #$61	                CMP #$61              ; "a"
.193014	90 06		bcc $19301c	                BCC CAPS_NO_CHANGE ;
.193016	c9 7b		cmp #$7b	                CMP #$7B              ; '{'  Char after 'z'
.193018	b0 02		bcs $19301c	                BCS CAPS_NO_CHANGE ;
.19301a	29 df		and #$df	                AND #$DF    ; remove the $20 in $61
.19301c					CAPS_NO_CHANGE
.19301c	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.193020	e8		inx		                INX
.193021	86 52		stx $52		                STX KEY_BUFFER_WPOS
.193023	a9 00		lda #$00	                LDA #$00
.193025	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X   ; Store a EOL in the following location for good measure
.193029	80 1b		bra $193046	                BRA EXIT_SAVE2_CMDLINE
.19302b					CHECK_LOWERTHANSPACE
.19302b	c9 08		cmp #$08	                CMP #$08    ; BackSpace
.19302d	f0 19		beq $193048	                BEQ GO_BACKTHEPOINTER;
.19302f	c9 0d		cmp #$0d	                CMP #$0D    ; Check to see if the incomming Character is a Cariage Return
.193031	d0 d0		bne $193003	                BNE NOT_CARRIAGE_RETURN
.193033	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.193037	a2 00 00	ldx #$0000	                LDX #$0000
.19303a	86 50		stx $50		                STX KEY_BUFFER_RPOS
.19303c	af 83 0f 00	lda $000f83	                LDA @lKEY_BUFFER_CMD
.193040	09 01		ora #$01	                ORA #$01      ; Set Bit 0 - to indicate that there is a command to process
.193042	8f 83 0f 00	sta $000f83	                STA @lKEY_BUFFER_CMD
.193046					EXIT_SAVE2_CMDLINE
.193046	2b		pld		                PLD
.193047	6b		rtl		                RTL
.193048					GO_BACKTHEPOINTER
.193048	a9 00		lda #$00	                LDA #$00
.19304a	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.19304e	e0 00 00	cpx #$0000	                CPX #$0000
.193051	f0 f3		beq $193046	                BEQ EXIT_SAVE2_CMDLINE
.193053	ca		dex		                DEX
.193054	80 f0		bra $193046	                BRA EXIT_SAVE2_CMDLINE
.193056					PROCESS_COMMAND_LINE
.193056	08		php		                PHP
.193057	c2 10		rep #$10	                REP #$10        ; set X long
.193059	e2 20		sep #$20	                SEP #$20        ; set A short
.19305b	a2 00 00	ldx #$0000	                LDX #$0000
.19305e	86 52		stx $52		                STX KEY_BUFFER_WPOS
.193060	a6 50		ldx $50		                LDX KEY_BUFFER_RPOS ; Load the Read Pointer
.193062					NOT_VALID_CHAR4CMD
.193062	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.193066	c9 0d		cmp #$0d	                CMP #$0D              ; Check for Carriage Return
.193068	f0 24		beq $19308e	                BEQ NO_CMD_2_PROCESS  ; Exit, if the first char is a Carriage return
.19306a	c9 41		cmp #$41	                CMP #$41              ; Smaller than "A"
.19306c	90 04		bcc $193072	                BCC NOT_A_VALIDCHAR   ; check for space before the Command
.19306e	c9 5b		cmp #$5b	                CMP #$5B              ; Smaller than "Z" We are going to accept the character
.193070	90 08		bcc $19307a	                BCC VALIDCHAR_GO_FIND_CMD;
.193072					NOT_A_VALIDCHAR
.193072	e8		inx		                INX
.193073	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE
.193076	d0 ea		bne $193062	                BNE NOT_VALID_CHAR4CMD
.193078	f0 0d		beq $193087	                BEQ ERROR_BUFFER_OVERRUN  ; This means that we have reached the end of Buffer
.19307a					VALIDCHAR_GO_FIND_CMD
.19307a	20 99 30	jsr $193099	                JSR HOWMANYCHARINCMD  ; Comming back from this Routine we know the size of the Command
.19307d	c0 10 00	cpy #$0010	                CPY #$0010            ; if the value of the size of the command is 16, then it is not a legit command
.193080	b0 0e		bcs $193090	                BCS NOTRECOGNIZEDCOMMAND  ; This will output a Command Not Recognized
.193082	20 b2 30	jsr $1930b2	                JSR FINDCMDINLIST     ; This is where, it gets really cool
.193085	80 07		bra $19308e	                BRA DONE_COMMANDPROCESS
.193087					ERROR_BUFFER_OVERRUN
.193087	a2 53 36	ldx #$3653	                LDX #<>CMD_Error_Overrun
.19308a	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print the first line
.19308e					DONE_COMMANDPROCESS
.19308e					NO_CMD_2_PROCESS
.19308e	28		plp		                PLP
.19308f	6b		rtl		                RTL
.193090					NOTRECOGNIZEDCOMMAND
.193090	a2 6d 36	ldx #$366d	                LDX #<>CMD_Error_Notfound
.193093	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print the first line
.193097	28		plp		                PLP
.193098	60		rts		                RTS
.193099					HOWMANYCHARINCMD
.193099	a0 00 00	ldy #$0000	                LDY #$0000
.19309c	da		phx		                PHX ; Push X to Stack for the time being
.19309d					ENDOFCOMMANDNOTFOUND
.19309d	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.1930a1	c9 20		cmp #$20	                CMP #$20              ; Check for a Space
.1930a3	f0 0b		beq $1930b0	                BEQ FOUNDTHEFOLLOWINGSPACE
.1930a5	c9 0d		cmp #$0d	                CMP #$0D              ; Check to see end of Command (if there is no arguments)
.1930a7	f0 07		beq $1930b0	                BEQ FOUNDTHEFOLLOWINGSPACE
.1930a9	e8		inx		                INX
.1930aa	c8		iny		                INY
.1930ab	c0 10 00	cpy #$0010	                CPY #$0010              ; Set the Maximum number of Character to 16 in the command
.1930ae	90 ed		bcc $19309d	                BCC ENDOFCOMMANDNOTFOUND
.1930b0					FOUNDTHEFOLLOWINGSPACE
.1930b0	fa		plx		                PLX ; Get the Pointer Location of the First Character of the Command
.1930b1	60		rts		                RTS
.1930b2					FINDCMDINLIST
.1930b2	86 40		stx $40		                STX CMD_PARSER_TMPX   ; Save X for the Time Being
.1930b4	84 42		sty $42		                STY CMD_PARSER_TMPY   ; Save Y for the Time Being
.1930b6	c2 20		rep #$20	                REP #$20        ; set A long
.1930b8	a9 86 35	lda #$3586	                LDA #<>CMDListPtr
.1930bb	85 44		sta $44		                STA CMD_LIST_PTR
.1930bd	a9 00 00	lda #$0000	                LDA #$0000  ; Just to make sure B is zero
.1930c0	e2 20		sep #$20	                SEP #$20        ; set A short
.1930c2	a9 19		lda #$19	                LDA #`CMDListPtr
.1930c4	85 46		sta $46		                STA CMD_LIST_PTR+2
.1930c6	a0 00 00	ldy #$0000	                LDY #$0000
.1930c9	84 54		sty $54		                STY CMD_VARIABLE_TMP
.1930cb					NOTTHERIGHTSIZEMOVEON
.1930cb	a4 54		ldy $54		                LDY CMD_VARIABLE_TMP
.1930cd	b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930cf	85 48		sta $48		                STA CMD_PARSER_PTR
.1930d1	c8		iny		                INY
.1930d2	b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930d4	85 49		sta $49		                STA CMD_PARSER_PTR+1
.1930d6	c8		iny		                INY
.1930d7	b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930d9	85 4a		sta $4a		                STA CMD_PARSER_PTR+2
.1930db	c8		iny		                INY
.1930dc	c0 3f 00	cpy #$003f	                CPY #size(CMDListPtr)
.1930df	b0 41		bcs $193122	                BCS COMMANDNOTFOUND   ; If we reach that limit then the Count didn't match any command in place
.1930e1	84 54		sty $54		                STY CMD_VARIABLE_TMP
.1930e3	a7 48		lda [$48]	                LDA [CMD_PARSER_PTR] ;
.1930e5	c5 42		cmp $42		                CMP CMD_PARSER_TMPY ;
.1930e7	d0 e2		bne $1930cb	                BNE NOTTHERIGHTSIZEMOVEON
.1930e9	20 2a 31	jsr $19312a	                JSR CHECKSYNTAX       ; Now we have found a Command in the list that matches the number of Char, let's see if this is one if we are looking for
.1930ec	b0 dd		bcs $1930cb	                BCS NOTTHERIGHTSIZEMOVEON ; Failed to Find
.1930ee	86 40		stx $40		                STX CMD_PARSER_TMPX   ; Just to make sure, this is where the Pointer in the line buffer is...
.1930f0	c8		iny		                INY   ; Point to after the $00, the next 2 bytes are the Attributes
.1930f1	a9 ff		lda #$ff	                LDA #$FF
.1930f3	85 5d		sta $5d		                STA CMD_VALID
.1930f5	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y ;
.1930f7	85 4b		sta $4b		                STA CMD_ATTRIBUTE
.1930f9	c8		iny		                INY
.1930fa	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.1930fc	85 4c		sta $4c		                STA CMD_ATTRIBUTE+1
.1930fe	c8		iny		                INY   ; This will point towards the Jumping Vector for the execution of the Command
.1930ff	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.193101	85 4d		sta $4d		                STA CMD_EXEC_ADDY
.193103	c8		iny		                INY
.193104	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.193106	85 4e		sta $4e		                STA CMD_EXEC_ADDY+1
.193108	c8		iny		                INY
.193109	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.19310b	85 4f		sta $4f		                STA CMD_EXEC_ADDY+2
.19310d	a6 4b		ldx $4b		                LDX CMD_ATTRIBUTE
.19310f	e0 00 00	cpx #$0000	                CPX #$0000
.193112	f0 09		beq $19311d	                BEQ NO_ATTRIBUTE_GO_EXEC
.193114	20 43 31	jsr $193143	                JSR PROCESS_ARGUMENTS
.193117	a5 5d		lda $5d		                LDA CMD_VALID
.193119	c9 ff		cmp #$ff	                CMP #$FF
.19311b	f0 0c		beq $193129	                BEQ EXITWITHERROR       ; if Carry Set
.19311d					NO_ATTRIBUTE_GO_EXEC
.19311d	e2 20		sep #$20	                SEP #$20        ; set A short
.19311f	dc 4d 00	jmp [$004d]	                JML [CMD_EXEC_ADDY]
.193122					COMMANDNOTFOUND
.193122	a2 6d 36	ldx #$366d	                LDX #<>CMD_Error_Notfound
.193125	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print the first line
.193129					EXITWITHERROR
.193129	60		rts		                RTS
.19312a					CHECKSYNTAX
.19312a	a0 01 00	ldy #$0001	                LDY #$0001      ; Point towards the Next Byte after the Size
.19312d	a6 40		ldx $40		                LDX CMD_PARSER_TMPX ; This is the Pointer in the Line Buffer where the First Character ought to be...
.19312f					CHECKSYNTAXNEXTCHAR
.19312f	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y ;
.193131	c9 00		cmp #$00	                CMP #$00  ; End of Character Check, if we reach that point, then we are on our way to have something happening! Call mom and dad and tell them how they failed to be good parents! Like all parents
.193133	f0 0c		beq $193141	                BEQ SUCCESSFOUNDCOMMAND
.193135	df 00 0f 00	cmp $000f00,x	                CMP @lKEY_BUFFER, X   ;
.193139	d0 04		bne $19313f	                BNE CHARDONTMATCH
.19313b	e8		inx		                INX
.19313c	c8		iny		                INY
.19313d	80 f0		bra $19312f	                BRA CHECKSYNTAXNEXTCHAR
.19313f	38		sec		CHARDONTMATCH   SEC
.193140	60		rts		                RTS
.193141					SUCCESSFOUNDCOMMAND
.193141	18		clc		                CLC
.193142	60		rts		                RTS
.193143					PROCESS_ARGUMENTS
.193143	c2 30		rep #$30	                REP #$30        ; set A&X long
.193145	a6 40		ldx $40		                LDX CMD_PARSER_TMPX ; This is the Pointer after the command
.193147	20 05 32	jsr $193205	                JSR MOVE_POINTER_2_ARG  ; If there is supposed to be a parameter, this will go and fetch the next valid char
.19314a	90 03		bcc $19314f	                BCC ATTRIBUTE_2_PROCESS
.19314c	e2 20		sep #$20	                SEP #$20        ; set A short
.19314e	60		rts		                RTS
.19314f					ATTRIBUTE_2_PROCESS
.19314f	c2 20		rep #$20	                REP #$20        ; set A long
.193151	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.193153	29 01 00	and #$0001	                AND #CMD_ARGTYPE_DEV    ; This is to know, if it is for a Flppy or for the SDCard
.193156	c9 01 00	cmp #$0001	                CMP #CMD_ARGTYPE_DEV
.193159	d0 08		bne $193163	                BNE NOT_CMD_ARGTYPE_DEV ; Device Type @S, @F, @C, @P
.19315b	20 37 32	jsr $193237	                JSR FIND_CMD_ARGTYPE_DEV
.19315e	90 03		bcc $193163	                BCC NOT_CMD_ARGTYPE_DEV
.193160	e2 20		sep #$20	                SEP #$20        ; set A short
.193162	60		rts		                RTS
.193163					NOT_CMD_ARGTYPE_DEV
.193163	c2 20		rep #$20	                REP #$20        ; set A long
.193165	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.193167	29 02 00	and #$0002	                AND #CMD_ARGTYPE_FN
.19316a	c9 02 00	cmp #$0002	                CMP #CMD_ARGTYPE_FN
.19316d	d0 08		bne $193177	                BNE NOT_CMD_ARGTYPE_FN
.19316f	20 56 32	jsr $193256	                JSR FIND_CMD_ARGTYPE_FN ; File Name
.193172	90 03		bcc $193177	                BCC NOT_CMD_ARGTYPE_FN
.193174	e2 20		sep #$20	                SEP #$20        ; set A short
.193176	60		rts		                RTS
.193177					NOT_CMD_ARGTYPE_FN
.193177	c2 20		rep #$20	                REP #$20        ; set A long
.193179	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.19317b	29 04 00	and #$0004	                AND #CMD_ARGTYPE_SA
.19317e	c9 04 00	cmp #$0004	                CMP #CMD_ARGTYPE_SA
.193181	d0 03		bne $193186	                BNE NOT_CMD_ARGTYPE_SA; Starting Address (Source)
.193183	20 8b 32	jsr $19328b	                JSR FIND_CMD_ARGTYPE_SA
.193186					NOT_CMD_ARGTYPE_SA
.193186	c2 20		rep #$20	                REP #$20        ; set A long
.193188	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.19318a	29 08 00	and #$0008	                AND #CMD_ARGTYPE_EA
.19318d	c9 08 00	cmp #$0008	                CMP #CMD_ARGTYPE_EA
.193190	d0 03		bne $193195	                BNE NOT_CMD_ARGTYPE_EA ; Ending Address (Destination)
.193192	20 90 32	jsr $193290	                JSR FIND_CMD_ARGTYPE_EA
.193195					NOT_CMD_ARGTYPE_EA
.193195	c2 20		rep #$20	                REP #$20        ; set A long
.193197	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.193199	29 10 00	and #$0010	                AND #CMD_ARGTYPE_8D
.19319c	c9 10 00	cmp #$0010	                CMP #CMD_ARGTYPE_8D
.19319f	d0 03		bne $1931a4	                BNE NOT_CMD_ARGTYPE_8D
.1931a1	20 95 32	jsr $193295	                JSR FIND_CMD_ARGTYPE_8D ; 8bits Data
.1931a4					NOT_CMD_ARGTYPE_8D
.1931a4	c2 20		rep #$20	                REP #$20        ; set A long
.1931a6	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931a8	29 20 00	and #$0020	                AND #CMD_ARGTYPE_16D
.1931ab	c9 20 00	cmp #$0020	                CMP #CMD_ARGTYPE_16D
.1931ae	d0 03		bne $1931b3	                BNE NOT_CMD_ARGTYPE_16D
.1931b0	20 9a 32	jsr $19329a	                JSR FIND_CMD_ARGTYPE_16D; 16bit Data
.1931b3					NOT_CMD_ARGTYPE_16D
.1931b3	c2 20		rep #$20	                REP #$20        ; set A long
.1931b5	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931b7	29 40 00	and #$0040	                AND #CMD_ARGTYPE_TIM
.1931ba	c9 40 00	cmp #$0040	                CMP #CMD_ARGTYPE_TIM
.1931bd	d0 03		bne $1931c2	                BNE NOT_CMD_ARGTYPE_TIM
.1931bf	20 9f 32	jsr $19329f	                JSR FIND_CMD_ARGTYPE_TIM ; Time HH:MM:SS
.1931c2					NOT_CMD_ARGTYPE_TIM
.1931c2	c2 20		rep #$20	                REP #$20        ; set A long
.1931c4	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931c6	29 80 00	and #$0080	                AND #CMD_ARGTYPE_DAT
.1931c9	c9 80 00	cmp #$0080	                CMP #CMD_ARGTYPE_DAT
.1931cc	d0 03		bne $1931d1	                BNE NOT_CMD_ARGTYPE_DAT
.1931ce	20 a4 32	jsr $1932a4	                JSR FIND_CMD_ARGTYPE_DAT ; DD/MM/YY, SAT
.1931d1					NOT_CMD_ARGTYPE_DAT
.1931d1	c2 20		rep #$20	                REP #$20        ; set A long
.1931d3	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931d5	29 00 01	and #$0100	                AND #CMD_ARGTYPE_RGB
.1931d8	c9 00 01	cmp #$0100	                CMP #CMD_ARGTYPE_RGB
.1931db	d0 03		bne $1931e0	                BNE NOT_CMD_ARGTYPE_RGB ; 24bit Data
.1931dd	20 a9 32	jsr $1932a9	                JSR FIND_CMD_ARGTYPE_RGB;
.1931e0					NOT_CMD_ARGTYPE_RGB
.1931e0	c2 20		rep #$20	                REP #$20        ; set A long
.1931e2	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931e4	29 00 02	and #$0200	                AND #CMD_ARGTYPE_FN2
.1931e7	c9 00 02	cmp #$0200	                CMP #CMD_ARGTYPE_FN2
.1931ea	d0 03		bne $1931ef	                BNE NOT_CMD_ARGTYPE_FN2 ; Second File Name
.1931ec	20 ae 32	jsr $1932ae	                JSR FIND_CMD_ARGTYPE_FN2
.1931ef					NOT_CMD_ARGTYPE_FN2
.1931ef	c2 20		rep #$20	                REP #$20        ; set A long
.1931f1	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931f3	29 00 04	and #$0400	                AND #CMD_ARGTYPE_DEC
.1931f6	c9 00 04	cmp #$0400	                CMP #CMD_ARGTYPE_DEC
.1931f9	d0 03		bne $1931fe	                BNE NO_ATTRIBUTE_2_PROCESS
.1931fb	20 b3 32	jsr $1932b3	                JSR FIND_CMD_ARGTYPE_DEC
.1931fe					NO_ATTRIBUTE_2_PROCESS
.1931fe	e2 20		sep #$20	                SEP #$20        ; set A short
.193200	a9 00		lda #$00	                LDA #$00
.193202	85 5d		sta $5d		                STA CMD_VALID
.193204	60		rts		                RTS
.193205					MOVE_POINTER_2_ARG
.193205	e2 20		sep #$20	                SEP #$20        ; set A short
.193207					MOVE_POINTER_2_NEXT_SPACE
.193207	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.19320b	c9 0d		cmp #$0d	                CMP #$0D
.19320d	f0 12		beq $193221	                BEQ ERROR_PARAMETERMISSING
.19320f	c9 20		cmp #$20	                CMP #$20
.193211	d0 08		bne $19321b	                BNE POINTER_POINTING_NOT_A_SPACE_EXIT
.193213	e8		inx		                INX
.193214	e0 30 00	cpx #$0030	                CPX #$0030  ; If the Move Pointer gets
.193217	90 ee		bcc $193207	                BCC MOVE_POINTER_2_NEXT_SPACE
.193219	80 06		bra $193221	                BRA ERROR_PARAMETERMISSING
.19321b					POINTER_POINTING_NOT_A_SPACE_EXIT
.19321b	86 40		stx $40		                STX CMD_PARSER_TMPX
.19321d	c2 20		rep #$20	                REP #$20        ; set A long
.19321f	18		clc		                CLC
.193220	60		rts		                RTS
.193221					ERROR_PARAMETERMISSING
.193221	c2 20		rep #$20	                REP #$20        ; set A long
.193223	a2 06 36	ldx #$3606	                LDX #<>CMD_Error_Missing
.193226	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print the first line
.19322a	38		sec		                SEC
.19322b	60		rts		                RTS
.19322c					ERROR_WRONGDEVICE
.19322c	c2 20		rep #$20	                REP #$20        ; set A long
.19322e	a2 22 36	ldx #$3622	                LDX #<>CMD_Wrong_Device
.193231	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print the first line
.193235	38		sec		                SEC
.193236	60		rts		                RTS
.193237					FIND_CMD_ARGTYPE_DEV
.193237	e2 20		sep #$20	                SEP #$20        ; set A short
.193239	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.19323d	c9 40		cmp #$40	                CMP #'@'
.19323f	d0 e0		bne $193221	                BNE ERROR_PARAMETERMISSING
.193241	e8		inx		                INX
.193242	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.193246	c9 53		cmp #$53	                CMP #'S'                ; Is it
.193248	f0 04		beq $19324e	                BEQ SDCARD_CHOICE
.19324a	c9 46		cmp #$46	                CMP #'F'
.19324c	d0 de		bne $19322c	                BNE ERROR_WRONGDEVICE
.19324e					SDCARD_CHOICE
.19324e	85 56		sta $56		                STA CMD_ARG_DEV
.193250	86 40		stx $40		                STX CMD_PARSER_TMPX
.193252	18		clc		                CLC
.193253	c2 20		rep #$20	                REP #$20        ; set A long
.193255	60		rts		                RTS
.193256					FIND_CMD_ARGTYPE_FN
.193256	a6 40		ldx $40		                LDX CMD_PARSER_TMPX
.193258	e8		inx		                INX
.193259	20 05 32	jsr $193205	                JSR MOVE_POINTER_2_ARG  ; Check if there is a space after the parameter
.19325c	e2 20		sep #$20	                SEP #$20        ; set A short
.19325e	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.193262	c9 2c		cmp #$2c	                CMP #','
.193264	d0 bb		bne $193221	                BNE ERROR_PARAMETERMISSING
.193266	e8		inx		                INX
.193267	20 05 32	jsr $193205	                JSR MOVE_POINTER_2_ARG  ; Check if there is a space after the parameter
.19326a	e2 20		sep #$20	                SEP #$20        ; set A short
.19326c	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.193270	c9 22		cmp #$22	                CMP #'"'
.193272	d0 ad		bne $193221	                BNE ERROR_PARAMETERMISSING
.193274	a0 00 00	ldy #$0000	                LDY #$0000
.193277	e8		inx		                INX
.193278					KEEP_READING_FN
.193278	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.19327c	c9 22		cmp #$22	                CMP #'"'
.19327e	f0 0a		beq $19328a	                BEQ DONE_FILE_SAVE
.193280	99 80 03	sta $0380,y	                STA SDOS_FILE_NAME,Y
.193283	e8		inx		                INX
.193284	c8		iny		                INY
.193285	c0 10 00	cpy #$0010	                CPY #$0010
.193288	d0 ee		bne $193278	                BNE KEEP_READING_FN
.19328a					DONE_FILE_SAVE
.19328a	60		rts		                RTS
.19328b					FIND_CMD_ARGTYPE_SA
.19328b	48		pha		                PHA
.19328c	c2 20		rep #$20	                REP #$20        ; set A long
.19328e	68		pla		                PLA
.19328f	60		rts		                RTS
.193290					FIND_CMD_ARGTYPE_EA
.193290	48		pha		                PHA
.193291	c2 20		rep #$20	                REP #$20        ; set A long
.193293	68		pla		                PLA
.193294	60		rts		                RTS
.193295					FIND_CMD_ARGTYPE_8D
.193295	48		pha		                PHA
.193296	c2 20		rep #$20	                REP #$20        ; set A long
.193298	68		pla		                PLA
.193299	60		rts		                RTS
.19329a					FIND_CMD_ARGTYPE_16D
.19329a	48		pha		                PHA
.19329b	c2 20		rep #$20	                REP #$20        ; set A long
.19329d	68		pla		                PLA
.19329e	60		rts		                RTS
.19329f					FIND_CMD_ARGTYPE_TIM
.19329f	48		pha		                PHA
.1932a0	c2 20		rep #$20	                REP #$20        ; set A long
.1932a2	68		pla		                PLA
.1932a3	60		rts		                RTS
.1932a4					FIND_CMD_ARGTYPE_DAT
.1932a4	48		pha		                PHA
.1932a5	c2 20		rep #$20	                REP #$20        ; set A long
.1932a7	68		pla		                PLA
.1932a8	60		rts		                RTS
.1932a9					FIND_CMD_ARGTYPE_RGB
.1932a9	48		pha		                PHA
.1932aa	c2 20		rep #$20	                REP #$20        ; set A long
.1932ac	68		pla		                PLA
.1932ad	60		rts		                RTS
.1932ae					FIND_CMD_ARGTYPE_FN2
.1932ae	48		pha		                PHA
.1932af	c2 20		rep #$20	                REP #$20        ; set A long
.1932b1	68		pla		                PLA
.1932b2	60		rts		                RTS
.1932b3					FIND_CMD_ARGTYPE_DEC
.1932b3	48		pha		                PHA
.1932b4	c2 20		rep #$20	                REP #$20        ; set A long
.1932b6	68		pla		                PLA
.1932b7	60		rts		                RTS
.1932b8					ENTRY_CMD_CLS
.1932b8	e2 20		sep #$20	                SEP #$20        ; set A short
.1932ba	c2 10		rep #$10	                REP #$10        ; set X long
.1932bc	a2 00 00	ldx #$0000	              LDX #$0000		; Only Use One Pointer
.1932bf	a9 20		lda #$20	              LDA #$20		; Fill the Entire Screen with Space
.1932c1	9f 00 a0 af	sta $afa000,x	CLEARSCREENL0	STA CS_TEXT_MEM_PTR, x	;
.1932c5	e8		inx		              inx
.1932c6	e0 00 20	cpx #$2000	              cpx #$2000
.1932c9	d0 f6		bne $1932c1	              bne CLEARSCREENL0
.1932cb	a2 00 00	ldx #$0000	              LDX	#$0000		; Only Use One Pointer
.1932ce	a9 ed		lda #$ed	              LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.1932d0	9f 00 c0 af	sta $afc000,x	CLEARSCREENL1	STA CS_COLOR_MEM_PTR, x	;
.1932d4	e8		inx		              inx
.1932d5	e0 00 20	cpx #$2000	              cpx #$2000
.1932d8	d0 f6		bne $1932d0	              bne CLEARSCREENL1
.1932da	a2 00 00	ldx #$0000	              LDX #$0000
.1932dd	86 52		stx $52		              STX KEY_BUFFER_WPOS
.1932df	86 50		stx $50		              STX KEY_BUFFER_RPOS
.1932e1	a0 00 00	ldy #$0000	              LDY #$0000
.1932e4	22 66 06 19	jsl $190666	              JSL ILOCATE
.1932e8	60		rts		              RTS
.1932e9					ENTRY_CMD_DIR
.1932e9	a2 c5 35	ldx #$35c5	              LDX #<>DIR_COMMAND
.1932ec	22 7d 05 19	jsl $19057d	              JSL IPRINT       ; print the first line
.1932f0	af 02 e8 af	lda $afe802	              LDA @lJOYSTICK2
.1932f4	29 80		and #$80	              AND #$80        ; Card Present when 1
.1932f6	d0 18		bne $193310	              BNE SDNOT_PRESENT;
.1932f8	af 03 e8 af	lda $afe803	              LDA @lJOYSTICK3
.1932fc	29 80		and #$80	              AND #$80        ; Card WProtect When 0
.1932fe	f0 07		beq $193307	              BEQ SDNOT_WP;
.193300	a2 8d 36	ldx #$368d	              LDX #<>CMD_Error_SD_WP
.193303	22 7d 05 19	jsl $19057d	              JSL IPRINT       ; print the first line
.193307					SDNOT_WP
.193307	22 20 20 19	jsl $192020	              JSL ISDOS_INIT
.19330b	22 6d 20 19	jsl $19206d	              JSL ISDOS_DIR
.19330f	60		rts		              RTS
.193310					SDNOT_PRESENT
.193310	a2 7a 36	ldx #$367a	              LDX #<>CMD_Error_SD_NotPresent
.193313	22 7d 05 19	jsl $19057d	              JSL IPRINT       ; print the first line
.193317	60		rts		              RTS
.193318	60		rts		RTS
.193319					ENTRY_CMD_EXEC
.193319	a2 d3 35	ldx #$35d3	  LDX #<>EXEC_COMMAND
.19331c	22 7d 05 19	jsl $19057d	  JSL IPRINT       ; print the first line
.193320	60		rts		RTS
.193321					ENTRY_CMD_LOAD
.193321	a2 ed 35	ldx #$35ed	LDX #<>LOAD_COMMAND
.193324	22 7d 05 19	jsl $19057d	JSL IPRINT       ; print the first line
.193328	60		rts		RTS
.193329	60		rts		ENTRY_CMD_SAVE RTS
.19332a	60		rts		ENTRY_CMD_PEEK8     RTS
.19332b	60		rts		ENTRY_CMD_POKE8     RTS
.19332c	60		rts		ENTRY_CMD_POKE16    RTS
.19332d	60		rts		ENTRY_CMD_PEEK16    RTS
.19332e	60		rts		ENTRY_CMD_RECWAV    RTS
.19332f	60		rts		ENTRY_CMD_EXECFNX   RTS
.193330					ENTRY_CMD_GETDATE
.193330	e2 20		sep #$20	                SEP #$20        ; set A short
.193332	af 06 08 af	lda $af0806	              LDA @lRTC_DAY   ; Go Read the Hour Registers
.193336	48		pha		              PHA
.193337	29 30		and #$30	              AND #$30
.193339	4a		lsr a		              LSR A
.19333a	4a		lsr a		              LSR A
.19333b	4a		lsr a		              LSR A
.19333c	4a		lsr a		              LSR A
.19333d	09 30		ora #$30	              ORA #$30
.19333f	22 9d 05 19	jsl $19059d	              JSL IPUTC
.193343	68		pla		              PLA
.193344	29 0f		and #$0f	              AND #$0F
.193346	09 30		ora #$30	              ORA #$30
.193348	22 9d 05 19	jsl $19059d	              JSL IPUTC
.19334c	a9 2f		lda #$2f	              LDA #'/'
.19334e	22 9d 05 19	jsl $19059d	              JSL IPUTC
.193352	af 09 08 af	lda $af0809	              LDA @lRTC_MONTH   ; Go Read the Min Registers
.193356	48		pha		              PHA
.193357	29 10		and #$10	              AND #$10
.193359	4a		lsr a		              LSR A
.19335a	4a		lsr a		              LSR A
.19335b	4a		lsr a		              LSR A
.19335c	4a		lsr a		              LSR A
.19335d	69 30		adc #$30	              ADC #$30
.19335f	22 9d 05 19	jsl $19059d	              JSL IPUTC
.193363	68		pla		              PLA
.193364	29 0f		and #$0f	              AND #$0F
.193366	09 30		ora #$30	              ORA #$30
.193368	22 9d 05 19	jsl $19059d	              JSL IPUTC
.19336c	a9 2f		lda #$2f	              LDA #'/'
.19336e	22 9d 05 19	jsl $19059d	              JSL IPUTC
.193372	af 0a 08 af	lda $af080a	              LDA @lRTC_YEAR   ; Go Read the Sec Registers
.193376	48		pha		              PHA
.193377	29 f0		and #$f0	              AND #$F0
.193379	4a		lsr a		              LSR A
.19337a	4a		lsr a		              LSR A
.19337b	4a		lsr a		              LSR A
.19337c	4a		lsr a		              LSR A
.19337d	09 30		ora #$30	              ORA #$30
.19337f	22 9d 05 19	jsl $19059d	              JSL IPUTC
.193383	68		pla		              PLA
.193384	29 0f		and #$0f	              AND #$0F
.193386	09 30		ora #$30	              ORA #$30
.193388	22 9d 05 19	jsl $19059d	              JSL IPUTC
.19338c	a9 2c		lda #$2c	              LDA #','
.19338e	22 9d 05 19	jsl $19059d	              JSL IPUTC
.193392	af 08 08 af	lda $af0808	              LDA @lRTC_DOW
.193396	3a		dec a		              DEC A
.193397	0a		asl a		              ASL A
.193398	0a		asl a		              ASL A
.193399	aa		tax		              TAX
.19339a					GO_PUTC_THE_DOW
.19339a	bf 97 36 19	lda $193697,x	              LDA @lDOW,X
.19339e	c9 00		cmp #$00	              CMP #$00
.1933a0	f0 09		beq $1933ab	              BEQ DOW_IPUTC_DONE
.1933a2	e8		inx		              INX
.1933a3	da		phx		              PHX
.1933a4	22 9d 05 19	jsl $19059d	              JSL IPUTC
.1933a8	fa		plx		              PLX
.1933a9	80 ef		bra $19339a	              BRA GO_PUTC_THE_DOW
.1933ab					DOW_IPUTC_DONE
.1933ab	a9 0d		lda #$0d	              LDA #$0D
.1933ad	22 9d 05 19	jsl $19059d	              JSL IPUTC
.1933b1	60		rts		              RTS
.1933b2					ENTRY_CMD_GETTIME
.1933b2	e2 20		sep #$20	                SEP #$20        ; set A short
.1933b4	af 04 08 af	lda $af0804	              LDA @lRTC_HRS   ; Go Read the Hour Registers
.1933b8	48		pha		              PHA
.1933b9	29 30		and #$30	              AND #$30
.1933bb	4a		lsr a		              LSR A
.1933bc	4a		lsr a		              LSR A
.1933bd	4a		lsr a		              LSR A
.1933be	4a		lsr a		              LSR A
.1933bf	09 30		ora #$30	              ORA #$30
.1933c1	22 9d 05 19	jsl $19059d	              JSL IPUTC
.1933c5	68		pla		              PLA
.1933c6	29 0f		and #$0f	              AND #$0F
.1933c8	09 30		ora #$30	              ORA #$30
.1933ca	22 9d 05 19	jsl $19059d	              JSL IPUTC
.1933ce	a9 3a		lda #$3a	              LDA #':'
.1933d0	22 9d 05 19	jsl $19059d	              JSL IPUTC
.1933d4	af 02 08 af	lda $af0802	              LDA @lRTC_MIN   ; Go Read the Min Registers
.1933d8	48		pha		              PHA
.1933d9	29 70		and #$70	              AND #$70
.1933db	4a		lsr a		              LSR A
.1933dc	4a		lsr a		              LSR A
.1933dd	4a		lsr a		              LSR A
.1933de	4a		lsr a		              LSR A
.1933df	69 30		adc #$30	              ADC #$30
.1933e1	22 9d 05 19	jsl $19059d	              JSL IPUTC
.1933e5	68		pla		              PLA
.1933e6	29 0f		and #$0f	              AND #$0F
.1933e8	09 30		ora #$30	              ORA #$30
.1933ea	22 9d 05 19	jsl $19059d	              JSL IPUTC
.1933ee	a9 3a		lda #$3a	              LDA #':'
.1933f0	22 9d 05 19	jsl $19059d	              JSL IPUTC
.1933f4	af 00 08 af	lda $af0800	              LDA @lRTC_SEC   ; Go Read the Sec Registers
.1933f8	48		pha		              PHA
.1933f9	29 f0		and #$f0	              AND #$F0
.1933fb	4a		lsr a		              LSR A
.1933fc	4a		lsr a		              LSR A
.1933fd	4a		lsr a		              LSR A
.1933fe	4a		lsr a		              LSR A
.1933ff	09 30		ora #$30	              ORA #$30
.193401	22 9d 05 19	jsl $19059d	              JSL IPUTC
.193405	68		pla		              PLA
.193406	29 0f		and #$0f	              AND #$0F
.193408	09 30		ora #$30	              ORA #$30
.19340a	22 9d 05 19	jsl $19059d	              JSL IPUTC
.19340e	af 04 08 af	lda $af0804	              LDA @lRTC_HRS
.193412	29 80		and #$80	              AND #$80
.193414	c9 80		cmp #$80	              CMP #$80
.193416	f0 08		beq $193420	              BEQ AMFMCHOICE
.193418	a9 41		lda #$41	              LDA #'A'
.19341a	22 9d 05 19	jsl $19059d	              JSL IPUTC
.19341e	80 06		bra $193426	              BRA GO_PUTC_THE_M
.193420					AMFMCHOICE
.193420	a9 50		lda #$50	              LDA #'P'
.193422	22 9d 05 19	jsl $19059d	              JSL IPUTC
.193426					GO_PUTC_THE_M
.193426	a9 4d		lda #$4d	              LDA #'M'
.193428	22 9d 05 19	jsl $19059d	              JSL IPUTC
.19342c	a9 0d		lda #$0d	              LDA #$0D
.19342e	22 9d 05 19	jsl $19059d	              JSL IPUTC
.193432	60		rts		RTS
.193433	60		rts		ENTRY_CMD_MONITOR   RTS
.193434	60		rts		ENTRY_CMD_PLAYRAD   RTS
.193435	60		rts		ENTRY_CMD_PLAYWAV   RTS
.193436	60		rts		ENTRY_CMD_SETDATE   RTS
.193437	60		rts		ENTRY_CMD_SETTIME   RTS
.193438	60		rts		ENTRY_CMD_SYSINFO   RTS
.193439	60		rts		ENTRY_CMD_DISKCOPY  RTS
.19343a	60		rts		ENTRY_CMD_SETTXTLUT RTS
.19343b					CMD
>19343b	03 43 4c 53 00 00 00 b8		CLS       .text $03, "CLS", $00, CMD_ARGTYPE_NO, ENTRY_CMD_CLS                                        ; Clear Screen
>193443	32 19
>193445	03 44 49 52 00 01 00 e9		DIR       .text $03, "DIR", $00, CMD_ARGTYPE_DEV, ENTRY_CMD_DIR                                       ; @F, @S
>19344d	32 19
>19344f	04 45 58 45 43 00 04 00		EXEC      .text $04, "EXEC", $00, CMD_ARGTYPE_SA, ENTRY_CMD_EXEC                                        ; EXEC S:$00000
>193457	19 33 19
>19345a	04 4c 4f 41 44 00 0b 00		LOAD      .text $04, "LOAD", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN | CMD_ARGTYPE_EA), ENTRY_CMD_LOAD   ; "LOAD @F, "NAME.XXX", D:$000000
>193462	21 33 19
>193465	04 53 41 56 45 00 0f 00		SAVE      .text $04, "SAVE", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN | CMD_ARGTYPE_SA | CMD_ARGTYPE_EA), ENTRY_CMD_SAVE           ; SAVE @F, "NAME.XXX", S:$000000, D:$000000
>19346d	29 33 19
>193470	06 50 45 45 4b 38 48 00		PEEK8     .text $06, "PEEK8H", $00,  CMD_ARGTYPE_SA, ENTRY_CMD_PEEK8       ; PEEK8 $000000
>193478	04 00 2a 33 19
>19347d	06 50 4f 4b 45 38 48 00		POKE8     .text $06, "POKE8H", $00, (CMD_ARGTYPE_SA | CMD_ARGTYPE_8D), ENTRY_CMD_POKE8          ; POKE8 $000000, $00
>193485	14 00 2b 33 19
>19348a	06 52 45 43 57 41 56 00		RECWAV    .text $06, "RECWAV", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN) , ENTRY_CMD_RECWAV          ; RECWAV @S, "NAME.XXX" (Samples)
>193492	03 00 2e 33 19
>193497	07 45 58 45 43 46 4e 58		EXECFNX   .text $07, "EXECFNX", $00, CMD_ARGTYPE_FN, ENTRY_CMD_EXECFNX        ; "EXECFNX "NAME.XXX"
>19349f	00 02 00 2f 33 19
>1934a5	07 47 45 54 44 41 54 45		GETDATE   .text $07, "GETDATE", $00, CMD_ARGTYPE_NO, ENTRY_CMD_GETDATE       ; GETDATE
>1934ad	00 00 00 30 33 19
>1934b3	07 47 45 54 54 49 4d 45		GETTIME   .text $07, "GETTIME", $00, CMD_ARGTYPE_NO, ENTRY_CMD_GETTIME        ; GETTIME
>1934bb	00 00 00 b2 33 19
>1934c1	07 4d 4f 4e 49 54 4f 52		MONITOR   .text $07, "MONITOR", $00, CMD_ARGTYPE_NO, ENTRY_CMD_MONITOR       ; MONITOR TBD
>1934c9	00 00 00 33 34 19
>1934cf	07 50 4c 41 59 52 41 44		PLAYRAD   .text $07, "PLAYRAD", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN), ENTRY_CMD_PLAYRAD        ; PLAYRAD @S, "NAME.XXX" (music File)
>1934d7	00 03 00 34 34 19
>1934dd	07 50 4c 41 59 57 41 56		PLAYWAV   .text $07, "PLAYWAV", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN), ENTRY_CMD_PLAYWAV                ; PLAYWAV @S, "NAME.XXX" (samples)
>1934e5	00 03 00 35 34 19
>1934eb	07 50 45 45 4b 31 36 48		PEEK16    .text $07, "PEEK16H", $00, CMD_ARGTYPE_SA, ENTRY_CMD_POKE16, ENTRY_CMD_PEEK16        ; PEEK16 $000000
>1934f3	00 04 00 2c 33 19 2d 33 19
>1934fc	07 50 4f 4b 45 31 36 48		POKE16    .text $07, "POKE16H", $00, (CMD_ARGTYPE_SA | CMD_ARGTYPE_16D), ENTRY_CMD_POKE16           ; POKE16 $000000, $0000
>193504	00 24 00 2c 33 19
>19350a	07 53 45 54 44 41 54 45		SETDATE   .text $07, "SETDATE", $00, CMD_ARGTYPE_DAT, ENTRY_CMD_SETDATE      ; SETDATE YY:MM:DD
>193512	00 80 00 36 34 19
>193518	07 53 45 54 54 49 4d 45		SETTIME   .text $07, "SETTIME", $00, CMD_ARGTYPE_TIM, ENTRY_CMD_SETTIME       ; SETTIME HH:MM:SS
>193520	00 40 00 37 34 19
>193526	04 53 59 53 49 4e 46 4f		SYSINFO   .text $04, "SYSINFO", $00, CMD_ARGTYPE_NO, ENTRY_CMD_SYSINFO
>19352e	00 00 00 38 34 19
>193534	08 44 49 53 4b 43 4f 50		DISKCOPY  .text $08, "DISKCOPY", $00, CMD_ARGTYPE_DEV, CMD_ARGTYPE_DEV, ENTRY_CMD_DISKCOPY           ; DISKCOPY @F, @F
>19353c	59 00 01 00 01 00 39 34 19
>193545	08 46 49 4c 45 43 4f 50		FILECOPY  .text $08, "FILECOPY", $00, (CMD_ARGTYPE_FN | CMD_ARGTYPE_FN2)
>19354d	59 00 02 02
>193551	08 53 45 54 42 47 43 4c		SETBGCLR  .text $08, "SETBGCLR", $00, CMD_ARGTYPE_DEC
>193559	52 00 00 04
>19355d	08 53 45 54 46 47 43 4c		SETFGCLR  .text $08, "SETFGCLR", $00, CMD_ARGTYPE_DEC
>193565	52 00 00 04
>193569	09 53 45 54 54 58 54 4c		SETTXTLUT .text $09, "SETTXTLUT", $00, (CMD_ARGTYPE_DAT | CMD_ARGTYPE_RGB), ENTRY_CMD_SETTXTLUT        ; SETLUT $00, $000000
>193571	55 54 00 80 01 3a 34 19
>193579	09 53 45 54 42 52 44 43		SETBRDCLR .text $09, "SETBRDCLR", $00, CMD_ARGTYPE_RGB
>193581	4c 52 00 00 01
>193586	3b 34 19 45 34 19 4f 34		CMDListPtr .long CMD.CLS, CMD.DIR, CMD.EXEC, CMD.LOAD, CMD.SAVE, CMD.PEEK8, CMD.POKE8, CMD.PEEK16, CMD.POKE16, CMD.RECWAV, CMD.EXECFNX, CMD.GETDATE, CMD.GETTIME, CMD.MONITOR, CMD.PLAYRAD, CMD.PLAYWAV, CMD.SETDATE, CMD.SETTIME, CMD.SYSINFO, CMD.DISKCOPY, CMD.SETTXTLUT
>19358e	19 5a 34 19 65 34 19 70 34 19 7d 34 19 eb 34 19
>19359e	fc 34 19 8a 34 19 97 34 19 a5 34 19 b3 34 19 c1
>1935ae	34 19 cf 34 19 dd 34 19 0a 35 19 18 35 19 26 35
>1935be	19 34 35 19 69 35 19
=$0000					CMD_ARGTYPE_NO    = $0000 ; No Argument
=$0001					CMD_ARGTYPE_DEV   = $0001 ; Device Type @S, @F
=$0002					CMD_ARGTYPE_FN    = $0002 ; File Name
=$0004					CMD_ARGTYPE_SA    = $0004 ; Starting Address (Source)
=$0008					CMD_ARGTYPE_EA    = $0008 ; Ending Address (Destination)
=$0010					CMD_ARGTYPE_8D    = $0010 ; 8bits Data
=$0020					CMD_ARGTYPE_16D   = $0020 ; 16bits Data
=$0040					CMD_ARGTYPE_TIM   = $0040 ; Time
=$0080					CMD_ARGTYPE_DAT   = $0080 ; Date
=$0100					CMD_ARGTYPE_RGB   = $0100 ; RGB Data (24Bit Data) for LUT mainly
=$0200					CMD_ARGTYPE_FN2   = $0200 ; Second File name
=$0400					CMD_ARGTYPE_DEC   = $0400 ; Decimal value
>1935c5	0d 40 53 44 43 41 52 44		DIR_COMMAND .text $0D, "@SDCARD:", $00
>1935cd	3a 00
>1935cf	43 4c 53 00			CLS_COMMAND .text "CLS", $00
>1935d3	45 58 45 43 20 43 6f 6d		EXEC_COMMAND .text "EXEC Command Executing...", $00
>1935db	6d 61 6e 64 20 45 78 65 63 75 74 69 6e 67 2e 2e
>1935eb	2e 00
>1935ed	4c 4f 41 44 00			LOAD_COMMAND .text "LOAD", $00
>1935f2	45 30 30 30 20 2d 20 53		CMD_Error_Syntax  .text "E000 - SYNTAX ERROR", $00
>1935fa	59 4e 54 41 58 20 45 52 52 4f 52 00
>193606	45 30 30 31 20 2d 20 4d		CMD_Error_Missing .text "E001 - MISSING PARAMETER(S)", $00
>19360e	49 53 53 49 4e 47 20 50 41 52 41 4d 45 54 45 52
>19361e	28 53 29 00
>193622	45 30 30 32 20 2d 20 4e		CMD_Wrong_Device  .text "E002 - NO SUCH DEVICE EXISTS", $00
>19362a	4f 20 53 55 43 48 20 44 45 56 49 43 45 20 45 58
>19363a	49 53 54 53 00
>19363f	57 72 6f 6e 67 20 50 61		CMD_Error_Wrong   .text "Wrong Parameters...", $00
>193647	72 61 6d 65 74 65 72 73 2e 2e 2e 00
>193653	45 30 30 34 20 42 55 46		CMD_Error_Overrun .text "E004 BUFFER OVERRUN ERROR", $00
>19365b	46 45 52 20 4f 56 45 52 52 55 4e 20 45 52 52 4f
>19366b	52 00
>19366d	53 59 4e 54 41 58 20 45		CMD_Error_Notfound .text "SYNTAX ERROR", $00
>193675	52 52 4f 52 00
>19367a	53 44 43 41 52 44 20 4e		CMD_Error_SD_NotPresent .text "SDCARD NOT PRESENT", $00
>193682	4f 54 20 50 52 45 53 45 4e 54 00
>19368d	53 44 43 41 52 44 20 57		CMD_Error_SD_WP .text "SDCARD WP", $00
>193695	50 00
>193697	53 55 4e 00 4d 4f 4e 00		DOW      .text "SUN", $00, "MON", $00, "TUE", $00, "WED", $00, "THU", $00, "FRI", $00, "SAT", $00
>19369f	54 55 45 00 57 45 44 00 54 48 55 00 46 52 49 00
>1936af	53 41 54 00

;******  Return to file: kernel.asm


;******  Processing file: monitor.asm

.195000	5c 5c 50 19	jmp $19505c	MONITOR         JML IMONITOR
.195004	5c 8a 50 19	jmp $19508a	MSTATUS         JML IMSTATUS
.195008	5c 68 50 19	jmp $195068	MREADY          JML IMREADY
.19500c	5c 35 51 19	jmp $195135	MRETURN         JML IMRETURN
.195010	5c 36 51 19	jmp $195136	MPARSE          JML IMPARSE
.195014	5c 37 51 19	jmp $195137	MPARSE1         JML IMPARSE1
.195018	5c 38 51 19	jmp $195138	MEXECUTE        JML IMEXECUTE
.19501c	5c 39 51 19	jmp $195139	MASSEMBLE       JML IMASSEMBLE
.195020	5c 3a 51 19	jmp $19513a	MASSEMBLEA      JML IMASSEMBLEA
.195024	5c 3b 51 19	jmp $19513b	MCOMPARE        JML IMCOMPARE
.195028	5c 3c 51 19	jmp $19513c	MDISASSEMBLE    JML IMDISASSEMBLE
.19502c	5c 3d 51 19	jmp $19513d	MFILL           JML IMFILL
.195030	5c 3f 51 19	jmp $19513f	MJUMP           JML IMJUMP
.195034	5c 40 51 19	jmp $195140	MHUNT           JML IMHUNT
.195038	5c 41 51 19	jmp $195141	MLOAD           JML IMLOAD
.19503c	5c 42 51 19	jmp $195142	MMEMORY         JML IMMEMORY
.195040	5c 43 51 19	jmp $195143	MREGISTERS      JML IMREGISTERS
.195044	5c 44 51 19	jmp $195144	MSAVE           JML IMSAVE
.195048	5c 45 51 19	jmp $195145	MTRANSFER       JML IMTRANSFER
.19504c	5c 46 51 19	jmp $195146	MVERIFY         JML IMVERIFY
.195050	5c 47 51 19	jmp $195147	MEXIT           JML IMEXIT
.195054	5c 48 51 19	jmp $195148	MMODIFY         JML IMMODIFY
.195058	5c 49 51 19	jmp $195149	MDOS            JML IMDOS
.19505c	18		clc		IMONITOR        CLC           ; clear the carry flag
.19505d	fb		xce		                XCE           ; move carry to emulation flag.
.19505e	c2 20		rep #$20	                REP #$20        ; set A long
.195060	a9 ff fe	lda #$feff	                LDA #STACK_END ; Reset the stack
.195063	1b		tcs		                TAS
.195064	5c 68 50 19	jmp $195068	                JML IMREADY
.195068					IMREADY
.195068	c2 30		rep #$30	                REP #$30        ; set A&X long
.19506a	a9 68 50	lda #$5068	                LDA #<>IMREADY
.19506d	8d e1 ff	sta $ffe1	                STA JMP_READY+1
.195070	e2 20		sep #$20	                SEP #$20        ; set A short
.195072	a9 19		lda #$19	                LDA #`IMREADY
.195074	8d e3 ff	sta $ffe3	                STA JMP_READY+3
.195077	c2 20		rep #$20	                REP #$20        ; set A long
.195079	a9 35 51	lda #$5135	                LDA #<>IMRETURN
.19507c	8d f1 ff	sta $fff1	                STA RETURN+1
.19507f	e2 20		sep #$20	                SEP #$20        ; set A short
.195081	a9 19		lda #$19	                LDA #`IMRETURN
.195083	8d f3 ff	sta $fff3	                STA RETURN+3
.195086	5c 8a 50 19	jmp $19508a	                JML IMSTATUS
.19508a					IMSTATUS
.19508a	48		pha		                PHA             ; begin setdbr macro
.19508b	08		php		                PHP
.19508c	e2 20		sep #$20	                SEP #$20        ; set A short
.19508e	a9 19		lda #$19		LDA #`mregisters_msg
.195090	48		pha		                PHA
.195091	ab		plb		                PLB
.195092	28		plp		                PLP
.195093	68		pla		                PLA             ; end setdbr macro
.195094	a2 4a 51	ldx #$514a	                LDX #<>mregisters_msg
.195097	22 7d 05 19	jsl $19057d	                JSL IPRINT
.19509b	e2 20		sep #$20	                SEP #$20        ; set A short
.19509d	a9 3b		lda #$3b	                LDA #';'
.19509f	22 9d 05 19	jsl $19059d	                JSL IPUTC
.1950a3	c2 30		rep #$30	                REP #$30        ; set A&X long
.1950a5	48		pha		                PHA             ; begin setdbr macro
.1950a6	08		php		                PHP
.1950a7	e2 20		sep #$20	                SEP #$20        ; set A short
.1950a9	a9 00		lda #$00		LDA #$0
.1950ab	48		pha		                PHA
.1950ac	ab		plb		                PLB
.1950ad	28		plp		                PLP
.1950ae	68		pla		                PLA             ; end setdbr macro
.1950af	a0 03 00	ldy #$0003	                LDY #3
.1950b2	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.1950b5	22 b6 06 19	jsl $1906b6	                JSL IPRINTH
.1950b9	a5 20		lda $20		                LDA ' '
.1950bb	22 9d 05 19	jsl $19059d	                JSL IPUTC
.1950bf	a0 02 00	ldy #$0002	                LDY #2
.1950c2	a2 45 02	ldx #$0245	                LDX #CPUA+1
.1950c5	22 b6 06 19	jsl $1906b6	                JSL IPRINTH
.1950c9	a5 20		lda $20		                LDA ' '
.1950cb	22 9d 05 19	jsl $19059d	                JSL IPUTC
.1950cf	a0 02 00	ldy #$0002	                LDY #2
.1950d2	a2 47 02	ldx #$0247	                LDX #CPUX+1
.1950d5	22 b6 06 19	jsl $1906b6	                JSL IPRINTH
.1950d9	a5 20		lda $20		                LDA ' '
.1950db	22 9d 05 19	jsl $19059d	                JSL IPUTC
.1950df	a0 02 00	ldy #$0002	                LDY #2
.1950e2	a2 49 02	ldx #$0249	                LDX #CPUY+1
.1950e5	22 b6 06 19	jsl $1906b6	                JSL IPRINTH
.1950e9	a5 20		lda $20		                LDA ' '
.1950eb	22 9d 05 19	jsl $19059d	                JSL IPUTC
.1950ef	a0 02 00	ldy #$0002	                LDY #2
.1950f2	a2 4b 02	ldx #$024b	                LDX #CPUSTACK+1
.1950f5	22 b6 06 19	jsl $1906b6	                JSL IPRINTH
.1950f9	a5 20		lda $20		                LDA ' '
.1950fb	22 9d 05 19	jsl $19059d	                JSL IPUTC
.1950ff	a0 01 00	ldy #$0001	                LDY #1
.195102	a2 4e 02	ldx #$024e	                LDX #CPUDBR
.195105	22 b6 06 19	jsl $1906b6	                JSL IPRINTH
.195109	a5 20		lda $20		                LDA ' '
.19510b	22 9d 05 19	jsl $19059d	                JSL IPUTC
.19510f	22 9d 05 19	jsl $19059d	                JSL IPUTC
.195113	a0 02 00	ldy #$0002	                LDY #2
.195116	a2 4d 02	ldx #$024d	                LDX #CPUDP+1
.195119	22 b6 06 19	jsl $1906b6	                JSL IPRINTH
.19511d	a5 20		lda $20		                LDA ' '
.19511f	22 9d 05 19	jsl $19059d	                JSL IPUTC
.195123	a0 01 00	ldy #$0001	                LDY #1
.195126	a2 4f 02	ldx #$024f	                LDX #CPUFLAGS
.195129	22 b6 06 19	jsl $1906b6	                JSL IPRINTH
.19512d	22 cb 05 19	jsl $1905cb	                JSL IPRINTCR
.195131	5c 6b 05 19	jmp $19056b	                JML IREADYWAIT
.195135	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.195136	00		brk #		IMPARSE         BRK ; Parse the current command line
.195137	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.195138	00		brk #		IMEXECUTE       BRK ; Execute the current command line (requires MCMD and MARG1-MARG8 to be populated)
.195139	00		brk #		IMASSEMBLE      BRK ; Assemble a line of text.
.19513a	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.19513b	00		brk #		IMCOMPARE       BRK ; Compare memory. len=1
.19513c	00		brk #		IMDISASSEMBLE   BRK ; Disassemble memory. end=1 instruction
.19513d	00		brk #		IMFILL          BRK ; Fill memory with specified value. Start and end must be in the same bank.
.19513e	00		brk #		IMGO            BRK ; Execute from specified address
.19513f	00		brk #		IMJUMP          BRK ; Execute from spefified address
.195140	00		brk #		IMHUNT          BRK ; Hunt (find) value in memory
.195141	00		brk #		IMLOAD          BRK ; Load data from disk. Device=1 (internal floppy) Start=Address in file
.195142	00		brk #		IMMEMORY        BRK ; View memory
.195143	00		brk #		IMREGISTERS     BRK ; View/edit registers
.195144	00		brk #		IMSAVE          BRK ; Save memory to disk
.195145	00		brk #		IMTRANSFER      BRK ; Transfer (copy) data in memory
.195146	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.195147	00		brk #		IMEXIT          BRK ; Exit monitor and return to BASIC command prompt
.195148	00		brk #		IMMODIFY        BRK ; Modify memory
.195149	00		brk #		IMDOS           BRK ; Execute DOS command
.19514a					MMESSAGES
>19514a					MMERROR         .text
>19514a	0d 20 50 43 20 20 20 20		mregisters_msg  .null $0D," PC     A    X    Y    SP   DBR DP   NVMXDIZC"
>195152	20 41 20 20 20 20 58 20 20 20 20 59 20 20 20 20
>195162	53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56
>195172	4d 58 44 49 5a 43 00

;******  Return to file: kernel.asm


;******  Processing file: Interrupt_Handler.asm

.195179					IRQ_HANDLER
.195179	e2 20		sep #$20	                SEP #$20        ; set A short
.19517b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.19517f	29 01		and #$01	                AND #FNX0_INT00_SOF
.195181	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.195183	d0 05		bne $19518a	                BNE SERVICE_NEXT_IRQ6
.195185	20 d7 52	jsr $1952d7	                JSR SOF_INTERRUPT
.195188	80 67		bra $1951f1	                BRA EXIT_IRQ_HANDLE
.19518a					SERVICE_NEXT_IRQ6
.19518a	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.19518e	29 40		and #$40	                AND #FNX0_INT06_FDC
.195190	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.195192	d0 05		bne $195199	                BNE SERVICE_NEXT_IRQ7
.195194	20 06 53	jsr $195306	                JSR FDC_INTERRUPT
.195197	80 58		bra $1951f1	                BRA EXIT_IRQ_HANDLE
.195199					SERVICE_NEXT_IRQ7
.195199	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.19519d	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.19519f	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.1951a1	d0 05		bne $1951a8	                BNE SERVICE_NEXT_IRQ8
.1951a3	20 e2 52	jsr $1952e2	                JSR MOUSE_INTERRUPT
.1951a6	80 49		bra $1951f1	                BRA EXIT_IRQ_HANDLE
.1951a8					SERVICE_NEXT_IRQ8
.1951a8	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1951ac	29 01		and #$01	                AND #FNX1_INT00_KBD
.1951ae	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.1951b0	d0 05		bne $1951b7	                BNE SERVICE_NEXT_IRQ11
.1951b2	20 f4 51	jsr $1951f4	                JSR KEYBOARD_INTERRUPT
.1951b5	80 3a		bra $1951f1	                BRA EXIT_IRQ_HANDLE
.1951b7					SERVICE_NEXT_IRQ11
.1951b7	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1951bb	29 08		and #$08	                AND #FNX1_INT03_COM2
.1951bd	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.1951bf	d0 05		bne $1951c6	                BNE SERVICE_NEXT_IRQ12
.1951c1	20 11 53	jsr $195311	                JSR COM2_INTERRUPT
.1951c4	80 2b		bra $1951f1	                BRA EXIT_IRQ_HANDLE
.1951c6					SERVICE_NEXT_IRQ12
.1951c6	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1951ca	29 10		and #$10	                AND #FNX1_INT04_COM1
.1951cc	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.1951ce	d0 05		bne $1951d5	                BNE SERVICE_NEXT_IRQ13
.1951d0	20 1c 53	jsr $19531c	                JSR COM1_INTERRUPT
.1951d3	80 1c		bra $1951f1	                BRA EXIT_IRQ_HANDLE
.1951d5					SERVICE_NEXT_IRQ13
.1951d5	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1951d9	29 20		and #$20	                AND #FNX1_INT05_MPU401
.1951db	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.1951dd	d0 05		bne $1951e4	                BNE SERVICE_NEXT_IRQ14
.1951df	20 35 53	jsr $195335	                JSR MPU401_INTERRUPT
.1951e2	80 0d		bra $1951f1	                BRA EXIT_IRQ_HANDLE
.1951e4					SERVICE_NEXT_IRQ14
.1951e4	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1951e8	29 40		and #$40	                AND #FNX1_INT06_LPT
.1951ea	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.1951ec	d0 03		bne $1951f1	                BNE EXIT_IRQ_HANDLE
.1951ee	20 40 53	jsr $195340	                JSR LPT1_INTERRUPT
.1951f1					EXIT_IRQ_HANDLE
.1951f1	c2 30		rep #$30	                REP #$30        ; set A&X long
.1951f3	6b		rtl		                RTL
.1951f4					KEYBOARD_INTERRUPT
.1951f4	a2 00 00	ldx #$0000	                ldx #$0000
.1951f7	e2 10		sep #$10	                SEP #$10        ; set X short
.1951f9	e2 20		sep #$20	                SEP #$20        ; set A short
.1951fb	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1951ff	29 01		and #$01	                AND #FNX1_INT00_KBD
.195201	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.195205					IRQ_HANDLER_FETCH
.195205	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF        ; Get Scan Code from KeyBoard
.195209	8d 88 0f	sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.19520c	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.19520e	d0 03		bne $195213	                BNE NOT_KB_SET_SHIFT
.195210	82 75 00	brl $195288	                BRL KB_SET_SHIFT
.195213					NOT_KB_SET_SHIFT
.195213	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.195215	d0 03		bne $19521a	                BNE NOT_KB_CLR_SHIFT
.195217	82 79 00	brl $195293	                BRL KB_CLR_SHIFT
.19521a					NOT_KB_CLR_SHIFT
.19521a	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.19521c	d0 03		bne $195221	                BNE NOT_KB_SET_CTRL
.19521e	82 7d 00	brl $19529e	                BRL KB_SET_CTRL
.195221					NOT_KB_SET_CTRL
.195221	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.195223	d0 03		bne $195228	                BNE NOT_KB_CLR_CTRL
.195225	82 81 00	brl $1952a9	                BRL KB_CLR_CTRL
.195228					NOT_KB_CLR_CTRL
.195228	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.19522a	d0 03		bne $19522f	                BNE NOT_KB_SET_ALT
.19522c	82 85 00	brl $1952b4	                BRL KB_SET_ALT
.19522f					NOT_KB_SET_ALT
.19522f	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.195231	d0 03		bne $195236	                BNE KB_UNPRESSED
.195233	82 89 00	brl $1952bf	                BRL KB_CLR_ALT
.195236	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.195238	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.19523a	d0 03		bne $19523f	                BNE KB_NORM_SC
.19523c	82 88 00	brl $1952c7	                BRL KB_CHECK_B_DONE
.19523f	ad 88 0f	lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.195242	aa		tax		                TAX
.195243	ad 87 0f	lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.195246	29 10		and #$10	                AND #$10
.195248	c9 10		cmp #$10	                CMP #$10
.19524a	f0 19		beq $195265	                BEQ SHIFT_KEY_ON
.19524c	ad 87 0f	lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.19524f	29 20		and #$20	                AND #$20
.195251	c9 20		cmp #$20	                CMP #$20
.195253	f0 17		beq $19526c	                BEQ CTRL_KEY_ON
.195255	ad 87 0f	lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.195258	29 40		and #$40	                AND #$40
.19525a	c9 40		cmp #$40	                CMP #$40
.19525c	f0 15		beq $195273	                BEQ ALT_KEY_ON
.19525e	bf 00 16 19	lda $191600,x	                LDA @lScanCode_Press_Set1, x
.195262	82 12 00	brl $195277	                BRL KB_WR_2_SCREEN
.195265	bf 80 16 19	lda $191680,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.195269	82 0b 00	brl $195277	                BRL KB_WR_2_SCREEN
.19526c	bf 00 17 19	lda $191700,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.195270	82 04 00	brl $195277	                BRL KB_WR_2_SCREEN
.195273	bf 80 17 19	lda $191780,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.195277					KB_WR_2_SCREEN
.195277	48		pha		                PHA
.195278	c2 10		rep #$10	                REP #$10        ; set X long
.19527a	22 00 30 19	jsl $193000	                JSL SAVECHAR2CMDLINE
.19527e	e2 20		sep #$20	                SEP #$20        ; set A short
.195280	68		pla		                PLA
.195281	22 18 00 19	jsl $190018	                JSL PUTC
.195285	4c c7 52	jmp $1952c7	                JMP KB_CHECK_B_DONE
.195288	ad 87 0f	lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.19528b	09 10		ora #$10	                ORA #$10
.19528d	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.195290	4c c7 52	jmp $1952c7	                JMP KB_CHECK_B_DONE
.195293	ad 87 0f	lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.195296	29 ef		and #$ef	                AND #$EF
.195298	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.19529b	4c c7 52	jmp $1952c7	                JMP KB_CHECK_B_DONE
.19529e	ad 87 0f	lda $0f87	KB_SET_CTRL    LDA KEYBOARD_SC_FLG
.1952a1	09 20		ora #$20	                ORA #$20
.1952a3	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1952a6	4c c7 52	jmp $1952c7	                JMP KB_CHECK_B_DONE
.1952a9	ad 87 0f	lda $0f87	KB_CLR_CTRL    LDA KEYBOARD_SC_FLG
.1952ac	29 df		and #$df	                AND #$DF
.1952ae	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1952b1	4c c7 52	jmp $1952c7	                JMP KB_CHECK_B_DONE
.1952b4	ad 87 0f	lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.1952b7	09 40		ora #$40	                ORA #$40
.1952b9	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1952bc	4c c7 52	jmp $1952c7	                JMP KB_CHECK_B_DONE
.1952bf	ad 87 0f	lda $0f87	KB_CLR_ALT     LDA KEYBOARD_SC_FLG
.1952c2	29 bf		and #$bf	                AND #$BF
.1952c4	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1952c7					KB_CHECK_B_DONE
.1952c7	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.1952cb	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.1952cd	c9 01		cmp #$01	                CMP #OUT_BUF_FULL ; if Still Byte in the Buffer, fetch it out
.1952cf	d0 03		bne $1952d4	                BNE KB_DONE
.1952d1	4c 05 52	jmp $195205	                JMP IRQ_HANDLER_FETCH
.1952d4					KB_DONE
.1952d4	c2 30		rep #$30	                REP #$30        ; set A&X long
.1952d6	60		rts		                RTS
.1952d7					SOF_INTERRUPT
.1952d7	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1952db	29 01		and #$01	                AND #FNX0_INT00_SOF
.1952dd	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1952e1	60		rts		                RTS
.1952e2					MOUSE_INTERRUPT
.1952e2	e2 20		sep #$20	                SEP #$20        ; set A short
.1952e4	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.1952e8	e2 10		sep #$10	                SEP #$10        ; set X short
.1952ea	a6 e0		ldx $e0		                LDX MOUSE_PTR
.1952ec	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.1952f0	e8		inx		                INX
.1952f1	e0 03		cpx #$03	                CPX #$03
.1952f3	d0 02		bne $1952f7	                BNE EXIT_FOR_NEXT_VALUE
.1952f5	a2 00		ldx #$00	                LDX #$00
.1952f7					EXIT_FOR_NEXT_VALUE
.1952f7	86 e0		stx $e0		                STX MOUSE_PTR
.1952f9	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1952fd	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.1952ff	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.195303	c2 10		rep #$10	                REP #$10        ; set X long
.195305	60		rts		                RTS
.195306					FDC_INTERRUPT
.195306	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.19530a	29 40		and #$40	                AND #FNX0_INT06_FDC
.19530c	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.195310	60		rts		                RTS
.195311					COM2_INTERRUPT
.195311	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.195315	29 08		and #$08	                AND #FNX1_INT03_COM2
.195317	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.19531b	60		rts		                RTS
.19531c					COM1_INTERRUPT
.19531c	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.195320	29 10		and #$10	                AND #FNX1_INT04_COM1
.195322	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.195326	a9 01		lda #$01	                LDA #1
.195328	8f 1e 28 19	sta $19281e	                STA UART_SELECT
.19532c	22 d2 28 19	jsl $1928d2	                JSL UART_GETC           ; Get the character
.195330	22 9d 05 19	jsl $19059d	                JSL IPUTC                ; And echo it to the screen
.195334	60		rts		                RTS
.195335					MPU401_INTERRUPT
.195335	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.195339	29 20		and #$20	                AND #FNX1_INT05_MPU401
.19533b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.19533f	60		rts		                RTS
.195340					LPT1_INTERRUPT
.195340	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.195344	29 40		and #$40	                AND #FNX1_INT06_LPT
.195346	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.19534a	60		rts		                RTS
.19534b					NMI_HANDLER
.19534b	a2 ca 14	ldx #$14ca	                LDX #<>nmi_Msg
.19534e	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print the Init
.195352	6b		rtl		                RTL

;******  Return to file: kernel.asm


;******  Processing file: SDOS.asm


;******  Processing file: ch376s_inc.asm

=$00					DEF_NULL_CHAR       = $00
=$2a					DEF_WILDCARD_CHAR   = $2A
=$5c					DEF_SEPAR_CHAR1     = $5C
=$2f					DEF_SEPAR_CHAR2     = $2F
=$0a					CH_CMD_RD_VAR8        = $0A     ; Read 8Bit Value
=$0b					CH_CMD_WR_VAR8        = $0B     ; Write 8Bit Value to controller
=$0c					CH_CMD_RD_VAR32       = $0C     ; Read 32Bit Value
=$0d					CH_CMD_WR_VAR32       = $0D
=$15					CH_CMD_SET_MODE       = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22					CH_CMD_GET_STATUS     = $22     ; Get Interrupt Status
=$27					CH_CMD_RD_DATA0       = $27     ;
=$2f					CH_CMD_SET_FILENAME   = $2F     ;SET_FILE_NAME
=$31					CH_CMD_DISK_MOUNT     = $31     ;DISK_MOUNT
=$32					CH_CMD_FILE_OPEN      = $32     ;FILE_OPEN
=$33					CH_CMD_FILE_ENUM_GO   = $33
=$36					CH_CMD_FILE_CLOSE     = $36     ; To be Implemented
=$39					CH_CMD_BYTE_LOCATE    = $39
=$3a					CH_CMD_BYTE_READ      = $3A
=$3b					CH_CMD_BYTE_RD_GO     = $3B
=$3c					CH_CMD_BYTE_WRITE     = $3C
=$3d					CH_CMD_BYTE_WR_GO     = $3D
=$44					CH_VAR_DISK_ROOT		  = $44
=$48					CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c					CH_VAR_DSK_START_LBA	= $4C
=$50					CH_VAR_DSK_DAT_START	= $50
=$54					CH_VAR_LBA_BUFFER		  = $54
=$58					CH_VAR_LBA_CURRENT		= $58
=$5c					CH_VAR_FAT_DIR_LBA		= $5C
=$60					CH_VAR_START_CLUSTER	= $60
=$64					CH_VAR_CURRENT_CLUST	= $64
=$68					CH_VAR_FILE_SIZE		  = $68
=$6c					CH_VAR_CURRENT_OFFSET	= $6C
=$14					CH376S_STAT_SUCCESS  = $14
=$17					CH376S_STAT_BUF_OVF  = $17
=$1d					CH376S_STAT_DSK_RD   = $1D
=$1e					CH376S_STAT_DSK_WR   = $1E
=$41					CH376S_ERR_OPEN_DIR  = $41
=$42					CH376S_ERR_MISS_FIL  = $42
=$43					CH376S_ERR_FND_NAME  = $43
=$82					CH376S_ERR_DISK_DSC  = $82
=$84					CH376S_ERR_LRG_SEC   = $84
=$92					CH376S_ERR_PARTTION  = $92
=$a1					CH376S_ERR_NOT_FORM  = $A1
=$b1					CH376S_ERR_DSK_FULL  = $B1
=$b2					CH376S_FDT_OVER      = $B2
=$b4					CH376S_FILE_CLOSED   = $B4
=$00					SDCARD_PRSNT_NO_CARD = $00
=$01					SDCARD_PRSNT_CD      = $01
=$02					SDCARD_PRSNT_WP      = $02
=$04					SDCARD_PRSNT_MNTED   = $04  ; Card is present and Mounted1

;******  Return to file: SDOS.asm

.192000	5c d2 21 19	jmp $1921d2	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.192004	5c e1 21 19	jmp $1921e1	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.192008	5c 20 20 19	jmp $192020	SDOS_INIT     JML ISDOS_INIT
.19200c	5c 6d 20 19	jmp $19206d	SDOS_DIR      JML ISDOS_DIR
.192010	5c 27 21 19	jmp $192127	SDOS_CHDIR    JML ISDOS_CHDIR
.192014	5c 28 21 19	jmp $192128	SDOS_LOAD     JML ISDOS_LOAD
.192018	5c 2c 21 19	jmp $19212c	SDOS_SAVE     JML ISDOS_SAVE
.19201c	5c 2d 21 19	jmp $19212d	SDOS_EXEC     JML ISDOS_EXEC
.192020					ISDOS_INIT
.192020	e2 20		sep #$20	                SEP #$20        ; set A short
.192022	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.192026	29 7f		and #$7f	              AND #~FNX1_INT07_SDCARD   ; Enable
.192028	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1
.19202c	a9 06		lda #$06	              LDA #$06
.19202e	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192032	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192035	a9 a8		lda #$a8	              LDA #$A8
.192037	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19203b	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.19203e	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192041	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192044	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192048	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.19204b	a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.19204d	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192051	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192054	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192057	a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.192059	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA     ; Write the MODE and Wait for around ~10us
.19205d					ISDOS_WAIT_FOR_MODE_SW
.19205d	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA ; Wait 0.6us
.192060	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192064	c9 51		cmp #$51	              CMP #$51   ; CMD_RET_SUCCESS		EQU		051H, CMD_RET_ABORT		EQU		05FH
.192066	d0 f5		bne $19205d	              BNE ISDOS_WAIT_FOR_MODE_SW
.192068	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA     ; See the Status Output
.19206c	6b		rtl		              RTL
.19206d					ISDOS_DIR
.19206d	e2 20		sep #$20	                SEP #$20        ; set A short
.19206f	c2 10		rep #$10	                REP #$10        ; set X long
.192071	20 2e 21	jsr $19212e	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.192074	a2 00 00	ldx #$0000	              LDX #$0000
.192077					ISDOS_DIR_TRF
.192077	bf c4 23 19	lda $1923c4,x	              LDA sd_card_dir_string,X    ; /
.19207b	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.19207f	e8		inx		              INX
.192080	e0 03 00	cpx #$0003	              CPX #$0003
.192083	d0 f2		bne $192077	              BNE ISDOS_DIR_TRF
.192085	20 63 21	jsr $192163	              JSR SDOS_FILE_OPEN         ; Now that the file name is set, go open File
.192088	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.19208a	f0 03		beq $19208f	              BEQ ISDOS_DIR_CONT0
.19208c	82 80 00	brl $19210f	              BRL ISDOS_MISS_FILE
.19208f					ISDOS_DIR_CONT0
.19208f					ISDOS_NEXT_ENTRY
.19208f	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.192091	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192095	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA;
.192098	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;  Load First Data
.19209c	a0 00 00	ldy #$0000	              LDY #$0000
.19209f	a2 00 00	ldx #$0000	              LDX #$0000
.1920a2	a8		tay		              TAY              ; GET Size (Save in Case we need it)
.1920a3					ISDOS_DIR_GET_CHAR
.1920a3	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA ; Wait 0.6us
.1920a6	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;
.1920aa	22 9d 05 19	jsl $19059d	              JSL IPUTC        ; Print the character
.1920ae	e8		inx		              INX
.1920af	e0 08 00	cpx #$0008	              CPX #$0008
.1920b2	d0 03		bne $1920b7	              BNE ISDOS_DIR_CONT1
.1920b4	20 20 21	jsr $192120	              JSR ISDOS_DISPLAY_DOT
.1920b7					ISDOS_DIR_CONT1
.1920b7	e0 0b 00	cpx #$000b	              CPX #$000B          ; the First 11th Character is the file name
.1920ba	d0 e7		bne $1920a3	              BNE ISDOS_DIR_GET_CHAR
.1920bc	a9 20		lda #$20	              LDA #$20
.1920be	22 9d 05 19	jsl $19059d	              JSL IPUTC        ; Print the character
.1920c2	a9 28		lda #$28	              LDA #'('
.1920c4	22 9d 05 19	jsl $19059d	              JSL IPUTC        ; Print the character
.1920c8	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;
.1920cc	29 10		and #$10	              AND #$10
.1920ce	c9 10		cmp #$10	              CMP #$10
.1920d0	f0 04		beq $1920d6	              BEQ ISDOS_DIR_ATTR0
.1920d2	a9 46		lda #$46	              LDA #'F'
.1920d4	80 02		bra $1920d8	              BRA ISDOS_DIR_ATTR1
.1920d6					ISDOS_DIR_ATTR0
.1920d6	a9 44		lda #$44	              LDA #'D'
.1920d8					ISDOS_DIR_ATTR1
.1920d8	22 9d 05 19	jsl $19059d	              JSL IPUTC        ; Print the character
.1920dc	a9 29		lda #$29	              LDA #')'
.1920de	22 9d 05 19	jsl $19059d	              JSL IPUTC        ; Print the character
.1920e2	a9 0d		lda #$0d	              LDA #$0D         ; Carriage Return
.1920e4	22 9d 05 19	jsl $19059d	              JSL IPUTC        ; Print the character
.1920e8					ISDOS_DIR_GET_CHAR_FINISH
.1920e8	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA ; Wait 0.6us
.1920eb	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ; After the name Just empty the buffer
.1920ef	e8		inx		              INX
.1920f0	e0 20 00	cpx #$0020	              CPX #$0020
.1920f3	d0 f3		bne $1920e8	              BNE ISDOS_DIR_GET_CHAR_FINISH
.1920f5	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.1920f8	a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.1920fa	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.1920fe	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.192101	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.192103	f0 8a		beq $19208f	              BEQ ISDOS_NEXT_ENTRY
.192105	c9 42		cmp #$42	              CMP #CH376S_ERR_MISS_FIL
.192107	d0 06		bne $19210f	              BNE  ISDOS_MISS_FILE
.192109	a2 4f 24	ldx #$244f	              LDX #<>sd_card_msg5   ; End of File
.19210c	82 09 00	brl $192118	              BRL ISDOS_DIR_DONE
.19210f					ISDOS_MISS_FILE
.19210f	a2 da 23	ldx #$23da	              LDX #<>sd_card_err0
.192112	82 03 00	brl $192118	              BRL ISDOS_DIR_DONE
.192115					NO_SDCARD_PRESENT
.192115	a2 c7 23	ldx #$23c7	              LDX #<>sd_no_card_msg
.192118					ISDOS_DIR_DONE
.192118	22 7d 05 19	jsl $19057d	              JSL IPRINT       ; print the first line
.19211c	20 73 21	jsr $192173	              JSR SDOS_FILE_CLOSE
.19211f	6b		rtl		              RTL;
.192120					ISDOS_DISPLAY_DOT
.192120	a9 2e		lda #$2e	              LDA #'.'
.192122	22 9d 05 19	jsl $19059d	              JSL IPUTC        ; Print the character
.192126	60		rts		              RTS;
.192127	00		brk #		ISDOS_CHDIR   BRK;
.192128					ISDOS_LOAD
.192128	20 4f 22	jsr $19224f	              JSR SDOS_READ_FILE;
.19212b	6b		rtl		              RTL;
.19212c	00		brk #		ISDOS_SAVE    BRK;
.19212d	00		brk #		ISDOS_EXEC    BRK;
.19212e					ISDOS_MOUNT_CARD
.19212e	e2 20		sep #$20	                SEP #$20        ; set A short
.192130	c2 10		rep #$10	                REP #$10        ; set X long
.192132	a0 00 00	ldy #$0000	              LDY #$0000
.192135	a9 01		lda #$01	              LDA #$01
.192137	85 3f		sta $3f		              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.192139					TRY_MOUNT_AGAIN
.192139	a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.19213b	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD              ;
.19213f	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT       ;
.192142	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.192144	f0 09		beq $19214f	              BEQ ISDOS_MOUNTED
.192146	c8		iny		              INY
.192147	c0 05 00	cpy #$0005	              CPY #$0005
.19214a	d0 ed		bne $192139	              BNE TRY_MOUNT_AGAIN
.19214c	4c 56 21	jmp $192156	              JMP SDCARD_ERROR_MOUNT
.19214f					ISDOS_MOUNTED
.19214f	a5 3f		lda $3f		              LDA SDCARD_PRSNT_MNT
.192151	29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.192153	09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.192155	60		rts		              RTS
.192156					SDCARD_ERROR_MOUNT
.192156	a2 2a 24	ldx #$242a	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.192159	22 7d 05 19	jsl $19057d	              JSL IPRINT       ; print the first line
.19215d	60		rts		              RTS
.19215e	a9 00		lda #$00	ISDOS_NO_CARD LDA #SDCARD_PRSNT_NO_CARD
.192160	85 3f		sta $3f		              STA SDCARD_PRSNT_MNT
.192162	60		rts		              RTS
.192163					SDOS_FILE_OPEN
.192163	20 86 21	jsr $192186	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.192166	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192169	a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.19216b	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD          ; Go Request to open the File
.19216f	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.192172	60		rts		              RTS
.192173					SDOS_FILE_CLOSE
.192173	a9 36		lda #$36	              LDA #CH_CMD_FILE_CLOSE ;
.192175	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD          ; Go Request to open the File
.192179	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.19217c	a9 00		lda #$00	              LDA #$00                ; FALSE
.19217e	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.192182	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.192185	60		rts		              RTS
.192186					SDOS_SET_FILE_NAME
.192186	a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.192188	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.19218c	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.19218f	a2 00 00	ldx #$0000	              LDX #$0000
.192192					SDOS_SET_FILE_LOOP
.192192	bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.192196	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.19219a	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.19219d	e8		inx		              INX
.19219e	c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.1921a0	d0 f0		bne $192192	              BNE SDOS_SET_FILE_LOOP
.1921a2	60		rts		              RTS
.1921a3					DLYCMD_2_DTA
.1921a3	ea		nop		              NOP
.1921a4	ea		nop		              NOP
.1921a5	ea		nop		              NOP
.1921a6	ea		nop		              NOP
.1921a7	ea		nop		              NOP
.1921a8					DLYDTA_2_DTA
.1921a8	ea		nop		              NOP
.1921a9	ea		nop		              NOP
.1921aa	ea		nop		              NOP
.1921ab	ea		nop		              NOP
.1921ac	ea		nop		              NOP
.1921ad	60		rts		              RTS;
.1921ae					SDCARD_WAIT_4_INT
.1921ae	e2 20		sep #$20	                SEP #$20        ; set A short
.1921b0					SDCARD_BUSY_INT
.1921b0	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1  ; Check to See if the Pending Register for the SD_INT is Set
.1921b4	29 80		and #$80	              AND #FNX1_INT07_SDCARD  ;
.1921b6	c9 80		cmp #$80	              CMP #FNX1_INT07_SDCARD
.1921b8	d0 f6		bne $1921b0	              BNE SDCARD_BUSY_INT   ; Go Check again to see if it is checked
.1921ba	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1    ;Interrupt as occured, clear the Pending Register for next time.
.1921be	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA ;
.1921c1	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA ;
.1921c4	a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.1921c6	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1921ca	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.1921cd	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA;
.1921d1	60		rts		              RTS           ;
.1921d2					ISDOS_CHK_CD
.1921d2	e2 20		sep #$20	                SEP #$20        ; set A short
.1921d4	18		clc		              CLC
.1921d5	af 10 e8 af	lda $afe810	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.1921d9	29 01		and #$01	              AND #$01
.1921db	c9 01		cmp #$01	              CMP #$01
.1921dd	f0 01		beq $1921e0	              BEQ SDCD_NOT_PRST;
.1921df	38		sec		              SEC
.1921e0	60		rts		SDCD_NOT_PRST RTS
.1921e1					ISDOS_CHK_WP
.1921e1	e2 20		sep #$20	                SEP #$20        ; set A short
.1921e3	18		clc		              CLC
.1921e4	af 10 e8 af	lda $afe810	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.1921e8	29 02		and #$02	              AND #$02
.1921ea	d0 01		bne $1921ed	              BNE SDCD_NOT_WP;
.1921ec	38		sec		              SEC
.1921ed	60		rts		SDCD_NOT_WP   RTS
.1921ee					ISDOS_GET_FILE_SIZE
.1921ee	e2 20		sep #$20	                SEP #$20        ; set A short
.1921f0	a9 0c		lda #$0c	              LDA #CH_CMD_RD_VAR32
.1921f2	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1921f6	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.1921f9	a9 68		lda #$68	              LDA #CH_VAR_FILE_SIZE
.1921fb	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA;
.1921ff	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192202	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA         ;LSB First
.192206	8f 28 03 00	sta $000328	              STA @lSDOS_FILE_SIZE+0
.19220a	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;     ; Store in ADDER32 REgister A
.19220e	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192211	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192215	8f 29 03 00	sta $000329	              STA @lSDOS_FILE_SIZE+1
.192219	8f 21 01 00	sta $000121	              STA @lADDER32_A_LH;     ; Store in ADDER32 REgister A
.19221d	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192220	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192224	8f 2a 03 00	sta $00032a	              STA @lSDOS_FILE_SIZE+2
.192228	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;     ; Store in ADDER32 REgister A
.19222c	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.19222f	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192233	8f 2b 03 00	sta $00032b	              STA @lSDOS_FILE_SIZE+3   ;MSB Last
.192237	8f 23 01 00	sta $000123	              STA @lADDER32_A_HH;     ; Store in ADDER32 REgister A
.19223b	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.19223e	af 28 01 00	lda $000128	              LDA @lADDER32_R_LL;
.192242	af 29 01 00	lda $000129	              LDA @lADDER32_R_LH;
.192246	af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL;
.19224a	af 2b 01 00	lda $00012b	              LDA @lADDER32_R_HH;
.19224e	60		rts		              RTS
.19224f					SDOS_READ_FILE
.19224f	c2 30		rep #$30	                REP #$30        ; set A&X long
.192251	20 5c 23	jsr $19235c	              JSR SDOS_SETUP_ADDER_B;
.192254	e2 20		sep #$20	                SEP #$20        ; set A short
.192256	20 63 21	jsr $192163	              JSR SDOS_FILE_OPEN
.192259	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.19225b	f0 03		beq $192260	              BEQ SDOS_READ_FILE_KEEP_GOING
.19225d	82 91 00	brl $1922f1	              BRL SDOS_READ_END
.192260					SDOS_READ_FILE_KEEP_GOING
.192260	a2 5e 24	ldx #$245e	              LDX #<>sd_card_msg6         ; Print Screen the Message "FILE FOUND, LOADING..."
.192263	22 7d 05 19	jsl $19057d	              JSL IPRINT       ; print the first line
.192267	20 ee 21	jsr $1921ee	              JSR ISDOS_GET_FILE_SIZE   ; Get the File Size in 32Bits
.19226a	c2 20		rep #$20	                REP #$20        ; set A long
.19226c	20 80 23	jsr $192380	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE;
.19226f	a9 00 00	lda #$0000	              LDA #$0000
.192272	8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.192276	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.19227a	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.19227e	e2 20		sep #$20	                SEP #$20        ; set A short
.192280					SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.192280	a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.192282	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.192286	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.192289	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.19228d	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192291	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.192294	af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.192298	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19229c	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT
.19229f	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.1922a1	f0 03		beq $1922a6	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.1922a3	82 4b 00	brl $1922f1	              BRL SDOS_READ_END
.1922a6					SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.1922a6	20 9f 23	jsr $19239f	              JSR SDOS_READ_BLOCK
.1922a9	a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.1922ab	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.1922af	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT
.1922b2	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.1922b4	d0 05		bne $1922bb	              BNE SDOS_READ_PROC_DONE
.1922b6	20 fb 22	jsr $1922fb	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.1922b9	80 eb		bra $1922a6	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.1922bb					SDOS_READ_PROC_DONE
.1922bb	c2 20		rep #$20	                REP #$20        ; set A long
.1922bd	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.1922c1	c9 ff ff	cmp #$ffff	              CMP #$FFFF
.1922c4	d0 24		bne $1922ea	              BNE SDOS_READ_DONE1                  ; if it equal 64K, then the file is bugger than 64K
.1922c6	af 28 01 00	lda $000128	              LDA @lADDER32_R_LL
.1922ca	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL
.1922ce	af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL
.1922d2	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL
.1922d6	20 80 23	jsr $192380	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE ;
.1922d9	20 42 23	jsr $192342	              JSR SDOS_COMPUTE_LOCATE_POINTER
.1922dc	e2 20		sep #$20	                SEP #$20        ; set A short
.1922de	20 0d 23	jsr $19230d	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.1922e1	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT
.1922e4	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.1922e6	d0 09		bne $1922f1	              BNE SDOS_READ_END
.1922e8	80 96		bra $192280	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.1922ea					SDOS_READ_DONE1
.1922ea	a9 00		lda #$00	              LDA #$00
.1922ec	a2 75 24	ldx #$2475	              LDX #<>sd_card_msg7         ; Print Screen the Message "FILE LOADED"
.1922ef	80 05		bra $1922f6	              BRA SDOS_READ_PROC_DONE1
.1922f1					SDOS_READ_END
.1922f1	a9 ff		lda #$ff	              LDA #$FF
.1922f3	a2 f0 23	ldx #$23f0	              LDX #<>sd_card_err1         ;"ERROR LOADING FILE"
.1922f6					SDOS_READ_PROC_DONE1
.1922f6	22 7d 05 19	jsl $19057d	              JSL IPRINT       ; print the first line
.1922fa	60		rts		              RTS;
.1922fb					SDOS_ADJUST_POINTER
.1922fb	c2 20		rep #$20	                REP #$20        ; set A long
.1922fd	18		clc		              CLC
.1922fe	a5 38		lda $38		              LDA SDCARD_FILE_PTR ;Load the Pointer
.192300	65 3c		adc $3c		              ADC SDCARD_BYTE_NUM
.192302	85 38		sta $38		              STA SDCARD_FILE_PTR;
.192304	e2 20		sep #$20	                SEP #$20        ; set A short
.192306	a5 3a		lda $3a		              LDA SDCARD_FILE_PTR+2;
.192308	69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.19230a	85 3a		sta $3a		              STA SDCARD_FILE_PTR+2;
.19230c					SDOS_ADJ_DONE
.19230c	60		rts		              RTS
.19230d					SDOS_BYTE_LOCATE
.19230d	e2 20		sep #$20	                SEP #$20        ; set A short
.19230f	a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.192311	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192315	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192318	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.19231c	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192320	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192323	af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.192327	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19232b	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.19232e	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.192332	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192336	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192339	af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.19233d	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192341	60		rts		              RTS
.192342					SDOS_COMPUTE_LOCATE_POINTER
.192342	c2 20		rep #$20	                REP #$20        ; set A long
.192344	18		clc		              CLC
.192345	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.192349	69 ff ff	adc #$ffff	              ADC #$FFFF
.19234c	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.192350	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.192354	69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.192357	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.19235b	60		rts		              RTS
.19235c					SDOS_SETUP_ADDER_B
.19235c	c2 20		rep #$20	                REP #$20        ; set A long
.19235e	a9 01 00	lda #$0001	              LDA #$0001
.192361	8f 24 01 00	sta $000124	              STA @lADDER32_B_LL
.192365	a9 ff ff	lda #$ffff	              LDA #$FFFF
.192368	8f 26 01 00	sta $000126	              STA @lADDER32_B_HL
.19236c	60		rts		              RTS
.19236d					SDOS_LOAD_ADDER_A_WITH_SIZE
.19236d	c2 20		rep #$20	                REP #$20        ; set A long
.19236f	af 28 03 00	lda $000328	              LDA @lSDOS_FILE_SIZE;
.192373	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;
.192377	af 2a 03 00	lda $00032a	              LDA @lSDOS_FILE_SIZE+2;
.19237b	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;
.19237f	60		rts		              RTS
.192380					SDOS_SETUP_CH376S_BUFFER_SIZE
.192380	c2 20		rep #$20	                REP #$20        ; set A long
.192382	af 2a 01 00	lda $00012a	              LDA  @lADDER32_R_HL
.192386	29 00 80	and #$8000	              AND #$8000          ; Check if it is negative
.192389	c9 00 80	cmp #$8000	              CMP #$8000          ; if it is then just put the Size of the file in ByteNumber
.19238c	f0 08		beq $192396	              BEQ SDOS_SETUP_SMALLR_THAN64K
.19238e	a9 ff ff	lda #$ffff	              LDA #$FFFF
.192391	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.192395	60		rts		              RTS
.192396					SDOS_SETUP_SMALLR_THAN64K
.192396	af 20 01 00	lda $000120	              LDA @lADDER32_A_LL
.19239a	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.19239e	60		rts		              RTS
.19239f					SDOS_READ_BLOCK
.19239f	e2 20		sep #$20	                SEP #$20        ; set A short
.1923a1	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.1923a3	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1923a7	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.1923aa	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA     ; Read First Byte for Number of Byte to Read
.1923ae	85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.1923b0	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.1923b3	a0 00 00	ldy #$0000	              LDY #$0000
.1923b6					SDOS_READ_MORE
.1923b6	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.1923ba	97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.1923bc	c8		iny		              INY
.1923bd	c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.1923bf	d0 f5		bne $1923b6	              BNE SDOS_READ_MORE
.1923c1	a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.1923c3	60		rts		              RTS
>1923c4	2f 2a 00			sd_card_dir_string  .text $2F, $2A ,$00
>1923c7	4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>1923cf	44 20 50 52 45 53 45 4e 54 0d 00
>1923da	45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>1923e2	20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>1923f0	45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>1923f8	41 44 49 4e 47 20 46 49 4c 45 00
>192403	4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>19240b	53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>192413	45 54 45 43 54 45 44 00
>19241b	53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>192423	4f 55 4e 54 45 44 00
>19242a	46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>192432	4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>192442	46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>19244a	4e 45 44 0d 00
>19244f	45 4e 44 20 4f 46 20 4c		sd_card_msg5        .text "END OF LINE...", $00
>192457	49 4e 45 2e 2e 2e 00
>19245e	46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>192466	4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>192475	46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>19247d	44 45 44 00

;******  Return to file: kernel.asm


;******  Processing file: OPL2_Library.asm


;******  Processing file: OPL2_def.asm

=$afe500				OPL2_L_BASE               = $AFE500
=$afe501				OPL2_L_TEST               = $AFE501 ; TEST
=$afe502				OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503				OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504				OPL2_L_IRQ                = $AFE504 ;
=$afe508				OPL2_L_CSM                = $AFE508 ;
=$afe520				OPL2_L_AM_VID_EG_KSR_MULT = $AFE520 ; $40..$35 (21 Registers)
=$afee40				OPL2_L_KSL_TL             = $AFEE40;  $40..$55 (21 Registers)
=$afe560				OPL2_L_AR_DR              = $AFE560;  $60..$75 (21 Registers)
=$afe580				OPL2_L_SL_RR              = $AFE580;  $80..$95 (21 Registers)
=$afe5a0				OPL2_L_FNumber            = $AFE5A0;  $A0..$A8
=$afe5b0				OPL2_L_KON_BLOCK_FNumber  = $AFE5B0;  $B0..$B9
=$afe5bd				OPL2_L_DPTH_RHYTM         = $AFE5BD;  $BD
=$afe5c0				OPL2_L_FEEDBACK           = $AFE5C0;  $C0..$C9
=$afe5e0				OPL2_L_WAVE_SELECT        = $AFE5E0;  $E0..$F5
=$afe600				OPL2_R_BASE               = $AFE600
=$afe601				OPL2_R_TEST               = $AFE601 ; TEST
=$afe602				OPL2_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL2_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL2_R_IRQ                = $AFE604 ;
=$afe608				OPL2_R_CSM                = $AFE608 ;
=$afe620				OPL2_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL2_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL2_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL2_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL2_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL2_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL2_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL2_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL2_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$e700					OPL2_S_BASE_LL            = $E700
=$00af					OPL2_S_BASE_HL            = $00AF
=$afe701				OPL2_S_TEST               = $AFE701 ; TEST
=$afe702				OPL2_S_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL2_S_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL2_S_IRQ                = $AFE704 ;
=$afe708				OPL2_S_CSM                = $AFE708 ;
=$afe720				OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL2_S_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL2_S_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL2_S_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=0					NOTE_C =    0
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
>192481	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>192489	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>192499	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>1924a1	12
>1924a2	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>1924aa	15
>1924ab	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>1924b1	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>1924b6	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: OPL2_Library.asm

.1924bc					IOPL2_TONE_TEST
.1924bc	e2 20		sep #$20	                SEP #$20        ; set A short
.1924be	a9 01		lda #$01	                LDA #$01
.1924c0	85 26		sta $26		                STA OPL2_OPERATOR
.1924c2	c2 30		rep #$30	                REP #$30        ; set A&X long
.1924c4	22 3c 25 19	jsl $19253c	                JSL OPL2_INIT
.1924c8	e2 20		sep #$20	                SEP #$20        ; set A short
.1924ca	a9 00		lda #$00	                LDA #$00
.1924cc	85 36		sta $36		                STA OPL2_LOOP
.1924ce					OPL2_TONE_TESTING_L0
.1924ce	e2 20		sep #$20	                SEP #$20        ; set A short
.1924d0	a5 36		lda $36		                LDA OPL2_LOOP
.1924d2	85 27		sta $27		                STA OPL2_CHANNEL
.1924d4	38		sec		                SEC
.1924d5	22 88 25 19	jsl $192588	                JSL OPL2_SET_TREMOLO
.1924d9	38		sec		                SEC
.1924da	22 b7 25 19	jsl $1925b7	                JSL OPL2_SET_VIBRATO
.1924de	a9 04		lda #$04	                LDA #$04
.1924e0	85 32		sta $32		                STA OPL2_PARAMETER0
.1924e2	22 eb 25 19	jsl $1925eb	                JSL OPL2_SET_MULTIPLIER
.1924e6	a9 0a		lda #$0a	                LDA #$0A
.1924e8	85 32		sta $32		                STA OPL2_PARAMETER0
.1924ea	22 53 26 19	jsl $192653	                JSL OPL2_SET_ATTACK
.1924ee	a9 04		lda #$04	                LDA #$04
.1924f0	85 32		sta $32		                STA OPL2_PARAMETER0
.1924f2	22 87 26 19	jsl $192687	                JSL OPL2_SET_DECAY
.1924f6	a9 0f		lda #$0f	                LDA #$0F
.1924f8	85 32		sta $32		                STA OPL2_PARAMETER0
.1924fa	22 b3 26 19	jsl $1926b3	                JSL OPL2_SET_SUSTAIN
.1924fe	a9 0f		lda #$0f	                LDA #$0F
.192500	85 32		sta $32		                STA OPL2_PARAMETER0
.192502	22 e7 26 19	jsl $1926e7	                JSL OPL2_SET_RELEASE
.192506	e2 20		sep #$20	                SEP #$20        ; set A short
.192508	e6 36		inc $36		                INC OPL2_LOOP
.19250a	a5 36		lda $36		                LDA OPL2_LOOP
.19250c	c9 03		cmp #$03	                CMP #$03
.19250e	d0 be		bne $1924ce	                BNE OPL2_TONE_TESTING_L0
.192510	a9 00		lda #$00	                LDA #$00
.192512	85 36		sta $36		                STA OPL2_LOOP
.192514					OPL2_TONE_TESTING_L1
.192514	85 30		sta $30		                STA OPL2_NOTE
.192516	29 03		and #$03	                AND #$03        ; replace modulo 3
.192518	85 27		sta $27		                STA OPL2_CHANNEL
.19251a	a9 03		lda #$03	                LDA #$03
.19251c	85 31		sta $31		                STA OPL2_OCTAVE
.19251e	22 5e 25 19	jsl $19255e	                JSL OPL2_PLAYNOTE
.192522	e2 20		sep #$20	                SEP #$20        ; set A short
.192524	c2 10		rep #$10	                REP #$10        ; set X long
.192526	a2 00 00	ldx #$0000	                LDX #$0000
.192529					OPL2_TONE_TESTING_L2
.192529	ea		nop		                NOP
.19252a	ea		nop		                NOP
.19252b	ea		nop		                NOP
.19252c	ea		nop		                NOP
.19252d	e8		inx		                INX
.19252e	e0 ff ff	cpx #$ffff	                CPX #$FFFF
.192531	d0 f6		bne $192529	                BNE OPL2_TONE_TESTING_L2
.192533	e6 36		inc $36		                INC OPL2_LOOP
.192535	a5 36		lda $36		                LDA OPL2_LOOP
.192537	c9 0c		cmp #$0c	                CMP #12
.192539	d0 d9		bne $192514	                BNE OPL2_TONE_TESTING_L1
.19253b	6b		rtl		                RTL
.19253c					OPL2_INIT
.19253c	c2 20		rep #$20	                REP #$20        ; set A long
.19253e	a9 00 00	lda #$0000	                LDA #$0000
.192541	85 28		sta $28		                STA OPL2_REG_REGION
.192543	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.192545	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.192547	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.192549	85 30		sta $30		                STA OPL2_NOTE
.19254b	85 32		sta $32		                STA OPL2_PARAMETER0
.19254d	85 34		sta $34		                STA OPL2_PARAMETER2
.19254f	6b		rtl		                RTL
.192550					OPL2_Reset
.192550	6b		rtl		                RTL
.192551					OPL2_Get_FrequencyBlock
.192551	6b		rtl		                RTL
.192552					OPL2_Get_Register
.192552	6b		rtl		                RTL
.192553					OPL2_Get_WaveFormSelect
.192553	6b		rtl		                RTL
.192554					OPL2_Get_ScalingLevel
.192554	6b		rtl		                RTL
.192555					OPL2_Get_Block
.192555	6b		rtl		                RTL
.192556					OPL2_Get_KeyOn
.192556	6b		rtl		                RTL
.192557					OPL2_Get_Feedback
.192557	6b		rtl		                RTL
.192558					OPL2_Get_SynthMode
.192558	6b		rtl		                RTL
.192559					OPL2_Get_DeepTremolo
.192559	6b		rtl		                RTL
.19255a					OPL2_Get_DeepVibrato
.19255a	6b		rtl		                RTL
.19255b					OPL2_Get_Percussion
.19255b	6b		rtl		                RTL
.19255c					OPL2_Get_Drums
.19255c	6b		rtl		                RTL
.19255d					OPL2_Get_WaveForm
.19255d	6b		rtl		                RTL
.19255e					OPL2_PLAYNOTE
.19255e	e2 20		sep #$20	                SEP #$20        ; set A short
.192560	a9 00		lda #$00	                LDA #$00
.192562	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.192564	20 b2 27	jsr $1927b2	                JSR OPL2_SET_KEYON
.192567	20 81 27	jsr $192781	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.19256a	e2 10		sep #$10	                SEP #$10        ; set X short
.19256c	c2 20		rep #$20	                REP #$20        ; set A long
.19256e	a6 30		ldx $30		                LDX OPL2_NOTE
.192570	bf 81 24 19	lda $192481,x	                LDA @lnoteFNumbers,X
.192574	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 16bit in Param OPL2_PARAMETER0 & OPL2_PARAMETER1
.192576	22 13 27 19	jsl $192713	                JSL OPL2_SET_FNUMBER
.19257a	e2 20		sep #$20	                SEP #$20        ; set A short
.19257c	a9 01		lda #$01	                LDA #$01
.19257e	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.192580	20 b2 27	jsr $1927b2	                JSR OPL2_SET_KEYON
.192583	6b		rtl		                RTL
.192584					OPL2_PLAYDRUM
.192584	6b		rtl		                RTL
.192585					OPL2_Set_Instrument
.192585	6b		rtl		                RTL
.192586					OPL2_Set_Register
.192586	6b		rtl		                RTL
.192587					OPL2_Set_WaveFormSelect
.192587	6b		rtl		                RTL
.192588					OPL2_SET_TREMOLO
.192588	08		php		                PHP ; Push the Carry
.192589	c2 20		rep #$20	                REP #$20        ; set A long
.19258b	a9 20 00	lda #$0020	                LDA #$0020;
.19258e	85 28		sta $28		                STA OPL2_REG_REGION
.192590	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.192593	28		plp		                PLP ; Pull the Carry out
.192594	e2 20		sep #$20	                SEP #$20        ; set A short
.192596	b0 08		bcs $1925a0	                BCS OPL2_Set_Tremolo_Set;
.192598	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19259a	29 7f		and #$7f	                AND #$7F
.19259c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19259e	80 06		bra $1925a6	                BRA OPL2_Set_Tremolo_Exit
.1925a0					OPL2_Set_Tremolo_Set
.1925a0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925a2	09 80		ora #$80	                ORA #$80
.1925a4	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925a6					OPL2_Set_Tremolo_Exit
.1925a6	6b		rtl		                RTL
.1925a7					OPL2_GET_TREMOLO
.1925a7	c2 20		rep #$20	                REP #$20        ; set A long
.1925a9	a9 20 00	lda #$0020	                LDA #$0020;
.1925ac	85 28		sta $28		                STA OPL2_REG_REGION
.1925ae	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.1925b1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925b3	29 80 00	and #$0080	                AND #$80
.1925b6	6b		rtl		                RTL
.1925b7					OPL2_SET_VIBRATO
.1925b7	08		php		                PHP ; Push the Carry
.1925b8	c2 20		rep #$20	                REP #$20        ; set A long
.1925ba	a9 20 00	lda #$0020	                LDA #$0020;
.1925bd	85 28		sta $28		                STA OPL2_REG_REGION
.1925bf	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.1925c2	28		plp		                PLP ; Pull the Carry out
.1925c3	e2 20		sep #$20	                SEP #$20        ; set A short
.1925c5	b0 08		bcs $1925cf	                BCS OPL2_Set_Vibrato_Set;
.1925c7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925c9	29 bf		and #$bf	                AND #$BF
.1925cb	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925cd	80 06		bra $1925d5	                BRA OPL2_Set_Vibrato_Exit
.1925cf					OPL2_Set_Vibrato_Set
.1925cf	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925d1	09 40		ora #$40	                ORA #$40
.1925d3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925d5					OPL2_Set_Vibrato_Exit
.1925d5	6b		rtl		                RTL
.1925d6					OPL2_GET_VIBRATO
.1925d6	c2 20		rep #$20	                REP #$20        ; set A long
.1925d8	a9 20 00	lda #$0020	                LDA #$0020;
.1925db	85 28		sta $28		                STA OPL2_REG_REGION
.1925dd	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.1925e0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925e2	29 40 00	and #$0040	                AND #$40
.1925e5	6b		rtl		                RTL
.1925e6					OPL2_Set_MaintainSustain
.1925e6	6b		rtl		                RTL
.1925e7					OPL2_Get_MaintainSustain
.1925e7	6b		rtl		                RTL
.1925e8					OPL2_Set_EnvelopeScaling
.1925e8	6b		rtl		                RTL
.1925e9					OPL2_Get_EnvelopeScaling
.1925e9	6b		rtl		                RTL
.1925ea					OPL2_Get_Multiplier
.1925ea	6b		rtl		                RTL
.1925eb					OPL2_SET_MULTIPLIER
.1925eb	c2 20		rep #$20	                REP #$20        ; set A long
.1925ed	a9 20 00	lda #$0020	                LDA #$0020;
.1925f0	85 28		sta $28		                STA OPL2_REG_REGION
.1925f2	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.1925f5	e2 20		sep #$20	                SEP #$20        ; set A short
.1925f7	a5 32		lda $32		                LDA OPL2_PARAMETER0
.1925f9	29 0f		and #$0f	                AND #$0F
.1925fb	85 32		sta $32		                STA OPL2_PARAMETER0
.1925fd	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925ff	29 f0		and #$f0	                AND #$F0
.192601	05 32		ora $32		                ORA OPL2_PARAMETER0
.192603	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192605	6b		rtl		                RTL
.192606					OPL2_SET_SCALINGLEVEL
.192606	c2 20		rep #$20	                REP #$20        ; set A long
.192608	a9 40 00	lda #$0040	                LDA #$0040;
.19260b	85 28		sta $28		                STA OPL2_REG_REGION
.19260d	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.192610	e2 20		sep #$20	                SEP #$20        ; set A short
.192612	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192614	29 03		and #$03	                AND #$03
.192616	0a		asl a		                ASL
.192617	0a		asl a		                ASL
.192618	0a		asl a		                ASL
.192619	0a		asl a		                ASL
.19261a	0a		asl a		                ASL
.19261b	0a		asl a		                ASL
.19261c	85 32		sta $32		                STA OPL2_PARAMETER0
.19261e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192620	29 3f		and #$3f	                AND #$3F
.192622	05 32		ora $32		                ORA OPL2_PARAMETER0
.192624	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192626	6b		rtl		                RTL
.192627					OPL2_SET_VOLUME
.192627	c2 20		rep #$20	                REP #$20        ; set A long
.192629	a9 40 00	lda #$0040	                LDA #$0040  ;
.19262c	85 28		sta $28		                STA OPL2_REG_REGION
.19262e	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.192631	e2 20		sep #$20	                SEP #$20        ; set A short
.192633	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.192635	29 3f		and #$3f	                AND #$3F
.192637	85 32		sta $32		                STA OPL2_PARAMETER0
.192639	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19263b	29 c0		and #$c0	                AND #$C0
.19263d	05 32		ora $32		                ORA OPL2_PARAMETER0
.19263f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192641	6b		rtl		                RTL
.192642					OPL2_GET_VOLUME
.192642	c2 20		rep #$20	                REP #$20        ; set A long
.192644	a9 40 00	lda #$0040	                LDA #$0040  ;
.192647	85 28		sta $28		                STA OPL2_REG_REGION
.192649	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.19264c	e2 20		sep #$20	                SEP #$20        ; set A short
.19264e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192650	29 3f		and #$3f	                AND #$3F
.192652	6b		rtl		                RTL
.192653					OPL2_SET_ATTACK
.192653	c2 20		rep #$20	                REP #$20        ; set A long
.192655	a9 60 00	lda #$0060	                LDA #$0060  ;
.192658	85 28		sta $28		                STA OPL2_REG_REGION
.19265a	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.19265d	e2 20		sep #$20	                SEP #$20        ; set A short
.19265f	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192661	29 0f		and #$0f	                AND #$0F
.192663	0a		asl a		                ASL
.192664	0a		asl a		                ASL
.192665	0a		asl a		                ASL
.192666	0a		asl a		                ASL
.192667	85 32		sta $32		                STA OPL2_PARAMETER0
.192669	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19266b	29 0f		and #$0f	                AND #$0F
.19266d	05 32		ora $32		                ORA OPL2_PARAMETER0
.19266f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192671	6b		rtl		                RTL
.192672					OPL2_GET_ATTACK
.192672	c2 20		rep #$20	                REP #$20        ; set A long
.192674	a9 60 00	lda #$0060	                LDA #$0060
.192677	85 28		sta $28		                STA OPL2_REG_REGION
.192679	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.19267c	e2 20		sep #$20	                SEP #$20        ; set A short
.19267e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192680	29 f0		and #$f0	                AND #$F0
.192682	4a		lsr a		                LSR
.192683	4a		lsr a		                LSR
.192684	4a		lsr a		                LSR
.192685	4a		lsr a		                LSR
.192686	6b		rtl		                RTL
.192687					OPL2_SET_DECAY
.192687	c2 20		rep #$20	                REP #$20        ; set A long
.192689	a9 60 00	lda #$0060	                LDA #$0060;
.19268c	85 28		sta $28		                STA OPL2_REG_REGION
.19268e	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.192691	e2 20		sep #$20	                SEP #$20        ; set A short
.192693	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192695	29 0f		and #$0f	                AND #$0F
.192697	85 32		sta $32		                STA OPL2_PARAMETER0
.192699	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19269b	29 f0		and #$f0	                AND #$F0
.19269d	05 32		ora $32		                ORA OPL2_PARAMETER0
.19269f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1926a1	6b		rtl		                RTL
.1926a2					OPL2_GET_DECAY
.1926a2	c2 20		rep #$20	                REP #$20        ; set A long
.1926a4	a9 60 00	lda #$0060	                LDA #$0060
.1926a7	85 28		sta $28		                STA OPL2_REG_REGION
.1926a9	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.1926ac	e2 20		sep #$20	                SEP #$20        ; set A short
.1926ae	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926b0	29 0f		and #$0f	                AND #$0F
.1926b2	6b		rtl		                RTL
.1926b3					OPL2_SET_SUSTAIN
.1926b3	c2 20		rep #$20	                REP #$20        ; set A long
.1926b5	a9 80 00	lda #$0080	                LDA #$0080;
.1926b8	85 28		sta $28		                STA OPL2_REG_REGION
.1926ba	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.1926bd	e2 20		sep #$20	                SEP #$20        ; set A short
.1926bf	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1926c1	29 0f		and #$0f	                AND #$0F
.1926c3	0a		asl a		                ASL
.1926c4	0a		asl a		                ASL
.1926c5	0a		asl a		                ASL
.1926c6	0a		asl a		                ASL
.1926c7	85 32		sta $32		                STA OPL2_PARAMETER0
.1926c9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926cb	29 0f		and #$0f	                AND #$0F
.1926cd	05 32		ora $32		                ORA OPL2_PARAMETER0
.1926cf	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1926d1	6b		rtl		                RTL
.1926d2					OPL2_GET_SUSTAIN
.1926d2	c2 20		rep #$20	                REP #$20        ; set A long
.1926d4	a9 80 00	lda #$0080	                LDA #$0080
.1926d7	85 28		sta $28		                STA OPL2_REG_REGION
.1926d9	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.1926dc	e2 20		sep #$20	                SEP #$20        ; set A short
.1926de	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926e0	29 f0		and #$f0	                AND #$F0
.1926e2	4a		lsr a		                LSR
.1926e3	4a		lsr a		                LSR
.1926e4	4a		lsr a		                LSR
.1926e5	4a		lsr a		                LSR
.1926e6	6b		rtl		                RTL
.1926e7					OPL2_SET_RELEASE
.1926e7	c2 20		rep #$20	                REP #$20        ; set A long
.1926e9	a9 80 00	lda #$0080	                LDA #$0080;
.1926ec	85 28		sta $28		                STA OPL2_REG_REGION
.1926ee	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.1926f1	e2 20		sep #$20	                SEP #$20        ; set A short
.1926f3	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1926f5	29 0f		and #$0f	                AND #$0F
.1926f7	85 32		sta $32		                STA OPL2_PARAMETER0
.1926f9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926fb	29 f0		and #$f0	                AND #$F0
.1926fd	05 32		ora $32		                ORA OPL2_PARAMETER0
.1926ff	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192701	6b		rtl		                RTL
.192702					OPL2_GET_RELEASE
.192702	c2 20		rep #$20	                REP #$20        ; set A long
.192704	a9 80 00	lda #$0080	                LDA #$0080
.192707	85 28		sta $28		                STA OPL2_REG_REGION
.192709	20 ed 27	jsr $1927ed	                JSR OPL2_GET_REG_OFFSET
.19270c	e2 20		sep #$20	                SEP #$20        ; set A short
.19270e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192710	29 0f		and #$0f	                AND #$0F
.192712	6b		rtl		                RTL
.192713					OPL2_SET_FNUMBER
.192713	e2 20		sep #$20	                SEP #$20        ; set A short
.192715	18		clc		                CLC
.192716	a5 27		lda $27		                LDA OPL2_CHANNEL
.192718	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19271a	69 a0		adc #$a0	                ADC #$A0
.19271c	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19271e	a9 00		lda #$00	                LDA #$00
.192720	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.192722	c2 30		rep #$30	                REP #$30        ; set A&X long
.192724	18		clc		                CLC
.192725	a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192728	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19272a	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19272c	a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.19272f	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.192731	e2 20		sep #$20	                SEP #$20        ; set A short
.192733	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the 16Bits Value of FNumber
.192735	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.192737	18		clc		                CLC
.192738	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.19273a	69 10		adc #$10	                ADC #$10
.19273c	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19273e	a5 33		lda $33		                LDA OPL2_PARAMETER1
.192740	29 03		and #$03	                AND #$03
.192742	85 33		sta $33		                STA OPL2_PARAMETER1
.192744	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192746	29 fc		and #$fc	                AND #$FC
.192748	05 33		ora $33		                ORA OPL2_PARAMETER1
.19274a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19274c	6b		rtl		                RTL
.19274d					OPL2_GET_FNUMBER
.19274d	e2 20		sep #$20	                SEP #$20        ; set A short
.19274f	18		clc		                CLC
.192750	a5 27		lda $27		                LDA OPL2_CHANNEL
.192752	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.192754	69 a0		adc #$a0	                ADC #$A0
.192756	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.192758	a9 00		lda #$00	                LDA #$00
.19275a	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.19275c	c2 30		rep #$30	                REP #$30        ; set A&X long
.19275e	18		clc		                CLC
.19275f	a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192762	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.192764	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.192766	a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.192769	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19276b	e2 20		sep #$20	                SEP #$20        ; set A short
.19276d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19276f	85 32		sta $32		                STA OPL2_PARAMETER0
.192771	18		clc		                CLC
.192772	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.192774	69 10		adc #$10	                ADC #$10
.192776	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.192778	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19277a	29 03		and #$03	                AND #$03
.19277c	85 33		sta $33		                STA OPL2_PARAMETER1
.19277e	6b		rtl		                RTL
.19277f					OPL2_Set_Frequency
.19277f	6b		rtl		                RTL
.192780					OPL2_Get_Frequency
.192780	6b		rtl		                RTL
.192781					OPL2_SET_BLOCK
.192781	e2 20		sep #$20	                SEP #$20        ; set A short
.192783	18		clc		                CLC
.192784	a5 27		lda $27		                LDA OPL2_CHANNEL
.192786	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.192788	69 b0		adc #$b0	                ADC #$B0
.19278a	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19278c	a9 00		lda #$00	                LDA #$00
.19278e	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.192790	c2 30		rep #$30	                REP #$30        ; set A&X long
.192792	18		clc		                CLC
.192793	a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192796	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.192798	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19279a	a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.19279d	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19279f	e2 20		sep #$20	                SEP #$20        ; set A short
.1927a1	a5 31		lda $31		                LDA OPL2_OCTAVE
.1927a3	29 07		and #$07	                AND #$07
.1927a5	0a		asl a		                ASL
.1927a6	0a		asl a		                ASL
.1927a7	85 31		sta $31		                STA OPL2_OCTAVE
.1927a9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1927ab	29 e3		and #$e3	                AND #$E3
.1927ad	05 31		ora $31		                ORA OPL2_OCTAVE
.1927af	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1927b1	60		rts		                RTS
.1927b2					OPL2_SET_KEYON
.1927b2	e2 20		sep #$20	                SEP #$20        ; set A short
.1927b4	18		clc		                CLC
.1927b5	a5 27		lda $27		                LDA OPL2_CHANNEL
.1927b7	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1927b9	69 b0		adc #$b0	                ADC #$B0
.1927bb	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1927bd	a9 00		lda #$00	                LDA #$00
.1927bf	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1927c1	c2 30		rep #$30	                REP #$30        ; set A&X long
.1927c3	18		clc		                CLC
.1927c4	a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.1927c7	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1927c9	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1927cb	a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.1927ce	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1927d0	e2 20		sep #$20	                SEP #$20        ; set A short
.1927d2	a5 32		lda $32		                LDA OPL2_PARAMETER0
.1927d4	29 01		and #$01	                AND #$01
.1927d6	0a		asl a		                ASL
.1927d7	0a		asl a		                ASL
.1927d8	0a		asl a		                ASL
.1927d9	0a		asl a		                ASL
.1927da	0a		asl a		                ASL
.1927db	85 32		sta $32		                STA OPL2_PARAMETER0
.1927dd	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1927df	29 df		and #$df	                AND #$DF
.1927e1	05 32		ora $32		                ORA OPL2_PARAMETER0
.1927e3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1927e5	60		rts		                RTS
.1927e6					OPL2_Set_Feedback
.1927e6	6b		rtl		                RTL
.1927e7					OPL2_Set_SynthMode
.1927e7	6b		rtl		                RTL
.1927e8					OPL2_Set_DeepTremolo
.1927e8	6b		rtl		                RTL
.1927e9					OPL2_Set_DeepVibrato
.1927e9	6b		rtl		                RTL
.1927ea					OPL2_Set_Percussion
.1927ea	6b		rtl		                RTL
.1927eb					OPL2_Set_Drums
.1927eb	6b		rtl		                RTL
.1927ec					OPL2_Set_WaveForm
.1927ec	6b		rtl		                RTL
.1927ed					OPL2_GET_REG_OFFSET
.1927ed	e2 30		sep #$30	                SEP #$30        ; set A&X short
.1927ef	a5 27		lda $27		                LDA OPL2_CHANNEL
.1927f1	29 0f		and #$0f	                AND #$0F
.1927f3	aa		tax		                TAX
.1927f4	a5 26		lda $26		                LDA OPL2_OPERATOR   ; Check which Operator In used
.1927f6	29 01		and #$01	                AND #$01            ; if ZERO = The operator 1, One = Operator 2
.1927f8	c9 01		cmp #$01	                CMP #$01
.1927fa	f0 06		beq $192802	                BEQ OPL2_Get_Register_Offset_l0
.1927fc	bf 99 24 19	lda $192499,x	                LDA @lregisterOffsets_operator0, X
.192800	80 04		bra $192806	                BRA OPL2_Get_Register_Offset_exit
.192802					OPL2_Get_Register_Offset_l0
.192802	bf a2 24 19	lda $1924a2,x	                LDA @lregisterOffsets_operator1, X
.192806					OPL2_Get_Register_Offset_exit
.192806	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.192808	a9 00		lda #$00	                LDA #$00
.19280a	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.19280c	c2 30		rep #$30	                REP #$30        ; set A&X long
.19280e	18		clc		                CLC
.19280f	a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192812	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.192814	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.192816	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.192818	a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.19281b	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19281d	60		rts		                RTS

;******  Return to file: kernel.asm


;******  Processing file: uart.s

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.19281e					UART_SELECT
.19281e	08		php		            PHP
.19281f	c2 20		rep #$20	                REP #$20        ; set A long
.192821	c9 02 00	cmp #$0002	            CMP #2
.192824	f0 07		beq $19282d	            BEQ is_COM2
.192826	c2 20		rep #$20	                REP #$20        ; set A long
.192828	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.19282b	80 05		bra $192832	            BRA setaddr
.19282d					is_COM2
.19282d	c2 20		rep #$20	                REP #$20        ; set A long
.19282f	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.192832	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.192836	e2 20		sep #$20	                SEP #$20        ; set A short
.192838	a9 af		lda #$af	            LDA #`UART1_BASE
.19283a	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.19283e	28		plp		            PLP
.19283f	6b		rtl		            RTL
.192840					UART_SETBPS
.192840	08		php		            PHP
.192841	0b		phd		            PHD
.192842	48		pha		                PHA             ; begin setdp macro
.192843	08		php			PHP
.192844	c2 20		rep #$20	                REP #$20        ; set A long
.192846	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.192849	5b		tcd		                TCD
.19284a	28		plp			PLP
.19284b	68		pla		                PLA             ; end setdp macro
.19284c	c2 30		rep #$30	                REP #$30        ; set A&X long
.19284e	48		pha		            PHA
.19284f	e2 20		sep #$20	                SEP #$20        ; set A short
.192851	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.192854	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.192856	09 80		ora #$80	            ORA #LCR_DLB
.192858	97 00		sta [$0700],y	            STA [CURRUART],Y
.19285a	c2 20		rep #$20	                REP #$20        ; set A long
.19285c	68		pla		            PLA
.19285d	a0 00 00	ldy #$0000	            LDY #UART_DLL
.192860	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.192862	e2 20		sep #$20	                SEP #$20        ; set A short
.192864	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.192867	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.192869	49 80		eor #$80	            EOR #LCR_DLB
.19286b	97 00		sta [$0700],y	            STA [CURRUART],Y
.19286d	2b		pld		            PLD
.19286e	28		plp		            PLP
.19286f	6b		rtl		            RTL
.192870					UART_SETLCR
.192870	08		php		            PHP
.192871	0b		phd		            PHD
.192872	48		pha		                PHA             ; begin setdp macro
.192873	08		php			PHP
.192874	c2 20		rep #$20	                REP #$20        ; set A long
.192876	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.192879	5b		tcd		                TCD
.19287a	28		plp			PLP
.19287b	68		pla		                PLA             ; end setdp macro
.19287c	e2 20		sep #$20	                SEP #$20        ; set A short
.19287e	c2 10		rep #$10	                REP #$10        ; set X long
.192880	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.192882	a0 03 00	ldy #$0003	            LDY #UART_LCR
.192885	97 00		sta [$0700],y	            STA [CURRUART],Y
.192887	2b		pld		            PLD
.192888	28		plp		            PLP
.192889	6b		rtl		            RTL
.19288a					UART_INIT
.19288a	08		php		            PHP
.19288b	0b		phd		            PHD
.19288c	c2 30		rep #$30	                REP #$30        ; set A&X long
.19288e	48		pha		                PHA             ; begin setdp macro
.19288f	08		php			PHP
.192890	c2 20		rep #$20	                REP #$20        ; set A long
.192892	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.192895	5b		tcd		                TCD
.192896	28		plp			PLP
.192897	68		pla		                PLA             ; end setdp macro
.192898	a9 01 00	lda #$0001	            LDA #UART_115200
.19289b	22 40 28 19	jsl $192840	            JSL UART_SETBPS
.19289f	e2 20		sep #$20	                SEP #$20        ; set A short
.1928a1	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.1928a3	22 70 28 19	jsl $192870	            JSL UART_SETLCR
.1928a7	a9 00		lda #$00	            LDA #%00000000          ; %11100001
.1928a9	a0 02 00	ldy #$0002	            LDY #UART_FCR
.1928ac	97 00		sta [$0700],y	            STA [CURRUART],Y
.1928ae	2b		pld		            PLD
.1928af	28		plp		            PLP
.1928b0	6b		rtl		            RTL
.1928b1					UART_HASBYT
.1928b1	08		php		            PHP
.1928b2	0b		phd		            PHD
.1928b3	c2 30		rep #$30	                REP #$30        ; set A&X long
.1928b5	48		pha		                PHA             ; begin setdp macro
.1928b6	08		php			PHP
.1928b7	c2 20		rep #$20	                REP #$20        ; set A long
.1928b9	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1928bc	5b		tcd		                TCD
.1928bd	28		plp			PLP
.1928be	68		pla		                PLA             ; end setdp macro
.1928bf	e2 20		sep #$20	                SEP #$20        ; set A short
.1928c1	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1928c4	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.1928c6	29 01		and #$01	            AND #LSR_DATA_AVAIL
.1928c8	d0 04		bne $1928ce	            BNE ret_true            ; If flag is set, return true
.1928ca	2b		pld		ret_false   PLD                     ; Return false
.1928cb	28		plp		            PLP
.1928cc	18		clc		            CLC
.1928cd	6b		rtl		            RTL
.1928ce	2b		pld		ret_true    PLD                     ; Return true
.1928cf	28		plp		            PLP
.1928d0	38		sec		            SEC
.1928d1	6b		rtl		            RTL
.1928d2					UART_GETC
.1928d2	08		php		            PHP
.1928d3	0b		phd		            PHD
.1928d4	c2 30		rep #$30	                REP #$30        ; set A&X long
.1928d6	48		pha		                PHA             ; begin setdp macro
.1928d7	08		php			PHP
.1928d8	c2 20		rep #$20	                REP #$20        ; set A long
.1928da	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1928dd	5b		tcd		                TCD
.1928de	28		plp			PLP
.1928df	68		pla		                PLA             ; end setdp macro
.1928e0	e2 20		sep #$20	                SEP #$20        ; set A short
.1928e2	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1928e5	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.1928e7	29 01		and #$01	            AND #LSR_DATA_AVAIL
.1928e9	f0 fa		beq $1928e5	            BEQ wait_getc           ; If the flag is clear, wait
.1928eb	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.1928ee	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.1928f0	2b		pld		            PLD
.1928f1	28		plp		            PLP
.1928f2	6b		rtl		            RTL
.1928f3					UART_PUTC
.1928f3					UART_PUTS
.1928f3					UART_ENIRQ
.1928f3	08		php		            PHP
.1928f4	0b		phd		            PHD
.1928f5	c2 30		rep #$30	                REP #$30        ; set A&X long
.1928f7	48		pha		                PHA             ; begin setdp macro
.1928f8	08		php			PHP
.1928f9	c2 20		rep #$20	                REP #$20        ; set A long
.1928fb	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1928fe	5b		tcd		                TCD
.1928ff	28		plp			PLP
.192900	68		pla		                PLA             ; end setdp macro
.192901	a9 01 00	lda #$0001	            LDA #1
.192904	22 1e 28 19	jsl $19281e	            JSL UART_SELECT
.192908	22 8a 28 19	jsl $19288a	            JSL UART_INIT           ; Initialize COM1
.19290c	e2 20		sep #$20	                SEP #$20        ; set A short
.19290e	a9 01		lda #$01	            LDA #UINT_DATA_AVAIL    ; Enable Data Available interrupts
.192910	a0 01 00	ldy #$0001	            LDY #UART_IER
.192913	97 00		sta [$0700],y	            STA [CURRUART],Y
.192915	af 4d 01 00	lda $00014d	            LDA @lINT_MASK_REG1     ; Enable COM1 interrupts
.192919	29 ef		and #$ef	            AND #~FNX1_INT04_COM1
.19291b	8f 4d 01 00	sta $00014d	            STA @lINT_MASK_REG1
.19291f	a9 5e		lda #$5e	            LDA #'^'
.192921	22 9d 05 19	jsl $19059d	            JSL IPUTC
.192925	c2 30		rep #$30	                REP #$30        ; set A&X long
.192927	2b		pld		            PLD
.192928	28		plp		            PLP
.192929	6b		rtl		            RTL
.19292a					UART_POLLIR
.19292a	08		php		            PHP
.19292b	0b		phd		            PHD
.19292c	48		pha		                PHA             ; begin setdp macro
.19292d	08		php			PHP
.19292e	c2 20		rep #$20	                REP #$20        ; set A long
.192930	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.192933	5b		tcd		                TCD
.192934	28		plp			PLP
.192935	68		pla		                PLA             ; end setdp macro
.192936	e2 20		sep #$20	                SEP #$20        ; set A short
.192938					WAITINT
.192938	a0 02 00	ldy #$0002	            LDY #UART_IIR
.19293b	b7 00		lda [$0700],y	            LDA [CURRUART],Y        ; Get the Interrupt Identification Register
.19293d	89 01		bit #$01	            BIT #$01                ; See if an interrupt is pending
.19293f	d0 f7		bne $192938	            BNE WAITINT             ; No? Keep waiting
.192941	4a		lsr a		            LSR A
.192942	29 03		and #$03	            AND #$03                ; Get the interrupt vector code
.192944	c9 02		cmp #$02	            CMP #$02                ; Is it 2 (Received Data)?
.192946	d0 03		bne $19294b	            BNE else1               ; No? Keep checking
.192948	20 50 29	jsr $192950	            JSR UART_ECRC           ; Yes: echo the packet
.19294b	80 eb		bra $192938	else1       BRA WAITINT             ; Otherwise: just wait
.19294d	2b		pld		            PLD
.19294e	28		plp		            PLP
.19294f	6b		rtl		            RTL
.192950					UART_ECRC
.192950	08		php		            PHP
.192951	e2 20		sep #$20	                SEP #$20        ; set A short
.192953	a9 5b		lda #$5b	            LDA #'['                ; Open the packet
.192955	22 18 00 19	jsl $190018	            JSL PUTC
.192959	22 b1 28 19	jsl $1928b1	GETLOOP     JSL UART_HASBYT         ; Check to see if there is data available
.19295d	90 0a		bcc $192969	            BCC ENDLOOP             ; No... return to caller
.19295f	22 d2 28 19	jsl $1928d2	            JSL UART_GETC
.192963	22 18 00 19	jsl $190018	            JSL PUTC                ; And echo it to the screen
.192967	80 f0		bra $192959	            BRA GETLOOP
.192969	a9 5d		lda #$5d	ENDLOOP     LDA #']'                ; Close the packaet
.19296b	22 18 00 19	jsl $190018	            JSL PUTC
.19296f	28		plp		            PLP
.192970	60		rts		            RTS                     ; And return

;******  Return to file: kernel.asm


;******  Processing file: kernel_jumptable.asm

.190000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.190004	5c 82 0f 19	jmp $190f82	RESTORE         JML IRESTORE
.190008	5c 11 05 19	jmp $190511	BREAK           JML IBREAK
.19000c	5c 58 05 19	jmp $190558	READY           JML IREADY
.190010	5c 83 0f 19	jmp $190f83	SCINIT          JML ISCINIT
.190014	5c 84 0f 19	jmp $190f84	IOINIT          JML IIOINIT
.190018	5c 9d 05 19	jmp $19059d	PUTC            JML IPUTC
.19001c	5c 86 05 19	jmp $190586	PUTS            JML IPUTS
.190020	5c ca 05 19	jmp $1905ca	PUTB            JML IPUTB
.190024	5c 85 0f 19	jmp $190f85	PUTBLOCK        JML IPUTBLOCK
.190028	5c 86 0f 19	jmp $190f86	SETLFS          JML ISETLFS
.19002c	5c 87 0f 19	jmp $190f87	SETNAM          JML ISETNAM
.190030	5c 88 0f 19	jmp $190f88	OPEN            JML IOPEN
.190034	5c 89 0f 19	jmp $190f89	CLOSE           JML ICLOSE
.190038	5c 8a 0f 19	jmp $190f8a	SETIN           JML ISETIN
.19003c	5c 8b 0f 19	jmp $190f8b	SETOUT          JML ISETOUT
.190040	5c 8c 0f 19	jmp $190f8c	GETB            JML IGETB
.190044	5c 8d 0f 19	jmp $190f8d	GETBLOCK        JML IGETBLOCK
.190048	5c 8e 0f 19	jmp $190f8e	GETCH           JML IGETCH
.19004c	5c 7c 05 19	jmp $19057c	GETCHW          JML IGETCHW
.190050	5c 73 05 19	jmp $190573	GETCHE          JML IGETCHE
.190054	5c 8f 0f 19	jmp $190f8f	GETS            JML IGETS
.190058	5c 90 0f 19	jmp $190f90	GETLINE         JML IGETLINE
.19005c	5c 91 0f 19	jmp $190f91	GETFIELD        JML IGETFIELD
.190060	5c 92 0f 19	jmp $190f92	TRIM            JML ITRIM
.190064	5c 93 0f 19	jmp $190f93	PRINTC          JML IPRINTC
.190068	5c 94 0f 19	jmp $190f94	PRINTS          JML IPRINTS
.19006c	5c cb 05 19	jmp $1905cb	PRINTCR         JML IPRINTCR
.190070	5c 95 0f 19	jmp $190f95	PRINTF          JML IPRINTF
.190074	5c 96 0f 19	jmp $190f96	PRINTI          JML IPRINTI
.190078	5c b6 06 19	jmp $1906b6	PRINTH          JML IPRINTH
.19007c	5c 97 0f 19	jmp $190f97	PRINTAI         JML IPRINTAI
.190080	5c 98 0f 19	jmp $190f98	PRINTAH         JML IPRINTAH
.190084	5c 66 06 19	jmp $190666	LOCATE          JML ILOCATE
.190088	5c 99 0f 19	jmp $190f99	PUSHKEY         JML IPUSHKEY
.19008c	5c 9a 0f 19	jmp $190f9a	PUSHKEYS        JML IPUSHKEYS
.190090	5c ec 05 19	jmp $1905ec	CSRRIGHT        JML ICSRRIGHT
.190094	5c 9b 0f 19	jmp $190f9b	CSRLEFT         JML ICSRLEFT
.190098	5c 41 06 19	jmp $190641	CSRUP           JML ICSRUP
.19009c	5c 65 06 19	jmp $190665	CSRDOWN         JML ICSRDOWN
.1900a0	5c 9c 0f 19	jmp $190f9c	CSRHOME         JML ICSRHOME
.1900a4	5c 9c 06 19	jmp $19069c	SCROLLUP        JML ISCROLLUP
.1900a8	5c e4 06 19	jmp $1906e4	CLRSCREEN       JML ICLRSCREEN
.1900ac	5c 4b 07 19	jmp $19074b	INITCHLUT	      JML IINITCHLUT
.1900b0	5c 65 0a 19	jmp $190a65	INITSUPERIO	    JML IINITSUPERIO
.1900b4	5c 64 0b 19	jmp $190b64	INITKEYBOARD    JML IINITKEYBOARD
.1900b8	5c dc 0c 19	jmp $190cdc	TESTSID         JML ITESTSID
.1900bc	5c 44 0a 19	jmp $190a44	INITCURSOR      JML IINITCURSOR
.1900c0	5c fa 09 19	jmp $1909fa	INITFONTSET     JML IINITFONTSET
.1900c4	5c 7a 07 19	jmp $19077a	INITGAMMATABLE  JML IINITGAMMATABLE
.1900c8	5c 9a 07 19	jmp $19079a	INITALLLUT      JML IINITALLLUT
.1900cc	5c 5c 08 19	jmp $19085c	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1900d0	5c 85 08 19	jmp $190885	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1900d4	5c bc 08 19	jmp $1908bc	INITTILEMODE    JML IINITTILEMODE
.1900d8	5c bd 08 19	jmp $1908bd	INITSPRITE      JML IINITSPRITE
.1900dc	5c 07 0d 19	jmp $190d07	INITCODEC       JML IINITCODEC
.1900e0	5c 50 0d 19	jmp $190d50	RESETCODEC      JML IRESETCODEC
.1900e4	5c be 0d 19	jmp $190dbe	BMP_PARSER      JML IBMP_PARSER
.1900e8	5c 73 0d 19	jmp $190d73	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1900ec	5c bc 24 19	jmp $1924bc	OPL2_TONE_TEST  JML IOPL2_TONE_TEST

;******  Return to file: kernel.asm

.190400					IBOOT
.190400	18		clc		                CLC           ; clear the carry flag
.190401	fb		xce		                XCE           ; move carry to emulation flag.
.190402	78		sei		                SEI
.190403	c2 30		rep #$30	                REP #$30        ; set A&X long
.190405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.190408	1b		tcs		                TAS
.190409	48		pha		                PHA             ; begin setdp macro
.19040a	08		php			PHP
.19040b	c2 20		rep #$20	                REP #$20        ; set A long
.19040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190410	5b		tcd		                TCD
.190411	28		plp			PLP
.190412	68		pla		                PLA             ; end setdp macro
.190413	e2 20		sep #$20	                SEP #$20        ; set A short
.190415	a2 00 00	ldx #$0000	                LDX #$0000
.190418	a9 00		lda #$00	                LDA #$00
.19041a					CLEAR_MEM_LOOP
.19041a	95 00		sta $00,x	                STA $0000, X
.19041c	e8		inx		                INX
.19041d	e0 00 04	cpx #$0400	                CPX #$0400
.190420	d0 f8		bne $19041a	                BNE CLEAR_MEM_LOOP
.190422	ea		nop		                NOP
.190423	a9 ff		lda #$ff	                LDA #$FF
.190425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.19042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.190431	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190435	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190439	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19043d	c2 30		rep #$30	                REP #$30        ; set A&X long
.19043f	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.190442	85 0c		sta $0c		                STA SCREENBEGIN
.190444	e2 20		sep #$20	                SEP #$20        ; set A short
.190446	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.190448	85 0e		sta $0e		                STA SCREENBEGIN+2
.19044a	c2 30		rep #$30	                REP #$30        ; set A&X long
.19044c	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.19044f	85 17		sta $17		                STA CURSORPOS
.190451	e2 20		sep #$20	                SEP #$20        ; set A short
.190453	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.190455	85 19		sta $19		                STA CURSORPOS+2
.190457	a9 00		lda #$00	                LDA #$00
.190459	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.19045c	a9 04		lda #$04	                LDA #$04                ; This is to make sure the RTC will keep working after unit is turn-off
.19045e	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.190462	c2 30		rep #$30	                REP #$30        ; set A&X long
.190464	a2 50 00	ldx #$0050	                LDX #80
.190467	86 0f		stx $0f		                STX COLS_VISIBLE
.190469	a0 3c 00	ldy #$003c	                LDY #60
.19046c	84 13		sty $13		                STY LINES_VISIBLE
.19046e	a2 80 00	ldx #$0080	                LDX #128
.190471	86 11		stx $11		                STX COLS_PER_LINE
.190473	a0 40 00	ldy #$0040	                LDY #64
.190476	84 15		sty $15		                STY LINES_MAX
.190478	22 dc 00 19	jsl $1900dc	                JSL INITCODEC
.19047c	22 b0 00 19	jsl $1900b0	                JSL INITSUPERIO
.190480	22 c4 00 19	jsl $1900c4	                JSL INITGAMMATABLE
.190484	22 c8 00 19	jsl $1900c8	                JSL INITALLLUT
.190488	22 ac 00 19	jsl $1900ac	                JSL INITCHLUT
.19048c	22 25 0a 19	jsl $190a25	                JSL INITMOUSEPOINTER
.190490	22 bc 00 19	jsl $1900bc	                JSL INITCURSOR
.190494	22 cc 00 19	jsl $1900cc	                JSL INITVKYTXTMODE
.190498	22 fa 09 19	jsl $1909fa	                JSL IINITFONTSET
.19049c	22 e4 06 19	jsl $1906e4	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.1904a0	22 13 07 19	jsl $190713	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.1904a4	c2 30		rep #$30	                REP #$30        ; set A&X long
.1904a6					greet
.1904a6	48		pha		                PHA             ; begin setdbr macro
.1904a7	08		php		                PHP
.1904a8	e2 20		sep #$20	                SEP #$20        ; set A short
.1904aa	a9 19		lda #$19		LDA #`greet_msg
.1904ac	48		pha		                PHA
.1904ad	ab		plb		                PLB
.1904ae	28		plp		                PLP
.1904af	68		pla		                PLA             ; end setdbr macro
.1904b0	a2 9f 0f	ldx #$0f9f	                LDX #<>greet_msg
.1904b3	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print the first line
.1904b7	a2 88 10	ldx #$1088	                LDX #<>old_pc_style_stat
.1904ba	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print the first line
.1904be	48		pha		                PHA             ; begin setdp macro
.1904bf	08		php			PHP
.1904c0	c2 20		rep #$20	                REP #$20        ; set A long
.1904c2	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1904c5	5b		tcd		                TCD
.1904c6	28		plp			PLP
.1904c7	68		pla		                PLA             ; end setdp macro
.1904c8	22 b4 00 19	jsl $1900b4	                JSL INITKEYBOARD ;
.1904cc	c2 30		rep #$30	                REP #$30        ; set A&X long
.1904ce	22 ec 00 19	jsl $1900ec	                JSL OPL2_TONE_TEST
.1904d2	a2 10 15	ldx #$1510	                LDX #<>ready_msg
.1904d5	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print the first line
.1904d9	22 f3 28 19	jsl $1928f3	                JSL UART_ENIRQ
.1904dd	e2 20		sep #$20	                SEP #$20        ; set A short
.1904df	22 2a 29 19	jsl $19292a	                JSL UART_POLLIR
.1904e3	58		cli		                CLI ; Make sure no Interrupt will come and fuck up Init before this point.
.1904e4	e2 20		sep #$20	                SEP #$20        ; set A short
.1904e6	48		pha		                PHA             ; begin setdbr macro
.1904e7	08		php		                PHP
.1904e8	e2 20		sep #$20	                SEP #$20        ; set A short
.1904ea	a9 19		lda #$19		LDA #`greet_msg
.1904ec	48		pha		                PHA
.1904ed	ab		plb		                PLB
.1904ee	28		plp		                PLP
.1904ef	68		pla		                PLA             ; end setdbr macro
.1904f0	ea		nop		endlessloop     NOP
.1904f1	af 83 0f 00	lda $000f83	                LDA KEY_BUFFER_CMD
.1904f5	c9 01		cmp #$01	                CMP #$01
.1904f7	f0 04		beq $1904fd	                BEQ GoProcessCommandLine
.1904f9	5c f0 04 19	jmp $1904f0	                JML endlessloop
.1904fd					GoProcessCommandLine
.1904fd	a9 00		lda #$00	                LDA #$00  ; Clear the Flag
.1904ff	8f 83 0f 00	sta $000f83	                STA KEY_BUFFER_CMD
.190503	22 56 30 19	jsl $193056	                JSL PROCESS_COMMAND_LINE
.190507	a2 10 15	ldx #$1510	                LDX #<>ready_msg
.19050a	22 7d 05 19	jsl $19057d	                JSL IPRINT
.19050e	80 e0		bra $1904f0	                BRA  endlessloop
.190510	00		brk #		greet_done      BRK             ;Terminate boot routine and go to Ready handler.
.190511					IBREAK
.190511	48		pha		                PHA             ; begin setdp macro
.190512	08		php			PHP
.190513	c2 20		rep #$20	                REP #$20        ; set A long
.190515	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190518	5b		tcd		                TCD
.190519	28		plp			PLP
.19051a	68		pla		                PLA             ; end setdp macro
.19051b	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.19051c	8f 48 02 00	sta $000248	                STA CPUY
.190520	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.190521	8f 46 02 00	sta $000246	                STA CPUX
.190525	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.190526	8f 44 02 00	sta $000244	                STA CPUA
.19052a	68		pla		                PLA
.19052b	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.19052f	e2 20		sep #$20	                SEP #$20        ; set A short
.190531	68		pla		                PLA             ; Pull Data Bank (8 bits)
.190532	8f 4e 02 00	sta $00024e	                STA CPUDBR
.190536	68		pla		                PLA             ; Pull Flags (8 bits)
.190537	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.19053b	c2 20		rep #$20	                REP #$20        ; set A long
.19053d	68		pla		                PLA             ; Pull Program Counter (16 bits)
.19053e	8f 40 02 00	sta $000240	                STA CPUPC
.190542	e2 20		sep #$20	                SEP #$20        ; set A short
.190544	68		pla		                PLA             ; Pull Program Bank (8 bits)
.190545	8f 42 02 00	sta $000242	                STA CPUPBR
.190549	c2 20		rep #$20	                REP #$20        ; set A long
.19054b	3b		tsc		                TSA             ; Get the stack
.19054c	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.190550	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.190553	1b		tcs		                TAS
.190554	5c e0 ff 00	jmp $00ffe0	                JML JMP_READY   ; Run READY routine (usually BASIC or MONITOR)
.190558					IREADY
.190558	48		pha		                PHA             ; begin setdbr macro
.190559	08		php		                PHP
.19055a	e2 20		sep #$20	                SEP #$20        ; set A short
.19055c	a9 19		lda #$19		LDA #`ready_msg
.19055e	48		pha		                PHA
.19055f	ab		plb		                PLB
.190560	28		plp		                PLP
.190561	68		pla		                PLA             ; end setdbr macro
.190562	e2 20		sep #$20	                SEP #$20        ; set A short
.190564	a2 10 15	ldx #$1510	                LDX #<>ready_msg
.190567	22 7d 05 19	jsl $19057d	                JSL IPRINT
.19056b					IREADYWAIT
.19056b	22 73 05 19	jsl $190573	                JSL IGETCHE
.19056f	80 fa		bra $19056b	                BRA IREADYWAIT
.190571	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.190572	db		stp		IRETURN         STP
.190573	22 7c 05 19	jsl $19057c	IGETCHE         JSL IGETCHW
.190577	22 9d 05 19	jsl $19059d	                JSL IPUTC
.19057b	6b		rtl		                RTL
.19057c					IGETCHW
.19057c	6b		rtl		                RTL
.19057d	22 86 05 19	jsl $190586	IPRINT          JSL IPUTS
.190581	22 cb 05 19	jsl $1905cb	                JSL IPRINTCR
.190585	6b		rtl		                RTL
.190586	48		pha		IPUTS           PHA
.190587	08		php		                PHP
.190588	e2 20		sep #$20	                SEP #$20        ; set A short
.19058a	c2 10		rep #$10	                REP #$10        ; set X long
.19058c	bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.19058f	f0 08		beq $190599	                BEQ iputs_done
.190591	22 9d 05 19	jsl $19059d	iputs2          JSL IPUTC
.190595	e8		inx		iputs3          INX
.190596	4c 8c 05	jmp $19058c	                JMP iputs1
.190599	e8		inx		iputs_done      INX
.19059a	28		plp		                PLP
.19059b	68		pla		                PLA
.19059c	6b		rtl		                RTL
.19059d	0b		phd		IPUTC           PHD
.19059e	08		php		                PHP             ; stash the flags (we'll be changing M)
.19059f	48		pha		                PHA             ; begin setdp macro
.1905a0	08		php			PHP
.1905a1	c2 20		rep #$20	                REP #$20        ; set A long
.1905a3	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1905a6	5b		tcd		                TCD
.1905a7	28		plp			PLP
.1905a8	68		pla		                PLA             ; end setdp macro
.1905a9	e2 20		sep #$20	                SEP #$20        ; set A short
.1905ab	c9 0d		cmp #$0d	                CMP #$0D        ; handle CR
.1905ad	d0 06		bne $1905b5	                BNE iputc_bs
.1905af	22 cb 05 19	jsl $1905cb	                JSL IPRINTCR
.1905b3	80 10		bra $1905c5	                bra iputc_done
.1905b5	c9 08		cmp #$08	iputc_bs        CMP #$08        ; backspace
.1905b7	d0 06		bne $1905bf	                BNE iputc_print
.1905b9	22 dc 05 19	jsl $1905dc	                JSL IPRINTBS
.1905bd	80 06		bra $1905c5	                BRA iputc_done
.1905bf	87 17		sta [$17]	iputc_print     STA [CURSORPOS] ; Save the character on the screen
.1905c1	22 ec 05 19	jsl $1905ec	                JSL ICSRRIGHT
.1905c5					iputc_done
>1905c5	42 01				                .byte $42, $01
.1905c7	28		plp		                PLP
.1905c8	2b		pld		                PLD
.1905c9	6b		rtl		                RTL
.1905ca					IPUTB
.1905ca	6b		rtl		                RTL
.1905cb	da		phx		IPRINTCR	      PHX
.1905cc	5a		phy		                PHY
.1905cd	08		php		                PHP
.1905ce	a2 00 00	ldx #$0000	                LDX #0
.1905d1	a4 1c		ldy $1c		                LDY CURSORY
.1905d3	c8		iny		                INY
.1905d4	22 66 06 19	jsl $190666	                JSL ILOCATE
.1905d8	28		plp		                PLP
.1905d9	7a		ply		                PLY
.1905da	fa		plx		                PLX
.1905db	6b		rtl		                RTL
.1905dc	da		phx		IPRINTBS	PHX
.1905dd	5a		phy		                PHY
.1905de	08		php		                PHP
.1905df	a6 1a		ldx $1a		                LDX CURSORX
.1905e1	a4 1c		ldy $1c		                LDY CURSORY
.1905e3	ca		dex		                DEX
.1905e4	22 66 06 19	jsl $190666	                JSL ILOCATE
.1905e8	28		plp		                PLP
.1905e9	7a		ply		                PLY
.1905ea	fa		plx		                PLX
.1905eb	6b		rtl		                RTL
.1905ec					ICSRRIGHT
.1905ec	da		phx		                PHX
.1905ed	8b		phb		                PHB
.1905ee	c2 20		rep #$20	                REP #$20        ; set A long
.1905f0	c2 10		rep #$10	                REP #$10        ; set X long
.1905f2	48		pha		                PHA             ; begin setdp macro
.1905f3	08		php			PHP
.1905f4	c2 20		rep #$20	                REP #$20        ; set A long
.1905f6	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1905f9	5b		tcd		                TCD
.1905fa	28		plp			PLP
.1905fb	68		pla		                PLA             ; end setdp macro
.1905fc	e6 17		inc $17		                INC CURSORPOS
.1905fe	a6 1a		ldx $1a		                LDX CURSORX
.190600	e8		inx		                INX
.190601	e4 0f		cpx $0f		                CPX COLS_VISIBLE
.190603	90 0c		bcc $190611	                BCC icsr_nowrap  ; wrap if the cursor is at or past column 80
.190605	a2 00 00	ldx #$0000	                LDX #0
.190608	5a		phy		                PHY
.190609	a4 1c		ldy $1c		                LDY CURSORY
.19060b	c8		iny		                INY
.19060c	22 66 06 19	jsl $190666	                JSL ILOCATE
.190610	7a		ply		                PLY
.190611	86 1a		stx $1a		icsr_nowrap     STX CURSORX
.190613	48		pha		                PHA
.190614	8a		txa		                TXA
.190615	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.190619	68		pla		                PLA
.19061a	ab		plb		                PLB
.19061b	fa		plx		                PLX
.19061c	6b		rtl		                RTL
.19061d					ISRLEFT
.19061d	da		phx		                PHX
.19061e	5a		phy		                PHY
.19061f	8b		phb		                PHB
.190620	48		pha		                PHA
.190621	c2 30		rep #$30	                REP #$30        ; set A&X long
.190623	48		pha		                PHA             ; begin setdp macro
.190624	08		php			PHP
.190625	c2 20		rep #$20	                REP #$20        ; set A long
.190627	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.19062a	5b		tcd		                TCD
.19062b	28		plp			PLP
.19062c	68		pla		                PLA             ; end setdp macro
.19062d	a5 1a		lda $1a		                LDA CURSORX
.19062f	f0 0b		beq $19063c	                BEQ isrleft_done_already_zero ; Check that we are not already @ Zero
.190631	a6 1a		ldx $1a		                LDX CURSORX
.190633	ca		dex		                DEX
.190634	86 1a		stx $1a		                STX CURSORX
.190636	a4 1c		ldy $1c		                LDY CURSORY
.190638	22 66 06 19	jsl $190666	                JSL ILOCATE
.19063c					isrleft_done_already_zero
.19063c	68		pla		                PLA
.19063d	ab		plb		                PLB
.19063e	7a		ply		                PLY
.19063f	fa		plx		                PLX
.190640	6b		rtl		                RTL
.190641					ICSRUP
.190641	da		phx		                PHX
.190642	5a		phy		                PHY
.190643	8b		phb		                PHB
.190644	48		pha		                PHA
.190645	c2 30		rep #$30	                REP #$30        ; set A&X long
.190647	48		pha		                PHA             ; begin setdp macro
.190648	08		php			PHP
.190649	c2 20		rep #$20	                REP #$20        ; set A long
.19064b	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.19064e	5b		tcd		                TCD
.19064f	28		plp			PLP
.190650	68		pla		                PLA             ; end setdp macro
.190651	a5 1c		lda $1c		                LDA CURSORY
.190653	f0 0b		beq $190660	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.190655	a4 1c		ldy $1c		                LDY CURSORY
.190657	88		dey		                DEY
.190658	84 1c		sty $1c		                STY CURSORY
.19065a	a6 1a		ldx $1a		                LDX CURSORX
.19065c	22 66 06 19	jsl $190666	                JSL ILOCATE
.190660					isrup_done_already_zero
.190660	68		pla		                PLA
.190661	ab		plb		                PLB
.190662	7a		ply		                PLY
.190663	fa		plx		                PLX
.190664	6b		rtl		                RTL
.190665					ICSRDOWN
.190665	6b		rtl		                RTL
.190666	48		pha		ILOCATE         PHA
.190667	08		php		                PHP
.190668	c2 30		rep #$30	                REP #$30        ; set A&X long
.19066a					ilocate_scroll
.19066a	c4 13		cpy $13		                CPY LINES_VISIBLE
.19066c	90 07		bcc $190675	                BCC ilocate_scrolldone
.19066e	22 9c 06 19	jsl $19069c	                JSL ISCROLLUP
.190672	88		dey		                DEY
.190673	80 f5		bra $19066a	                BRA ilocate_scroll
.190675					ilocate_scrolldone
.190675	86 1a		stx $1a		                STX CURSORX
.190677	84 1c		sty $1c		                STY CURSORY
.190679	a5 0c		lda $0c		                LDA SCREENBEGIN
.19067b					ilocate_row
.19067b	c0 00 00	cpy #$0000	                CPY #$0
.19067e	f0 08		beq $190688	                BEQ ilocate_right
.190680	18		clc		ilocate_down    CLC
.190681	65 11		adc $11		                ADC COLS_PER_LINE
.190683	88		dey		                DEY
.190684	f0 02		beq $190688	                BEQ ilocate_right
.190686	80 f8		bra $190680	                BRA ilocate_down
.190688	18		clc		ilocate_right   CLC
.190689	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.19068b	85 17		sta $17		                STA CURSORPOS
.19068d	a4 1c		ldy $1c		                LDY CURSORY
.19068f	98		tya		                TYA
.190690	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.190694	8a		txa		                TXA
.190695	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.190699	28		plp		ilocate_done    PLP
.19069a	68		pla		                PLA
.19069b	6b		rtl		                RTL
.19069c					ISCROLLUP
.19069c	48		pha		                PHA
.19069d	da		phx		                PHX
.19069e	5a		phy		                PHY
.19069f	8b		phb		                PHB
.1906a0	08		php		                PHP
.1906a1	c2 30		rep #$30	                REP #$30        ; set A&X long
.1906a3	18		clc		                CLC
.1906a4	a5 0c		lda $0c		                LDA SCREENBEGIN
.1906a6	a8		tay		                TAY             ; Destination is first row
.1906a7	65 11		adc $11		                ADC COLS_PER_LINE
.1906a9	aa		tax		                TAX             ; Source is second row
.1906aa	a9 ef 1f	lda #$1fef	                LDA #SCREEN_PAGE1-SCREEN_PAGE0-COLS_PER_LINE
.1906ad	44 00 00	mvp $00,$00	                MVP $00,$00
.1906b0	28		plp		                PLP
.1906b1	ab		plb		                PLB
.1906b2	7a		ply		                PLY
.1906b3	fa		plx		                PLX
.1906b4	68		pla		                PLA
.1906b5	6b		rtl		                RTL
.1906b6	08		php		IPRINTH         PHP
.1906b7	48		pha		                PHA
.1906b8					iprinth1
.1906b8	e2 20		sep #$20	                SEP #$20        ; set A short
.1906ba	bd 00 00	lda $190000,x	                LDA #0,b,x      ; Read the value to be printed
.1906bd	4a		lsr a		                LSR
.1906be	4a		lsr a		                LSR
.1906bf	4a		lsr a		                LSR
.1906c0	4a		lsr a		                LSR
.1906c1	22 d3 06 19	jsl $1906d3	                JSL iprint_digit
.1906c5	bd 00 00	lda $190000,x	                LDA #0,b,x
.1906c8	22 d3 06 19	jsl $1906d3	                JSL iprint_digit
.1906cc	ca		dex		                DEX
.1906cd	88		dey		                DEY
.1906ce	d0 e8		bne $1906b8	                BNE iprinth1
.1906d0	68		pla		                PLA
.1906d1	28		plp		                PLP
.1906d2	6b		rtl		                RTL
.1906d3	da		phx		iprint_digit    PHX
.1906d4	c2 20		rep #$20	                REP #$20        ; set A long
.1906d6	29 0f 00	and #$000f	                AND #$0F
.1906d9	aa		tax		                TAX
.1906da	bf 9a 15 19	lda $19159a,x	                LDA hex_digits,X
.1906de	22 9d 05 19	jsl $19059d	                JSL IPUTC       ; Print the digit
.1906e2	fa		plx		                PLX
.1906e3	6b		rtl		                RTL
.1906e4	0b		phd		ICLRSCREEN	    PHD
.1906e5	08		php		                PHP
.1906e6	48		pha		                PHA
.1906e7	da		phx		                PHX
.1906e8	e2 20		sep #$20	                SEP #$20        ; set A short
.1906ea	c2 10		rep #$10	                REP #$10        ; set X long
.1906ec	a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.1906ef	a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.1906f1	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.1906f5	e8		inx		                inx
.1906f6	e0 00 20	cpx #$2000	                cpx #$2000
.1906f9	d0 f6		bne $1906f1	                bne iclearloop0
.1906fb	a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.1906fe	a9 ed		lda #$ed	                LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.190700	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.190704	e8		inx		                inx
.190705	e0 00 20	cpx #$2000	                cpx #$2000
.190708	d0 f6		bne $190700	                bne iclearloop1
.19070a	c2 10		rep #$10	                REP #$10        ; set X long
.19070c	c2 20		rep #$20	                REP #$20        ; set A long
.19070e	fa		plx		                PLX
.19070f	68		pla		                PLA
.190710	28		plp		                PLP
.190711	2b		pld		                PLD
.190712	6b		rtl		                RTL
.190713	48		pha		ICOLORFLAG      PHA
.190714	da		phx		                PHX
.190715	08		php		                PHP
.190716	e2 30		sep #$30	                SEP #$30        ; set A&X short
.190718	a2 00		ldx #$00	                LDX #$00
.19071a	bf 10 13 19	lda $191310,x	iclearloop2	    LDA @lgreet_clr_line1,x
.19071e	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.190722	bf 1e 13 19	lda $19131e,x	                LDA @lgreet_clr_line2,x
.190726	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.19072a	bf 2c 13 19	lda $19132c,x	                LDA @lgreet_clr_line3,x
.19072e	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.190732	bf 3a 13 19	lda $19133a,x	                LDA @lgreet_clr_line4,x
.190736	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.19073a	bf 48 13 19	lda $191348,x	                LDA @lgreet_clr_line5,x
.19073e	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.190742	e8		inx		                inx
.190743	e0 0e		cpx #$0e	                cpx #$0E
.190745	d0 d3		bne $19071a	                bne iclearloop2
.190747	28		plp		                PLP
.190748	fa		plx		                PLX
.190749	68		pla		                PLA
.19074a	6b		rtl		                RTL
.19074b	0b		phd		IINITCHLUT		  PHD
.19074c	08		php		                PHP
.19074d	48		pha		                PHA
.19074e	da		phx		                PHX
.19074f	e2 20		sep #$20	                SEP #$20        ; set A short
.190751	e2 10		sep #$10	                SEP #$10        ; set X short
.190753	a2 00		ldx #$00					        LDX	#$00
.190755	bf 56 13 19	lda $191356,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.190759	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.19075d	e8		inx		                inx
.19075e	e0 40		cpx #$40	                cpx #$40
.190760	d0 f3		bne $190755	                bne lutinitloop0
.190762	a2 00		ldx #$00	                LDX	#$00
.190764	bf 96 13 19	lda $191396,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.190768	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.19076c	e8		inx		                INX
.19076d	e0 40		cpx #$40	                CPX #$40
.19076f	d0 f3		bne $190764	                bne lutinitloop1
.190771	c2 20		rep #$20	                REP #$20        ; set A long
.190773	c2 10		rep #$10	                REP #$10        ; set X long
.190775	fa		plx		                PLX
.190776	68		pla		                PLA
.190777	28		plp		                PLP
.190778	2b		pld		                PLD
.190779	6b		rtl		                RTL
.19077a					IINITGAMMATABLE
.19077a	e2 20		sep #$20	                SEP #$20        ; set A short
.19077c	c2 10		rep #$10	                REP #$10        ; set X long
.19077e	a2 00 00	ldx #$0000	                ldx #$0000
.190781	bf 00 1a 19	lda $191a00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.190785	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.190789	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.19078d	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.190791	e8		inx		                inx
.190792	e0 00 01	cpx #$0100	                cpx #$0100
.190795	d0 ea		bne $190781	                bne initgammaloop
.190797	c2 30		rep #$30	                REP #$30        ; set A&X long
.190799	6b		rtl		                RTL
.19079a	48		pha		IINITALLLUT     PHA
.19079b	da		phx		                PHX
.19079c	a2 00 00	ldx #$0000	                LDX #$0000
.19079f	e2 20		sep #$20	                SEP #$20        ; set A short
.1907a1	a9 00		lda #$00	                LDA #$00
.1907a3	85 0a		sta $0a		                STA $0A     ; Temp Location
.1907a5					iinit_lut_loop
.1907a5	86 02		stx $02		                STX $02
.1907a7	a6 0a		ldx $0a		                LDX $0A
.1907a9	bf 00 19 19	lda $191900,x	                LDA GAMMA_2_2_Tbl, x
.1907ad	49 55		eor #$55	                EOR  #$55
.1907af	a6 02		ldx $02		                LDX $02
.1907b1	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1907b5	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1907b9	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1907bd	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1907c1	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1907c5	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1907c9	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1907cd	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1907d1	e8		inx		                inx
.1907d2	86 02		stx $02		                STX $02
.1907d4	a6 0a		ldx $0a		                LDX $0A
.1907d6	bf 00 1b 19	lda $191b00,x	                LDA RANDOM_LUT_Tbl, x
.1907da	a6 02		ldx $02		                LDX $02
.1907dc	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1907e0	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1907e4	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1907e8	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1907ec	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1907f0	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1907f4	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1907f8	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1907fc	e8		inx		                inx
.1907fd	86 02		stx $02		                STX $02
.1907ff	a6 0a		ldx $0a		                LDX $0A
.190801	bf 00 1a 19	lda $191a00,x	                LDA GAMMA_1_8_Tbl, x
.190805	49 aa		eor #$aa	                EOR  #$AA
.190807	a6 02		ldx $02		                LDX $02
.190809	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.19080d	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190811	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190815	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190819	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.19081d	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190821	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190825	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190829	e8		inx		                inx
.19082a	a9 ff		lda #$ff	                LDA #$FF
.19082c	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190830	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190834	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190838	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.19083c	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190840	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190844	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190848	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.19084c	e6 0a		inc $0a		                inc $0A
.19084e	e8		inx		                inx
.19084f	e0 00 04	cpx #$0400	                cpx #$0400
.190852	f0 03		beq $190857	                beq iinit_lut_exit
.190854	82 4e ff	brl $1907a5	                brl iinit_lut_loop
.190857					iinit_lut_exit
.190857	c2 30		rep #$30	                REP #$30        ; set A&X long
.190859	fa		plx		                PLX
.19085a	68		pla		                PLA
.19085b	6b		rtl		                RTL
.19085c	48		pha		IINITVKYTXTMODE PHA
.19085d	e2 20		sep #$20	                SEP #$20        ; set A short
.19085f	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.190861	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.190865	a9 20		lda #$20	                LDA #$20
.190867	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.19086b	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.19086f	a9 00		lda #$00	                LDA #$00
.190871	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190875	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.190877	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.19087b	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.19087d	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.190881	c2 30		rep #$30	                REP #$30        ; set A&X long
.190883	68		pla		                PLA
.190884	6b		rtl		                RTL
.190885					IINITVKYGRPMODE
.190885	48		pha		                PHA
.190886	e2 20		sep #$20	                SEP #$20        ; set A short
.190888	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.19088a	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.19088e	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190890	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.190894	a9 c0		lda #$c0	                LDA #$C0
.190896	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.19089a	a9 00		lda #$00	                LDA #$00
.19089c	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.1908a0	a9 80		lda #$80	                LDA #$80
.1908a2	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.1908a6	a9 02		lda #$02	                LDA #$02
.1908a8	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.1908ac	a9 e0		lda #$e0	                LDA #$E0
.1908ae	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.1908b2	a9 01		lda #$01	                LDA #$01
.1908b4	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.1908b8	c2 30		rep #$30	                REP #$30        ; set A&X long
.1908ba	68		pla		                PLA
.1908bb	6b		rtl		                RTL
.1908bc					IINITTILEMODE
.1908bc	6b		rtl		                RTL
.1908bd	48		pha		IINITSPRITE     PHA
.1908be	e2 20		sep #$20	                SEP #$20        ; set A short
.1908c0	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.1908c2	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.1908c6	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.1908ca	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.1908ce	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.1908d2	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.1908d6	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.1908da	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.1908de	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.1908e2	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.1908e6	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.1908ea	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.1908ee	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.1908f2	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.1908f6	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.1908fa	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.1908fe	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.190902	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.190906	a9 09		lda #$09	                LDA #$09
.190908	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.19090c	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.190910	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.190914	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.190918	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.19091c	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.190920	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.190924	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.190928	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.19092c	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.190930	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.190934	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.190938	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.19093c	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.190940	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.190944	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.190948	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.19094c	a9 00		lda #$00	                LDA #$00
.19094e	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.190952	a9 04		lda #$04	                LDA #$04
.190954	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.190958	a9 08		lda #$08	                LDA #$08
.19095a	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.19095e	a9 0c		lda #$0c	                LDA #$0C
.190960	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.190964	a9 10		lda #$10	                LDA #$10
.190966	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.19096a	a9 14		lda #$14	                LDA #$14
.19096c	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.190970	a9 18		lda #$18	                LDA #$18
.190972	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.190976	a9 1c		lda #$1c	                LDA #$1C
.190978	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.19097c	a9 20		lda #$20	                LDA #$20
.19097e	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.190982	a9 24		lda #$24	                LDA #$24
.190984	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.190988	a9 28		lda #$28	                LDA #$28
.19098a	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.19098e	a9 2c		lda #$2c	                LDA #$2C
.190990	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.190994	a9 30		lda #$30	                LDA #$30
.190996	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.19099a	a9 34		lda #$34	                LDA #$34
.19099c	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.1909a0	a9 38		lda #$38	                LDA #$38
.1909a2	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.1909a6	a9 3c		lda #$3c	                LDA #$3C
.1909a8	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.1909ac	a9 40		lda #$40	                LDA #$40
.1909ae	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.1909b2	a9 00		lda #$00	                LDA #$00
.1909b4	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.1909b8	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.1909bc	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.1909c0	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.1909c4	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.1909c8	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.1909cc	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.1909d0	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.1909d4	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.1909d8	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.1909dc	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.1909e0	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.1909e4	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.1909e8	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.1909ec	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.1909f0	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.1909f4	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.1909f8	68		pla		                PLA
.1909f9	6b		rtl		                RTL
.1909fa					IINITFONTSET
.1909fa	e2 20		sep #$20	                SEP #$20        ; set A short
.1909fc	c2 10		rep #$10	                REP #$10        ; set X long
.1909fe	a2 00 00	ldx #$0000	                LDX #$0000
.190a01					initFontsetbranch0
.190a01	bf 00 f0 1f	lda $1ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.190a05	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.190a09	e8		inx		                INX
.190a0a	e0 00 08	cpx #$0800	                CPX #$0800
.190a0d	d0 f2		bne $190a01	                BNE initFontsetbranch0
.190a0f	ea		nop		                NOP
.190a10	a2 00 00	ldx #$0000	                LDX #$0000
.190a13					initFontsetbranch1
.190a13	bf 00 f8 1f	lda $1ff800,x	                LDA @lFONT_4_BANK1,X
.190a17	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.190a1b	e8		inx		                INX
.190a1c	e0 00 08	cpx #$0800	                CPX #$0800
.190a1f	d0 f2		bne $190a13	                BNE initFontsetbranch1
.190a21	ea		nop		                NOP
.190a22	c2 30		rep #$30	                REP #$30        ; set A&X long
.190a24	6b		rtl		                RTL
.190a25					INITMOUSEPOINTER
.190a25	e2 20		sep #$20	                SEP #$20        ; set A short
.190a27	c2 10		rep #$10	                REP #$10        ; set X long
.190a29	a2 00 00	ldx #$0000	                LDX #$0000
.190a2c					FILL_MOUSE_MARKER
.190a2c	bf 00 1c 19	lda $191c00,x	                LDA @lMOUSE_POINTER_PTR,X
.190a30	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.190a34	e8		inx		                INX
.190a35	e0 00 01	cpx #$0100	                CPX #$0100
.190a38	d0 f2		bne $190a2c	                BNE FILL_MOUSE_MARKER
.190a3a	ea		nop		                nop
.190a3b	a9 01		lda #$01	                LDA #$01
.190a3d	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.190a41	c2 30		rep #$30	                REP #$30        ; set A&X long
.190a43	6b		rtl		                RTL
.190a44	48		pha		IINITCURSOR     PHA
.190a45	e2 20		sep #$20	                SEP #$20        ; set A short
.190a47	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190a49	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190a4d	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190a4f	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190a53	c2 30		rep #$30	                REP #$30        ; set A&X long
.190a55	a9 00 00	lda #$0000	                LDA #$0000;
.190a58	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190a5c	a9 06 00	lda #$0006	                LDA #$0006;
.190a5f	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190a63	68		pla		                PLA
.190a64	6b		rtl		                RTL
.190a65	0b		phd		IINITSUPERIO	  PHD
.190a66	08		php		                PHP
.190a67	48		pha		                PHA
.190a68	e2 20		sep #$20	                SEP #$20        ; set A short
.190a6a	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a6c	8f 23 11 af	sta $af1123	                STA GP10_REG
.190a70	af 23 11 af	lda $af1123	                LDA GP10_REG
.190a74	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a76	8f 24 11 af	sta $af1124	                STA GP11_REG
.190a7a	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a7c	8f 25 11 af	sta $af1125	                STA GP12_REG
.190a80	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a82	8f 26 11 af	sta $af1126	        				STA GP13_REG
.190a86	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190a88	8f 27 11 af	sta $af1127	        				STA GP14_REG
.190a8c	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190a8e	8f 28 11 af	sta $af1128	        				STA GP15_REG
.190a92	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190a94	8f 29 11 af	sta $af1129	        				STA GP16_REG
.190a98	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190a9a	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.190a9e	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190aa0	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.190aa4	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190aa6	8f 2f 11 af	sta $af112f					        STA GP24_REG
.190aaa	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190aac	8f 30 11 af	sta $af1130					        STA GP25_REG
.190ab0	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190ab2	8f 31 11 af	sta $af1131					        STA GP26_REG
.190ab6	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190ab8	8f 33 11 af	sta $af1133					        STA GP30_REG
.190abc	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190abe	8f 34 11 af	sta $af1134					        STA GP31_REG
.190ac2	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190ac4	8f 35 11 af	sta $af1135					        STA GP32_REG
.190ac8	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190aca	8f 36 11 af	sta $af1136					        STA GP33_REG
.190ace	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190ad0	8f 37 11 af	sta $af1137					        STA GP34_REG
.190ad4	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190ad6	8f 38 11 af	sta $af1138					        STA GP35_REG
.190ada	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190adc	8f 39 11 af	sta $af1139					        STA GP36_REG
.190ae0	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190ae2	8f 3a 11 af	sta $af113a					        STA GP37_REG
.190ae6	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190ae8	8f 3d 11 af	sta $af113d					        STA GP42_REG
.190aec	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190aee	8f 3e 11 af	sta $af113e					        STA GP43_REG
.190af2	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190af4	8f 3f 11 af	sta $af113f					        STA GP50_REG
.190af8	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190afa	8f 40 11 af	sta $af1140					        STA GP51_REG
.190afe	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190b00	8f 41 11 af	sta $af1141					        STA GP52_REG
.190b04	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190b06	8f 42 11 af	sta $af1142					        STA GP53_REG
.190b0a	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190b0c	8f 43 11 af	sta $af1143					        STA GP54_REG
.190b10	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190b12	8f 44 11 af	sta $af1144					        STA GP55_REG
.190b16	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190b18	8f 45 11 af	sta $af1145					        STA GP56_REG
.190b1c	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190b1e	8f 46 11 af	sta $af1146					        STA GP57_REG
.190b22	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.190b24	8f 47 11 af	sta $af1147					        STA GP60_REG
.190b28	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.190b2a	8f 48 11 af	sta $af1148					        STA GP61_REG
.190b2e	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190b30	8f 4b 11 af	sta $af114b					        STA GP1_REG
.190b34	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190b36	8f 4c 11 af	sta $af114c					        STA GP2_REG
.190b3a	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190b3c	8f 4d 11 af	sta $af114d					        STA GP3_REG
.190b40	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190b42	8f 4e 11 af	sta $af114e					        STA GP4_REG
.190b46	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190b48	8f 4f 11 af	sta $af114f					        STA GP5_REG
.190b4c	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190b4e	8f 50 11 af	sta $af1150					        STA GP6_REG
.190b52	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190b54	8f 5d 11 af	sta $af115d					        STA LED1_REG
.190b58	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190b5a	8f 5e 11 af	sta $af115e					        STA LED2_REG
.190b5e	c2 20		rep #$20	                REP #$20        ; set A long
.190b60	68		pla		                PLA
.190b61	28		plp						        PLP
.190b62	2b		pld					        	PLD
.190b63	6b		rtl		                RTL
.190b64	0b		phd		IINITKEYBOARD	  PHD
.190b65	08		php						        PHP
.190b66	48		pha						        PHA
.190b67	da		phx						        PHX
.190b68	e2 20		sep #$20	                SEP #$20        ; set A short
.190b6a	c2 10		rep #$10	                REP #$10        ; set X long
.190b6c	18		clc		                CLC
.190b6d	20 39 0c	jsr $190c39	                JSR Poll_Inbuf ;
.190b70	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.190b72	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.190b76	20 44 0c	jsr $190c44	                JSR Poll_Outbuf ;
.190b79	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.190b7d	c9 55		cmp #$55					        CMP #$55
.190b7f	f0 03		beq $190b84					        BEQ	passAAtest
.190b81	82 a5 00	brl $190c29	                BRL initkb_loop_out
.190b84	a2 03 14	ldx #$1403	passAAtest      LDX #<>pass_tst0xAAmsg
.190b87	22 7d 05 19	jsl $19057d	                JSL IPRINT      ; print Message
.190b8b	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.190b8d	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.190b91	20 44 0c	jsr $190c44	                JSR Poll_Outbuf ;
.190b94	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.190b98	c9 00		cmp #$00					        CMP #$00			;Should be 00
.190b9a	f0 03		beq $190b9f					        BEQ	passABtest
.190b9c	82 8a 00	brl $190c29	                BRL initkb_loop_out
.190b9f	a2 1c 14	ldx #$141c	passABtest      LDX #<>pass_tst0xABmsg
.190ba2	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print Message
.190ba6	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.190ba8	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190bac	20 39 0c	jsr $190c39	                JSR Poll_Inbuf ;
.190baf	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.190bb1	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190bb5	20 39 0c	jsr $190c39	                JSR Poll_Inbuf ;
.190bb8	a2 35 14	ldx #$1435	                LDX #<>pass_cmd0x60msg
.190bbb	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print Message
.190bbf	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.190bc1	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190bc5	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.190bc8	ca		dex		DLY_LOOP1       DEX
.190bc9	ea		nop		                NOP
.190bca	ea		nop		                NOP
.190bcb	ea		nop		                NOP
.190bcc	ea		nop		                NOP
.190bcd	ea		nop		                NOP
.190bce	ea		nop		                NOP
.190bcf	ea		nop		                NOP
.190bd0	ea		nop		                NOP
.190bd1	e0 00 00	cpx #$0000	                CPX #$0000
.190bd4	d0 f2		bne $190bc8	                BNE DLY_LOOP1
.190bd6	20 44 0c	jsr $190c44	                JSR Poll_Outbuf ;
.190bd9	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.190bdd	a2 49 14	ldx #$1449	                LDX #<>pass_cmd0xFFmsg
.190be0	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print Message
.190be4					DO_CMD_F4_AGAIN
.190be4	20 39 0c	jsr $190c39	                JSR Poll_Inbuf ;
.190be7	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.190be9	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.190bed	20 44 0c	jsr $190c44	                JSR Poll_Outbuf ;
.190bf0	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.190bf4	c9 fa		cmp #$fa	                CMP #$FA
.190bf6	d0 ec		bne $190be4	                BNE DO_CMD_F4_AGAIN
.190bf8	20 4f 0c	jsr $190c4f	                JSR INIT_MOUSE
.190bfb	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.190bff	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.190c01	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.190c05	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.190c09	29 01		and #$01	                AND #FNX1_INT00_KBD
.190c0b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.190c0f	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.190c13	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.190c15	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190c19	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.190c1d	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.190c1f	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190c23	a2 7f 14	ldx #$147f	                LDX #<>Success_kb_init
.190c26	38		sec		                SEC
.190c27	b0 03		bcs $190c2c	                BCS InitSuccess
.190c29	a2 91 14	ldx #$1491	initkb_loop_out LDX #<>Failed_kb_init
.190c2c	22 7d 05 19	jsl $19057d	InitSuccess     JSL IPRINT       ; print Message
.190c30	c2 20		rep #$20	                REP #$20        ; set A long
.190c32	c2 10		rep #$10	                REP #$10        ; set X long
.190c34	fa		plx		                PLX
.190c35	68		pla		                PLA
.190c36	28		plp						        PLP
.190c37	2b		pld						        PLD
.190c38	6b		rtl		                RTL
.190c39					Poll_Inbuf
.190c39	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.190c3d	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.190c3f	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.190c41	f0 f6		beq $190c39					        BEQ Poll_Inbuf
.190c43	60		rts		                RTS
.190c44					Poll_Outbuf
.190c44	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.190c48	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.190c4a	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.190c4c	d0 f6		bne $190c44	                BNE Poll_Outbuf
.190c4e	60		rts		                RTS
.190c4f					INIT_MOUSE
.190c4f	20 39 0c	jsr $190c39	                JSR Poll_Inbuf
.190c52	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.190c54	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190c58					DO_CMD_A9_AGAIN
.190c58	20 39 0c	jsr $190c39	                JSR Poll_Inbuf
.190c5b	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.190c5d	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190c61	20 44 0c	jsr $190c44	                JSR Poll_Outbuf ;
.190c64	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.190c68	c9 00		cmp #$00	                CMP #$00
.190c6a	d0 ec		bne $190c58	                BNE DO_CMD_A9_AGAIN
.190c6c	20 39 0c	jsr $190c39	                JSR Poll_Inbuf
.190c6f	a9 20		lda #$20	                LDA #$20
.190c71	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190c75	20 44 0c	jsr $190c44	                JSR Poll_Outbuf ;
.190c78	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.190c7c	09 02		ora #$02	                ORA #$02
.190c7e	48		pha		                PHA
.190c7f	20 39 0c	jsr $190c39	                JSR Poll_Inbuf
.190c82	a9 60		lda #$60	                LDA #$60
.190c84	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190c88	20 39 0c	jsr $190c39	                JSR Poll_Inbuf ;
.190c8b	68		pla		                PLA
.190c8c	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190c90	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.190c92	20 b5 0c	jsr $190cb5	                JSR MOUSE_WRITE
.190c95	20 c8 0c	jsr $190cc8	                JSR MOUSE_READ
.190c98	a9 e8		lda #$e8	                LDA #$E8
.190c9a	20 b5 0c	jsr $190cb5	                JSR MOUSE_WRITE
.190c9d	20 c8 0c	jsr $190cc8	                JSR MOUSE_READ
.190ca0	a9 00		lda #$00	                LDA #$00
.190ca2	20 b5 0c	jsr $190cb5	                JSR MOUSE_WRITE
.190ca5	20 c8 0c	jsr $190cc8	                JSR MOUSE_READ
.190ca8	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.190caa	20 b5 0c	jsr $190cb5	                JSR MOUSE_WRITE
.190cad	20 c8 0c	jsr $190cc8	                JSR MOUSE_READ
.190cb0	a9 00		lda #$00	                LDA #$00
.190cb2	85 e0		sta $e0		                STA MOUSE_PTR
.190cb4	60		rts		                RTS
.190cb5					MOUSE_WRITE
.190cb5	48		pha		                PHA
.190cb6	20 39 0c	jsr $190c39	                JSR Poll_Inbuf
.190cb9	a9 d4		lda #$d4	                LDA #$D4
.190cbb	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190cbf	20 39 0c	jsr $190c39	                JSR Poll_Inbuf
.190cc2	68		pla		                PLA
.190cc3	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190cc7	60		rts		                RTS
.190cc8					MOUSE_READ
.190cc8	20 44 0c	jsr $190c44	                JSR Poll_Outbuf ;
.190ccb	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.190ccf	60		rts		                RTS
.190cd0	48		pha		INITRTC         PHA
.190cd1	e2 20		sep #$20	                SEP #$20        ; set A short
.190cd3	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL
.190cd7	00		brk #		                BRK
.190cd8	c2 20		rep #$20	                REP #$20        ; set A long
.190cda	68		pla		                PLA
.190cdb	6b		rtl		                RTL
.190cdc	48		pha		ITESTSID        PHA
.190cdd	e2 20		sep #$20	                SEP #$20        ; set A short
.190cdf	a9 0f		lda #$0f	                LDA #$0F
.190ce1	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.190ce5	a9 be		lda #$be	                LDA #$BE
.190ce7	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.190ceb	a9 f8		lda #$f8	                LDA #$F8
.190ced	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.190cf1	a9 11		lda #$11	                LDA #$11
.190cf3	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.190cf7	a9 25		lda #$25	                LDA #$25
.190cf9	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.190cfd	a9 11		lda #$11	                LDA #$11
.190cff	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.190d03	c2 20		rep #$20	                REP #$20        ; set A long
.190d05	68		pla		                PLA
.190d06	6b		rtl		                RTL
.190d07	48		pha		IINITCODEC      PHA
.190d08	c2 20		rep #$20	                REP #$20        ; set A long
.190d0a	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190d0d	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190d11	a9 01 00	lda #$0001	                LDA #$0001
.190d14	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190d18	20 64 0d	jsr $190d64	                JSR CODEC_TRF_FINISHED
.190d1b	a9 03 2a	lda #$2a03	                LDA #%0010101000000011       ;R21 - Enable All the Analog In
.190d1e	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190d22	a9 01 00	lda #$0001	                LDA #$0001
.190d25	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190d29	20 64 0d	jsr $190d64	                JSR CODEC_TRF_FINISHED
.190d2c	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190d2f	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190d33	a9 01 00	lda #$0001	                LDA #$0001
.190d36	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190d3a	20 64 0d	jsr $190d64	                JSR CODEC_TRF_FINISHED
.190d3d	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190d40	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190d44	a9 01 00	lda #$0001	                LDA #$0001
.190d47	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190d4b	20 64 0d	jsr $190d64	                JSR CODEC_TRF_FINISHED
.190d4e	68		pla		                PLA
.190d4f	6b		rtl		                RTL
.190d50					IRESETCODEC
.190d50	c2 20		rep #$20	                REP #$20        ; set A long
.190d52	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190d55	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190d59	a9 01 00	lda #$0001	                LDA #$0001
.190d5c	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190d60	20 64 0d	jsr $190d64	                JSR CODEC_TRF_FINISHED
.190d63	6b		rtl		                RTL
.190d64					CODEC_TRF_FINISHED
.190d64	e2 20		sep #$20	                SEP #$20        ; set A short
.190d66	af 22 e8 af	lda $afe822	CODEC_LOOP      LDA CODEC_WR_CTRL
.190d6a	29 01		and #$01	                AND #$01
.190d6c	c9 01		cmp #$01	                CMP #$01
.190d6e	f0 f6		beq $190d66	                BEQ CODEC_LOOP
.190d70	c2 20		rep #$20	                REP #$20        ; set A long
.190d72	60		rts		                RTS
.190d73					IBM_FILL_SCREEN
.190d73	c2 30		rep #$30	                REP #$30        ; set A&X long
.190d75	a9 00 00	lda #$0000	                LDA #$0000
.190d78	a2 00 00	ldx #$0000	                LDX #$0000
.190d7b					BM_FILL_SCREEN_LOOPY
.190d7b	a0 00 00	ldy #$0000	                LDY #$0000
.190d7e	e2 20		sep #$20	                SEP #$20        ; set A short
.190d80					BM_FILL_SCREEN_LOOPX
.190d80	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190d82	c8		iny		                INY
.190d83	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190d85	d0 f9		bne $190d80	                BNE BM_FILL_SCREEN_LOOPX
.190d87	20 92 0d	jsr $190d92	                JSR BM_FILL_COMPUTE_Y_DST
.190d8a	e8		inx		                INX
.190d8b	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190d8d	d0 ec		bne $190d7b	                BNE BM_FILL_SCREEN_LOOPY
.190d8f	c2 30		rep #$30	                REP #$30        ; set A&X long
.190d91	6b		rtl		                RTL
.190d92					BM_FILL_COMPUTE_Y_DST
.190d92	c2 20		rep #$20	                REP #$20        ; set A long
.190d94	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190d96	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190d9a	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190d9c	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190da0	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190da3	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190da7	a9 00 00	lda #$0000	                LDA #$0000
.190daa	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dae	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190db2	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190db4	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190db8	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190dba	a9 00 00	lda #$0000	                LDA #$0000
.190dbd	60		rts		                RTS
.190dbe					IBMP_PARSER
.190dbe	c2 30		rep #$30	                REP #$30        ; set A&X long
.190dc0	a0 00 00	ldy #$0000	                LDY #$0000
.190dc3	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190dc5	c9 42 4d	cmp #$4d42	                CMP #$4D42
.190dc8	f0 03		beq $190dcd	                BEQ IBMP_PARSER_CONT
.190dca	82 04 01	brl $190ed1	                BRL BMP_PARSER_END_WITH_ERROR
.190dcd					IBMP_PARSER_CONT
.190dcd	a0 02 00	ldy #$0002	                LDY #$0002
.190dd0	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190dd2	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190dd6	a0 04 00	ldy #$0004	                LDY #$0004
.190dd9	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190ddb	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190ddf	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190de2	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190de6	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dea	18		clc		                CLC
.190deb	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190def	85 50		sta $50		                STA BMP_FILE_SIZE
.190df1	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190df5	85 52		sta $52		                STA BMP_FILE_SIZE+2
.190df7	a0 12 00	ldy #$0012	                LDY #$0012
.190dfa	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190dfc	85 40		sta $40		                STA BMP_X_SIZE
.190dfe	a0 16 00	ldy #$0016	                LDY #$0016
.190e01	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e03	85 42		sta $42		                STA BMP_Y_SIZE
.190e05	a0 2e 00	ldy #$002e	                LDY #$002E
.190e08	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e0a	0a		asl a		                ASL A; Multiply by 2
.190e0b	0a		asl a		                ASL A; Multiply by 2
.190e0c	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.190e0e	e0 00 00	cpx #$0000	                CPX #$0000
.190e11	d0 05		bne $190e18	                BNE BMP_LUT1_PICK
.190e13	20 d9 0e	jsr $190ed9	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.190e16	80 08		bra $190e20	                BRA DONE_TRANSFER_LUT;
.190e18					  BMP_LUT1_PICK
.190e18	e0 01 00	cpx #$0001	                CPX #$0001
.190e1b	d0 03		bne $190e20	                BNE BMP_LUT2_PICK
.190e1d	20 09 0f	jsr $190f09	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.190e20					  BMP_LUT2_PICK
.190e20					  DONE_TRANSFER_LUT
.190e20	a5 56		lda $56		                LDA BMP_POSITION_Y
.190e22	8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.190e26	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.190e28	8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.190e2c	af 04 01 00	lda $000104	                LDA @lM0_RESULT
.190e30	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e34	af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.190e38	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e3c	a5 54		lda $54		                LDA BMP_POSITION_X
.190e3e	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.190e42	a9 00 00	lda #$0000	                LDA #$0000
.190e45	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e49	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.190e4d	85 f0		sta $f0		                STA USER_TEMP
.190e4f	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.190e53	85 f2		sta $f2		                STA USER_TEMP+2
.190e55	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190e57	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e5b	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190e5d	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e61	a5 f0		lda $f0		                LDA USER_TEMP
.190e63	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.190e67	a5 f2		lda $f2		                LDA USER_TEMP+2
.190e69	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.190e6d	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.190e71	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190e73	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.190e77	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190e79	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.190e7b	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190e7f	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.190e81	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190e85	a5 50		lda $50		                LDA BMP_FILE_SIZE
.190e87	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190e8b	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.190e8d	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e91	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190e95	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190e97	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190e9b	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190e9d	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190e9f	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190ea3	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190ea5	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190ea9	18		clc		                CLC
.190eaa	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.190eac	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.190eaf	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.190eb2	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.190eb6	a9 ff ff	lda #$ffff	                LDA #$FFFF
.190eb9	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.190ebd	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ec1	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190ec3	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ec7	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190ec9	20 39 0f	jsr $190f39	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.190ecc	a2 ef 14	ldx #$14ef	                LDX #<>bmp_parser_msg0
.190ecf	80 03		bra $190ed4	                BRA BMP_PARSER_END_NO_ERROR
.190ed1					BMP_PARSER_END_WITH_ERROR
.190ed1	a2 db 14	ldx #$14db	                LDX #<>bmp_parser_err0
.190ed4					BMP_PARSER_END_NO_ERROR
.190ed4	22 7d 05 19	jsl $19057d	                JSL IPRINT       ; print the first line
.190ed8	6b		rtl		                RTL
.190ed9					BMP_PARSER_UPDATE_LUT0
.190ed9	38		sec		                SEC
.190eda	a0 7a 00	ldy #$007a	                LDY #$007A
.190edd	a2 00 00	ldx #$0000	                LDX #$0000
.190ee0	e2 20		sep #$20	                SEP #$20        ; set A short
.190ee2					BMP_PARSER_UPDATE_LOOP
.190ee2	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190ee4	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.190ee8	c8		iny		                INY
.190ee9	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190eeb	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.190eef	c8		iny		                INY
.190ef0	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190ef2	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.190ef6	c8		iny		                INY
.190ef7	a9 80		lda #$80	                LDA #$80
.190ef9	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.190efd	c8		iny		                INY ; For the Alpha Value, nobody cares
.190efe	e8		inx		                INX
.190eff	e8		inx		                INX
.190f00	e8		inx		                INX
.190f01	e8		inx		                INX
.190f02	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f04	d0 dc		bne $190ee2	                BNE BMP_PARSER_UPDATE_LOOP
.190f06	c2 20		rep #$20	                REP #$20        ; set A long
.190f08	60		rts		                RTS
.190f09					BMP_PARSER_UPDATE_LUT1
.190f09	38		sec		                SEC
.190f0a	a0 36 00	ldy #$0036	                LDY #$0036
.190f0d	a2 00 00	ldx #$0000	                LDX #$0000
.190f10	e2 20		sep #$20	                SEP #$20        ; set A short
.190f12					PALETTE_LUT1_LOOP
.190f12	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190f14	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.190f18	c8		iny		                INY
.190f19	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190f1b	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.190f1f	c8		iny		                INY
.190f20	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190f22	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f26	c8		iny		                INY
.190f27	a9 80		lda #$80	                LDA #$80
.190f29	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f2d	c8		iny		                INY ; For the Alpha Value, nobody cares
.190f2e	e8		inx		                INX
.190f2f	e8		inx		                INX
.190f30	e8		inx		                INX
.190f31	e8		inx		                INX
.190f32	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f34	d0 dc		bne $190f12	                BNE PALETTE_LUT1_LOOP
.190f36	c2 20		rep #$20	                REP #$20        ; set A long
.190f38	60		rts		                RTS
.190f39					BMP_PARSER_DMA_SHIT_OUT
.190f39	a2 00 00	ldx #$0000	                LDX #$0000
.190f3c					BMP_PARSER_LOOPY
.190f3c	a0 00 00	ldy #$0000	                LDY #$0000
.190f3f	e2 20		sep #$20	                SEP #$20        ; set A short
.190f41					BMP_PARSER_LOOPX
.190f41	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.190f43	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190f45	c8		iny		                INY
.190f46	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.190f48	d0 f7		bne $190f41	                BNE BMP_PARSER_LOOPX
.190f4a	20 56 0f	jsr $190f56	                JSR BMP_PARSER_COMPUTE_Y_SRC
.190f4d	20 71 0f	jsr $190f71	                JSR BMP_PARSER_COMPUTE_Y_DST
.190f50	e8		inx		                INX
.190f51	e4 42		cpx $42		                CPX BMP_Y_SIZE
.190f53	d0 e7		bne $190f3c	                BNE BMP_PARSER_LOOPY
.190f55	60		rts		                RTS
.190f56					BMP_PARSER_COMPUTE_Y_SRC
.190f56	c2 20		rep #$20	                REP #$20        ; set A long
.190f58	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190f5a	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190f5e	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190f60	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190f64	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190f68	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190f6a	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190f6e	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190f70	60		rts		                RTS
.190f71					BMP_PARSER_COMPUTE_Y_DST
.190f71	c2 20		rep #$20	                REP #$20        ; set A long
.190f73	18		clc		                CLC
.190f74	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190f76	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.190f78	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190f7a	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190f7c	69 00 00	adc #$0000	                ADC #$0000
.190f7f	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190f81	60		rts		                RTS
.190f82	00		brk #		IRESTORE        BRK ; Warm boot routine
.190f83	00		brk #		ISCINIT         BRK ;
.190f84	00		brk #		IIOINIT         BRK ;
.190f85	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.190f86	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.190f87	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.190f88	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.190f89	00		brk #		ICLOSE          BRK ; Close a channel
.190f8a	00		brk #		ISETIN          BRK ; Set the current input channel
.190f8b	00		brk #		ISETOUT         BRK ; Set the current output channel
.190f8c	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.190f8d	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.190f8e	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.190f8f	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.190f90	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.190f91	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.190f92	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.190f93	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.190f94	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.190f95	00		brk #		IPRINTF         BRK ; Print a float value
.190f96	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.190f97	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.190f98	00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.190f99	00		brk #		IPUSHKEY        BRK ;
.190f9a	00		brk #		IPUSHKEYS       BRK ;
.190f9b	00		brk #		ICSRLEFT        BRK ;
.190f9c	00		brk #		ICSRHOME        BRK ;
.190f9d	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.190f9e	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.190f9f					KERNEL_DATA
>190f9f	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, "C256 FOENIX DEVELOPMENT SYSTEM",$0D
>190fa7	0b 0c 0b 0c 0b 0c 43 32 35 36 20 46 4f 45 4e 49
>190fb7	58 20 44 45 56 45 4c 4f 50 4d 45 4e 54 20 53 59
>190fc7	53 54 45 4d 0d
>190fcc	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "May the Power of the 65C816 Bring You Joy!",$0D
>190fd4	0c 0b 0c 0b 0c 20 4d 61 79 20 74 68 65 20 50 6f
>190fe4	77 65 72 20 6f 66 20 74 68 65 20 36 35 43 38 31
>190ff4	36 20 42 72 69 6e 67 20 59 6f 75 20 4a 6f 79 21
>191004	0d
>191005	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, "System Designed by: Stefany Allaire",$0D
>19100d	0b 0c 0b 0c 20 20 53 79 73 74 65 6d 20 44 65 73
>19101d	69 67 6e 65 64 20 62 79 3a 20 53 74 65 66 61 6e
>19102d	79 20 41 6c 6c 61 69 72 65 0d
>191037	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, $20, "www.c256foenix.com",$0D
>19103f	0c 0b 0c 20 20 20 77 77 77 2e 63 32 35 36 66 6f
>19104f	65 6e 69 78 2e 63 6f 6d 0d
>191058	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, $20, $20, "2048KB CODE RAM  4096K VIDEO MEM",$0D, $00
>191060	0b 0c 20 20 20 20 32 30 34 38 4b 42 20 43 4f 44
>191070	45 20 52 41 4d 20 20 34 30 39 36 4b 20 56 49 44
>191080	45 4f 20 4d 45 4d 0d 00
.191088					old_pc_style_stat
>191088	d6 c4 c4 c4 c4 c4 c4 c4		                .text $D6, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C2
>191090	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1910a0	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c2
>1910ac	c4 c4 c4 c4 c4 c4 c4 c4		                .text      $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $B7, $0D
>1910b4	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1910c4	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 b7 0d
>1910d0	ba 20 4d 61 69 6e 20 50		                .text $BA, " Main Processor     : 65C816      ",$B3," Base Memory Size     : 2048K     ",$BA, $0D
>1910d8	72 6f 63 65 73 73 6f 72 20 20 20 20 20 3a 20 36
>1910e8	35 43 38 31 36 20 20 20 20 20 20 b3 20 42 61 73
>1910f8	65 20 4d 65 6d 6f 72 79 20 53 69 7a 65 20 20 20
>191108	20 20 3a 20 32 30 34 38 4b 20 20 20 20 20 ba 0d
>191118	ba 20 4e 75 6d 65 72 69		                .text $BA, " Numeric Processor  : CFP9518     ",$B3," Video Memory Size    : 4096K     ",$BA, $0D
>191120	63 20 50 72 6f 63 65 73 73 6f 72 20 20 3a 20 43
>191130	46 50 39 35 31 38 20 20 20 20 20 b3 20 56 69 64
>191140	65 6f 20 4d 65 6d 6f 72 79 20 53 69 7a 65 20 20
>191150	20 20 3a 20 34 30 39 36 4b 20 20 20 20 20 ba 0d
>191160	ba 20 46 6c 6f 70 70 79		                .text $BA, " Floppy Driver A:   : Yes         ",$B3," Hard Disk C: Type    : None      ",$BA, $0D
>191168	20 44 72 69 76 65 72 20 41 3a 20 20 20 3a 20 59
>191178	65 73 20 20 20 20 20 20 20 20 20 b3 20 48 61 72
>191188	64 20 44 69 73 6b 20 43 3a 20 54 79 70 65 20 20
>191198	20 20 3a 20 4e 6f 6e 65 20 20 20 20 20 20 ba 0d
>1911a8	ba 20 53 44 43 61 72 64		                .text $BA, " SDCard Card Reader : Yes         ",$B3," Serial Port(s)       : $AF:13F8, ",$BA, $0D
>1911b0	20 43 61 72 64 20 52 65 61 64 65 72 20 3a 20 59
>1911c0	65 73 20 20 20 20 20 20 20 20 20 b3 20 53 65 72
>1911d0	69 61 6c 20 50 6f 72 74 28 73 29 20 20 20 20 20
>1911e0	20 20 3a 20 24 41 46 3a 31 33 46 38 2c 20 ba 0d
>1911f0	ba 20 44 69 73 70 6c 61		                .text $BA, " Display Type       : VGA         ",$B3,"                        $AF:12F8  ",$BA, $0D
>1911f8	79 20 54 79 70 65 20 20 20 20 20 20 20 3a 20 56
>191208	47 41 20 20 20 20 20 20 20 20 20 b3 20 20 20 20
>191218	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>191228	20 20 20 20 24 41 46 3a 31 32 46 38 20 20 ba 0d
>191238	ba 20 46 6f 65 6e 69 78		                .text $BA, " Foenix Kernel Date : 051719      ",$B3," Parallel Ports(s)    : $AF:1378  ",$BA, $0D
>191240	20 4b 65 72 6e 65 6c 20 44 61 74 65 20 3a 20 30
>191250	35 31 37 31 39 20 20 20 20 20 20 b3 20 50 61 72
>191260	61 6c 6c 65 6c 20 50 6f 72 74 73 28 73 29 20 20
>191270	20 20 3a 20 24 41 46 3a 31 33 37 38 20 20 ba 0d
>191280	ba 20 4b 65 79 62 6f 61		                .text $BA, " Keyboard Type      : PS2         ",$B3," Sound Chip Installed : OPL2(2)   ",$BA, $0D
>191288	72 64 20 54 79 70 65 20 20 20 20 20 20 3a 20 50
>191298	53 32 20 20 20 20 20 20 20 20 20 b3 20 53 6f 75
>1912a8	6e 64 20 43 68 69 70 20 49 6e 73 74 61 6c 6c 65
>1912b8	64 20 3a 20 4f 50 4c 32 28 32 29 20 20 20 ba 0d
>1912c8	d3 c4 c4 c4 c4 c4 c4 c4		                .text $D3, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C1
>1912d0	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1912e0	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c1
>1912ec	c4 c4 c4 c4 c4 c4 c4 c4		                .text      $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $BD, $00
>1912f4	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>191304	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 bd 00
>191310	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>191318	4d 4d 2d 2d 5d 5d
>19131e	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D
>191326	4d 2d 2d 5d 5d 5d
>19132c	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D
>191334	2d 2d 5d 5d 5d 5d
>19133a	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D, $5D
>191342	2d 5d 5d 5d 5d 5d
>191348	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D, $5D, $5D
>191350	5d 5d 5d 5d 5d 5d
>191356	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>19135a	00 00 80 ff			                .text $00, $00, $80, $FF
>19135e	00 80 00 ff			                .text $00, $80, $00, $FF
>191362	80 00 00 ff			                .text $80, $00, $00, $FF
>191366	00 80 80 ff			                .text $00, $80, $80, $FF
>19136a	80 80 00 ff			                .text $80, $80, $00, $FF
>19136e	80 00 80 ff			                .text $80, $00, $80, $FF
>191372	80 80 80 ff			                .text $80, $80, $80, $FF
>191376	00 45 ff ff			                .text $00, $45, $FF, $FF
>19137a	13 45 8b ff			                .text $13, $45, $8B, $FF
>19137e	00 00 20 ff			                .text $00, $00, $20, $FF
>191382	00 20 00 ff			                .text $00, $20, $00, $FF
>191386	20 00 00 ff			                .text $20, $00, $00, $FF
>19138a	20 20 20 ff			                .text $20, $20, $20, $FF
>19138e	40 40 40 ff			                .text $40, $40, $40, $FF
>191392	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>191396	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>19139a	00 00 80 ff			                .text $00, $00, $80, $FF
>19139e	00 80 00 ff			                .text $00, $80, $00, $FF
>1913a2	80 00 00 ff			                .text $80, $00, $00, $FF
>1913a6	00 20 20 ff			                .text $00, $20, $20, $FF
>1913aa	20 20 00 ff			                .text $20, $20, $00, $FF
>1913ae	20 00 20 ff			                .text $20, $00, $20, $FF
>1913b2	20 20 20 ff			                .text $20, $20, $20, $FF
>1913b6	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>1913ba	13 45 8b ff			                .text $13, $45, $8B, $FF
>1913be	00 00 20 ff			                .text $00, $00, $20, $FF
>1913c2	00 20 00 ff			                .text $00, $20, $00, $FF
>1913c6	40 00 00 ff			                .text $40, $00, $00, $FF
>1913ca	10 10 10 ff			                .text $10, $10, $10, $FF
>1913ce	40 40 40 ff			                .text $40, $40, $40, $FF
>1913d2	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>1913d6	0d 44 65 62 75 67 20 43		version_msg     .text $0D, "Debug Code Version 0.0.0 - March 26th, 2019", $00
>1913de	6f 64 65 20 56 65 72 73 69 6f 6e 20 30 2e 30 2e
>1913ee	30 20 2d 20 4d 61 72 63 68 20 32 36 74 68 2c 20
>1913fe	32 30 31 39 00
>191403	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>19140b	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>19141b	00
>19141c	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>191424	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>191434	00
>191435	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>19143d	20 45 78 65 63 75 74 65 64 2e 0d 00
>191449	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>191451	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>191461	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>191469	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>191479	64 2e 2e 2e 0d 00
>19147f	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>191487	20 50 72 65 73 65 6e 74 0d 00
>191491	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>191499	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>1914a9	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>1914b9	5b 49 52 51 20 49 6e 74		irq_Msg         .text "[IRQ Interrupt]", $0D, $00
>1914c1	65 72 72 75 70 74 5d 0d 00
>1914ca	5b 4e 4d 49 20 49 6e 74		nmi_Msg         .text "[NMI Interrupt]", $0D, $00
>1914d2	65 72 72 75 70 74 5d 0d 00
>1914db	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>1914e3	54 55 52 45 20 46 4f 55 4e 44 2e 00
>1914ef	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>1914f7	45 44 2e 00
>1914fb	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>191503	47 20 42 4d 50 20 50 41 52 53 45 52 00
>191510	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>191518	47 20 30 32 30 30 30 30		hello_ml        .null "G 020000",$0D
>191520	0d 00
>191522	48 45 4c 4c 4f 20 57 4f		                .null "HELLO WORLD",$0D
>19152a	52 4c 44 0d 00
>19152f	0d 00				                .null $0D
>191531	20 50 43 20 20 20 20 20		                .null " PC     A    X    Y    SP   DBR DP   NVMXDIZC",$0D
>191539	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>191549	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>191559	58 44 49 5a 43 0d 00
>191560	3b 30 30 32 31 31 32 20		                .null ";002112 0019 F0AA 0000 D6FF F8  0000 --M-----"
>191568	30 30 31 39 20 46 30 41 41 20 30 30 30 30 20 44
>191578	36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 4d
>191588	2d 2d 2d 2d 2d 00
>19158e	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>191596	52 4f 52 00
>19159a	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>1915a2	38 39 41 42 43 44 45 46 00
>1915ab					.align 256
>191600	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191608	37 38 39 30 2d 3d 08 09
>191610	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191618	6f 70 5b 5d 0d 00 61 73
>191620	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191628	27 60 00 5c 7a 78 63 76
>191630	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191638	00 20 00 00 00 00 00 00
>191640	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191648	00 00 00 00 00 00 00 00
>191650	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191658	00 00 00 00 00 00 00 00
>191660	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191668	00 00 00 00 00 00 00 00
>191670	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191678	00 00 00 00 00 00 00 00
>191680	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>191688	26 2a 28 29 5f 2b 08 09
>191690	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>191698	4f 50 7b 7d 0d 00 41 53
>1916a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>1916a8	22 7e 00 5c 5a 58 43 56
>1916b0	42 4e 4d 3c 3e 3f 00 2a		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1916b8	00 20 00 00 00 00 00 00
>1916c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1916c8	00 00 00 00 00 00 00 00
>1916d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1916d8	00 00 00 00 00 00 00 00
>1916e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1916e8	00 00 00 00 00 00 00 00
>1916f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1916f8	00 00 00 00 00 00 00 00
>191700	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191708	37 38 39 30 2d 3d 08 09
>191710	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191718	6f 70 5b 5d 0d 00 61 73
>191720	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191728	27 60 00 5c 7a 78 63 76
>191730	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191738	00 20 00 00 00 00 00 00
>191740	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191748	00 00 00 00 00 00 00 00
>191750	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191758	00 00 00 00 00 00 00 00
>191760	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191768	00 00 00 00 00 00 00 00
>191770	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191778	00 00 00 00 00 00 00 00
>191780	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191788	37 38 39 30 2d 3d 08 09
>191790	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191798	6f 70 5b 5d 0d 00 61 73
>1917a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>1917a8	27 60 00 5c 7a 78 63 76
>1917b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1917b8	00 20 00 00 00 00 00 00
>1917c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1917c8	00 00 00 00 00 00 00 00
>1917d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1917d8	00 00 00 00 00 00 00 00
>1917e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1917e8	00 00 00 00 00 00 00 00
>1917f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1917f8	00 00 00 00 00 00 00 00
>191800	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191808	37 38 39 30 2d 3d 08 09
>191810	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191818	6f 70 5b 5d 0d 00 61 73
>191820	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191828	27 60 00 5c 7a 78 63 76
>191830	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191838	00 20 00 00 00 00 00 00
>191840	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191848	00 00 00 00 00 00 00 00
>191850	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191858	00 00 00 00 00 00 00 00
>191860	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191868	00 00 00 00 00 00 00 00
>191870	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191878	00 00 00 00 00 00 00 00
>191880					.align 256
>191900	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>191908	34 37 3a 3d 3f 41 44 46
>191910	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>191918	57 58 5a 5b 5d 5e 60 61
>191920	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>191928	6d 6f 70 71 72 73 75 76
>191930	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>191938	80 81 82 83 84 85 86 87
>191940	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>191948	8f 90 91 92 93 93 94 95
>191950	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>191958	9d 9e 9e 9f a0 a1 a2 a2
>191960	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>191968	a9 aa ab ab ac ad ae ae
>191970	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>191978	b5 b5 b6 b7 b7 b8 b9 b9
>191980	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>191988	bf c0 c0 c1 c2 c2 c3 c4
>191990	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>191998	c9 ca ca cb cb cc cd cd
>1919a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>1919a8	d2 d3 d4 d4 d5 d5 d6 d6
>1919b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>1919b8	db dc dc dd de de df df
>1919c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>1919c8	e4 e4 e5 e5 e6 e6 e7 e7
>1919d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>1919d8	ec ec ed ed ee ee ef ef
>1919e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>1919e8	f4 f4 f5 f5 f6 f6 f7 f7
>1919f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>1919f8	fb fc fc fd fd fe fe ff
>191a00					.align 256
>191a00	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>191a08	25 27 2a 2c 2e 30 32 34
>191a10	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>191a18	44 46 47 49 4a 4c 4d 4f
>191a20	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>191a28	5b 5c 5d 5e 60 61 62 63
>191a30	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>191a38	6d 6e 70 71 72 73 74 75
>191a40	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>191a48	7e 7f 80 81 82 83 84 84
>191a50	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>191a58	8d 8e 8e 8f 90 91 92 93
>191a60	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>191a68	9a 9b 9c 9d 9e 9f 9f a0
>191a70	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>191a78	a7 a8 a9 aa aa ab ac ad
>191a80	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>191a88	b3 b4 b5 b6 b6 b7 b8 b8
>191a90	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>191a98	bf bf c0 c1 c2 c2 c3 c4
>191aa0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>191aa8	ca ca cb cc cc cd ce ce
>191ab0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>191ab8	d4 d5 d6 d6 d7 d7 d8 d9
>191ac0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>191ac8	de df e0 e0 e1 e1 e2 e3
>191ad0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>191ad8	e8 e9 e9 ea ea eb ec ec
>191ae0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>191ae8	f1 f2 f3 f3 f4 f4 f5 f5
>191af0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>191af8	fb fb fc fc fd fd fe ff
>191b00					.align 256
>191b00	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>191b08	83 dd ce 39 cd c5 3b 15
>191b10	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>191b18	87 12 31 65 89 27 88 42
>191b20	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>191b28	94 ce 56 ec fe da 58 c9
>191b30	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>191b38	d0 10 2c b2 4b ea 32 61
>191b40	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>191b48	a1 e6 ca 2d b3 ce b0 79
>191b50	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>191b58	5f e3 fb bd 15 2e be f5
>191b60	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>191b68	8d 8f 2c 80 0a 5e 99 36
>191b70	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>191b78	13 52 44 2f e3 ef 44 a2
>191b80	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>191b88	be 23 02 58 0a 52 5e b4
>191b90	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>191b98	d5 cf 3e df c4 9e da bb
>191ba0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>191ba8	77 7d b1 3b 4a 68 35 6e
>191bb0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>191bb8	b5 8f 44 63 55 6f e1 50
>191bc0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>191bc8	57 74 b9 bd 05 14 50 eb
>191bd0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>191bd8	44 bc ec db 22 58 fc be
>191be0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>191be8	24 aa 82 11 5c 9f 43 4d
>191bf0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>191bf8	3e 3d 66 7e 0a 1c 6b 74
>191c00					.align 16
>191c00	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>191c08	01 01 01 00 00 00 00 00
>191c10	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>191c18	ff ff ff 01 00 00 00 00
>191c20	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>191c28	01 55 ff ff 01 00 00 00
>191c30	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>191c38	ff ff ff ff 01 00 00 00
>191c40	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>191c48	ff ff 01 ff ff 01 00 00
>191c50	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>191c58	01 ff ff 01 ff 01 00 00
>191c60	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>191c68	ff 01 ff ff ff 01 00 00
>191c70	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>191c78	ff ff ff ff ff 01 01 00
>191c80	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>191c88	ff ff ff ff 01 ff ff 01
>191c90	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>191c98	ff ff ff ff ff ff ff 01
>191ca0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>191ca8	55 55 01 ff ff 55 01 00
>191cb0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>191cb8	01 01 55 ff 55 01 00 00
>191cc0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>191cc8	01 55 55 55 01 00 00 00
>191cd0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>191cd8	01 55 55 01 00 00 00 00
>191ce0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>191ce8	00 01 01 00 00 00 00 00
>191cf0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>191cf8	00 00 00 00 00 00 00 00
.1ff000					FONT_4_BANK0
>1ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1ff7f8	00 00 00 00 00 00 00 00
.1ff800					FONT_4_BANK1
>1ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>1ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>1ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>1ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>1ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>1ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>1ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>1ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>1ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>1ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>1ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>1ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>1ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>1ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>1ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>1ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>1ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>1ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>1ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>1ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>1ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>1ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>1ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>1ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>1ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>1ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>1ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>1ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>1ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>1ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>1ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>1ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>1ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>1ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>1ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>1ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>1ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>1ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>1ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>1ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>1ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>1ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>1ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>1ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>1ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>1ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>1ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>1ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>1ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>1ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>1ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>1ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>1ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>1ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>1ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>1ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>1ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>1ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>1ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>1ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>1ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>1ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>1ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>1ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>1ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>1ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>1ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>1ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>1ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>1ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>1ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>1ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>1ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>1ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>1ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>1ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>1ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>1ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>1ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>1ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>1ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>1ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>1ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>1ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>1ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>1ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>1ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>1ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>1ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>1ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>1ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>1ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>1ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>1ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>1ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>1ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>1ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>1ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>1ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>1ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>1ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>1ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>1ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>1ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>1ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>1ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>1ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>1ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>1ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>1fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>1fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>1fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>1fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>1fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>1fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>1fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>1fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>1fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>1fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>1fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>1fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>1fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>1fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>1fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>1ffff8	00 00 00 00 00 00 00 00

;******  End of listing
