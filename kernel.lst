
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass --m65816 --long-address --flat -b -o kernel.bin --list kernel.lst kernel.asm
; Sun Jun 09 13:20:10 2019

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm


;******  Processing file: macros_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: simulator_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					unused_0000      = $000000 ;12 Bytes unused
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020					CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					CMD_PARSER_TMPX  = $000040 ; <<< Command Parser 2Bytes
=$000042					CMD_PARSER_TMPY  = $000042 ; <<< Command Parser 2Bytes
=$000044					CMD_LIST_PTR     = $000044 ; <<< Command Parser 3 Bytes
=$000048					CMD_PARSER_PTR   = $000048 ; <<< Command Parser 3 Bytes
=$00004b					CMD_ATTRIBUTE    = $00004B ; <<< Command Parser 2 Bytes (16bits Attribute Field)
=$00004d					CMD_EXEC_ADDY    = $00004D ; <<< Command Parser 3 Bytes 24 Bits Address Jump to execute the Command
=$000050					KEY_BUFFER_RPOS  = $000050 ;
=$000052					KEY_BUFFER_WPOS  = $000052 ;
=$000054					CMD_VARIABLE_TMP = $000054
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$0000d0					KERNEL_TEMP      = $0000D0 ;32 Bytes Temp space for kernel
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100					MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100					M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102					M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104					M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108					MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108					M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a					M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c					M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108					DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108					D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a					D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c					D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e					D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110					DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110					D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112					D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114					D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116					D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120					ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$01						FNX0_INT00_ALLONE = $01  ; Not Used - Always 1
=$02						FNX0_INT01_SOF    = $02  ;Start of Frame @ 60FPS
=$04						FNX0_INT02_SOL    = $04  ;Start of Line (Programmable)
=$08						FNX0_INT03_TMR0   = $08  ;Timer 0 Interrupt
=$10						FNX0_INT04_TMR1   = $10  ;Timer 1 Interrupt
=$20						FNX0_INT05_TMR2   = $20  ;Timer 2 Interrupt
=$40						FNX0_INT06_RTC    = $40  ;Real-Time Clock Interrupt
=$80						FNX0_INT07_FDC    = $80  ;Floppy Disk Controller
=$01						FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04						FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08						FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT    = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01						FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02						FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04						FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08						FNX2_INT03_SDMA   = $08  ;System DMA
=$10						FNX2_INT04_VDMA   = $10  ;Video DMA
=$20						FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40						FNX2_INT06_EXT    = $40  ;External Expansion
=$80						FNX2_INT07_ALLONE = $80  ; Not Used - Always 1
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$0001ff					VECTOR_STATE     = $0001FF ;1 Byte  Interrupt Vector State. See VECTOR_STATE_ENUM
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320					SDOS_BLOCK_BEGIN = $000320 ;
=$000324					SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328					SDOS_FILE_SIZE   = $000328 ;
=$00032c					SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330					SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334					SDOS_BYTE_PTR    = $000334
=$000380					SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400					SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff					SDOS_BLK_END     = $0006FF ;
=$000700					CURRUART         = $000700 ; 24-bit pointer to the current UART
=$000e00					STEF_BLOB_BEGIN  = $000E00 ; Temp Buffer for Testing
=$000eff					STEF_BLOB_END    = $000EFF ;
=$001000					TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$18ff00					ISR_BEGIN        = $18FF00 ; Byte  Beginning of CPU vectors in Direct page
=$18ff00					HRESET           = $18FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$18ff10					HCOP             = $18FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$18ff20					HBRK             = $18FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$18ff30					HABORT           = $18FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$18ff40					HNMI             = $18FF40 ;32 Bytes Handle NMI
=$18ff60					HIRQ             = $18FF60 ;32 Bytes Handle IRQ
=$18ff80					Unused_FF80      = $18FF80 ;End of direct page Interrrupt handlers
=$18ffe0					VECTORS_BEGIN    = $18FFE0 ;0 Byte  Interrupt vectors
=$00ffe0					JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4					VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6					VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8					VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea					VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec					VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee					VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0					RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4					VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6					VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8					VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa					VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc					VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe					VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$200000					VECTORS_END      = $200000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: kernel.asm


;******  Processing file: page_00_data.asm

>180000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003		48 00				                .word 72            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005		80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007		34 00				                .word 52            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: kernel.asm


;******  Processing file: page_00_code.asm

.18ff00		18		clc		RHRESET         CLC
.18ff01		fb		xce		                XCE
.18ff02		5c 00 00 19	jmp $190000	                JML BOOT
.18ff10						RHCOP
.18ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff12		8b		phb		                PHB
.18ff13		0b		phd		                PHD
.18ff14		48		pha		                PHA
.18ff15		da		phx		                PHX
.18ff16		5a		phy		                PHY
.18ff17		5c 08 00 19	jmp $190008	                JML BREAK
.18ff20						RHBRK
.18ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff22		8b		phb		                PHB
.18ff23		0b		phd		                PHD
.18ff24		48		pha		                PHA
.18ff25		da		phx		                PHX
.18ff26		5a		phy		                PHY
.18ff27		5c 08 00 19	jmp $190008	                JML BREAK
.18ff30						RHABORT
.18ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff32		8b		phb		                PHB
.18ff33		0b		phd		                PHD
.18ff34		48		pha		                PHA
.18ff35		da		phx		                PHX
.18ff36		5a		phy		                PHY
.18ff37		5c 08 00 19	jmp $190008	                JML BREAK
.18ff40						 RHNMI
.18ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff42		8b		phb		                PHB
.18ff43		0b		phd		                PHD
.18ff44		48		pha		                PHA
.18ff45		da		phx		                PHX
.18ff46		5a		phy		                PHY
.18ff47		22 87 12 19	jsl $191287	                JSL NMI_HANDLER
.18ff4b		7a		ply		                PLY
.18ff4c		fa		plx		                PLX
.18ff4d		68		pla		                PLA
.18ff4e		2b		pld		                PLD
.18ff4f		ab		plb		                PLB
.18ff50		40		rti		                RTI
.18ff60						RHIRQ
.18ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff62		8b		phb		                PHB
.18ff63		0b		phd		                PHD
.18ff64		48		pha		                PHA
.18ff65		da		phx		                PHX
.18ff66		5a		phy		                PHY
.18ff67		22 8d 11 19	jsl $19118d	                JSL IRQ_HANDLER
.18ff6b		7a		ply		                PLY
.18ff6c		fa		plx		                PLX
.18ff6d		68		pla		                PLA
.18ff6e		2b		pld		                PLD
.18ff6f		ab		plb		                PLB
.18ff70		40		rti		                RTI
.18ffe0		5c 68 50 19	jmp $195068	JUMP_READY      JML IMREADY     ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>18ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>18ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>18ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>18ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>18ffec		00 00				                .word $0000    ; FFEC
>18ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.18fff0		5c ca 07 19	jmp $1907ca	RRETURN         JML IRETURN
>18fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>18fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>18fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>18fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>18fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>18fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: kernel.asm


;******  Processing file: Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: kernel.asm


;******  Processing file: interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;

;******  Return to file: kernel.asm


;******  Processing file: dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: kernel.asm


;******  Processing file: vicky_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H	      = $AF0001
=$af0002					VKY_RESERVED_00         = $AF0002
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B  = $AF0005
=$af0006					BORDER_COLOR_G = $AF0006
=$af0007					BORDER_COLOR_R  = $AF0007
=$af0008					BORDER_X_SIZE        = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE        = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_RESERVED        = $AF0011   ;Not in Use
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F
=$01						TILE_Enable             = $01
=$02						TILE_LUT0               = $02
=$04						TILE_LUT1               = $04
=$08						TILE_LUT2               = $08
=$80						TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100					TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101					TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102					TL0_START_ADDY_M        = $AF0102
=$af0103					TL0_START_ADDY_H        = $AF0103
=$af0104					TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105					TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106					TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107					TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108					TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109					TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a					TL1_START_ADDY_M        = $AF010A
=$af010b					TL1_START_ADDY_H        = $AF010B
=$af010c					TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d					TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e					TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f					TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110					TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111					TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112					TL2_START_ADDY_M        = $AF0112
=$af0113					TL2_START_ADDY_H        = $AF0113
=$af0114					TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115					TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116					TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117					TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118					TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119					TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a					TL3_START_ADDY_M        = $AF011A
=$af011b					TL3_START_ADDY_H        = $AF011B
=$af011c					TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d					TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e					TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f					TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140					BM_CONTROL_REG          = $AF0140
=$af0141					BM_START_ADDY_L         = $AF0141
=$af0142					BM_START_ADDY_M         = $AF0142
=$af0143					BM_START_ADDY_H         = $AF0143
=$af0144					BM_X_SIZE_L             = $AF0144
=$af0145					BM_X_SIZE_H             = $AF0145
=$af0146					BM_Y_SIZE_L             = $AF0146
=$af0147					BM_Y_SIZE_H             = $AF0147
=$af0148					BM_RESERVED_0           = $AF0148
=$af0149					BM_RESERVED_1           = $AF0149
=$af014a					BM_RESERVED_2           = $AF014A
=$af014b					BM_RESERVED_3           = $AF014B
=$af014c					BM_RESERVED_4           = $AF014C
=$af014d					BM_RESERVED_5           = $AF014D
=$af014e					BM_RESERVED_6           = $AF014E
=$af014f					BM_RESERVED_7           = $AF014F
=$01						SPRITE_Enable             = $01
=$02						SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04						SPRITE_LUT1               = $04
=$08						SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10						SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20						SPRITE_DEPTH1             = $20
=$40						SPRITE_DEPTH2             = $40
=$af0200					SP00_CONTROL_REG        = $AF0200
=$af0201					SP00_ADDY_PTR_L         = $AF0201
=$af0202					SP00_ADDY_PTR_M         = $AF0202
=$af0203					SP00_ADDY_PTR_H         = $AF0203
=$af0204					SP00_X_POS_L            = $AF0204
=$af0205					SP00_X_POS_H            = $AF0205
=$af0206					SP00_Y_POS_L            = $AF0206
=$af0207					SP00_Y_POS_H            = $AF0207
=$af0208					SP01_CONTROL_REG        = $AF0208
=$af0209					SP01_ADDY_PTR_L         = $AF0209
=$af020a					SP01_ADDY_PTR_M         = $AF020A
=$af020b					SP01_ADDY_PTR_H         = $AF020B
=$af020c					SP01_X_POS_L            = $AF020C
=$af020d					SP01_X_POS_H            = $AF020D
=$af020e					SP01_Y_POS_L            = $AF020E
=$af020f					SP01_Y_POS_H            = $AF020F
=$af0210					SP02_CONTROL_REG        = $AF0210
=$af0211					SP02_ADDY_PTR_L         = $AF0211
=$af0212					SP02_ADDY_PTR_M         = $AF0212
=$af0213					SP02_ADDY_PTR_H         = $AF0213
=$af0214					SP02_X_POS_L            = $AF0214
=$af0215					SP02_X_POS_H            = $AF0215
=$af0216					SP02_Y_POS_L            = $AF0216
=$af0217					SP02_Y_POS_H            = $AF0217
=$af0218					SP03_CONTROL_REG        = $AF0218
=$af0219					SP03_ADDY_PTR_L         = $AF0219
=$af021a					SP03_ADDY_PTR_M         = $AF021A
=$af021b					SP03_ADDY_PTR_H         = $AF021B
=$af021c					SP03_X_POS_L            = $AF021C
=$af021d					SP03_X_POS_H            = $AF021D
=$af021e					SP03_Y_POS_L            = $AF021E
=$af021f					SP03_Y_POS_H            = $AF021F
=$af0220					SP04_CONTROL_REG        = $AF0220
=$af0221					SP04_ADDY_PTR_L         = $AF0221
=$af0222					SP04_ADDY_PTR_M         = $AF0222
=$af0223					SP04_ADDY_PTR_H         = $AF0223
=$af0224					SP04_X_POS_L            = $AF0224
=$af0225					SP04_X_POS_H            = $AF0225
=$af0226					SP04_Y_POS_L            = $AF0226
=$af0227					SP04_Y_POS_H            = $AF0227
=$af0228					SP05_CONTROL_REG        = $AF0228
=$af0229					SP05_ADDY_PTR_L         = $AF0229
=$af022a					SP05_ADDY_PTR_M         = $AF022A
=$af022b					SP05_ADDY_PTR_H         = $AF022B
=$af022c					SP05_X_POS_L            = $AF022C
=$af022d					SP05_X_POS_H            = $AF022D
=$af022e					SP05_Y_POS_L            = $AF022E
=$af022f					SP05_Y_POS_H            = $AF022F
=$af0230					SP06_CONTROL_REG        = $AF0230
=$af0231					SP06_ADDY_PTR_L         = $AF0231
=$af0232					SP06_ADDY_PTR_M         = $AF0232
=$af0233					SP06_ADDY_PTR_H         = $AF0233
=$af0234					SP06_X_POS_L            = $AF0234
=$af0235					SP06_X_POS_H            = $AF0235
=$af0236					SP06_Y_POS_L            = $AF0236
=$af0237					SP06_Y_POS_H            = $AF0237
=$af0238					SP07_CONTROL_REG        = $AF0238
=$af0239					SP07_ADDY_PTR_L         = $AF0239
=$af023a					SP07_ADDY_PTR_M         = $AF023A
=$af023b					SP07_ADDY_PTR_H         = $AF023B
=$af023c					SP07_X_POS_L            = $AF023C
=$af023d					SP07_X_POS_H            = $AF023D
=$af023e					SP07_Y_POS_L            = $AF023E
=$af023f					SP07_Y_POS_H            = $AF023F
=$af0240					SP08_CONTROL_REG        = $AF0240
=$af0241					SP08_ADDY_PTR_L         = $AF0241
=$af0242					SP08_ADDY_PTR_M         = $AF0242
=$af0243					SP08_ADDY_PTR_H         = $AF0243
=$af0244					SP08_X_POS_L            = $AF0244
=$af0245					SP08_X_POS_H            = $AF0245
=$af0246					SP08_Y_POS_L            = $AF0246
=$af0247					SP08_Y_POS_H            = $AF0247
=$af0248					SP09_CONTROL_REG        = $AF0248
=$af0249					SP09_ADDY_PTR_L         = $AF0249
=$af024a					SP09_ADDY_PTR_M         = $AF024A
=$af024b					SP09_ADDY_PTR_H         = $AF024B
=$af024c					SP09_X_POS_L            = $AF024C
=$af024d					SP09_X_POS_H            = $AF024D
=$af024e					SP09_Y_POS_L            = $AF024E
=$af024f					SP09_Y_POS_H            = $AF024F
=$af0250					SP10_CONTROL_REG        = $AF0250
=$af0251					SP10_ADDY_PTR_L         = $AF0251
=$af0252					SP10_ADDY_PTR_M         = $AF0252
=$af0253					SP10_ADDY_PTR_H         = $AF0253
=$af0254					SP10_X_POS_L            = $AF0254
=$af0255					SP10_X_POS_H            = $AF0255
=$af0256					SP10_Y_POS_L            = $AF0256
=$af0257					SP10_Y_POS_H            = $AF0257
=$af0258					SP11_CONTROL_REG        = $AF0258
=$af0259					SP11_ADDY_PTR_L         = $AF0259
=$af025a					SP11_ADDY_PTR_M         = $AF025A
=$af025b					SP11_ADDY_PTR_H         = $AF025B
=$af025c					SP11_X_POS_L            = $AF025C
=$af025d					SP11_X_POS_H            = $AF025D
=$af025e					SP11_Y_POS_L            = $AF025E
=$af025f					SP11_Y_POS_H            = $AF025F
=$af0260					SP12_CONTROL_REG        = $AF0260
=$af0261					SP12_ADDY_PTR_L         = $AF0261
=$af0262					SP12_ADDY_PTR_M         = $AF0262
=$af0263					SP12_ADDY_PTR_H         = $AF0263
=$af0264					SP12_X_POS_L            = $AF0264
=$af0265					SP12_X_POS_H            = $AF0265
=$af0266					SP12_Y_POS_L            = $AF0266
=$af0267					SP12_Y_POS_H            = $AF0267
=$af0268					SP13_CONTROL_REG        = $AF0268
=$af0269					SP13_ADDY_PTR_L         = $AF0269
=$af026a					SP13_ADDY_PTR_M         = $AF026A
=$af026b					SP13_ADDY_PTR_H         = $AF026B
=$af026c					SP13_X_POS_L            = $AF026C
=$af026d					SP13_X_POS_H            = $AF026D
=$af026e					SP13_Y_POS_L            = $AF026E
=$af026f					SP13_Y_POS_H            = $AF026F
=$af0270					SP14_CONTROL_REG        = $AF0270
=$af0271					SP14_ADDY_PTR_L         = $AF0271
=$af0272					SP14_ADDY_PTR_M         = $AF0272
=$af0273					SP14_ADDY_PTR_H         = $AF0273
=$af0274					SP14_X_POS_L            = $AF0274
=$af0275					SP14_X_POS_H            = $AF0275
=$af0276					SP14_Y_POS_L            = $AF0276
=$af0277					SP14_Y_POS_H            = $AF0277
=$af0278					SP15_CONTROL_REG        = $AF0278
=$af0279					SP15_ADDY_PTR_L         = $AF0279
=$af027a					SP15_ADDY_PTR_M         = $AF027A
=$af027b					SP15_ADDY_PTR_H         = $AF027B
=$af027c					SP15_X_POS_L            = $AF027C
=$af027d					SP15_X_POS_H            = $AF027D
=$af027e					SP15_Y_POS_L            = $AF027E
=$af027f					SP15_Y_POS_H            = $AF027F
=$af0280					SP16_CONTROL_REG        = $AF0280
=$af0281					SP16_ADDY_PTR_L         = $AF0281
=$af0282					SP16_ADDY_PTR_M         = $AF0282
=$af0283					SP16_ADDY_PTR_H         = $AF0283
=$af0284					SP16_X_POS_L            = $AF0284
=$af0285					SP16_X_POS_H            = $AF0285
=$af0286					SP16_Y_POS_L            = $AF0286
=$af0287					SP16_Y_POS_H            = $AF0287
=$af0288					SP17_CONTROL_REG        = $AF0288
=$af0289					SP17_ADDY_PTR_L         = $AF0289
=$af028a					SP17_ADDY_PTR_M         = $AF028A
=$af028b					SP17_ADDY_PTR_H         = $AF028B
=$af028c					SP17_X_POS_L            = $AF028C
=$af028d					SP17_X_POS_H            = $AF028D
=$af028e					SP17_Y_POS_L            = $AF028E
=$af028f					SP17_Y_POS_H            = $AF028F
=$af0400					VDMA_CONTROL_REG        = $AF0400
=$af0401					VDMA_COUNT_REG_L        = $AF0401
=$af0402					VDMA_COUNT_REG_M        = $AF0402
=$af0403					VDMA_COUNT_REG_H        = $AF0403
=$af0404					VDMA_DATA_2_WRITE_L     = $AF0404
=$af0405					VDMA_DATA_2_WRITE_H     = $AF0405
=$af0406					VDMA_STRIDE_L           = $AF0406
=$af0407					VDMA_STRIDE_H           = $AF0407
=$af0408					VDMA_SRC_ADDY_L         = $AF0408
=$af0409					VDMA_SRC_ADDY_M         = $AF0409
=$af040a					VDMA_SRC_ADDY_H         = $AF040A
=$af040b					VDMA_RESERVED_0         = $AF040B
=$af040c					VDMA_DST_ADDY_L         = $AF040C
=$af040d					VDMA_DST_ADDY_M         = $AF040D
=$af040e					VDMA_DST_ADDY_H         = $AF040E
=$af040f					VDMA_RESERVED_1         = $AF040F
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000					GRPH_LUT0_PTR		        = $AF2000
=$af2400					GRPH_LUT1_PTR		        = $AF2400
=$af2800					GRPH_LUT2_PTR		        = $AF2800
=$af2c00					GRPH_LUT3_PTR		        = $AF2C00
=$af3000					GRPH_LUT4_PTR		        = $AF3000
=$af3400					GRPH_LUT5_PTR		        = $AF3400
=$af3800					GRPH_LUT6_PTR		        = $AF3800
=$af3c00					GRPH_LUT7_PTR		        = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		      = $AF4000
=$af4100					GAMMA_G_LUT_PTR		      = $AF4100
=$af4200					GAMMA_R_LUT_PTR		      = $AF4200
=$af5000					TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800					TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000					TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800					TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800					FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000
=$afe000					BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff					BTX_END                 = $AFFFFF

;******  Return to file: kernel.asm


;******  Processing file: super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: kernel.asm


;******  Processing file: keyboard_def.asm

=$af1064					STATUS_PORT 	        =	$AF1064
=$af1060					KBD_OUT_BUF 	        =	$AF1060
=$af1060					KBD_INPT_BUF	        = $AF1060
=$af1064					KBD_CMD_BUF		        = $AF1064
=$af1060					KBD_DATA_BUF	        = $AF1060
=$af1060					PORT_A			          =	$AF1060
=$af1061					PORT_B			          =	$AF1061
=$01						OUT_BUF_FULL  =	$01
=$02						INPT_BUF_FULL	=	$02
=$04						SYS_FLAG		  =	$04
=$08						CMD_DATA		  =	$08
=$10						KEYBD_INH     =	$10
=$20						TRANS_TMOUT	  =	$20
=$40						RCV_TMOUT		  =	$40
=$80						PARITY_EVEN		=	$80
=$10						INH_KEYBOARD	=	$10
=$ae						KBD_ENA			  =	$AE
=$ad						KBD_DIS			  =	$AD
=$f1						KB_MENU			  =	$F1
=$f4						KB_ENABLE		  =	$F4
=$f7						KB_MAKEBREAK  =	$F7
=$fe						KB_ECHO			  =	$FE
=$ff						KB_RESET		  =	$FF
=$ed						KB_LED_CMD		=	$ED
=$aa						KB_OK			    =	$AA
=$fa						KB_ACK			  =	$FA
=$ff						KB_OVERRUN		=	$FF
=$fe						KB_RESEND		  =	$FE
=$f0						KB_BREAK		  =	$F0
=$10						KB_FA			    =	$10
=$20						KB_FE			    =	$20
=$40						KB_PR_LED		  =	$40

;******  Return to file: kernel.asm


;******  Processing file: SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: kernel.asm


;******  Processing file: RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: kernel.asm


;******  Processing file: io_def.asm

=$afe800					JOYSTICK0     = $AFE800  ;(R) Joystick 0 - J7 (Next to Buzzer)
=$afe801					JOYSTICK1     = $AFE801  ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2     = $AFE802  ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3     = $AFE803  ;(R) Joystick 3 - J10 (next to SD Card)
=$afe804					DIPSWITCH     = $AFE804  ;(R) $AFE804...$AFE807
=$afe808					SDCARD_DATA   = $AFE808  ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe809					SDCARD_CMD    = $AFE809  ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe810					SDCARD_STAT   = $AFE810  ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe820					CODEC_DATA_LO = $AFE820  ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe821					CODEC_DATA_HI = $AFE821  ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe822					CODEC_WR_CTRL = $AFE822  ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: kernel.asm


;******  Processing file: CMD_Parser.asm

=$000f00					KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
.193000						SAVECHAR2CMDLINE
.193000		0b		phd		                PHD
.193001		e2 20		sep #$20	                SEP #$20        ; set A short
.193003						NOT_CARRIAGE_RETURN
.193003		a6 52		ldx $52		                LDX KEY_BUFFER_WPOS   ; So the Receive Character is saved in the Buffer
.193005		c9 20		cmp #$20	                CMP #$20
.193007		90 22		bcc $19302b	                BCC CHECK_LOWERTHANSPACE
.193009		c9 80		cmp #$80	                CMP #$80
.19300b		b0 39		bcs $193046	                BCS EXIT_SAVE2_CMDLINE
.19300d		e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE  ; Make sure we haven't been overboard.
.193010		b0 34		bcs $193046	                BCS EXIT_SAVE2_CMDLINE  ; Stop storing - An error should ensue here...
.193012		c9 61		cmp #$61	                CMP #$61              ; "a"
.193014		90 06		bcc $19301c	                BCC CAPS_NO_CHANGE ;
.193016		c9 7b		cmp #$7b	                CMP #$7B              ; '{'  Char after 'z'
.193018		b0 02		bcs $19301c	                BCS CAPS_NO_CHANGE ;
.19301a		29 df		and #$df	                AND #$DF    ; remove the $20 in $61
.19301c						CAPS_NO_CHANGE
.19301c		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.193020		e8		inx		                INX
.193021		86 52		stx $52		                STX KEY_BUFFER_WPOS
.193023		a9 00		lda #$00	                LDA #$00
.193025		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X   ; Store a EOL in the following location for good measure
.193029		80 1b		bra $193046	                BRA EXIT_SAVE2_CMDLINE
.19302b						CHECK_LOWERTHANSPACE
.19302b		c9 08		cmp #$08	                CMP #$08    ; BackSpace
.19302d		f0 19		beq $193048	                BEQ GO_BACKTHEPOINTER;
.19302f		c9 0d		cmp #$0d	                CMP #$0D    ; Check to see if the incomming Character is a Cariage Return
.193031		d0 d0		bne $193003	                BNE NOT_CARRIAGE_RETURN
.193033		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.193037		a2 00 00	ldx #$0000	                LDX #$0000
.19303a		86 50		stx $50		                STX KEY_BUFFER_RPOS
.19303c		af 83 0f 00	lda $000f83	                LDA @lKEY_BUFFER_CMD
.193040		09 01		ora #$01	                ORA #$01      ; Set Bit 0 - to indicate that there is a command to process
.193042		8f 83 0f 00	sta $000f83	                STA @lKEY_BUFFER_CMD
.193046						EXIT_SAVE2_CMDLINE
.193046		2b		pld		                PLD
.193047		6b		rtl		                RTL
.193048						GO_BACKTHEPOINTER
.193048		a9 00		lda #$00	                LDA #$00
.19304a		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.19304e		e0 00 00	cpx #$0000	                CPX #$0000
.193051		f0 f3		beq $193046	                BEQ EXIT_SAVE2_CMDLINE
.193053		ca		dex		                DEX
.193054		80 f0		bra $193046	                BRA EXIT_SAVE2_CMDLINE
.193056						PROCESS_COMMAND_LINE
.193056		08		php		                PHP
.193057		c2 10		rep #$10	                REP #$10        ; set X long
.193059		e2 20		sep #$20	                SEP #$20        ; set A short
.19305b		a2 00 00	ldx #$0000	                LDX #$0000
.19305e		86 52		stx $52		                STX KEY_BUFFER_WPOS
.193060		a6 50		ldx $50		                LDX KEY_BUFFER_RPOS ; Load the Read Pointer
.193062						NOT_VALID_CHAR4CMD
.193062		bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.193066		c9 0d		cmp #$0d	                CMP #$0D              ; Check for Carriage Return
.193068		f0 24		beq $19308e	                BEQ NO_CMD_2_PROCESS  ; Exit, if the first char is a Carriage return
.19306a		c9 41		cmp #$41	                CMP #$41              ; Smaller than "A"
.19306c		90 04		bcc $193072	                BCC NOT_A_VALIDCHAR   ; check for space before the Command
.19306e		c9 5b		cmp #$5b	                CMP #$5B              ; Smaller than "Z" We are going to accept the character
.193070		90 08		bcc $19307a	                BCC VALIDCHAR_GO_FIND_CMD;
.193072						NOT_A_VALIDCHAR
.193072		e8		inx		                INX
.193073		e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE
.193076		d0 ea		bne $193062	                BNE NOT_VALID_CHAR4CMD
.193078		f0 0d		beq $193087	                BEQ ERROR_BUFFER_OVERRUN  ; This means that we have reached the end of Buffer
.19307a						VALIDCHAR_GO_FIND_CMD
.19307a		20 99 30	jsr $193099	                JSR HOWMANYCHARINCMD  ; Comming back from this Routine we know the size of the Command
.19307d		c0 10 00	cpy #$0010	                CPY #$0010            ; if the value of the size of the command is 16, then it is not a legit command
.193080		b0 0e		bcs $193090	                BCS NOTRECOGNIZEDCOMMAND  ; This will output a Command Not Recognized
.193082		20 b2 30	jsr $1930b2	                JSR FINDCMDINLIST     ; This is where, it gets really cool
.193085		80 07		bra $19308e	                BRA DONE_COMMANDPROCESS
.193087						ERROR_BUFFER_OVERRUN
.193087		a2 7d 33	ldx #$337d	                LDX #<>CMD_Error_Overrun
.19308a		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print the first line
.19308e						DONE_COMMANDPROCESS
.19308e						NO_CMD_2_PROCESS
.19308e		28		plp		                PLP
.19308f		6b		rtl		                RTL
.193090						NOTRECOGNIZEDCOMMAND
.193090		a2 8f 33	ldx #$338f	                LDX #<>CMD_Error_Notfound
.193093		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print the first line
.193097		28		plp		                PLP
.193098		60		rts		                RTS
.193099						HOWMANYCHARINCMD
.193099		a0 00 00	ldy #$0000	                LDY #$0000
.19309c		da		phx		                PHX ; Push X to Stack for the time being
.19309d						ENDOFCOMMANDNOTFOUND
.19309d		bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.1930a1		c9 20		cmp #$20	                CMP #$20              ; Check for a Space
.1930a3		f0 0b		beq $1930b0	                BEQ FOUNDTHEFOLLOWINGSPACE
.1930a5		c9 0d		cmp #$0d	                CMP #$0D              ; Check to see end of Command (if there is no arguments)
.1930a7		f0 07		beq $1930b0	                BEQ FOUNDTHEFOLLOWINGSPACE
.1930a9		e8		inx		                INX
.1930aa		c8		iny		                INY
.1930ab		c0 10 00	cpy #$0010	                CPY #$0010              ; Set the Maximum number of Character to 16
.1930ae		90 ed		bcc $19309d	                BCC ENDOFCOMMANDNOTFOUND
.1930b0						FOUNDTHEFOLLOWINGSPACE
.1930b0		fa		plx		                PLX ; Get the Pointer Location of the First Character of the Command
.1930b1		60		rts		                RTS
.1930b2						FINDCMDINLIST
.1930b2		86 40		stx $40		                STX CMD_PARSER_TMPX   ; Save X for the Time Being
.1930b4		84 42		sty $42		                STY CMD_PARSER_TMPY   ; Save Y for the Time Being
.1930b6		c2 20		rep #$20	                REP #$20        ; set A long
.1930b8		a9 cf 32	lda #$32cf	                LDA #<>CMDListPtr
.1930bb		85 44		sta $44		                STA CMD_LIST_PTR
.1930bd		a9 00 00	lda #$0000	                LDA #$0000  ; Just to make sure B is zero
.1930c0		e2 20		sep #$20	                SEP #$20        ; set A short
.1930c2		a9 19		lda #$19	                LDA #`CMDListPtr
.1930c4		85 46		sta $46		                STA CMD_LIST_PTR+2
.1930c6		a0 00 00	ldy #$0000	                LDY #$0000
.1930c9		84 54		sty $54		                STY CMD_VARIABLE_TMP
.1930cb						NOTTHERIGHTSIZEMOVEON
.1930cb		a4 54		ldy $54		                LDY CMD_VARIABLE_TMP
.1930cd		b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930cf		85 48		sta $48		                STA CMD_PARSER_PTR
.1930d1		c8		iny		                INY
.1930d2		b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930d4		85 49		sta $49		                STA CMD_PARSER_PTR+1
.1930d6		c8		iny		                INY
.1930d7		b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930d9		85 4a		sta $4a		                STA CMD_PARSER_PTR+2
.1930db		c8		iny		                INY
.1930dc		c0 3f 00	cpy #$003f	                CPY #size(CMDListPtr)
.1930df		b0 2b		bcs $19310c	                BCS COMMANDNOTFOUND   ; If we reach that limit then the Count didn't match any command in place
.1930e1		84 54		sty $54		                STY CMD_VARIABLE_TMP
.1930e3		a7 48		lda [$48]	                LDA [CMD_PARSER_PTR] ;
.1930e5		c5 42		cmp $42		                CMP CMD_PARSER_TMPY ;
.1930e7		d0 e2		bne $1930cb	                BNE NOTTHERIGHTSIZEMOVEON
.1930e9		20 14 31	jsr $193114	                JSR CHECKSYNTAX       ; Now we have found a Command in the list that matches the number of Char, let's see if this is one if we are looking for
.1930ec		b0 dd		bcs $1930cb	                BCS NOTTHERIGHTSIZEMOVEON ; Failed to Find
.1930ee		86 40		stx $40		                STX CMD_PARSER_TMPX   ; Just to make sure, this is where the Pointer in the line buffer is...
.1930f0		c8		iny		                INY   ; Point to after the $00, the next 2 bytes are the Attributes
.1930f1		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y ;
.1930f3		85 4b		sta $4b		                STA CMD_ATTRIBUTE
.1930f5		c8		iny		                INY
.1930f6		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.1930f8		85 4c		sta $4c		                STA CMD_ATTRIBUTE+1
.1930fa		c8		iny		                INY   ; This will point towards the Jumping Vector for the execution of the Command
.1930fb		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.1930fd		85 4d		sta $4d		                STA CMD_EXEC_ADDY
.1930ff		c8		iny		                INY
.193100		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.193102		85 4e		sta $4e		                STA CMD_EXEC_ADDY+1
.193104		c8		iny		                INY
.193105		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.193107		85 4f		sta $4f		                STA CMD_EXEC_ADDY+2
.193109		dc 4d 00	jmp [$004d]	                JML [CMD_EXEC_ADDY]
.19310c						COMMANDNOTFOUND
.19310c		a2 8f 33	ldx #$338f	                LDX #<>CMD_Error_Notfound
.19310f		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print the first line
.193113		60		rts		                RTS
.193114						CHECKSYNTAX
.193114		a0 01 00	ldy #$0001	                LDY #$0001      ; Point towards the Next Byte after the Size
.193117		a6 40		ldx $40		                LDX CMD_PARSER_TMPX ; This is the Pointer in the Line Buffer where the First Character ought to be...
.193119						CHECKSYNTAXNEXTCHAR
.193119		b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y ;
.19311b		c9 00		cmp #$00	                CMP #$00  ; End of Character Check, if we reach that point, then we are on our way to have something happening! Call mom and dad and tell them how they failed to be good parents! Like all parents
.19311d		f0 0c		beq $19312b	                BEQ SUCCESSFOUNDCOMMAND
.19311f		df 00 0f 00	cmp $000f00,x	                CMP @lKEY_BUFFER, X   ;
.193123		d0 04		bne $193129	                BNE CHARDONTMATCH
.193125		e8		inx		                INX
.193126		c8		iny		                INY
.193127		80 f0		bra $193119	                BRA CHECKSYNTAXNEXTCHAR
.193129		38		sec		CHARDONTMATCH   SEC
.19312a		60		rts		                RTS
.19312b						SUCCESSFOUNDCOMMAND
.19312b		18		clc		                CLC
.19312c		60		rts		                RTS
.19312d						PROC_FILENAME_ARG
.19312d		60		rts		              RTS
.19312e						PROC_DEVICE_ARG
.19312e		60		rts		              RTS
.19312f						PROC_ADDRESS_ARG
.19312f		60		rts		              RTS
.193130						PROC_DATA8_ARG
.193130		60		rts		              RTS
.193131						PROC_DATA16_ARG
.193131		60		rts		              RTS
.193132						ENTRY_CMD_CLS
.193132		a2 00 00	ldx #$0000	              LDX #$0000		; Only Use One Pointer
.193135		a9 20		lda #$20	              LDA #$20		; Fill the Entire Screen with Space
.193137		9f 00 a0 af	sta $afa000,x	CLEARSCREENL0	STA CS_TEXT_MEM_PTR, x	;
.19313b		e8		inx		              inx
.19313c		e0 00 20	cpx #$2000	              cpx #$2000
.19313f		d0 f6		bne $193137	              bne CLEARSCREENL0
.193141		a2 00 00	ldx #$0000	              LDX	#$0000		; Only Use One Pointer
.193144		a9 ed		lda #$ed	              LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.193146		9f 00 c0 af	sta $afc000,x	CLEARSCREENL1	STA CS_COLOR_MEM_PTR, x	;
.19314a		e8		inx		              inx
.19314b		e0 00 20	cpx #$2000	              cpx #$2000
.19314e		d0 f6		bne $193146	              bne CLEARSCREENL1
.193150		a2 00 00	ldx #$0000	              LDX #$0000
.193153		86 52		stx $52		              STX KEY_BUFFER_WPOS
.193155		86 50		stx $50		              STX KEY_BUFFER_RPOS
.193157		a0 00 00	ldy #$0000	              LDY #$0000
.19315a		22 be 08 19	jsl $1908be	              JSL ILOCATE
.19315e		60		rts		              RTS
.19315f						ENTRY_CMD_DIR
.19315f		a2 12 33	ldx #$3312	LDX #<>DIR_COMMAND
.193162		22 d5 07 19	jsl $1907d5	JSL IPRINT       ; print the first line
.193166		60		rts		RTS
.193167						ENTRY_CMD_EXEC
.193167		a2 26 33	ldx #$3326	LDX #<>EXEC_COMMAND
.19316a		22 d5 07 19	jsl $1907d5	JSL IPRINT       ; print the first line
.19316e		60		rts		RTS
.19316f						ENTRY_CMD_LOAD
.19316f		a2 40 33	ldx #$3340	LDX #<>LOAD_COMMAND
.193172		22 d5 07 19	jsl $1907d5	JSL IPRINT       ; print the first line
.193176		60		rts		RTS
.193177		60		rts		ENTRY_CMD_SAVE RTS
.193178		60		rts		ENTRY_CMD_PEEK8     RTS
.193179		60		rts		ENTRY_CMD_POKE8     RTS
.19317a		60		rts		ENTRY_CMD_POKE16    RTS
.19317b		60		rts		ENTRY_CMD_PEEK16    RTS
.19317c		60		rts		ENTRY_CMD_RECWAV    RTS
.19317d		60		rts		ENTRY_CMD_EXECFNX   RTS
.19317e		60		rts		ENTRY_CMD_GETDATE   RTS
.19317f		60		rts		ENTRY_CMD_GETTIME   RTS
.193180		60		rts		ENTRY_CMD_MONITOR   RTS
.193181		60		rts		ENTRY_CMD_PLAYRAD   RTS
.193182		60		rts		ENTRY_CMD_PLAYWAV   RTS
.193183		60		rts		ENTRY_CMD_SETDATE   RTS
.193184		60		rts		ENTRY_CMD_SETTIME   RTS
.193185		60		rts		ENTRY_CMD_SYSINFO   RTS
.193186		60		rts		ENTRY_CMD_DISKCOPY  RTS
.193187		60		rts		ENTRY_CMD_SETTXTLUT RTS
.193188						CMD
>193188		03 43 4c 53 00 00 00 32		CLS       .text $03, "CLS", $00, CMD_ARGTYPE_NO, ENTRY_CMD_CLS                                        ; Clear Screen
>193190		31 19
>193192		03 44 49 52 00 01 00 5f		DIR       .text $03, "DIR", $00, CMD_ARGTYPE_DEV, ENTRY_CMD_DIR                                       ; @F, @S
>19319a		31 19
>19319c		04 45 58 45 43 00 04 00		EXEC      .text $04, "EXEC", $00, CMD_ARGTYPE_SA, ENTRY_CMD_EXEC                                        ; EXEC S:$00000
>1931a4		67 31 19
>1931a7		04 4c 4f 41 44 00 0b 00		LOAD      .text $04, "LOAD", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN | CMD_ARGTYPE_EA), ENTRY_CMD_LOAD   ; "LOAD @F, "NAME.XXX", D:$000000
>1931af		6f 31 19
>1931b2		04 53 41 56 45 00 0f 00		SAVE      .text $04, "SAVE", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN | CMD_ARGTYPE_SA | CMD_ARGTYPE_EA), ENTRY_CMD_SAVE           ; SAVE @F, "NAME.XXX", S:$000000, D:$000000
>1931ba		77 31 19
>1931bd		05 50 45 45 4b 38 00 04		PEEK8     .text $05, "PEEK8", $00,  CMD_ARGTYPE_SA, ENTRY_CMD_PEEK8       ; PEEK8 $000000
>1931c5		00 78 31 19
>1931c9		05 50 4f 4b 45 38 00 14		POKE8     .text $05, "POKE8", $00, (CMD_ARGTYPE_SA | CMD_ARGTYPE_8D), ENTRY_CMD_POKE8          ; POKE8 $000000, $00
>1931d1		00 79 31 19
>1931d5		06 50 45 45 4b 31 36 00		PEEK16    .text $06, "PEEK16", $00, CMD_ARGTYPE_SA, ENTRY_CMD_POKE16, ENTRY_CMD_PEEK16        ; PEEK16 $000000
>1931dd		04 00 7a 31 19 7b 31 19
>1931e5		06 50 4f 4b 45 31 36 00		POKE16    .text $06, "POKE16", $00, (CMD_ARGTYPE_SA | CMD_ARGTYPE_16D), ENTRY_CMD_POKE16           ; POKE16 $000000, $0000
>1931ed		24 00 7a 31 19
>1931f2		06 52 45 43 57 41 56 00		RECWAV    .text $06, "RECWAV", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN) , ENTRY_CMD_RECWAV          ; RECWAV @S, "NAME.XXX" (Samples)
>1931fa		03 00 7c 31 19
>1931ff		07 45 58 45 43 46 4e 58		EXECFNX   .text $07, "EXECFNX", $00, CMD_ARGTYPE_FN, ENTRY_CMD_EXECFNX        ; "EXECFNX "NAME.XXX"
>193207		00 02 00 7d 31 19
>19320d		07 47 45 54 44 41 54 45		GETDATE   .text $07, "GETDATE", $00, CMD_ARGTYPE_NO, ENTRY_CMD_GETDATE       ; GETDATE
>193215		00 00 00 7e 31 19
>19321b		07 47 45 54 54 49 4d 45		GETTIME   .text $07, "GETTIME", $00, CMD_ARGTYPE_NO, ENTRY_CMD_GETTIME        ; GETTIME
>193223		00 00 00 7f 31 19
>193229		07 4d 4f 4e 49 54 4f 52		MONITOR   .text $07, "MONITOR", $00, CMD_ARGTYPE_NO, ENTRY_CMD_MONITOR       ; MONITOR TBD
>193231		00 00 00 80 31 19
>193237		07 50 4c 41 59 52 41 44		PLAYRAD   .text $07, "PLAYRAD", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN), ENTRY_CMD_PLAYRAD        ; PLAYRAD @S, "NAME.XXX" (music File)
>19323f		00 03 00 81 31 19
>193245		07 50 4c 41 59 57 41 56		PLAYWAV   .text $07, "PLAYWAV", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN), ENTRY_CMD_PLAYWAV                ; PLAYWAV @S, "NAME.XXX" (samples)
>19324d		00 03 00 82 31 19
>193253		07 53 45 54 44 41 54 45		SETDATE   .text $07, "SETDATE", $00, CMD_ARGTYPE_DAT, ENTRY_CMD_SETDATE      ; SETDATE YY:MM:DD
>19325b		00 80 00 83 31 19
>193261		07 53 45 54 54 49 4d 45		SETTIME   .text $07, "SETTIME", $00, CMD_ARGTYPE_TIM, ENTRY_CMD_SETTIME       ; SETTIME HH:MM:SS
>193269		00 40 00 84 31 19
>19326f		04 53 59 53 49 4e 46 4f		SYSINFO   .text $04, "SYSINFO", $00, CMD_ARGTYPE_NO, ENTRY_CMD_SYSINFO
>193277		00 00 00 85 31 19
>19327d		08 44 49 53 4b 43 4f 50		DISKCOPY  .text $08, "DISKCOPY", $00, CMD_ARGTYPE_DEV, CMD_ARGTYPE_DEV, ENTRY_CMD_DISKCOPY           ; DISKCOPY @F, @F
>193285		59 00 01 00 01 00 86 31 19
>19328e		08 46 49 4c 45 43 4f 50		FILECOPY  .text $08, "FILECOPY", $00, (CMD_ARGTYPE_FN | CMD_ARGTYPE_FN2)
>193296		59 00 02 02
>19329a		08 53 45 54 42 47 43 4c		SETBGCLR  .text $08, "SETBGCLR", $00, CMD_ARGTYPE_DEC
>1932a2		52 00 00 04
>1932a6		08 53 45 54 46 47 43 4c		SETFGCLR  .text $08, "SETFGCLR", $00, CMD_ARGTYPE_DEC
>1932ae		52 00 00 04
>1932b2		09 53 45 54 54 58 54 4c		SETTXTLUT .text $09, "SETTXTLUT", $00, (CMD_ARGTYPE_DAT | CMD_ARGTYPE_RGB), ENTRY_CMD_SETTXTLUT        ; SETLUT $00, $000000
>1932ba		55 54 00 80 01 87 31 19
>1932c2		09 53 45 54 42 52 44 43		SETBRDCLR .text $09, "SETBRDCLR", $00, CMD_ARGTYPE_RGB
>1932ca		4c 52 00 00 01
>1932cf		88 31 19 92 31 19 9c 31		CMDListPtr .long CMD.CLS, CMD.DIR, CMD.EXEC, CMD.LOAD, CMD.SAVE, CMD.PEEK8, CMD.POKE8, CMD.PEEK16, CMD.POKE16, CMD.RECWAV, CMD.EXECFNX, CMD.GETDATE, CMD.GETTIME, CMD.MONITOR, CMD.PLAYRAD, CMD.PLAYWAV, CMD.SETDATE, CMD.SETTIME, CMD.SYSINFO, CMD.DISKCOPY, CMD.SETTXTLUT
>1932d7		19 a7 31 19 b2 31 19 bd 31 19 c9 31 19 d5 31 19
>1932e7		e5 31 19 f2 31 19 ff 31 19 0d 32 19 1b 32 19 29
>1932f7		32 19 37 32 19 45 32 19 53 32 19 61 32 19 6f 32
>193307		19 7d 32 19 b2 32 19
=$0000						CMD_ARGTYPE_NO    = $0000 ; No Argument
=$0001						CMD_ARGTYPE_DEV   = $0001 ; Device Type @S, @F
=$0002						CMD_ARGTYPE_FN    = $0002 ; File Name
=$0004						CMD_ARGTYPE_SA    = $0004 ; Starting Address (Source)
=$0008						CMD_ARGTYPE_EA    = $0008 ; Ending Address (Destination)
=$0010						CMD_ARGTYPE_8D    = $0010 ; 8bits Data
=$0020						CMD_ARGTYPE_16D   = $0020 ; 16bits Data
=$0040						CMD_ARGTYPE_TIM   = $0040 ; Time
=$0080						CMD_ARGTYPE_DAT   = $0080 ; Date
=$0100						CMD_ARGTYPE_RGB   = $0100 ; RGB Data (24Bit Data) for LUT mainly
=$0200						CMD_ARGTYPE_FN2   = $0200 ; Second File name
=$0400						CMD_ARGTYPE_DEC   = $0400 ; Decimal value
>19330e		43 4c 53 00			CLS_COMMAND .text "CLS", $00
>193312		44 49 52 20 69 73 20 68		DIR_COMMAND .text "DIR is happening...", $00
>19331a		61 70 70 65 6e 69 6e 67 2e 2e 2e 00
>193326		45 58 45 43 20 43 6f 6d		EXEC_COMMAND .text "EXEC Command Executing...", $00
>19332e		6d 61 6e 64 20 45 78 65 63 75 74 69 6e 67 2e 2e
>19333e		2e 00
>193340		4c 4f 41 44 00			LOAD_COMMAND .text "LOAD", $00
>193345		53 59 4e 54 41 58 20 20		CMD_Error_Syntax  .text "SYNTAX  ERROR", $00
>19334d		45 52 52 4f 52 00
>193353		4d 69 73 73 69 6e 67 20		CMD_Error_Missing .text "Missing Parameters...", $00
>19335b		50 61 72 61 6d 65 74 65 72 73 2e 2e 2e 00
>193369		57 72 6f 6e 67 20 50 61		CMD_Error_Wrong   .text "Wrong Parameters...", $00
>193371		72 61 6d 65 74 65 72 73 2e 2e 2e 00
>19337d		42 75 66 66 65 72 20 4f		CMD_Error_Overrun .text "Buffer Overrun...", $00
>193385		76 65 72 72 75 6e 2e 2e 2e 00
>19338f		53 59 4e 54 41 58 20 20		CMD_Error_Notfound .text "SYNTAX  ERROR", $00
>193397		45 52 52 4f 52 00

;******  Return to file: kernel.asm


;******  Processing file: monitor.asm

.195000		5c 5c 50 19	jmp $19505c	MONITOR         JML IMONITOR
.195004		5c 8a 50 19	jmp $19508a	MSTATUS         JML IMSTATUS
.195008		5c 68 50 19	jmp $195068	MREADY          JML IMREADY
.19500c		5c 35 51 19	jmp $195135	MRETURN         JML IMRETURN
.195010		5c 36 51 19	jmp $195136	MPARSE          JML IMPARSE
.195014		5c 37 51 19	jmp $195137	MPARSE1         JML IMPARSE1
.195018		5c 38 51 19	jmp $195138	MEXECUTE        JML IMEXECUTE
.19501c		5c 39 51 19	jmp $195139	MASSEMBLE       JML IMASSEMBLE
.195020		5c 3a 51 19	jmp $19513a	MASSEMBLEA      JML IMASSEMBLEA
.195024		5c 3b 51 19	jmp $19513b	MCOMPARE        JML IMCOMPARE
.195028		5c 3c 51 19	jmp $19513c	MDISASSEMBLE    JML IMDISASSEMBLE
.19502c		5c 3d 51 19	jmp $19513d	MFILL           JML IMFILL
.195030		5c 3f 51 19	jmp $19513f	MJUMP           JML IMJUMP
.195034		5c 40 51 19	jmp $195140	MHUNT           JML IMHUNT
.195038		5c 41 51 19	jmp $195141	MLOAD           JML IMLOAD
.19503c		5c 42 51 19	jmp $195142	MMEMORY         JML IMMEMORY
.195040		5c 43 51 19	jmp $195143	MREGISTERS      JML IMREGISTERS
.195044		5c 44 51 19	jmp $195144	MSAVE           JML IMSAVE
.195048		5c 45 51 19	jmp $195145	MTRANSFER       JML IMTRANSFER
.19504c		5c 46 51 19	jmp $195146	MVERIFY         JML IMVERIFY
.195050		5c 47 51 19	jmp $195147	MEXIT           JML IMEXIT
.195054		5c 48 51 19	jmp $195148	MMODIFY         JML IMMODIFY
.195058		5c 49 51 19	jmp $195149	MDOS            JML IMDOS
.19505c		18		clc		IMONITOR        CLC           ; clear the carry flag
.19505d		fb		xce		                XCE           ; move carry to emulation flag.
.19505e		c2 20		rep #$20	                REP #$20        ; set A long
.195060		a9 ff fe	lda #$feff	                LDA #STACK_END ; Reset the stack
.195063		1b		tcs		                TAS
.195064		5c 68 50 19	jmp $195068	                JML IMREADY
.195068						IMREADY
.195068		c2 30		rep #$30	                REP #$30        ; set A&X long
.19506a		a9 68 50	lda #$5068	                LDA #<>IMREADY
.19506d		8d e1 ff	sta $ffe1	                STA JMP_READY+1
.195070		e2 20		sep #$20	                SEP #$20        ; set A short
.195072		a9 19		lda #$19	                LDA #`IMREADY
.195074		8d e3 ff	sta $ffe3	                STA JMP_READY+3
.195077		c2 20		rep #$20	                REP #$20        ; set A long
.195079		a9 35 51	lda #$5135	                LDA #<>IMRETURN
.19507c		8d f1 ff	sta $fff1	                STA RETURN+1
.19507f		e2 20		sep #$20	                SEP #$20        ; set A short
.195081		a9 19		lda #$19	                LDA #`IMRETURN
.195083		8d f3 ff	sta $fff3	                STA RETURN+3
.195086		5c 8a 50 19	jmp $19508a	                JML IMSTATUS
.19508a						IMSTATUS
.19508a		48		pha		                PHA             ; begin setdbr macro
.19508b		08		php		                PHP
.19508c		e2 20		sep #$20	                SEP #$20        ; set A short
.19508e		a9 19		lda #$19		LDA #`mregisters_msg
.195090		48		pha		                PHA
.195091		ab		plb		                PLB
.195092		28		plp		                PLP
.195093		68		pla		                PLA             ; end setdbr macro
.195094		a2 4a 51	ldx #$514a	                LDX #<>mregisters_msg
.195097		22 d5 07 19	jsl $1907d5	                JSL IPRINT
.19509b		e2 20		sep #$20	                SEP #$20        ; set A short
.19509d		a9 3b		lda #$3b	                LDA #';'
.19509f		22 f5 07 19	jsl $1907f5	                JSL IPUTC
.1950a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950a5		48		pha		                PHA             ; begin setdbr macro
.1950a6		08		php		                PHP
.1950a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1950a9		a9 00		lda #$00		LDA #$0
.1950ab		48		pha		                PHA
.1950ac		ab		plb		                PLB
.1950ad		28		plp		                PLP
.1950ae		68		pla		                PLA             ; end setdbr macro
.1950af		a0 03 00	ldy #$0003	                LDY #3
.1950b2		a2 42 02	ldx #$0242	                LDX #CPUPC+2
.1950b5		22 0e 09 19	jsl $19090e	                JSL IPRINTH
.1950b9		a5 20		lda $20		                LDA ' '
.1950bb		22 f5 07 19	jsl $1907f5	                JSL IPUTC
.1950bf		a0 02 00	ldy #$0002	                LDY #2
.1950c2		a2 45 02	ldx #$0245	                LDX #CPUA+1
.1950c5		22 0e 09 19	jsl $19090e	                JSL IPRINTH
.1950c9		a5 20		lda $20		                LDA ' '
.1950cb		22 f5 07 19	jsl $1907f5	                JSL IPUTC
.1950cf		a0 02 00	ldy #$0002	                LDY #2
.1950d2		a2 47 02	ldx #$0247	                LDX #CPUX+1
.1950d5		22 0e 09 19	jsl $19090e	                JSL IPRINTH
.1950d9		a5 20		lda $20		                LDA ' '
.1950db		22 f5 07 19	jsl $1907f5	                JSL IPUTC
.1950df		a0 02 00	ldy #$0002	                LDY #2
.1950e2		a2 49 02	ldx #$0249	                LDX #CPUY+1
.1950e5		22 0e 09 19	jsl $19090e	                JSL IPRINTH
.1950e9		a5 20		lda $20		                LDA ' '
.1950eb		22 f5 07 19	jsl $1907f5	                JSL IPUTC
.1950ef		a0 02 00	ldy #$0002	                LDY #2
.1950f2		a2 4b 02	ldx #$024b	                LDX #CPUSTACK+1
.1950f5		22 0e 09 19	jsl $19090e	                JSL IPRINTH
.1950f9		a5 20		lda $20		                LDA ' '
.1950fb		22 f5 07 19	jsl $1907f5	                JSL IPUTC
.1950ff		a0 01 00	ldy #$0001	                LDY #1
.195102		a2 4e 02	ldx #$024e	                LDX #CPUDBR
.195105		22 0e 09 19	jsl $19090e	                JSL IPRINTH
.195109		a5 20		lda $20		                LDA ' '
.19510b		22 f5 07 19	jsl $1907f5	                JSL IPUTC
.19510f		22 f5 07 19	jsl $1907f5	                JSL IPUTC
.195113		a0 02 00	ldy #$0002	                LDY #2
.195116		a2 4d 02	ldx #$024d	                LDX #CPUDP+1
.195119		22 0e 09 19	jsl $19090e	                JSL IPRINTH
.19511d		a5 20		lda $20		                LDA ' '
.19511f		22 f5 07 19	jsl $1907f5	                JSL IPUTC
.195123		a0 01 00	ldy #$0001	                LDY #1
.195126		a2 4f 02	ldx #$024f	                LDX #CPUFLAGS
.195129		22 0e 09 19	jsl $19090e	                JSL IPRINTH
.19512d		22 23 08 19	jsl $190823	                JSL IPRINTCR
.195131		5c c3 07 19	jmp $1907c3	                JML IREADYWAIT
.195135		6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.195136		00		brk #		IMPARSE         BRK ; Parse the current command line
.195137		00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.195138		00		brk #		IMEXECUTE       BRK ; Execute the current command line (requires MCMD and MARG1-MARG8 to be populated)
.195139		00		brk #		IMASSEMBLE      BRK ; Assemble a line of text.
.19513a		00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.19513b		00		brk #		IMCOMPARE       BRK ; Compare memory. len=1
.19513c		00		brk #		IMDISASSEMBLE   BRK ; Disassemble memory. end=1 instruction
.19513d		00		brk #		IMFILL          BRK ; Fill memory with specified value. Start and end must be in the same bank.
.19513e		00		brk #		IMGO            BRK ; Execute from specified address
.19513f		00		brk #		IMJUMP          BRK ; Execute from spefified address
.195140		00		brk #		IMHUNT          BRK ; Hunt (find) value in memory
.195141		00		brk #		IMLOAD          BRK ; Load data from disk. Device=1 (internal floppy) Start=Address in file
.195142		00		brk #		IMMEMORY        BRK ; View memory
.195143		00		brk #		IMREGISTERS     BRK ; View/edit registers
.195144		00		brk #		IMSAVE          BRK ; Save memory to disk
.195145		00		brk #		IMTRANSFER      BRK ; Transfer (copy) data in memory
.195146		00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.195147		00		brk #		IMEXIT          BRK ; Exit monitor and return to BASIC command prompt
.195148		00		brk #		IMMODIFY        BRK ; Modify memory
.195149		00		brk #		IMDOS           BRK ; Execute DOS command
.19514a						MMESSAGES
>19514a						MMERROR         .text
>19514a		0d 20 50 43 20 20 20 20		mregisters_msg  .null $0D," PC     A    X    Y    SP   DBR DP   NVMXDIZC"
>195152		20 41 20 20 20 20 58 20 20 20 20 59 20 20 20 20
>195162		53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56
>195172		4d 58 44 49 5a 43 00

;******  Return to file: kernel.asm


;******  Processing file: SDOS.asm


;******  Processing file: ch376s_inc.asm

=$00						DEF_NULL_CHAR       = $00
=$2a						DEF_WILDCARD_CHAR   = $2A
=$5c						DEF_SEPAR_CHAR1     = $5C
=$2f						DEF_SEPAR_CHAR2     = $2F
=$0a						CH_CMD_RD_VAR8        = $0A     ; Read 8Bit Value
=$0b						CH_CMD_WR_VAR8        = $0B     ; Write 8Bit Value to controller
=$0c						CH_CMD_RD_VAR32       = $0C     ; Read 32Bit Value
=$0d						CH_CMD_WR_VAR32       = $0D
=$15						CH_CMD_SET_MODE       = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22						CH_CMD_GET_STATUS     = $22     ; Get Interrupt Status
=$27						CH_CMD_RD_DATA0       = $27     ;
=$2f						CH_CMD_SET_FILENAME   = $2F     ;SET_FILE_NAME
=$31						CH_CMD_DISK_MOUNT     = $31     ;DISK_MOUNT
=$32						CH_CMD_FILE_OPEN      = $32     ;FILE_OPEN
=$33						CH_CMD_FILE_ENUM_GO   = $33
=$39						CH_CMD_BYTE_LOCATE    = $39
=$3a						CH_CMD_BYTE_READ      = $3A
=$3b						CH_CMD_BYTE_RD_GO     = $3B
=$3c						CH_CMD_BYTE_WRITE     = $3C
=$3d						CH_CMD_BYTE_WR_GO     = $3D
=$44						CH_VAR_DISK_ROOT		  = $44
=$48						CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c						CH_VAR_DSK_START_LBA	= $4C
=$50						CH_VAR_DSK_DAT_START	= $50
=$54						CH_VAR_LBA_BUFFER		  = $54
=$58						CH_VAR_LBA_CURRENT		= $58
=$5c						CH_VAR_FAT_DIR_LBA		= $5C
=$60						CH_VAR_START_CLUSTER	= $60
=$64						CH_VAR_CURRENT_CLUST	= $64
=$68						CH_VAR_FILE_SIZE		  = $68
=$6c						CH_VAR_CURRENT_OFFSET	= $6C
=$14						CH376S_STAT_SUCCESS  = $14
=$17						CH376S_STAT_BUF_OVF  = $17
=$1d						CH376S_STAT_DSK_RD   = $1D
=$1e						CH376S_STAT_DSK_WR   = $1E
=$41						CH376S_ERR_OPEN_DIR  = $41
=$42						CH376S_ERR_MISS_FIL  = $42
=$43						CH376S_ERR_FND_NAME  = $43
=$82						CH376S_ERR_DISK_DSC  = $82
=$84						CH376S_ERR_LRG_SEC   = $84
=$92						CH376S_ERR_PARTTION  = $92
=$a1						CH376S_ERR_NOT_FORM  = $A1
=$b1						CH376S_ERR_DSK_FULL  = $B1
=$b2						CH376S_FDT_OVER      = $B2
=$b4						CH376S_FILE_CLOSED   = $B4
=$00						SDCARD_PRSNT_NO_CARD = $00
=$01						SDCARD_PRSNT_CD      = $01
=$02						SDCARD_PRSNT_WP      = $02
=$04						SDCARD_PRSNT_MNTED   = $04  ; Card is present and Mounted1

;******  Return to file: SDOS.asm

.192000		5c c5 21 19	jmp $1921c5	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.192004		5c d4 21 19	jmp $1921d4	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.192008		5c 20 20 19	jmp $192020	SDOS_INIT     JML ISDOS_INIT
.19200c		5c 63 20 19	jmp $192063	SDOS_DIR      JML ISDOS_DIR
.192010		5c 21 21 19	jmp $192121	SDOS_CHDIR    JML ISDOS_CHDIR
.192014		5c 22 21 19	jmp $192122	SDOS_LOAD     JML ISDOS_LOAD
.192018		5c 26 21 19	jmp $192126	SDOS_SAVE     JML ISDOS_SAVE
.19201c		5c 27 21 19	jmp $192127	SDOS_EXEC     JML ISDOS_EXEC
.192020						ISDOS_INIT
.192020		e2 20		sep #$20	                SEP #$20        ; set A short
.192022		a9 06		lda #$06	              LDA #$06
.192024		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192028		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19202b		a9 a8		lda #$a8	              LDA #$A8
.19202d		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192031		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192034		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192037		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.19203a		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.19203e		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.192041		a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.192043		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192047		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19204a		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19204d		a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.19204f		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA     ; Write the MODE and Wait for around ~10us
.192053						ISDOS_WAIT_FOR_MODE_SW
.192053		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA ; Wait 0.6us
.192056		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.19205a		c9 51		cmp #$51	              CMP #$51   ; CMD_RET_SUCCESS		EQU		051H, CMD_RET_ABORT		EQU		05FH
.19205c		d0 f5		bne $192053	              BNE ISDOS_WAIT_FOR_MODE_SW
.19205e		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA     ; See the Status Output
.192062		6b		rtl		              RTL
.192063						ISDOS_DIR
.192063		e2 20		sep #$20	                SEP #$20        ; set A short
.192065		c2 10		rep #$10	                REP #$10        ; set X long
.192067		20 28 21	jsr $192128	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.19206a		a2 00 00	ldx #$0000	              LDX #$0000
.19206d						ISDOS_DIR_TRF
.19206d		bf b7 23 19	lda $1923b7,x	              LDA sd_card_dir_string,X    ; /
.192071		9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.192075		e8		inx		              INX
.192076		e0 03 00	cpx #$0003	              CPX #$0003
.192079		d0 f2		bne $19206d	              BNE ISDOS_DIR_TRF
.19207b		20 6b 21	jsr $19216b	              JSR SDOS_FILE_OPEN         ; Now that the file name is set, go open File
.19207e		c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.192080		f0 03		beq $192085	              BEQ ISDOS_DIR_CONT0
.192082		82 87 00	brl $19210c	              BRL ISDOS_MISS_FILE
.192085						ISDOS_DIR_CONT0
.192085		a2 35 24	ldx #$2435	              LDX #<>sd_card_msg4         ; Print Screen the Message "FILE OPENED"
.192088		22 d5 07 19	jsl $1907d5	              JSL IPRINT       ; print the first line
.19208c						ISDOS_NEXT_ENTRY
.19208c		a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.19208e		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192092		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;
.192095		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;  Load First Data
.192099		a0 00 00	ldy #$0000	              LDY #$0000
.19209c		a2 00 00	ldx #$0000	              LDX #$0000
.19209f		a8		tay		              TAY              ; GET Size (Save in Case we need it)
.1920a0						ISDOS_DIR_GET_CHAR
.1920a0		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA ; Wait 0.6us
.1920a3		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;
.1920a7		22 f5 07 19	jsl $1907f5	              JSL IPUTC        ; Print the character
.1920ab		e8		inx		              INX
.1920ac		e0 08 00	cpx #$0008	              CPX #$0008
.1920af		d0 03		bne $1920b4	              BNE ISDOS_DIR_CONT1
.1920b1		20 1a 21	jsr $19211a	              JSR ISDOS_DISPLAY_DOT
.1920b4						ISDOS_DIR_CONT1
.1920b4		e0 0b 00	cpx #$000b	              CPX #$000B          ; the First 11th Character is the file name
.1920b7		d0 e7		bne $1920a0	              BNE ISDOS_DIR_GET_CHAR
.1920b9		a9 20		lda #$20	              LDA #$20
.1920bb		22 f5 07 19	jsl $1907f5	              JSL IPUTC        ; Print the character
.1920bf		a9 28		lda #$28	              LDA #'('
.1920c1		22 f5 07 19	jsl $1907f5	              JSL IPUTC        ; Print the character
.1920c5		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;
.1920c9		29 10		and #$10	              AND #$10
.1920cb		c9 10		cmp #$10	              CMP #$10
.1920cd		f0 04		beq $1920d3	              BEQ ISDOS_DIR_ATTR0
.1920cf		a9 46		lda #$46	              LDA #'F'
.1920d1		80 02		bra $1920d5	              BRA ISDOS_DIR_ATTR1
.1920d3						ISDOS_DIR_ATTR0
.1920d3		a9 44		lda #$44	              LDA #'D'
.1920d5						ISDOS_DIR_ATTR1
.1920d5		22 f5 07 19	jsl $1907f5	              JSL IPUTC        ; Print the character
.1920d9		a9 29		lda #$29	              LDA #')'
.1920db		22 f5 07 19	jsl $1907f5	              JSL IPUTC        ; Print the character
.1920df		a9 0d		lda #$0d	              LDA #$0D         ; Carriage Return
.1920e1		22 f5 07 19	jsl $1907f5	              JSL IPUTC        ; Print the character
.1920e5						ISDOS_DIR_GET_CHAR_FINISH
.1920e5		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA ; Wait 0.6us
.1920e8		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ; After the name Just empty the buffer
.1920ec		e8		inx		              INX
.1920ed		e0 20 00	cpx #$0020	              CPX #$0020
.1920f0		d0 f3		bne $1920e5	              BNE ISDOS_DIR_GET_CHAR_FINISH
.1920f2		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.1920f5		a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.1920f7		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.1920fb		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.1920fe		c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.192100		f0 8a		beq $19208c	              BEQ ISDOS_NEXT_ENTRY
.192102		c9 42		cmp #$42	              CMP #CH376S_ERR_MISS_FIL
.192104		d0 06		bne $19210c	              BNE  ISDOS_MISS_FILE
.192106		a2 42 24	ldx #$2442	              LDX #<>sd_card_msg5   ; End of File
.192109		82 09 00	brl $192115	              BRL ISDOS_DIR_DONE
.19210c						ISDOS_MISS_FILE
.19210c		a2 cd 23	ldx #$23cd	              LDX #<>sd_card_err0
.19210f		82 03 00	brl $192115	              BRL ISDOS_DIR_DONE
.192112						NO_SDCARD_PRESENT
.192112		a2 ba 23	ldx #$23ba	              LDX #<>sd_no_card_msg
.192115						ISDOS_DIR_DONE
.192115		22 d5 07 19	jsl $1907d5	              JSL IPRINT       ; print the first line
.192119		6b		rtl		              RTL;
.19211a						ISDOS_DISPLAY_DOT
.19211a		a9 2e		lda #$2e	              LDA #'.'
.19211c		22 f5 07 19	jsl $1907f5	              JSL IPUTC        ; Print the character
.192120		60		rts		              RTS;
.192121		00		brk #		ISDOS_CHDIR   BRK;
.192122						ISDOS_LOAD
.192122		20 42 22	jsr $192242	              JSR SDOS_READ_FILE;
.192125		6b		rtl		              RTL;
.192126		00		brk #		ISDOS_SAVE    BRK;
.192127		00		brk #		ISDOS_EXEC    BRK;
.192128						ISDOS_MOUNT_CARD
.192128		e2 20		sep #$20	                SEP #$20        ; set A short
.19212a		c2 10		rep #$10	                REP #$10        ; set X long
.19212c		a2 fe 23	ldx #$23fe	              LDX #<>sd_card_msg1         ; Print Screen the Message "Card Detected"
.19212f		22 d5 07 19	jsl $1907d5	              JSL IPRINT       ; print the first line
.192133		a0 00 00	ldy #$0000	              LDY #$0000
.192136		a9 01		lda #$01	              LDA #$01
.192138		85 3f		sta $3f		              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.19213a						TRY_MOUNT_AGAIN
.19213a		a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.19213c		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD              ;
.192140		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT       ;
.192143		c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.192145		f0 09		beq $192150	              BEQ ISDOS_MOUNTED
.192147		c8		iny		              INY
.192148		c0 05 00	cpy #$0005	              CPY #$0005
.19214b		d0 ed		bne $19213a	              BNE TRY_MOUNT_AGAIN
.19214d		4c 5e 21	jmp $19215e	              JMP SDCARD_ERROR_MOUNT
.192150						ISDOS_MOUNTED
.192150		a2 0e 24	ldx #$240e	              LDX #<>sd_card_msg2         ; Print Screen the Message "Card Detected"
.192153		22 d5 07 19	jsl $1907d5	              JSL IPRINT       ; print the first line
.192157		a5 3f		lda $3f		              LDA SDCARD_PRSNT_MNT
.192159		29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.19215b		09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.19215d		60		rts		              RTS
.19215e						SDCARD_ERROR_MOUNT
.19215e		a2 1d 24	ldx #$241d	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.192161		22 d5 07 19	jsl $1907d5	              JSL IPRINT       ; print the first line
.192165		60		rts		              RTS
.192166		a9 00		lda #$00	ISDOS_NO_CARD LDA #SDCARD_PRSNT_NO_CARD
.192168		85 3f		sta $3f		              STA SDCARD_PRSNT_MNT
.19216a		60		rts		              RTS
.19216b						SDOS_FILE_OPEN
.19216b		20 7b 21	jsr $19217b	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.19216e		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.192171		a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.192173		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD          ; Go Request to open the File
.192177		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.19217a		60		rts		              RTS
.19217b						SDOS_SET_FILE_NAME
.19217b		a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.19217d		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192181		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.192184		a2 00 00	ldx #$0000	              LDX #$0000
.192187						SDOS_SET_FILE_LOOP
.192187		bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.19218b		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.19218f		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192192		e8		inx		              INX
.192193		c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.192195		d0 f0		bne $192187	              BNE SDOS_SET_FILE_LOOP
.192197		60		rts		              RTS
.192198						DLYCMD_2_DTA
.192198		ea		nop		              NOP
.192199		ea		nop		              NOP
.19219a		ea		nop		              NOP
.19219b		ea		nop		              NOP
.19219c		ea		nop		              NOP
.19219d						DLYDTA_2_DTA
.19219d		ea		nop		              NOP
.19219e		ea		nop		              NOP
.19219f		ea		nop		              NOP
.1921a0		ea		nop		              NOP
.1921a1		ea		nop		              NOP
.1921a2		60		rts		              RTS;
.1921a3						SDCARD_WAIT_4_INT
.1921a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1921a5		78		sei		              SEI                 ; There is no time out on this, so let's
.1921a6						SDCARD_BUSY_INT
.1921a6		af 09 e8 af	lda $afe809	              LDA SDCARD_CMD    ; Read Status of Interrupt and
.1921aa		29 80		and #$80	              AND #$80          ; Bit[7] = !INT if Zero = Busy
.1921ac		c9 80		cmp #$80	              CMP #$80          ;
.1921ae		f0 f6		beq $1921a6	              BEQ SDCARD_BUSY_INT
.1921b0		58		cli		              CLI
.1921b1						SDCARD_BUSY_DONE
.1921b1		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA ;
.1921b4		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA ;
.1921b7		a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.1921b9		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1921bd		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.1921c0		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA;
.1921c4		60		rts		              RTS           ;
.1921c5						ISDOS_CHK_CD
.1921c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1921c7		18		clc		              CLC
.1921c8		af 10 e8 af	lda $afe810	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.1921cc		29 01		and #$01	              AND #$01
.1921ce		c9 01		cmp #$01	              CMP #$01
.1921d0		f0 01		beq $1921d3	              BEQ SDCD_NOT_PRST;
.1921d2		38		sec		              SEC
.1921d3		60		rts		SDCD_NOT_PRST RTS
.1921d4						ISDOS_CHK_WP
.1921d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1921d6		18		clc		              CLC
.1921d7		af 10 e8 af	lda $afe810	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.1921db		29 02		and #$02	              AND #$02
.1921dd		d0 01		bne $1921e0	              BNE SDCD_NOT_WP;
.1921df		38		sec		              SEC
.1921e0		60		rts		SDCD_NOT_WP   RTS
.1921e1						ISDOS_GET_FILE_SIZE
.1921e1		e2 20		sep #$20	                SEP #$20        ; set A short
.1921e3		a9 0c		lda #$0c	              LDA #CH_CMD_RD_VAR32
.1921e5		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1921e9		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.1921ec		a9 68		lda #$68	              LDA #CH_VAR_FILE_SIZE
.1921ee		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA;
.1921f2		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.1921f5		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA         ;LSB First
.1921f9		8f 28 03 00	sta $000328	              STA @lSDOS_FILE_SIZE+0
.1921fd		8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;     ; Store in ADDER32 REgister A
.192201		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192204		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192208		8f 29 03 00	sta $000329	              STA @lSDOS_FILE_SIZE+1
.19220c		8f 21 01 00	sta $000121	              STA @lADDER32_A_LH;     ; Store in ADDER32 REgister A
.192210		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192213		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192217		8f 2a 03 00	sta $00032a	              STA @lSDOS_FILE_SIZE+2
.19221b		8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;     ; Store in ADDER32 REgister A
.19221f		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192222		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192226		8f 2b 03 00	sta $00032b	              STA @lSDOS_FILE_SIZE+3   ;MSB Last
.19222a		8f 23 01 00	sta $000123	              STA @lADDER32_A_HH;     ; Store in ADDER32 REgister A
.19222e		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192231		af 28 01 00	lda $000128	              LDA @lADDER32_R_LL;
.192235		af 29 01 00	lda $000129	              LDA @lADDER32_R_LH;
.192239		af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL;
.19223d		af 2b 01 00	lda $00012b	              LDA @lADDER32_R_HH;
.192241		60		rts		              RTS
.192242						SDOS_READ_FILE
.192242		c2 30		rep #$30	                REP #$30        ; set A&X long
.192244		20 4f 23	jsr $19234f	              JSR SDOS_SETUP_ADDER_B;
.192247		e2 20		sep #$20	                SEP #$20        ; set A short
.192249		20 6b 21	jsr $19216b	              JSR SDOS_FILE_OPEN
.19224c		c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.19224e		f0 03		beq $192253	              BEQ SDOS_READ_FILE_KEEP_GOING
.192250		82 91 00	brl $1922e4	              BRL SDOS_READ_END
.192253						SDOS_READ_FILE_KEEP_GOING
.192253		a2 51 24	ldx #$2451	              LDX #<>sd_card_msg6         ; Print Screen the Message "FILE FOUND, LOADING..."
.192256		22 d5 07 19	jsl $1907d5	              JSL IPRINT       ; print the first line
.19225a		20 e1 21	jsr $1921e1	              JSR ISDOS_GET_FILE_SIZE   ; Get the File Size in 32Bits
.19225d		c2 20		rep #$20	                REP #$20        ; set A long
.19225f		20 73 23	jsr $192373	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE;
.192262		a9 00 00	lda #$0000	              LDA #$0000
.192265		8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.192269		8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.19226d		8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.192271		e2 20		sep #$20	                SEP #$20        ; set A short
.192273						SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.192273		a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.192275		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.192279		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.19227c		af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.192280		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192284		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.192287		af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.19228b		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19228f		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT
.192292		c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.192294		f0 03		beq $192299	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.192296		82 4b 00	brl $1922e4	              BRL SDOS_READ_END
.192299						SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.192299		20 92 23	jsr $192392	              JSR SDOS_READ_BLOCK
.19229c		a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.19229e		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.1922a2		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT
.1922a5		c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.1922a7		d0 05		bne $1922ae	              BNE SDOS_READ_PROC_DONE
.1922a9		20 ee 22	jsr $1922ee	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.1922ac		80 eb		bra $192299	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.1922ae						SDOS_READ_PROC_DONE
.1922ae		c2 20		rep #$20	                REP #$20        ; set A long
.1922b0		af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.1922b4		c9 ff ff	cmp #$ffff	              CMP #$FFFF
.1922b7		d0 24		bne $1922dd	              BNE SDOS_READ_DONE1                  ; if it equal 64K, then the file is bugger than 64K
.1922b9		af 28 01 00	lda $000128	              LDA @lADDER32_R_LL
.1922bd		8f 20 01 00	sta $000120	              STA @lADDER32_A_LL
.1922c1		af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL
.1922c5		8f 22 01 00	sta $000122	              STA @lADDER32_A_HL
.1922c9		20 73 23	jsr $192373	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE ;
.1922cc		20 35 23	jsr $192335	              JSR SDOS_COMPUTE_LOCATE_POINTER
.1922cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1922d1		20 00 23	jsr $192300	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.1922d4		20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT
.1922d7		c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.1922d9		d0 09		bne $1922e4	              BNE SDOS_READ_END
.1922db		80 96		bra $192273	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.1922dd						SDOS_READ_DONE1
.1922dd		a9 00		lda #$00	              LDA #$00
.1922df		a2 68 24	ldx #$2468	              LDX #<>sd_card_msg7         ; Print Screen the Message "FILE LOADED"
.1922e2		80 05		bra $1922e9	              BRA SDOS_READ_PROC_DONE1
.1922e4						SDOS_READ_END
.1922e4		a9 ff		lda #$ff	              LDA #$FF
.1922e6		a2 e3 23	ldx #$23e3	              LDX #<>sd_card_err1         ;"ERROR LOADING FILE"
.1922e9						SDOS_READ_PROC_DONE1
.1922e9		22 d5 07 19	jsl $1907d5	              JSL IPRINT       ; print the first line
.1922ed		60		rts		              RTS;
.1922ee						SDOS_ADJUST_POINTER
.1922ee		c2 20		rep #$20	                REP #$20        ; set A long
.1922f0		18		clc		              CLC
.1922f1		a5 38		lda $38		              LDA SDCARD_FILE_PTR ;Load the Pointer
.1922f3		65 3c		adc $3c		              ADC SDCARD_BYTE_NUM
.1922f5		85 38		sta $38		              STA SDCARD_FILE_PTR;
.1922f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1922f9		a5 3a		lda $3a		              LDA SDCARD_FILE_PTR+2;
.1922fb		69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.1922fd		85 3a		sta $3a		              STA SDCARD_FILE_PTR+2;
.1922ff						SDOS_ADJ_DONE
.1922ff		60		rts		              RTS
.192300						SDOS_BYTE_LOCATE
.192300		e2 20		sep #$20	                SEP #$20        ; set A short
.192302		a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.192304		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192308		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19230b		af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.19230f		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192313		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192316		af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.19231a		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19231e		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192321		af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.192325		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192329		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.19232c		af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.192330		8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192334		60		rts		              RTS
.192335						SDOS_COMPUTE_LOCATE_POINTER
.192335		c2 20		rep #$20	                REP #$20        ; set A long
.192337		18		clc		              CLC
.192338		af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.19233c		69 ff ff	adc #$ffff	              ADC #$FFFF
.19233f		8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.192343		af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.192347		69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.19234a		8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.19234e		60		rts		              RTS
.19234f						SDOS_SETUP_ADDER_B
.19234f		c2 20		rep #$20	                REP #$20        ; set A long
.192351		a9 01 00	lda #$0001	              LDA #$0001
.192354		8f 24 01 00	sta $000124	              STA @lADDER32_B_LL
.192358		a9 ff ff	lda #$ffff	              LDA #$FFFF
.19235b		8f 26 01 00	sta $000126	              STA @lADDER32_B_HL
.19235f		60		rts		              RTS
.192360						SDOS_LOAD_ADDER_A_WITH_SIZE
.192360		c2 20		rep #$20	                REP #$20        ; set A long
.192362		af 28 03 00	lda $000328	              LDA @lSDOS_FILE_SIZE;
.192366		8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;
.19236a		af 2a 03 00	lda $00032a	              LDA @lSDOS_FILE_SIZE+2;
.19236e		8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;
.192372		60		rts		              RTS
.192373						SDOS_SETUP_CH376S_BUFFER_SIZE
.192373		c2 20		rep #$20	                REP #$20        ; set A long
.192375		af 2a 01 00	lda $00012a	              LDA  @lADDER32_R_HL
.192379		29 00 80	and #$8000	              AND #$8000          ; Check if it is negative
.19237c		c9 00 80	cmp #$8000	              CMP #$8000          ; if it is then just put the Size of the file in ByteNumber
.19237f		f0 08		beq $192389	              BEQ SDOS_SETUP_SMALLR_THAN64K
.192381		a9 ff ff	lda #$ffff	              LDA #$FFFF
.192384		8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.192388		60		rts		              RTS
.192389						SDOS_SETUP_SMALLR_THAN64K
.192389		af 20 01 00	lda $000120	              LDA @lADDER32_A_LL
.19238d		8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.192391		60		rts		              RTS
.192392						SDOS_READ_BLOCK
.192392		e2 20		sep #$20	                SEP #$20        ; set A short
.192394		a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.192396		8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.19239a		20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.19239d		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA     ; Read First Byte for Number of Byte to Read
.1923a1		85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.1923a3		20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.1923a6		a0 00 00	ldy #$0000	              LDY #$0000
.1923a9						SDOS_READ_MORE
.1923a9		af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.1923ad		97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.1923af		c8		iny		              INY
.1923b0		c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.1923b2		d0 f5		bne $1923a9	              BNE SDOS_READ_MORE
.1923b4		a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.1923b6		60		rts		              RTS
>1923b7		2f 2a 00			sd_card_dir_string  .text $2F, $2A ,$00
>1923ba		4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>1923c2		44 20 50 52 45 53 45 4e 54 0d 00
>1923cd		45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>1923d5		20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>1923e3		45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>1923eb		41 44 49 4e 47 20 46 49 4c 45 00
>1923f6		4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>1923fe		53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>192406		45 54 45 43 54 45 44 00
>19240e		53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>192416		4f 55 4e 54 45 44 00
>19241d		46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>192425		4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>192435		46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>19243d		4e 45 44 0d 00
>192442		45 4e 44 20 4f 46 20 46		sd_card_msg5        .text "END OF FILE...", $00
>19244a		49 4c 45 2e 2e 2e 00
>192451		46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>192459		4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>192468		46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>192470		44 45 44 00

;******  Return to file: kernel.asm


;******  Processing file: OPL2_Library.asm


;******  Processing file: OPL2_def.asm

=$afe500					OPL2_L_BASE               = $AFE500
=$afe501					OPL2_L_TEST               = $AFE501 ; TEST
=$afe502					OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503					OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504					OPL2_L_IRQ                = $AFE504 ;
=$afe508					OPL2_L_CSM                = $AFE508 ;
=$afe520					OPL2_L_AM_VID_EG_KSR_MULT = $AFE520 ; $40..$35 (21 Registers)
=$afee40					OPL2_L_KSL_TL             = $AFEE40;  $40..$55 (21 Registers)
=$afe560					OPL2_L_AR_DR              = $AFE560;  $60..$75 (21 Registers)
=$afe580					OPL2_L_SL_RR              = $AFE580;  $80..$95 (21 Registers)
=$afe5a0					OPL2_L_FNumber            = $AFE5A0;  $A0..$A8
=$afe5b0					OPL2_L_KON_BLOCK_FNumber  = $AFE5B0;  $B0..$B9
=$afe5bd					OPL2_L_DPTH_RHYTM         = $AFE5BD;  $BD
=$afe5c0					OPL2_L_FEEDBACK           = $AFE5C0;  $C0..$C9
=$afe5e0					OPL2_L_WAVE_SELECT        = $AFE5E0;  $E0..$F5
=$afe600					OPL2_R_BASE               = $AFE600
=$afe601					OPL2_R_TEST               = $AFE601 ; TEST
=$afe602					OPL2_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL2_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL2_R_IRQ                = $AFE604 ;
=$afe608					OPL2_R_CSM                = $AFE608 ;
=$afe620					OPL2_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL2_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL2_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL2_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL2_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL2_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL2_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL2_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL2_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$e700						OPL2_S_BASE_LL            = $E700
=$00af						OPL2_S_BASE_HL            = $00AF
=$afe701					OPL2_S_TEST               = $AFE701 ; TEST
=$afe702					OPL2_S_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL2_S_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL2_S_IRQ                = $AFE704 ;
=$afe708					OPL2_S_CSM                = $AFE708 ;
=$afe720					OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL2_S_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL2_S_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL2_S_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=0						NOTE_C =    0
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
>192474		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>19247c		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>19248c		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>192494		12
>192495		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>19249d		15
>19249e		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>1924a4		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>1924a9		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: OPL2_Library.asm

.1924af						IOPL2_TONE_TEST
.1924af		e2 20		sep #$20	                SEP #$20        ; set A short
.1924b1		a9 01		lda #$01	                LDA #$01
.1924b3		85 26		sta $26		                STA OPL2_OPERATOR
.1924b5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1924b7		22 2f 25 19	jsl $19252f	                JSL OPL2_INIT
.1924bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1924bd		a9 00		lda #$00	                LDA #$00
.1924bf		85 36		sta $36		                STA OPL2_LOOP
.1924c1						OPL2_TONE_TESTING_L0
.1924c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1924c3		a5 36		lda $36		                LDA OPL2_LOOP
.1924c5		85 27		sta $27		                STA OPL2_CHANNEL
.1924c7		38		sec		                SEC
.1924c8		22 7b 25 19	jsl $19257b	                JSL OPL2_SET_TREMOLO
.1924cc		38		sec		                SEC
.1924cd		22 aa 25 19	jsl $1925aa	                JSL OPL2_SET_VIBRATO
.1924d1		a9 04		lda #$04	                LDA #$04
.1924d3		85 32		sta $32		                STA OPL2_PARAMETER0
.1924d5		22 de 25 19	jsl $1925de	                JSL OPL2_SET_MULTIPLIER
.1924d9		a9 0a		lda #$0a	                LDA #$0A
.1924db		85 32		sta $32		                STA OPL2_PARAMETER0
.1924dd		22 46 26 19	jsl $192646	                JSL OPL2_SET_ATTACK
.1924e1		a9 04		lda #$04	                LDA #$04
.1924e3		85 32		sta $32		                STA OPL2_PARAMETER0
.1924e5		22 7a 26 19	jsl $19267a	                JSL OPL2_SET_DECAY
.1924e9		a9 0f		lda #$0f	                LDA #$0F
.1924eb		85 32		sta $32		                STA OPL2_PARAMETER0
.1924ed		22 a6 26 19	jsl $1926a6	                JSL OPL2_SET_SUSTAIN
.1924f1		a9 0f		lda #$0f	                LDA #$0F
.1924f3		85 32		sta $32		                STA OPL2_PARAMETER0
.1924f5		22 da 26 19	jsl $1926da	                JSL OPL2_SET_RELEASE
.1924f9		e2 20		sep #$20	                SEP #$20        ; set A short
.1924fb		e6 36		inc $36		                INC OPL2_LOOP
.1924fd		a5 36		lda $36		                LDA OPL2_LOOP
.1924ff		c9 03		cmp #$03	                CMP #$03
.192501		d0 be		bne $1924c1	                BNE OPL2_TONE_TESTING_L0
.192503		a9 00		lda #$00	                LDA #$00
.192505		85 36		sta $36		                STA OPL2_LOOP
.192507						OPL2_TONE_TESTING_L1
.192507		85 30		sta $30		                STA OPL2_NOTE
.192509		29 03		and #$03	                AND #$03        ; replace modulo 3
.19250b		85 27		sta $27		                STA OPL2_CHANNEL
.19250d		a9 03		lda #$03	                LDA #$03
.19250f		85 31		sta $31		                STA OPL2_OCTAVE
.192511		22 51 25 19	jsl $192551	                JSL OPL2_PLAYNOTE
.192515		e2 20		sep #$20	                SEP #$20        ; set A short
.192517		c2 10		rep #$10	                REP #$10        ; set X long
.192519		a2 00 00	ldx #$0000	                LDX #$0000
.19251c						OPL2_TONE_TESTING_L2
.19251c		ea		nop		                NOP
.19251d		ea		nop		                NOP
.19251e		ea		nop		                NOP
.19251f		ea		nop		                NOP
.192520		e8		inx		                INX
.192521		e0 ff ff	cpx #$ffff	                CPX #$FFFF
.192524		d0 f6		bne $19251c	                BNE OPL2_TONE_TESTING_L2
.192526		e6 36		inc $36		                INC OPL2_LOOP
.192528		a5 36		lda $36		                LDA OPL2_LOOP
.19252a		c9 0c		cmp #$0c	                CMP #12
.19252c		d0 d9		bne $192507	                BNE OPL2_TONE_TESTING_L1
.19252e		6b		rtl		                RTL
.19252f						OPL2_INIT
.19252f		c2 20		rep #$20	                REP #$20        ; set A long
.192531		a9 00 00	lda #$0000	                LDA #$0000
.192534		85 28		sta $28		                STA OPL2_REG_REGION
.192536		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.192538		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19253a		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19253c		85 30		sta $30		                STA OPL2_NOTE
.19253e		85 32		sta $32		                STA OPL2_PARAMETER0
.192540		85 34		sta $34		                STA OPL2_PARAMETER2
.192542		6b		rtl		                RTL
.192543						OPL2_Reset
.192543		6b		rtl		                RTL
.192544						OPL2_Get_FrequencyBlock
.192544		6b		rtl		                RTL
.192545						OPL2_Get_Register
.192545		6b		rtl		                RTL
.192546						OPL2_Get_WaveFormSelect
.192546		6b		rtl		                RTL
.192547						OPL2_Get_ScalingLevel
.192547		6b		rtl		                RTL
.192548						OPL2_Get_Block
.192548		6b		rtl		                RTL
.192549						OPL2_Get_KeyOn
.192549		6b		rtl		                RTL
.19254a						OPL2_Get_Feedback
.19254a		6b		rtl		                RTL
.19254b						OPL2_Get_SynthMode
.19254b		6b		rtl		                RTL
.19254c						OPL2_Get_DeepTremolo
.19254c		6b		rtl		                RTL
.19254d						OPL2_Get_DeepVibrato
.19254d		6b		rtl		                RTL
.19254e						OPL2_Get_Percussion
.19254e		6b		rtl		                RTL
.19254f						OPL2_Get_Drums
.19254f		6b		rtl		                RTL
.192550						OPL2_Get_WaveForm
.192550		6b		rtl		                RTL
.192551						OPL2_PLAYNOTE
.192551		e2 20		sep #$20	                SEP #$20        ; set A short
.192553		a9 00		lda #$00	                LDA #$00
.192555		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.192557		20 a5 27	jsr $1927a5	                JSR OPL2_SET_KEYON
.19255a		20 74 27	jsr $192774	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.19255d		e2 10		sep #$10	                SEP #$10        ; set X short
.19255f		c2 20		rep #$20	                REP #$20        ; set A long
.192561		a6 30		ldx $30		                LDX OPL2_NOTE
.192563		bf 74 24 19	lda $192474,x	                LDA @lnoteFNumbers,X
.192567		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 16bit in Param OPL2_PARAMETER0 & OPL2_PARAMETER1
.192569		22 06 27 19	jsl $192706	                JSL OPL2_SET_FNUMBER
.19256d		e2 20		sep #$20	                SEP #$20        ; set A short
.19256f		a9 01		lda #$01	                LDA #$01
.192571		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.192573		20 a5 27	jsr $1927a5	                JSR OPL2_SET_KEYON
.192576		6b		rtl		                RTL
.192577						OPL2_PLAYDRUM
.192577		6b		rtl		                RTL
.192578						OPL2_Set_Instrument
.192578		6b		rtl		                RTL
.192579						OPL2_Set_Register
.192579		6b		rtl		                RTL
.19257a						OPL2_Set_WaveFormSelect
.19257a		6b		rtl		                RTL
.19257b						OPL2_SET_TREMOLO
.19257b		08		php		                PHP ; Push the Carry
.19257c		c2 20		rep #$20	                REP #$20        ; set A long
.19257e		a9 20 00	lda #$0020	                LDA #$0020;
.192581		85 28		sta $28		                STA OPL2_REG_REGION
.192583		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192586		28		plp		                PLP ; Pull the Carry out
.192587		e2 20		sep #$20	                SEP #$20        ; set A short
.192589		b0 08		bcs $192593	                BCS OPL2_Set_Tremolo_Set;
.19258b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19258d		29 7f		and #$7f	                AND #$7F
.19258f		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192591		80 06		bra $192599	                BRA OPL2_Set_Tremolo_Exit
.192593						OPL2_Set_Tremolo_Set
.192593		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192595		09 80		ora #$80	                ORA #$80
.192597		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192599						OPL2_Set_Tremolo_Exit
.192599		6b		rtl		                RTL
.19259a						OPL2_GET_TREMOLO
.19259a		c2 20		rep #$20	                REP #$20        ; set A long
.19259c		a9 20 00	lda #$0020	                LDA #$0020;
.19259f		85 28		sta $28		                STA OPL2_REG_REGION
.1925a1		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925a4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925a6		29 80 00	and #$0080	                AND #$80
.1925a9		6b		rtl		                RTL
.1925aa						OPL2_SET_VIBRATO
.1925aa		08		php		                PHP ; Push the Carry
.1925ab		c2 20		rep #$20	                REP #$20        ; set A long
.1925ad		a9 20 00	lda #$0020	                LDA #$0020;
.1925b0		85 28		sta $28		                STA OPL2_REG_REGION
.1925b2		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925b5		28		plp		                PLP ; Pull the Carry out
.1925b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1925b8		b0 08		bcs $1925c2	                BCS OPL2_Set_Vibrato_Set;
.1925ba		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925bc		29 bf		and #$bf	                AND #$BF
.1925be		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925c0		80 06		bra $1925c8	                BRA OPL2_Set_Vibrato_Exit
.1925c2						OPL2_Set_Vibrato_Set
.1925c2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925c4		09 40		ora #$40	                ORA #$40
.1925c6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925c8						OPL2_Set_Vibrato_Exit
.1925c8		6b		rtl		                RTL
.1925c9						OPL2_GET_VIBRATO
.1925c9		c2 20		rep #$20	                REP #$20        ; set A long
.1925cb		a9 20 00	lda #$0020	                LDA #$0020;
.1925ce		85 28		sta $28		                STA OPL2_REG_REGION
.1925d0		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925d3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925d5		29 40 00	and #$0040	                AND #$40
.1925d8		6b		rtl		                RTL
.1925d9						OPL2_Set_MaintainSustain
.1925d9		6b		rtl		                RTL
.1925da						OPL2_Get_MaintainSustain
.1925da		6b		rtl		                RTL
.1925db						OPL2_Set_EnvelopeScaling
.1925db		6b		rtl		                RTL
.1925dc						OPL2_Get_EnvelopeScaling
.1925dc		6b		rtl		                RTL
.1925dd						OPL2_Get_Multiplier
.1925dd		6b		rtl		                RTL
.1925de						OPL2_SET_MULTIPLIER
.1925de		c2 20		rep #$20	                REP #$20        ; set A long
.1925e0		a9 20 00	lda #$0020	                LDA #$0020;
.1925e3		85 28		sta $28		                STA OPL2_REG_REGION
.1925e5		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1925ea		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1925ec		29 0f		and #$0f	                AND #$0F
.1925ee		85 32		sta $32		                STA OPL2_PARAMETER0
.1925f0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925f2		29 f0		and #$f0	                AND #$F0
.1925f4		05 32		ora $32		                ORA OPL2_PARAMETER0
.1925f6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925f8		6b		rtl		                RTL
.1925f9						OPL2_SET_SCALINGLEVEL
.1925f9		c2 20		rep #$20	                REP #$20        ; set A long
.1925fb		a9 40 00	lda #$0040	                LDA #$0040;
.1925fe		85 28		sta $28		                STA OPL2_REG_REGION
.192600		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192603		e2 20		sep #$20	                SEP #$20        ; set A short
.192605		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192607		29 03		and #$03	                AND #$03
.192609		0a		asl a		                ASL
.19260a		0a		asl a		                ASL
.19260b		0a		asl a		                ASL
.19260c		0a		asl a		                ASL
.19260d		0a		asl a		                ASL
.19260e		0a		asl a		                ASL
.19260f		85 32		sta $32		                STA OPL2_PARAMETER0
.192611		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192613		29 3f		and #$3f	                AND #$3F
.192615		05 32		ora $32		                ORA OPL2_PARAMETER0
.192617		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192619		6b		rtl		                RTL
.19261a						OPL2_SET_VOLUME
.19261a		c2 20		rep #$20	                REP #$20        ; set A long
.19261c		a9 40 00	lda #$0040	                LDA #$0040  ;
.19261f		85 28		sta $28		                STA OPL2_REG_REGION
.192621		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192624		e2 20		sep #$20	                SEP #$20        ; set A short
.192626		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.192628		29 3f		and #$3f	                AND #$3F
.19262a		85 32		sta $32		                STA OPL2_PARAMETER0
.19262c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19262e		29 c0		and #$c0	                AND #$C0
.192630		05 32		ora $32		                ORA OPL2_PARAMETER0
.192632		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192634		6b		rtl		                RTL
.192635						OPL2_GET_VOLUME
.192635		c2 20		rep #$20	                REP #$20        ; set A long
.192637		a9 40 00	lda #$0040	                LDA #$0040  ;
.19263a		85 28		sta $28		                STA OPL2_REG_REGION
.19263c		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.19263f		e2 20		sep #$20	                SEP #$20        ; set A short
.192641		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192643		29 3f		and #$3f	                AND #$3F
.192645		6b		rtl		                RTL
.192646						OPL2_SET_ATTACK
.192646		c2 20		rep #$20	                REP #$20        ; set A long
.192648		a9 60 00	lda #$0060	                LDA #$0060  ;
.19264b		85 28		sta $28		                STA OPL2_REG_REGION
.19264d		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192650		e2 20		sep #$20	                SEP #$20        ; set A short
.192652		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192654		29 0f		and #$0f	                AND #$0F
.192656		0a		asl a		                ASL
.192657		0a		asl a		                ASL
.192658		0a		asl a		                ASL
.192659		0a		asl a		                ASL
.19265a		85 32		sta $32		                STA OPL2_PARAMETER0
.19265c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19265e		29 0f		and #$0f	                AND #$0F
.192660		05 32		ora $32		                ORA OPL2_PARAMETER0
.192662		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192664		6b		rtl		                RTL
.192665						OPL2_GET_ATTACK
.192665		c2 20		rep #$20	                REP #$20        ; set A long
.192667		a9 60 00	lda #$0060	                LDA #$0060
.19266a		85 28		sta $28		                STA OPL2_REG_REGION
.19266c		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.19266f		e2 20		sep #$20	                SEP #$20        ; set A short
.192671		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192673		29 f0		and #$f0	                AND #$F0
.192675		4a		lsr a		                LSR
.192676		4a		lsr a		                LSR
.192677		4a		lsr a		                LSR
.192678		4a		lsr a		                LSR
.192679		6b		rtl		                RTL
.19267a						OPL2_SET_DECAY
.19267a		c2 20		rep #$20	                REP #$20        ; set A long
.19267c		a9 60 00	lda #$0060	                LDA #$0060;
.19267f		85 28		sta $28		                STA OPL2_REG_REGION
.192681		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192684		e2 20		sep #$20	                SEP #$20        ; set A short
.192686		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192688		29 0f		and #$0f	                AND #$0F
.19268a		85 32		sta $32		                STA OPL2_PARAMETER0
.19268c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19268e		29 f0		and #$f0	                AND #$F0
.192690		05 32		ora $32		                ORA OPL2_PARAMETER0
.192692		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192694		6b		rtl		                RTL
.192695						OPL2_GET_DECAY
.192695		c2 20		rep #$20	                REP #$20        ; set A long
.192697		a9 60 00	lda #$0060	                LDA #$0060
.19269a		85 28		sta $28		                STA OPL2_REG_REGION
.19269c		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.19269f		e2 20		sep #$20	                SEP #$20        ; set A short
.1926a1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926a3		29 0f		and #$0f	                AND #$0F
.1926a5		6b		rtl		                RTL
.1926a6						OPL2_SET_SUSTAIN
.1926a6		c2 20		rep #$20	                REP #$20        ; set A long
.1926a8		a9 80 00	lda #$0080	                LDA #$0080;
.1926ab		85 28		sta $28		                STA OPL2_REG_REGION
.1926ad		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1926b2		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1926b4		29 0f		and #$0f	                AND #$0F
.1926b6		0a		asl a		                ASL
.1926b7		0a		asl a		                ASL
.1926b8		0a		asl a		                ASL
.1926b9		0a		asl a		                ASL
.1926ba		85 32		sta $32		                STA OPL2_PARAMETER0
.1926bc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926be		29 0f		and #$0f	                AND #$0F
.1926c0		05 32		ora $32		                ORA OPL2_PARAMETER0
.1926c2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1926c4		6b		rtl		                RTL
.1926c5						OPL2_GET_SUSTAIN
.1926c5		c2 20		rep #$20	                REP #$20        ; set A long
.1926c7		a9 80 00	lda #$0080	                LDA #$0080
.1926ca		85 28		sta $28		                STA OPL2_REG_REGION
.1926cc		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1926d1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926d3		29 f0		and #$f0	                AND #$F0
.1926d5		4a		lsr a		                LSR
.1926d6		4a		lsr a		                LSR
.1926d7		4a		lsr a		                LSR
.1926d8		4a		lsr a		                LSR
.1926d9		6b		rtl		                RTL
.1926da						OPL2_SET_RELEASE
.1926da		c2 20		rep #$20	                REP #$20        ; set A long
.1926dc		a9 80 00	lda #$0080	                LDA #$0080;
.1926df		85 28		sta $28		                STA OPL2_REG_REGION
.1926e1		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926e4		e2 20		sep #$20	                SEP #$20        ; set A short
.1926e6		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1926e8		29 0f		and #$0f	                AND #$0F
.1926ea		85 32		sta $32		                STA OPL2_PARAMETER0
.1926ec		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926ee		29 f0		and #$f0	                AND #$F0
.1926f0		05 32		ora $32		                ORA OPL2_PARAMETER0
.1926f2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1926f4		6b		rtl		                RTL
.1926f5						OPL2_GET_RELEASE
.1926f5		c2 20		rep #$20	                REP #$20        ; set A long
.1926f7		a9 80 00	lda #$0080	                LDA #$0080
.1926fa		85 28		sta $28		                STA OPL2_REG_REGION
.1926fc		20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926ff		e2 20		sep #$20	                SEP #$20        ; set A short
.192701		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192703		29 0f		and #$0f	                AND #$0F
.192705		6b		rtl		                RTL
.192706						OPL2_SET_FNUMBER
.192706		e2 20		sep #$20	                SEP #$20        ; set A short
.192708		18		clc		                CLC
.192709		a5 27		lda $27		                LDA OPL2_CHANNEL
.19270b		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19270d		69 a0		adc #$a0	                ADC #$A0
.19270f		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.192711		a9 00		lda #$00	                LDA #$00
.192713		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.192715		c2 30		rep #$30	                REP #$30        ; set A&X long
.192717		18		clc		                CLC
.192718		a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.19271b		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19271d		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19271f		a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.192722		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.192724		e2 20		sep #$20	                SEP #$20        ; set A short
.192726		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the 16Bits Value of FNumber
.192728		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.19272a		18		clc		                CLC
.19272b		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.19272d		69 10		adc #$10	                ADC #$10
.19272f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.192731		a5 33		lda $33		                LDA OPL2_PARAMETER1
.192733		29 03		and #$03	                AND #$03
.192735		85 33		sta $33		                STA OPL2_PARAMETER1
.192737		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192739		29 fc		and #$fc	                AND #$FC
.19273b		05 33		ora $33		                ORA OPL2_PARAMETER1
.19273d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19273f		6b		rtl		                RTL
.192740						OPL2_GET_FNUMBER
.192740		e2 20		sep #$20	                SEP #$20        ; set A short
.192742		18		clc		                CLC
.192743		a5 27		lda $27		                LDA OPL2_CHANNEL
.192745		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.192747		69 a0		adc #$a0	                ADC #$A0
.192749		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19274b		a9 00		lda #$00	                LDA #$00
.19274d		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.19274f		c2 30		rep #$30	                REP #$30        ; set A&X long
.192751		18		clc		                CLC
.192752		a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192755		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.192757		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.192759		a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.19275c		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19275e		e2 20		sep #$20	                SEP #$20        ; set A short
.192760		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192762		85 32		sta $32		                STA OPL2_PARAMETER0
.192764		18		clc		                CLC
.192765		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.192767		69 10		adc #$10	                ADC #$10
.192769		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19276b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19276d		29 03		and #$03	                AND #$03
.19276f		85 33		sta $33		                STA OPL2_PARAMETER1
.192771		6b		rtl		                RTL
.192772						OPL2_Set_Frequency
.192772		6b		rtl		                RTL
.192773						OPL2_Get_Frequency
.192773		6b		rtl		                RTL
.192774						OPL2_SET_BLOCK
.192774		e2 20		sep #$20	                SEP #$20        ; set A short
.192776		18		clc		                CLC
.192777		a5 27		lda $27		                LDA OPL2_CHANNEL
.192779		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19277b		69 b0		adc #$b0	                ADC #$B0
.19277d		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19277f		a9 00		lda #$00	                LDA #$00
.192781		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.192783		c2 30		rep #$30	                REP #$30        ; set A&X long
.192785		18		clc		                CLC
.192786		a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192789		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19278b		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19278d		a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.192790		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.192792		e2 20		sep #$20	                SEP #$20        ; set A short
.192794		a5 31		lda $31		                LDA OPL2_OCTAVE
.192796		29 07		and #$07	                AND #$07
.192798		0a		asl a		                ASL
.192799		0a		asl a		                ASL
.19279a		85 31		sta $31		                STA OPL2_OCTAVE
.19279c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19279e		29 e3		and #$e3	                AND #$E3
.1927a0		05 31		ora $31		                ORA OPL2_OCTAVE
.1927a2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1927a4		60		rts		                RTS
.1927a5						OPL2_SET_KEYON
.1927a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1927a7		18		clc		                CLC
.1927a8		a5 27		lda $27		                LDA OPL2_CHANNEL
.1927aa		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1927ac		69 b0		adc #$b0	                ADC #$B0
.1927ae		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1927b0		a9 00		lda #$00	                LDA #$00
.1927b2		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1927b4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1927b6		18		clc		                CLC
.1927b7		a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.1927ba		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1927bc		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1927be		a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.1927c1		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1927c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1927c5		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1927c7		29 01		and #$01	                AND #$01
.1927c9		0a		asl a		                ASL
.1927ca		0a		asl a		                ASL
.1927cb		0a		asl a		                ASL
.1927cc		0a		asl a		                ASL
.1927cd		0a		asl a		                ASL
.1927ce		85 32		sta $32		                STA OPL2_PARAMETER0
.1927d0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1927d2		29 df		and #$df	                AND #$DF
.1927d4		05 32		ora $32		                ORA OPL2_PARAMETER0
.1927d6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1927d8		60		rts		                RTS
.1927d9						OPL2_Set_Feedback
.1927d9		6b		rtl		                RTL
.1927da						OPL2_Set_SynthMode
.1927da		6b		rtl		                RTL
.1927db						OPL2_Set_DeepTremolo
.1927db		6b		rtl		                RTL
.1927dc						OPL2_Set_DeepVibrato
.1927dc		6b		rtl		                RTL
.1927dd						OPL2_Set_Percussion
.1927dd		6b		rtl		                RTL
.1927de						OPL2_Set_Drums
.1927de		6b		rtl		                RTL
.1927df						OPL2_Set_WaveForm
.1927df		6b		rtl		                RTL
.1927e0						OPL2_GET_REG_OFFSET
.1927e0		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1927e2		a5 27		lda $27		                LDA OPL2_CHANNEL
.1927e4		29 0f		and #$0f	                AND #$0F
.1927e6		aa		tax		                TAX
.1927e7		a5 26		lda $26		                LDA OPL2_OPERATOR   ; Check which Operator In used
.1927e9		29 01		and #$01	                AND #$01            ; if ZERO = The operator 1, One = Operator 2
.1927eb		c9 01		cmp #$01	                CMP #$01
.1927ed		f0 06		beq $1927f5	                BEQ OPL2_Get_Register_Offset_l0
.1927ef		bf 8c 24 19	lda $19248c,x	                LDA @lregisterOffsets_operator0, X
.1927f3		80 04		bra $1927f9	                BRA OPL2_Get_Register_Offset_exit
.1927f5						OPL2_Get_Register_Offset_l0
.1927f5		bf 95 24 19	lda $192495,x	                LDA @lregisterOffsets_operator1, X
.1927f9						OPL2_Get_Register_Offset_exit
.1927f9		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1927fb		a9 00		lda #$00	                LDA #$00
.1927fd		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1927ff		c2 30		rep #$30	                REP #$30        ; set A&X long
.192801		18		clc		                CLC
.192802		a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192805		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.192807		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.192809		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19280b		a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.19280e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.192810		60		rts		                RTS

;******  Return to file: kernel.asm


;******  Processing file: Floppy.asm


;******  Processing file: Floppy_def.asm

=$af13f0					FDD_STATUS_A         = $AF13F0 ; Read     use in with PS2 and PS2 mode 30 noly
=$af13f1					FDD_STATUS_B         = $AF13F1 ; Read
=$af13f2					FDD_DIGITAL_OUTPUT   = $AF13F2 ; Read/Write
=$af13f3					FDD_TAPE_DRIVER      = $AF13F3 ; Read/Write
=$af13f4					FDD_MAIN_STATUE      = $AF13F4 ; Read
=$af13f4					FDD_DATA_RATE_SELECT = $AF13F4 ; Write
=$af13f5					FDD_FIFO             = $AF13F5 ; Read/Write
=$af13f7					FDD_DIGITAL_INPUT    = $AF13F7 ; Read
=$af13f7					FDD_CONFIG_CTRL      = $AF13F7 ; Write
=$01						FFD_DIRECTION         = $01 ; "1" Head is moving inward direction, "0" it moving outward direction
=$02						FDD_nWRITE_PROTECT    = $02 ; "0" protected / "1" unprotected
=$04						FDD_nINDEX            = $04 ;
=$08						FDD_HEAD_SELLECT      = $08 ; "1" side 1 selected / "0" side 0 selected
=$10						FDD_nTRACK0           = $10 ; "0" => head at track 0
=$20						FDD_STEP              = $20 ;
=$80						FDD_INTERRUPT_PENDING = $80 ; "1" interrupt output is active
=$01						FDD_nDIRECTION        = $01 ; "0" Head is moving inward direction, "1" it moving outward direction
=$02						FDD_WRITE_PROTECT     = $02 ; "1" protected / "0" unprotected
=$04						FDD_INDEX             = $04 ;
=$08						FDD_nHEAD_SELLECT     = $08 ; "0" side 1 selected / "1" side 0 selected
=$10						FDD_TRACK0            = $10 ; "1" => head at track 0
=$40						FDD_DMA_REQUEST       = $40 ; "1" => DMA requeste pending
=$01						FDD_MOTOR_ENABLE_0    = $01 ; "1" => motor enabled
=$02						FDD_MOTOR_ENABLE_1    = $02 ; "1" => motor enabled
=$04						FDD_WRITE_GATE        = $04 ;
=$08						FDD_READ_DATA_TOOGLE  = $08 ;
=$10						FDD_WRITE_DATA_TOOGLE = $10 ;
=$20						FDD_DRIVER_SELLECT_0  = $20 ; bit reflet the bite 0 in "Data Outpu Register"
=$08						FDD_READ_DATA         = $08 ;
=$01						FDD_WRITE_DATA        = $01 ;
=$40						FDD_nDRIVE_SELLECT_1  = $40 ;
=$03						FDD_DRIVE_SEL         = $03
=$04						FDD_nRESET            = $04 ; Set at 1 will reset the FDD write back 0 to reactivate it
=$08						FDD_DMAEN             = $08 ; Set at 1 will active the DMA and interupt IF in PC/AT and Model 30 mode otherwise alreaddy active
=$10						FDD_ENABLE_MOTOR_0    = $10
=$20						FDD_ENABLE_MOTOR_1    = $20
=$03						FDD_TAPE_SEL          = $03
=$0c						FDD_FLOPPY_BOOT_DRIVE = $0C
=$30						FDD_DRIVE_ID          = $30
=$03						FDD_DRIVER_BUSY       = $03
=$10						FDD_CMD_BUSSY         = $10 ; set to "1" when a command is in progress
=$20						FDD_NO_DMA            = $20
=$40						FDD_DIO               = $40
=$80						FDD_RQM               = $80
=$03						FDD_DATA_RATE         = $03
=$1c						FDD_PRE_COMP          = $1C
=$40						FDD_LOW_POWER         = $40 ; write 1 to activeate
=$80						FDD_SOFTWARE_RESET    = $80 ; write 1 to reset the controler , this bit will reset himself
=$01						FDD_nHIGH_ENSITY      = $01 ; "0" if 500Kbps or 1Mbps / "1" if 250 or 300Kpbs
=$06						FDD_DRATE_SEL_PS2     = $06
=$03						FDD_DRATE_SEL_MODE_30 = $03
=$04						FDD_NOPREC            = $04
=$08						FDD_DMAEN_MODE_30     = $08
=$80						FDD_DSKCHG            = $80 ; Disk Change state
=$03						FDD_DRATE_SEL         = $03
=$03						FDD_ST0_DRIVE_SELLECT       = $03 ; give the curent sellected drive
=$04						FDD_ST0_HEAD_ADDRESS        = $04
=$10						FDD_ST0_EQUIPMENT_CHeCK     = $10 ; "1" if fail
=$20						FDD_ST0_SEEK_END            = $20
=$c0						FDD_ST0_INTERRUPT_COE       = $C0 ; "00" Normal termination
=$01						FDD_ST1_MISSIG_ADDRESS_MARK = $01
=$02						FDD_ST1_NOT_WRITABLE        = $02
=$04						FDD_ST1_NO_DATA             = $04
=$10						FDD_ST1_OVERRUN_UDNERRUN    = $10
=$20						FDD_ST1_DATTA_ERROR         = $20
=$80						FDD_ST1_END_OF_CYLINDER     = $80
=$01						FDD_ST2_MISSIG_DATA_ADDRESS_MARK = $01
=$02						FDD_ST2_BAD_CYLINDER        = $02
=$10						FDD_ST2_WRONG_CYLINDER      = $10
=$20						FDD_ST2_DATA_ERROR_IN_DATA_FIELD = $20
=$40						FDD_ST2_CONTROL_MASK        = $40
=$03						FDD_ST3_DRIVE_SELLECT       = $03
=$04						FDD_ST3_HEAD_ADDRESS        = $04
=$10						FDD_ST3_TRACK_0             = $10
=$40						FDD_ST3_WRITE_PROTECT       = $40

;******  Return to file: Floppy.asm

=$1a000						FLOPPY_CMD_BUFFER = $1A000 ; 10 Byte buffer for the command to be send to the FDC and the the data recieved as e result of the command
.01a00a		ea		nop		ILOOP           NOP
.01a00b		ea		nop		                NOP
.01a00c		ea		nop		                NOP
.01a00d		ea		nop		                NOP
.01a00e		ea		nop		                NOP
.01a00f		ea		nop		                NOP
.01a010		ea		nop		                NOP
.01a011		ea		nop		                NOP
.01a012		ea		nop		                NOP
.01a013		ea		nop		                NOP
.01a014		6b		rtl		                RTL
.01a015		22 0a a0 01	jsl $01a00a	ILOOP_1         JSL ILOOP
.01a019		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a01d		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a021		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a025		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a029		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a02d		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a031		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a035		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a039		22 0a a0 01	jsl $01a00a	                JSL ILOOP
.01a03d		6b		rtl		                RTL
.01a03e		22 15 a0 01	jsl $01a015	ILOOP_1MS       JSL ILOOP_1
.01a042		6b		rtl		                RTL
.01a043		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.01a046		f0 07		beq $01a04f	                BEQ LOOP_MS_END
.01a048		22 3e a0 01	jsl $01a03e	                JSL ILOOP_1MS
.01a04c		ca		dex		                DEX
.01a04d		80 f4		bra $01a043	                BRA ILOOP_MS
.01a04f		6b		rtl		LOOP_MS_END     RTL
.01a050						IFDD_MOTOR_0_ON
.01a050		e2 20		sep #$20	                SEP #$20        ; set A short
.01a052		48		pha		                PHA             ; begin setdbr macro
.01a053		08		php		                PHP
.01a054		e2 20		sep #$20	                SEP #$20        ; set A short
.01a056		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a058		48		pha		                PHA
.01a059		ab		plb		                PLB
.01a05a		28		plp		                PLP
.01a05b		68		pla		                PLA             ; end setdbr macro
.01a05c		a9 10		lda #$10	                LDA #FDD_ENABLE_MOTOR_0
.01a05e		0c f2 13	tsb $af13f2	                TSB FDD_DIGITAL_OUTPUT
.01a061		6b		rtl		                RTL
.01a062						IFDD_MOTOR_0_OFF
.01a062		e2 20		sep #$20	                SEP #$20        ; set A short
.01a064		48		pha		                PHA             ; begin setdbr macro
.01a065		08		php		                PHP
.01a066		e2 20		sep #$20	                SEP #$20        ; set A short
.01a068		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a06a		48		pha		                PHA
.01a06b		ab		plb		                PLB
.01a06c		28		plp		                PLP
.01a06d		68		pla		                PLA             ; end setdbr macro
.01a06e		a9 10		lda #$10	                LDA #FDD_ENABLE_MOTOR_0
.01a070		1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT
.01a073		6b		rtl		                RTL
.01a074						IFDD_MOTOR_ALL_OFF
.01a074		e2 20		sep #$20	                SEP #$20        ; set A short
.01a076		48		pha		                PHA             ; begin setdbr macro
.01a077		08		php		                PHP
.01a078		e2 20		sep #$20	                SEP #$20        ; set A short
.01a07a		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a07c		48		pha		                PHA
.01a07d		ab		plb		                PLB
.01a07e		28		plp		                PLP
.01a07f		68		pla		                PLA             ; end setdbr macro
.01a080		a9 10		lda #$10	                LDA #FDD_ENABLE_MOTOR_0
.01a082		1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT
.01a085		a9 20		lda #$20	                LDA #FDD_ENABLE_MOTOR_1
.01a087		1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT
.01a08a		6b		rtl		                RTL
.01a08b						SCREEN_PUTHEX
.01a08b		08		php		                PHP
.01a08c		0b		phd		                PHD
.01a08d		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a08f		da		phx		                PHX
.01a090		48		pha		                PHA             ; save the value before converting the High part into ASCII
.01a091		e2 20		sep #$20	                SEP #$20        ; set A short
.01a093		a3 01		lda $01,s	                LDA #1, S       ; get the original value out of the stack
.01a095		4a		lsr a		                LSR A             ; Extracting the high part of the byte
.01a096		4a		lsr a		                LSR A
.01a097		4a		lsr a		                LSR A
.01a098		4a		lsr a		                LSR A
.01a099		c2 20		rep #$20	                REP #$20        ; set A long
.01a09b		29 0f 00	and #$000f	                AND #$F
.01a09e		aa		tax		                LDX A
.01a09f		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0a1		bf a7 18 19	lda $1918a7,x	                LDA hex_digits,x
.01a0a5		48		pha		                PHA
.01a0a6		c2 20		rep #$20	                REP #$20        ; set A long
.01a0a8		a3 04		lda $04,s	                LDA #4, S
.01a0aa		aa		tax		                TAX
.01a0ab		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0ad		68		pla		                PLA
.01a0ae		48		pha		                PHA             ; begin setdbr macro
.01a0af		08		php		                PHP
.01a0b0		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0b2		a9 af		lda #$af		LDA #`$AFA000
.01a0b4		48		pha		                PHA
.01a0b5		ab		plb		                PLB
.01a0b6		28		plp		                PLP
.01a0b7		68		pla		                PLA             ; end setdbr macro
.01a0b8		9d 00 a0	sta $afa000,x	                STA $AFA000,x
.01a0bb		a3 01		lda $01,s	                LDA #1, S       ; get the original value out of the stack
.01a0bd		c2 20		rep #$20	                REP #$20        ; set A long
.01a0bf		29 0f 00	and #$000f	                AND #$F         ; Extracting the low part of the byte
.01a0c2		aa		tax		                LDX A
.01a0c3		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0c5		bf a7 18 19	lda $1918a7,x	                LDA hex_digits,x
.01a0c9		48		pha		                PHA
.01a0ca		c2 20		rep #$20	                REP #$20        ; set A long
.01a0cc		a3 04		lda $04,s	                LDA #4, S
.01a0ce		aa		tax		                TAX
.01a0cf		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0d1		68		pla		                PLA
.01a0d2		e8		inx		                INX
.01a0d3		48		pha		                PHA             ; begin setdbr macro
.01a0d4		08		php		                PHP
.01a0d5		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0d7		a9 af		lda #$af		LDA #`$AFA000
.01a0d9		48		pha		                PHA
.01a0da		ab		plb		                PLB
.01a0db		28		plp		                PLP
.01a0dc		68		pla		                PLA             ; end setdbr macro
.01a0dd		9d 00 a0	sta $afa000,x	                STA $AFA000,x
.01a0e0		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a0e2		68		pla		                PLA
.01a0e3		fa		plx		                PLX
.01a0e4		2b		pld		                PLD
.01a0e5		28		plp		                PLP
.01a0e6		6b		rtl		                RTL
.01a0e7						IFDD_READ_FDD
.01a0e7		08		php		                PHP
.01a0e8		0b		phd		                PHD
.01a0e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a0eb		da		phx		                PHX
.01a0ec		48		pha		                PHA
.01a0ed		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0ef		a3 01		lda $01,s	                LDA #1, S
.01a0f1		a2 05 02	ldx #$0205	                LDX #$205
.01a0f4		22 8b a0 01	jsl $01a08b	                JSL SCREEN_PUTHEX
.01a0f8		48		pha		                PHA             ; begin setdbr macro
.01a0f9		08		php		                PHP
.01a0fa		e2 20		sep #$20	                SEP #$20        ; set A short
.01a0fc		a9 af		lda #$af		LDA #`$AFA200
.01a0fe		48		pha		                PHA
.01a0ff		ab		plb		                PLB
.01a100		28		plp		                PLP
.01a101		68		pla		                PLA             ; end setdbr macro
.01a102		a2 00 00	ldx #$0000	                LDX #0
.01a105		9d 00 a2	sta $afa200,x	                STA $AFA200,x
.01a108		68		pla		                PLA
.01a109		48		pha		                PHA             ; begin setdbr macro
.01a10a		08		php		                PHP
.01a10b		e2 20		sep #$20	                SEP #$20        ; set A short
.01a10d		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a10f		48		pha		                PHA
.01a110		ab		plb		                PLB
.01a111		28		plp		                PLP
.01a112		68		pla		                PLA             ; end setdbr macro
.01a113		8d 04 a0	sta $01a004	                STA FLOPPY_CMD_BUFFER+4   ; R : Sector Address
.01a116		a9 46		lda #$46	                LDA #$46 ;;;;;;;;
.01a118		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER     ; command code 0 : MT MFM SK  0 0 1   1   0
.01a11b		8a		txa		                LDA X                     ; command code 1 : 0  0   0   0 0 HDS DS1 DS2
.01a11c		29 07		and #$07	                AND #7
.01a11e		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a121		a5 00		lda $00		                LDA 0                     ; C : Cylinder Address
.01a123		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a126		a5 00		lda $00		                LDA 0                     ; H : Head Address
.01a128		8d 03 a0	sta $01a003	                STA FLOPPY_CMD_BUFFER+3
.01a12b		a5 02		lda $02		                LDA 2                     ; N : Sector Size Code 0=>128 / 1=>256 / 2=>512
.01a12d		8d 05 a0	sta $01a005	                STA FLOPPY_CMD_BUFFER+5
.01a130		a5 01		lda $01		                LDA 1                     ; EOT : End of Track
.01a132		8d 06 a0	sta $01a006	                STA FLOPPY_CMD_BUFFER+6
.01a135		a5 00		lda $00		                LDA 0                     ; GPL : Gap Length
.01a137		8d 07 a0	sta $01a007	                STA FLOPPY_CMD_BUFFER+7
.01a13a		a5 02		lda $02		                LDA 2                     ; DTL : Special Sector Size Determin the number of byte to read / 2=>512 ???
.01a13c		8d 08 a0	sta $01a008	                STA FLOPPY_CMD_BUFFER+8
.01a13f		48		pha		                PHA             ; begin setdbr macro
.01a140		08		php		                PHP
.01a141		e2 20		sep #$20	                SEP #$20        ; set A short
.01a143		a9 01		lda #$01		LDA #`Text_READ
.01a145		48		pha		                PHA
.01a146		ab		plb		                PLB
.01a147		28		plp		                PLP
.01a148		68		pla		                PLA             ; end setdbr macro
.01a149		a2 0f ab	ldx #$ab0f	                LDX #<>Text_READ
.01a14c		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a150		a9 09		lda #$09	                LDA #9                    ; number of command Bytes
.01a152		22 19 a6 01	jsl $01a619	                JSL IFDD_SEND_CMD
.01a156		e2 20		sep #$20	                SEP #$20        ; set A short
.01a158		0b		phd		                PHD
.01a159		08		php		                PHP
.01a15a		22 23 a8 01	jsl $01a823	                JSL IFDD_READ_DATA_FIFO
.01a15e		08		php		                PHP
.01a15f		0b		phd		                PHD
.01a160		e2 20		sep #$20	                SEP #$20        ; set A short
.01a162		c9 01		cmp #$01	                CMP #1
.01a164		a9 07		lda #$07	                LDA #7
.01a166		48		pha		                PHA
.01a167		48		pha		                PHA             ; begin setdbr macro
.01a168		08		php		                PHP
.01a169		e2 20		sep #$20	                SEP #$20        ; set A short
.01a16b		a9 01		lda #$01		LDA #`Text_Stop_Rx_FIFO
.01a16d		48		pha		                PHA
.01a16e		ab		plb		                PLB
.01a16f		28		plp		                PLP
.01a170		68		pla		                PLA             ; end setdbr macro
.01a171		a2 6e ac	ldx #$ac6e	                LDX #<>Text_Stop_Rx_FIFO
.01a174		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a178		68		pla		                PLA                    ; number of Bytes to read
.01a179		22 1b a7 01	jsl $01a71b	                JSL IFDD_READ_CMD_RESULT
.01a17d		22 6f a4 01	jsl $01a46f	                JSL IFDD_SENS_INTERRUPT_STATUS
.01a181		22 62 a0 01	jsl $01a062	                JSL IFDD_MOTOR_0_OFF
.01a185		80 fe		bra $01a185	DEBUG_INF_LOOP                BRA DEBUG_INF_LOOP
.01a187		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a189		68		pla		                PLA
.01a18a		fa		plx		                PLX
.01a18b		2b		pld		                PLD
.01a18c		28		plp		                PLP
.01a18d		6b		rtl		                RTL
.01a18e						IFDD_INIT_AT
.01a18e		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a190		48		pha		                PHA             ; begin setdbr macro
.01a191		08		php		                PHP
.01a192		e2 20		sep #$20	                SEP #$20        ; set A short
.01a194		a9 01		lda #$01		LDA #`Text_INIT_AT
.01a196		48		pha		                PHA
.01a197		ab		plb		                PLB
.01a198		28		plp		                PLP
.01a199		68		pla		                PLA             ; end setdbr macro
.01a19a		a2 79 aa	ldx #$aa79	                LDX #<>Text_INIT_AT
.01a19d		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a1a1		22 18 a2 01	jsl $01a218	                JSL IFDD_RESET_FULL         ; Reset FDD : No DMA, Drive 0 selected, no motor activated
.01a1a5		48		pha		                PHA             ; begin setdbr macro
.01a1a6		08		php		                PHP
.01a1a7		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1a9		a9 af		lda #$af		LDA #`FDD_CONFIG_CTRL
.01a1ab		48		pha		                PHA
.01a1ac		ab		plb		                PLB
.01a1ad		28		plp		                PLP
.01a1ae		68		pla		                PLA             ; end setdbr macro
.01a1af		a9 02		lda #$02	                LDA #$02
.01a1b1		0c f7 13	tsb $af13f7	                TSB FDD_CONFIG_CTRL
.01a1b4		48		pha		                PHA             ; begin setdbr macro
.01a1b5		08		php		                PHP
.01a1b6		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1b8		a9 af		lda #$af		LDA #`FDD_DATA_RATE_SELECT
.01a1ba		48		pha		                PHA
.01a1bb		ab		plb		                PLB
.01a1bc		28		plp		                PLP
.01a1bd		68		pla		                PLA             ; end setdbr macro
.01a1be		a9 00		lda #$00	                LDA #$00
.01a1c0		0c f4 13	tsb $af13f4	                TSB FDD_DATA_RATE_SELECT
.01a1c3		48		pha		                PHA             ; begin setdbr macro
.01a1c4		08		php		                PHP
.01a1c5		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1c7		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a1c9		48		pha		                PHA
.01a1ca		ab		plb		                PLB
.01a1cb		28		plp		                PLP
.01a1cc		68		pla		                PLA             ; end setdbr macro
.01a1cd		a9 f0		lda #$f0	                LDA #$F0                    ; active all motor output and sellect drive 0 (bit 0-1)
.01a1cf		0c f2 13	tsb $af13f2	                TSB FDD_DIGITAL_OUTPUT      ; Set the reset bit to exit the reset mode  "Test and Reset Memory Bits Against Accumulator"
.01a1d2		6b		rtl		                RTL
.01a1d3						IFDD_RESET
.01a1d3		48		pha		                PHA             ; begin setdbr macro
.01a1d4		08		php		                PHP
.01a1d5		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1d7		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a1d9		48		pha		                PHA
.01a1da		ab		plb		                PLB
.01a1db		28		plp		                PLP
.01a1dc		68		pla		                PLA             ; end setdbr macro
.01a1dd		a9 04		lda #$04	                LDA #FDD_nRESET             ; reset the floppy disc controler, deactive all the motors and the DMA
.01a1df		1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT      ; Clear the reset bit to go in reset mode "Test and Reset Memory Bits Against Accumulator"
.01a1e2		22 15 a0 01	jsl $01a015	                JSL ILOOP_1
.01a1e6		48		pha		                PHA             ; begin setdbr macro
.01a1e7		08		php		                PHP
.01a1e8		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1ea		a9 af		lda #$af		LDA #`FDD_DATA_RATE_SELECT
.01a1ec		48		pha		                PHA
.01a1ed		ab		plb		                PLB
.01a1ee		28		plp		                PLP
.01a1ef		68		pla		                PLA             ; end setdbr macro
.01a1f0		a9 02		lda #$02	                LDA #2
.01a1f2		8d f4 13	sta $af13f4	                STA FDD_DATA_RATE_SELECT    ; if in mode PC/AT or PS/2 the datarate is set in Config Control Register
.01a1f5		22 3e a0 01	jsl $01a03e	                JSL ILOOP_1MS
.01a1f9		48		pha		                PHA             ; begin setdbr macro
.01a1fa		08		php		                PHP
.01a1fb		e2 20		sep #$20	                SEP #$20        ; set A short
.01a1fd		a9 af		lda #$af		LDA #`FDD_CONFIG_CTRL
.01a1ff		48		pha		                PHA
.01a200		ab		plb		                PLB
.01a201		28		plp		                PLP
.01a202		68		pla		                PLA             ; end setdbr macro
.01a203		a9 02		lda #$02	                LDA #2
.01a205		8d f7 13	sta $af13f7	                STA FDD_CONFIG_CTRL
.01a208		48		pha		                PHA             ; begin setdbr macro
.01a209		08		php		                PHP
.01a20a		e2 20		sep #$20	                SEP #$20        ; set A short
.01a20c		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a20e		48		pha		                PHA
.01a20f		ab		plb		                PLB
.01a210		28		plp		                PLP
.01a211		68		pla		                PLA             ; end setdbr macro
.01a212		a9 04		lda #$04	                LDA #FDD_nRESET             ; Load the reset bit to be set
.01a214		0c f2 13	tsb $af13f2	                TSB FDD_DIGITAL_OUTPUT      ; Set the reset bit to exit the reset mode  "Test and Reset Memory Bits Against Accumulator"
.01a217		6b		rtl		                RTL
.01a218						IFDD_RESET_FULL
.01a218		e2 20		sep #$20	                SEP #$20        ; set A short
.01a21a		a9 00		lda #$00	                LDA #0                      ; Will set all the bit at 0 to reset everyting
.01a21c		48		pha		                PHA             ; begin setdbr macro
.01a21d		08		php		                PHP
.01a21e		e2 20		sep #$20	                SEP #$20        ; set A short
.01a220		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a222		48		pha		                PHA
.01a223		ab		plb		                PLB
.01a224		28		plp		                PLP
.01a225		68		pla		                PLA             ; end setdbr macro
.01a226		8d f2 13	sta $af13f2	                STA  FDD_DIGITAL_OUTPUT
.01a229		ea		nop		                NOP                         ; wait, the doc say 100ns min
.01a22a		ea		nop		                NOP
.01a22b		22 15 a0 01	jsl $01a015	                JSL ILOOP_1
.01a22f		ea		nop		                NOP
.01a230		e2 20		sep #$20	                SEP #$20        ; set A short
.01a232		a9 04		lda #$04	                LDA #FDD_nRESET
.01a234		48		pha		                PHA             ; begin setdbr macro
.01a235		08		php		                PHP
.01a236		e2 20		sep #$20	                SEP #$20        ; set A short
.01a238		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a23a		48		pha		                PHA
.01a23b		ab		plb		                PLB
.01a23c		28		plp		                PLP
.01a23d		68		pla		                PLA             ; end setdbr macro
.01a23e		8d f2 13	sta $af13f2	                STA FDD_DIGITAL_OUTPUT      ; Set the reset bit to exit the reset mode
.01a241		6b		rtl		                RTL
.01a242						IFDD_READ
.01a242		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a244		48		pha		                PHA ; save the sector to read
.01a245		a3 08		lda $08,s	                LDA 8,S
.01a247		a8		tay		                TAY
.01a248		a3 06		lda $06,s	                LDA 6,S
.01a24a		a8		tay		                TAY
.01a24b		68		pla		                PLA
.01a24c		48		pha		                PHA ; save the sector read for the return value
.01a24d		0a		asl a		                ASL A ; convert the sector number into byte count
.01a24e		0a		asl a		                ASL A
.01a24f		0a		asl a		                ASL A
.01a250		0a		asl a		                ASL A
.01a251		0a		asl a		                ASL A
.01a252		0a		asl a		                ASL A
.01a253		0a		asl a		                ASL A
.01a254		0a		asl a		                ASL A
.01a255		0a		asl a		                ASL A
.01a256		69 4a ad	adc #$ad4a	                ADC #<>data_floppy
.01a259		aa		tax		                TAX
.01a25a		e2 20		sep #$20	                SEP #$20        ; set A short
.01a25c		a3 08		lda $08,s	                LDA 8,S
.01a25e		8f 69 a2 01	sta $01a269	                STA FFD_MVN_INSTRUCTION_ADDRESS + 2 ; rewrite the second parameter of the instruction in RAM
.01a262		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a264		a9 ff 01	lda #$01ff	                LDA #511
.01a267		54 01 01	mvn $01,$01	FFD_MVN_INSTRUCTION_ADDRESS  MVN `FAT12_ADDRESS_BUFFER_512,`data_floppy
.01a26a		68		pla		                PLA
.01a26b		6b		rtl		                RTL
.01a26c						IFDD_READ_ORI
.01a26c		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a26e		48		pha		                PHA
.01a26f		a3 08		lda $08,s	                LDA 8,S
.01a271		aa		tax		                TAX
.01a272		a3 06		lda $06,s	                LDA 6,S
.01a274		a8		tay		                TAY
.01a275		68		pla		                PLA
.01a276		48		pha		                PHA ; save the sector read for the return value
.01a277		0a		asl a		                ASL A ; convert the sector number into byte count
.01a278		0a		asl a		                ASL A
.01a279		0a		asl a		                ASL A
.01a27a		0a		asl a		                ASL A
.01a27b		0a		asl a		                ASL A
.01a27c		0a		asl a		                ASL A
.01a27d		0a		asl a		                ASL A
.01a27e		0a		asl a		                ASL A
.01a27f		0a		asl a		                ASL A
.01a280		69 4a ad	adc #$ad4a	                ADC #<>data_floppy
.01a283		aa		tax		                TAX
.01a284		a9 ff 01	lda #$01ff	                LDA #511
.01a287		a0 00 98	ldy #$9800	                LDY #<>FAT12_ADDRESS_BUFFER_512
.01a28a		54 01 01	mvn $01,$01	                MVN `FAT12_ADDRESS_BUFFER_512,`data_floppy
.01a28d		68		pla		                PLA
.01a28e		6b		rtl		                RTL
.01a28f		00		brk #		IFDD_WRITE      BRK
.01a290		00		brk #		IFDD_SETSECTOR  BRK
.01a291		00		brk #		IFDD_SETTRACK  BRK
.01a292		00		brk #		IFDD_SETSIDE    BRK
.01a293						IFDD_FORMAT_TRACK
.01a293		08		php		                PHP
.01a294		0b		phd		                PHD
.01a295		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a297		da		phx		                PHX
.01a298		48		pha		                PHA ; stack ofset of 7 need to be addes to get the parametters
.01a299		e2 20		sep #$20	                SEP #$20        ; set A short
.01a29b		a3 0b		lda $0b,s	                LDA #4+7, S         ; Get the MFM Byte
.01a29d		29 01		and #$01	                AND #1            ; Get only the MFM 1 bits info
.01a29f		0a		asl a		                ASL
.01a2a0		0a		asl a		                ASL
.01a2a1		0a		asl a		                ASL
.01a2a2		0a		asl a		                ASL
.01a2a3		0a		asl a		                ASL
.01a2a4		0a		asl a		                ASL
.01a2a5		09 0d		ora #$0d	                ORA #$D
.01a2a7		48		pha		                PHA             ; begin setdbr macro
.01a2a8		08		php		                PHP
.01a2a9		e2 20		sep #$20	                SEP #$20        ; set A short
.01a2ab		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a2ad		48		pha		                PHA
.01a2ae		ab		plb		                PLB
.01a2af		28		plp		                PLP
.01a2b0		68		pla		                PLA             ; end setdbr macro
.01a2b1		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a2b4		a3 0c		lda $0c,s	                LDA #5+7, S         ; Get the ID Info Byte
.01a2b6		29 07		and #$07	                AND #7            ; Get only the ID 3 bits info
.01a2b8		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a2bb		a3 0d		lda $0d,s	                LDA #6+7, S         ; Get N (Byte per sector)
.01a2bd		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a2c0		a3 0e		lda $0e,s	                LDA #7+7, S         ; Get SC (Sector Per Cylender)
.01a2c2		8d 03 a0	sta $01a003	                STA FLOPPY_CMD_BUFFER+3
.01a2c5		a3 0f		lda $0f,s	                LDA #8+7, S         ; Get GPL (Gap3)
.01a2c7		8d 04 a0	sta $01a004	                STA FLOPPY_CMD_BUFFER+4
.01a2ca		a3 10		lda $10,s	                LDA #9+7, S         ; Get D (Byte filler)
.01a2cc		8d 05 a0	sta $01a005	                STA FLOPPY_CMD_BUFFER+5
.01a2cf		48		pha		                PHA             ; begin setdbr macro
.01a2d0		08		php		                PHP
.01a2d1		e2 20		sep #$20	                SEP #$20        ; set A short
.01a2d3		a9 01		lda #$01		LDA #`Text_FORMAT
.01a2d5		48		pha		                PHA
.01a2d6		ab		plb		                PLB
.01a2d7		28		plp		                PLP
.01a2d8		68		pla		                PLA             ; end setdbr macro
.01a2d9		a2 73 ab	ldx #$ab73	                LDX #<>Text_FORMAT
.01a2dc		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a2e0		a9 06		lda #$06	                LDA #6                    ; number of command Bytes
.01a2e2		22 19 a6 01	jsl $01a619	                JSL IFDD_SEND_CMD
.01a2e6		c9 00		cmp #$00	                CMP #0
.01a2e8		d0 30		bne $01a31a	                BNE IFDD_FORMAT_TRACK_ERROR_SEND_CMD
.01a2ea		a3 11		lda $11,s	                LDA #10+7, S         ; Get C (Cylender Adress)
.01a2ec		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a2ef		a3 12		lda $12,s	                LDA #11+7, S         ; Get H (Head Address)
.01a2f1		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a2f4		a3 13		lda $13,s	                LDA #12+7, S         ; Get N (Sector size code)
.01a2f6		8d 03 a0	sta $01a003	                STA FLOPPY_CMD_BUFFER+3
.01a2f9		a3 14		lda $14,s	                LDA #13+7, S         ; Get R (Sector Adress)
.01a2fb						Format_next_sector
.01a2fb		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a2fe		a9 04		lda #$04	                LDA #4
.01a300		20 34 a3	jsr $01a334	                JSR IFDD_SEND_EXECUTION_DATA
.01a303		c9 00		cmp #$00	                CMP #0
.01a305		30 13		bmi $01a31a	                BMI IFDD_FORMAT_TRACK_ERROR_SEND_CMD
.01a307		af f4 13 af	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a30b		29 14		and #$14	                AND #20                  ; get NON DMA bit, will stay 1 until the Executuin phase
.01a30d		c9 20		cmp #$20	                CMP #$20
.01a30f		d0 05		bne $01a316	                BNE Format_sector_done
.01a311		a3 12		lda $12,s	                LDA #11+7, S
.01a313		1a		inc a		                INC A
.01a314		80 e5		bra $01a2fb	                BRA Format_next_sector
.01a316						Format_sector_done
.01a316		a9 01		lda #$01	                LDA #1
.01a318		80 13		bra $01a32d	                BRA IFDD_FORMAT_TRACK_DONE
.01a31a						IFDD_FORMAT_TRACK_ERROR_SEND_CMD
.01a31a		48		pha		                PHA             ; begin setdbr macro
.01a31b		08		php		                PHP
.01a31c		e2 20		sep #$20	                SEP #$20        ; set A short
.01a31e		a9 01		lda #$01		LDA #`Text_ERROR
.01a320		48		pha		                PHA
.01a321		ab		plb		                PLB
.01a322		28		plp		                PLP
.01a323		68		pla		                PLA             ; end setdbr macro
.01a324		a2 81 ac	ldx #$ac81	                LDX #<>Text_ERROR
.01a327		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a32b		a9 ff		lda #$ff	                LDA #-1
.01a32d						IFDD_FORMAT_TRACK_DONE
.01a32d		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a32f		68		pla		                PLA
.01a330		fa		plx		                PLX
.01a331		2b		pld		                PLD
.01a332		28		plp		                PLP
.01a333		6b		rtl		                RTL
.01a334						IFDD_SEND_EXECUTION_DATA
.01a334		08		php		                PHP
.01a335		0b		phd		                PHD
.01a336		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a338		da		phx		                PHX
.01a339		48		pha		                PHA ; stack ofset of 7 need to be addes to get the parametters
.01a33a		e2 20		sep #$20	                SEP #$20        ; set A short
.01a33c		48		pha		                PHA                       ; save the number of byt to be sent to the FDC
.01a33d		48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.01a33e		48		pha		                PHA             ; begin setdbr macro
.01a33f		08		php		                PHP
.01a340		e2 20		sep #$20	                SEP #$20        ; set A short
.01a342		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a344		48		pha		                PHA
.01a345		ab		plb		                PLB
.01a346		28		plp		                PLP
.01a347		68		pla		                PLA             ; end setdbr macro
.01a348						IFDD_SEND_EXECUTION_DATA____READ_MAIN_STATUS_REG
.01a348		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we can send data to the FDD_CMD_BUSSY
.01a34b		83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.01a34d		48		pha		                PHA
.01a34e		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a352		68		pla		                PLA
.01a353		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a355		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a357		f0 05		beq $01a35e	                BEQ IFDD_SEND_EXECUTION_DATA____TRANSFERT_CAN_BE_DONE ;
.01a359		ea		nop		                NOP
.01a35a		ea		nop		                NOP
.01a35b		ea		nop		                NOP
.01a35c		80 ea		bra $01a348	                BRA IFDD_SEND_EXECUTION_DATA____READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a35e						IFDD_SEND_EXECUTION_DATA____TRANSFERT_CAN_BE_DONE
.01a35e		a3 01		lda $01,s	                LDA #1, S                 ; get the Main Status avlue
.01a360		29 40		and #$40	                AND #FDD_DIO                  ; get DIO bit
.01a362		c9 40		cmp #$40	                CMP #$40                  ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.01a364		d0 15		bne $01a37b	                BNE IFDD_SEND_EXECUTION_DATA____READY_TO_SEND_DATA;
.01a366		ad f5 13	lda $af13f5	                LDA FDD_FIFO
.01a369		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a36d		a9 0a		lda #$0a	                LDA #$A
.01a36f		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a373		a9 0d		lda #$0d	                LDA #$D
.01a375		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a379		80 cd		bra $01a348	                BRA IFDD_SEND_EXECUTION_DATA____READ_MAIN_STATUS_REG  ; retest if we can send data now#
.01a37b						IFDD_SEND_EXECUTION_DATA____READY_TO_SEND_DATA
.01a37b		68		pla		                PLA                       ; remove the Main Status value saved
.01a37c		48		pha		                PHA             ; begin setdbr macro
.01a37d		08		php		                PHP
.01a37e		e2 20		sep #$20	                SEP #$20        ; set A short
.01a380		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a382		48		pha		                PHA
.01a383		ab		plb		                PLB
.01a384		28		plp		                PLP
.01a385		68		pla		                PLA             ; end setdbr macro
.01a386		a2 00 00	ldx #$0000	                LDX #0
.01a389						IFDD_SEND_EXECUTION_DATA____SEND_NEXT_ECUTION_DATA
.01a389		8a		txa		                LDA X
.01a38a		c3 01		cmp $01,s	                CMP #1, S                 ; Test if we sent all the data ot not
.01a38c		f0 53		beq $01a3e1	                BEQ IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT_1
.01a38e		bd 00 a0	lda $01a000,x	                LDA FLOPPY_CMD_BUFFER,X
.01a391		8f f5 13 af	sta $af13f5	                STA FDD_FIFO              ; Write the data in the FDC's FIFO
.01a395		da		phx		                PHX
.01a396		48		pha		                PHA             ; begin setdbr macro
.01a397		08		php		                PHP
.01a398		e2 20		sep #$20	                SEP #$20        ; set A short
.01a39a		a9 01		lda #$01		LDA #`Text_CMD_Parametter
.01a39c		48		pha		                PHA
.01a39d		ab		plb		                PLB
.01a39e		28		plp		                PLP
.01a39f		68		pla		                PLA             ; end setdbr macro
.01a3a0		a2 a6 ac	ldx #$aca6	                LDX #<>Text_CMD_Parametter
.01a3a3		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a3a7		fa		plx		                PLX
.01a3a8		da		phx		                PHX
.01a3a9		8a		txa		                TXA
.01a3aa		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a3ae		48		pha		                PHA             ; begin setdbr macro
.01a3af		08		php		                PHP
.01a3b0		e2 20		sep #$20	                SEP #$20        ; set A short
.01a3b2		a9 01		lda #$01		LDA #`Text_duble_dot
.01a3b4		48		pha		                PHA
.01a3b5		ab		plb		                PLB
.01a3b6		28		plp		                PLP
.01a3b7		68		pla		                PLA             ; end setdbr macro
.01a3b8		a2 c2 ac	ldx #$acc2	                LDX #<>Text_duble_dot
.01a3bb		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a3bf		fa		plx		                PLX
.01a3c0		da		phx		                PHX
.01a3c1		bd 00 a0	lda $01a000,x	                LDA FLOPPY_CMD_BUFFER,X
.01a3c4		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a3c8		a2 92 ac	ldx #$ac92	                LDX #<>Text_EOL
.01a3cb		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a3cf		22 19 a9 01	jsl $01a919	                JSL IFDD_PRINT_FDD_MS_REG
.01a3d3		fa		plx		                PLX
.01a3d4		e8		inx		                INX
.01a3d5		48		pha		                PHA             ; begin setdbr macro
.01a3d6		08		php		                PHP
.01a3d7		e2 20		sep #$20	                SEP #$20        ; set A short
.01a3d9		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a3db		48		pha		                PHA
.01a3dc		ab		plb		                PLB
.01a3dd		28		plp		                PLP
.01a3de		68		pla		                PLA             ; end setdbr macro
.01a3df						IFDD_SEND_EXECUTION____READ_MAIN_STATUS_REG_FOR_TRANSFERT
.01a3df		80 02		bra $01a3e3	                BRA IFDD_SEND_EXECUTION____JUMP_BYPASS
.01a3e1		80 48		bra $01a42b	IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT_1 BRA IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT
.01a3e3						IFDD_SEND_EXECUTION____JUMP_BYPASS
.01a3e3		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a3e6		48		pha		                PHA
.01a3e7		29 0f		and #$0f	                AND #$F
.01a3e9		18		clc		                CLC
.01a3ea		69 30		adc #$30	                ADC #$30
.01a3ec		48		pha		                PHA             ; begin setdbr macro
.01a3ed		08		php		                PHP
.01a3ee		e2 20		sep #$20	                SEP #$20        ; set A short
.01a3f0		a9 af		lda #$af		LDA #`$AFA207
.01a3f2		48		pha		                PHA
.01a3f3		ab		plb		                PLB
.01a3f4		28		plp		                PLP
.01a3f5		68		pla		                PLA             ; end setdbr macro
.01a3f6		8d 07 a2	sta $afa207	                STA $AFA207
.01a3f9		a3 01		lda $01,s	                LDA #1, S
.01a3fb		4a		lsr a		                LSR A
.01a3fc		4a		lsr a		                LSR A
.01a3fd		4a		lsr a		                LSR A
.01a3fe		4a		lsr a		                LSR A
.01a3ff		29 0f		and #$0f	                AND #$F
.01a401		18		clc		                CLC
.01a402		69 30		adc #$30	                ADC #$30
.01a404		48		pha		                PHA             ; begin setdbr macro
.01a405		08		php		                PHP
.01a406		e2 20		sep #$20	                SEP #$20        ; set A short
.01a408		a9 af		lda #$af		LDA #`$AFA206
.01a40a		48		pha		                PHA
.01a40b		ab		plb		                PLB
.01a40c		28		plp		                PLP
.01a40d		68		pla		                PLA             ; end setdbr macro
.01a40e		8d 06 a2	sta $afa206	                STA $AFA206
.01a411		68		pla		                PLA
.01a412		48		pha		                PHA             ; begin setdbr macro
.01a413		08		php		                PHP
.01a414		e2 20		sep #$20	                SEP #$20        ; set A short
.01a416		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a418		48		pha		                PHA
.01a419		ab		plb		                PLB
.01a41a		28		plp		                PLP
.01a41b		68		pla		                PLA             ; end setdbr macro
.01a41c		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a41f		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a421		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a423		82 63 ff	brl $01a389	                BRL IFDD_SEND_EXECUTION_DATA____SEND_NEXT_ECUTION_DATA
.01a426		ea		nop		                NOP
.01a427		ea		nop		                NOP
.01a428		ea		nop		                NOP
.01a429		80 b4		bra $01a3df	                BRA IFDD_SEND_EXECUTION____READ_MAIN_STATUS_REG_FOR_TRANSFERT  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a42b						IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT
.01a42b		68		pla		                PLA                       ; removing the number of commands byte to send
.01a42c		a9 00		lda #$00	                LDA #0
.01a42e		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a430		fa		plx		                PLX
.01a431		68		pla		                PLA
.01a432		2b		pld		                PLD
.01a433		28		plp		                PLP
.01a434		6b		rtl		                RTL
.01a435						IFDD_RECALIBRATE
.01a435		e2 20		sep #$20	                SEP #$20        ; set A short
.01a437		29 03		and #$03	                AND #3                    ; just get the 2 first bit
.01a439		48		pha		                PHA             ; begin setdbr macro
.01a43a		08		php		                PHP
.01a43b		e2 20		sep #$20	                SEP #$20        ; set A short
.01a43d		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a43f		48		pha		                PHA
.01a440		ab		plb		                PLB
.01a441		28		plp		                PLP
.01a442		68		pla		                PLA             ; end setdbr macro
.01a443		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a446		a9 07		lda #$07	                LDA #7
.01a448		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a44b		48		pha		                PHA             ; begin setdbr macro
.01a44c		08		php		                PHP
.01a44d		e2 20		sep #$20	                SEP #$20        ; set A short
.01a44f		a9 01		lda #$01		LDA #`Text_RECALIBRATE
.01a451		48		pha		                PHA
.01a452		ab		plb		                PLB
.01a453		28		plp		                PLP
.01a454		68		pla		                PLA             ; end setdbr macro
.01a455		a2 ab aa	ldx #$aaab	                LDX #<>Text_RECALIBRATE
.01a458		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a45c		a9 02		lda #$02	                LDA #2                    ; number of command Bytes
.01a45e		22 19 a6 01	jsl $01a619	                JSL IFDD_SEND_CMD
.01a462		c9 00		cmp #$00	                CMP #0
.01a464		30 04		bmi $01a46a	                BMI IFDD_RECALIBRATE_ERROR_SEND_CMD
.01a466		a9 01		lda #$01	                LDA #1
.01a468		80 04		bra $01a46e	                BRA IFDD_RECALIBRATE_DONE
.01a46a						IFDD_RECALIBRATE_ERROR_SEND_CMD
.01a46a		a9 ff		lda #$ff	                LDA #-1
.01a46c		80 00		bra $01a46e	                BRA IFDD_RECALIBRATE_ERROR
.01a46e						IFDD_RECALIBRATE_ERROR
.01a46e						IFDD_RECALIBRATE_DONE
.01a46e		6b		rtl		                RTL
.01a46f						IFDD_SENS_INTERRUPT_STATUS
.01a46f		08		php		                PHP
.01a470		0b		phd		                PHD
.01a471		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a473		48		pha		                PHA
.01a474		da		phx		                PHX; stack ofset of 7 need to be addes to get the parametters
.01a475		e2 20		sep #$20	                SEP #$20        ; set A short
.01a477		a9 08		lda #$08	                LDA #$08
.01a479		48		pha		                PHA             ; begin setdbr macro
.01a47a		08		php		                PHP
.01a47b		e2 20		sep #$20	                SEP #$20        ; set A short
.01a47d		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a47f		48		pha		                PHA
.01a480		ab		plb		                PLB
.01a481		28		plp		                PLP
.01a482		68		pla		                PLA             ; end setdbr macro
.01a483		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a486		48		pha		                PHA             ; begin setdbr macro
.01a487		08		php		                PHP
.01a488		e2 20		sep #$20	                SEP #$20        ; set A short
.01a48a		a9 01		lda #$01		LDA #`Text_SENS_INTERRUPT_STATUS
.01a48c		48		pha		                PHA
.01a48d		ab		plb		                PLB
.01a48e		28		plp		                PLP
.01a48f		68		pla		                PLA             ; end setdbr macro
.01a490		a2 41 ab	ldx #$ab41	                LDX #<>Text_SENS_INTERRUPT_STATUS
.01a493		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a497		a9 01		lda #$01	                LDA #1                    ; number of command Bytes
.01a499		22 19 a6 01	jsl $01a619	                JSL IFDD_SEND_CMD
.01a49d		c9 00		cmp #$00	                CMP #0
.01a49f		30 10		bmi $01a4b1	                BMI IFDD_SENS_INTERRUPT_STATUS_ERROR_READ_CMD
.01a4a1		e2 20		sep #$20	                SEP #$20        ; set A short
.01a4a3		a9 02		lda #$02	                LDA #2                    ; number of Bytes to read
.01a4a5		22 1b a7 01	jsl $01a71b	                JSL IFDD_READ_CMD_RESULT
.01a4a9		c9 00		cmp #$00	                CMP #0
.01a4ab		30 04		bmi $01a4b1	                BMI IFDD_SENS_INTERRUPT_STATUS_ERROR_READ_CMD
.01a4ad		a9 01		lda #$01	                LDA #1
.01a4af		80 13		bra $01a4c4	                BRA IFDD_SENS_INTERRUPT_STATUS_DONE
.01a4b1						IFDD_SENS_INTERRUPT_STATUS_ERROR_READ_CMD
.01a4b1		48		pha		                PHA             ; begin setdbr macro
.01a4b2		08		php		                PHP
.01a4b3		e2 20		sep #$20	                SEP #$20        ; set A short
.01a4b5		a9 01		lda #$01		LDA #`Text_ERROR
.01a4b7		48		pha		                PHA
.01a4b8		ab		plb		                PLB
.01a4b9		28		plp		                PLP
.01a4ba		68		pla		                PLA             ; end setdbr macro
.01a4bb		a2 81 ac	ldx #$ac81	                LDX #<>Text_ERROR
.01a4be		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a4c2		a9 ff		lda #$ff	                LDA #-1
.01a4c4						IFDD_SENS_INTERRUPT_STATUS_DONE
.01a4c4		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a4c6		fa		plx		                PLX
.01a4c7		68		pla		                PLA
.01a4c8		2b		pld		                PLD
.01a4c9		28		plp		                PLP
.01a4ca		6b		rtl		                RTL
.01a4cb		08		php		IFDD_SPECIFY    PHP
.01a4cc		0b		phd		                PHD
.01a4cd		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a4cf		da		phx		                PHX
.01a4d0		48		pha		                PHA ; stack ofset of 7 need to be addes to get the parametters
.01a4d1		48		pha		                PHA             ; begin setdbr macro
.01a4d2		08		php		                PHP
.01a4d3		e2 20		sep #$20	                SEP #$20        ; set A short
.01a4d5		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a4d7		48		pha		                PHA
.01a4d8		ab		plb		                PLB
.01a4d9		28		plp		                PLP
.01a4da		68		pla		                PLA             ; end setdbr macro
.01a4db		e2 20		sep #$20	                SEP #$20        ; set A short
.01a4dd		a9 03		lda #$03	                LDA #3                    ; "SPECIFY" command value
.01a4df		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a4e2		a3 0b		lda $0b,s	                LDA #4+7, S                 ; Get SRT (Step Rate Time)
.01a4e4		0a		asl a		                ASL
.01a4e5		0a		asl a		                ASL
.01a4e6		0a		asl a		                ASL
.01a4e7		0a		asl a		                ASL
.01a4e8		03 0c		ora $0c,s	                ORA #5+7, S                 ; Get HUT (Head Unload Time)
.01a4ea		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a4ed		a3 0d		lda $0d,s	                LDA #6+7, S                 ; Get HLT (Head Load Time)
.01a4ef		0a		asl a		                ASL
.01a4f0		03 0e		ora $0e,s	                ORA #7+7, S                 ; Get ND (non-DMA)
.01a4f2		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a4f5		48		pha		                PHA             ; begin setdbr macro
.01a4f6		08		php		                PHP
.01a4f7		e2 20		sep #$20	                SEP #$20        ; set A short
.01a4f9		a9 01		lda #$01		LDA #`Text_SPECIFY
.01a4fb		48		pha		                PHA
.01a4fc		ab		plb		                PLB
.01a4fd		28		plp		                PLP
.01a4fe		68		pla		                PLA             ; end setdbr macro
.01a4ff		a2 d7 ab	ldx #$abd7	                LDX #<>Text_SPECIFY
.01a502		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a506		a9 03		lda #$03	                LDA #3                    ; number of command Bytes
.01a508		22 19 a6 01	jsl $01a619	                JSL IFDD_SEND_CMD
.01a50c		c9 00		cmp #$00	                CMP #0
.01a50e		30 04		bmi $01a514	                BMI IFDD_SPECIFY_ERROR_SEND_CMD
.01a510		a9 01		lda #$01	                LDA #1
.01a512		80 02		bra $01a516	                BRA IFDD_SPECIFY_DONE
.01a514						IFDD_SPECIFY_ERROR_SEND_CMD
.01a514		a9 ff		lda #$ff	                LDA #-1
.01a516						IFDD_SPECIFY_DONE
.01a516		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a518		68		pla		                PLA
.01a519		fa		plx		                PLX
.01a51a		2b		pld		                PLD
.01a51b		28		plp		                PLP
.01a51c		6b		rtl		                RTL
.01a51d		08		php		IFDD_SEEK       PHP
.01a51e		0b		phd		                PHD
.01a51f		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a521		da		phx		                PHX
.01a522		48		pha		                PHA
.01a523		e2 20		sep #$20	                SEP #$20        ; set A short
.01a525		29 07		and #$07	                AND #7                    ; Get the 3 first bit side (2) and driver (1-0)
.01a527		48		pha		                PHA             ; begin setdbr macro
.01a528		08		php		                PHP
.01a529		e2 20		sep #$20	                SEP #$20        ; set A short
.01a52b		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a52d		48		pha		                PHA
.01a52e		ab		plb		                PLB
.01a52f		28		plp		                PLP
.01a530		68		pla		                PLA             ; end setdbr macro
.01a531		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a534		a9 0f		lda #$0f	                LDA #$F
.01a536		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a539		8a		txa		                LDA X                     ; Get the cylinder index
.01a53a		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a53d		48		pha		                PHA             ; begin setdbr macro
.01a53e		08		php		                PHP
.01a53f		e2 20		sep #$20	                SEP #$20        ; set A short
.01a541		a9 01		lda #$01		LDA #`Text_SEEK
.01a543		48		pha		                PHA
.01a544		ab		plb		                PLB
.01a545		28		plp		                PLP
.01a546		68		pla		                PLA             ; end setdbr macro
.01a547		a2 a5 ab	ldx #$aba5	                LDX #<>Text_SEEK
.01a54a		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a54e		a9 03		lda #$03	                LDA #3                    ; number of command Bytes
.01a550		22 19 a6 01	jsl $01a619	                JSL IFDD_SEND_CMD
.01a554		c9 00		cmp #$00	                CMP #0
.01a556		30 04		bmi $01a55c	                BMI IFDD_SEEK_ERROR_SEND_CMD
.01a558		a9 01		lda #$01	                LDA #1
.01a55a		80 02		bra $01a55e	                BRA IFDD_SEEK_DONE
.01a55c						IFDD_SEEK_ERROR_SEND_CMD
.01a55c		a9 ff		lda #$ff	                LDA #-1
.01a55e						IFDD_SEEK_DONE
.01a55e		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a560		68		pla		                PLA
.01a561		fa		plx		                PLX
.01a562		2b		pld		                PLD
.01a563		28		plp		                PLP
.01a564		6b		rtl		                RTL
.01a565		00		brk #		IFDD_SEEKRELATIF BRK
.01a566						IFDD_READ_ID
.01a566		08		php		                PHP
.01a567		0b		phd		                PHD
.01a568		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a56a		48		pha		                PHA
.01a56b		da		phx		                PHX
.01a56c		e2 20		sep #$20	                SEP #$20        ; set A short
.01a56e		29 07		and #$07	                AND #7                    ; Get the 3 first bit HDS (2) and driver (1-0)
.01a570		48		pha		                PHA             ; begin setdbr macro
.01a571		08		php		                PHP
.01a572		e2 20		sep #$20	                SEP #$20        ; set A short
.01a574		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a576		48		pha		                PHA
.01a577		ab		plb		                PLB
.01a578		28		plp		                PLP
.01a579		68		pla		                PLA             ; end setdbr macro
.01a57a		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a57d		8a		txa		                LDA X                     ; Get the cylinder index
.01a57e		29 01		and #$01	                AND #1
.01a580		0a		asl a		                ASL
.01a581		0a		asl a		                ASL
.01a582		0a		asl a		                ASL
.01a583		0a		asl a		                ASL
.01a584		0a		asl a		                ASL
.01a585		0a		asl a		                ASL
.01a586		48		pha		                PHA
.01a587		a9 0a		lda #$0a	                LDA #$0A
.01a589		03 01		ora $01,s	                ORA #1, S
.01a58b		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a58e		68		pla		                PLA
.01a58f		ad 00 a0	lda $01a000	                LDA FLOPPY_CMD_BUFFER
.01a592		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a596		ad 01 a0	lda $01a001	                LDA FLOPPY_CMD_BUFFER+1
.01a599		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a59d		48		pha		                PHA             ; begin setdbr macro
.01a59e		08		php		                PHP
.01a59f		e2 20		sep #$20	                SEP #$20        ; set A short
.01a5a1		a9 01		lda #$01		LDA #`Text_READ_ID
.01a5a3		48		pha		                PHA
.01a5a4		ab		plb		                PLB
.01a5a5		28		plp		                PLP
.01a5a6		68		pla		                PLA             ; end setdbr macro
.01a5a7		a2 dd aa	ldx #$aadd	                LDX #<>Text_READ_ID
.01a5aa		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a5ae		a9 02		lda #$02	                LDA #2                    ; number of command Bytes
.01a5b0		22 19 a6 01	jsl $01a619	                JSL IFDD_SEND_CMD
.01a5b4		c9 00		cmp #$00	                CMP #0
.01a5b6		30 10		bmi $01a5c8	                BMI IFDD_READ_ID_ERROR_READ_CMD
.01a5b8		e2 20		sep #$20	                SEP #$20        ; set A short
.01a5ba		a9 07		lda #$07	                LDA #7                    ; number of Bytes to read
.01a5bc		22 1b a7 01	jsl $01a71b	                JSL IFDD_READ_CMD_RESULT
.01a5c0		c9 00		cmp #$00	                CMP #0
.01a5c2		30 04		bmi $01a5c8	                BMI IFDD_READ_ID_ERROR_READ_CMD
.01a5c4		a9 01		lda #$01	                LDA #1
.01a5c6		80 13		bra $01a5db	                BRA IFDD_READ_ID_DONE
.01a5c8						IFDD_READ_ID_ERROR_READ_CMD
.01a5c8		48		pha		                PHA             ; begin setdbr macro
.01a5c9		08		php		                PHP
.01a5ca		e2 20		sep #$20	                SEP #$20        ; set A short
.01a5cc		a9 01		lda #$01		LDA #`Text_ERROR
.01a5ce		48		pha		                PHA
.01a5cf		ab		plb		                PLB
.01a5d0		28		plp		                PLP
.01a5d1		68		pla		                PLA             ; end setdbr macro
.01a5d2		a2 81 ac	ldx #$ac81	                LDX #<>Text_ERROR
.01a5d5		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a5d9		a9 ff		lda #$ff	                LDA #-1
.01a5db						IFDD_READ_ID_DONE
.01a5db		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a5dd		fa		plx		                PLX
.01a5de		68		pla		                PLA
.01a5df		2b		pld		                PLD
.01a5e0		28		plp		                PLP
.01a5e1		6b		rtl		                RTL
.01a5e2						IFDD_GET_DRIVE_STATUS
.01a5e2		e2 20		sep #$20	                SEP #$20        ; set A short
.01a5e4		29 07		and #$07	                AND #7                    ; Get the 3 first bit HDS (2) and driver (1-0)
.01a5e6		48		pha		                PHA             ; begin setdbr macro
.01a5e7		08		php		                PHP
.01a5e8		e2 20		sep #$20	                SEP #$20        ; set A short
.01a5ea		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a5ec		48		pha		                PHA
.01a5ed		ab		plb		                PLB
.01a5ee		28		plp		                PLP
.01a5ef		68		pla		                PLA             ; end setdbr macro
.01a5f0		8d 01 a0	sta $01a001	                STA FLOPPY_CMD_BUFFER+1
.01a5f3		a9 04		lda #$04	                LDA #$4
.01a5f5		8d 00 a0	sta $01a000	                STA FLOPPY_CMD_BUFFER
.01a5f8		8a		txa		                LDA X                     ; Get the cylinder index
.01a5f9		8d 02 a0	sta $01a002	                STA FLOPPY_CMD_BUFFER+2
.01a5fc		a9 02		lda #$02	                LDA #2                    ; number of command Bytes
.01a5fe		22 19 a6 01	jsl $01a619	                JSL IFDD_SEND_CMD
.01a602		c9 00		cmp #$00	                CMP #0
.01a604		30 10		bmi $01a616	                BMI IFDD_DRIVE_STATUS_ERROR_READ_CMD
.01a606		e2 20		sep #$20	                SEP #$20        ; set A short
.01a608		a9 01		lda #$01	                LDA #1                    ; number of Bytes to read
.01a60a		22 1b a7 01	jsl $01a71b	                JSL IFDD_READ_CMD_RESULT
.01a60e		c9 00		cmp #$00	                CMP #0
.01a610		30 04		bmi $01a616	                BMI IFDD_DRIVE_STATUS_ERROR_READ_CMD
.01a612		a9 01		lda #$01	                LDA #1
.01a614		80 02		bra $01a618	                BRA IFDD_DRIVE_STATUS_DONE
.01a616						IFDD_DRIVE_STATUS_ERROR_READ_CMD
.01a616		a9 ff		lda #$ff	                LDA #-1
.01a618						IFDD_DRIVE_STATUS_DONE
.01a618		6b		rtl		                RTL
.01a619		48		pha		IFDD_SEND_CMD   PHA                       ; save the number of byt to be sent to the FDC
.01a61a		48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.01a61b		48		pha		                PHA             ; begin setdbr macro
.01a61c		08		php		                PHP
.01a61d		e2 20		sep #$20	                SEP #$20        ; set A short
.01a61f		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a621		48		pha		                PHA
.01a622		ab		plb		                PLB
.01a623		28		plp		                PLP
.01a624		68		pla		                PLA             ; end setdbr macro
.01a625						IFDD_SEND_CMD_READ_MAIN_STATUS_REG
.01a625		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a628		83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.01a62a		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a62c		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a62e		f0 05		beq $01a635	                BEQ IFDD_SEND_CMD_TRANSFERT_CAN_BE_DONE ;
.01a630		ea		nop		                NOP
.01a631		ea		nop		                NOP
.01a632		ea		nop		                NOP
.01a633		80 f0		bra $01a625	                BRA IFDD_SEND_CMD_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a635						IFDD_SEND_CMD_TRANSFERT_CAN_BE_DONE
.01a635		a3 01		lda $01,s	                LDA #1, S                 ; get the Main Status avlue
.01a637		29 40		and #$40	                AND #FDD_DIO                  ; get DIO bit
.01a639		c9 40		cmp #$40	                CMP #$40                  ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.01a63b		d0 05		bne $01a642	                BNE IFDD_SEND_CMD_READDY_TO_SEND_DATA;
.01a63d		ad f5 13	lda $af13f5	                LDA FDD_FIFO                      ; remove the Main Status value saved
.01a640		80 e3		bra $01a625	                BRA IFDD_SEND_CMD_READ_MAIN_STATUS_REG  ; retest if we can send data now#
.01a642						IFDD_SEND_CMD_READDY_TO_SEND_DATA
.01a642		68		pla		                PLA                       ; remove the Main Status value saved
.01a643		48		pha		                PHA             ; begin setdbr macro
.01a644		08		php		                PHP
.01a645		e2 20		sep #$20	                SEP #$20        ; set A short
.01a647		a9 01		lda #$01		LDA #`Text_SEND_CMD
.01a649		48		pha		                PHA
.01a64a		ab		plb		                PLB
.01a64b		28		plp		                PLP
.01a64c		68		pla		                PLA             ; end setdbr macro
.01a64d		a2 08 ac	ldx #$ac08	                LDX #<>Text_SEND_CMD
.01a650		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a654		a2 95 ac	ldx #$ac95	                LDX #<>Text_CMD_Parametter_Number
.01a657		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a65b		a3 01		lda $01,s	                LDA #1, S                 ; Get the number of parametter
.01a65d		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a661		a2 92 ac	ldx #$ac92	                LDX #<>Text_EOL
.01a664		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a668		48		pha		                PHA             ; begin setdbr macro
.01a669		08		php		                PHP
.01a66a		e2 20		sep #$20	                SEP #$20        ; set A short
.01a66c		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a66e		48		pha		                PHA
.01a66f		ab		plb		                PLB
.01a670		28		plp		                PLP
.01a671		68		pla		                PLA             ; end setdbr macro
.01a672		a2 00 00	ldx #$0000	                LDX #0
.01a675		8a		txa		SEND_NEXT_DATA  LDA X
.01a676		c3 01		cmp $01,s	                CMP #1, S                 ; Test if we sent all the data ot not
.01a678		f0 53		beq $01a6cd	                BEQ ALL_DATA_SENT_1
.01a67a		bd 00 a0	lda $01a000,x	                LDA FLOPPY_CMD_BUFFER,X
.01a67d		8f f5 13 af	sta $af13f5	                STA FDD_FIFO              ; Write the data in the FDC's FIFO
.01a681		da		phx		                PHX
.01a682		48		pha		                PHA             ; begin setdbr macro
.01a683		08		php		                PHP
.01a684		e2 20		sep #$20	                SEP #$20        ; set A short
.01a686		a9 01		lda #$01		LDA #`Text_CMD_Parametter
.01a688		48		pha		                PHA
.01a689		ab		plb		                PLB
.01a68a		28		plp		                PLP
.01a68b		68		pla		                PLA             ; end setdbr macro
.01a68c		a2 a6 ac	ldx #$aca6	                LDX #<>Text_CMD_Parametter
.01a68f		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a693		fa		plx		                PLX
.01a694		da		phx		                PHX
.01a695		8a		txa		                TXA
.01a696		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a69a		48		pha		                PHA             ; begin setdbr macro
.01a69b		08		php		                PHP
.01a69c		e2 20		sep #$20	                SEP #$20        ; set A short
.01a69e		a9 01		lda #$01		LDA #`Text_duble_dot
.01a6a0		48		pha		                PHA
.01a6a1		ab		plb		                PLB
.01a6a2		28		plp		                PLP
.01a6a3		68		pla		                PLA             ; end setdbr macro
.01a6a4		a2 c2 ac	ldx #$acc2	                LDX #<>Text_duble_dot
.01a6a7		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a6ab		fa		plx		                PLX
.01a6ac		da		phx		                PHX
.01a6ad		bd 00 a0	lda $01a000,x	                LDA FLOPPY_CMD_BUFFER,X
.01a6b0		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a6b4		a2 92 ac	ldx #$ac92	                LDX #<>Text_EOL
.01a6b7		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a6bb		22 19 a9 01	jsl $01a919	                JSL IFDD_PRINT_FDD_MS_REG
.01a6bf		fa		plx		                PLX
.01a6c0		e8		inx		                INX
.01a6c1		48		pha		                PHA             ; begin setdbr macro
.01a6c2		08		php		                PHP
.01a6c3		e2 20		sep #$20	                SEP #$20        ; set A short
.01a6c5		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a6c7		48		pha		                PHA
.01a6c8		ab		plb		                PLB
.01a6c9		28		plp		                PLP
.01a6ca		68		pla		                PLA             ; end setdbr macro
.01a6cb						READ_MAIN_STATUS_REG_FOR_TRANSFERT
.01a6cb		80 02		bra $01a6cf	                BRA ALL_DATA_SEND_JUMP_BYPASS
.01a6cd		80 48		bra $01a717	ALL_DATA_SENT_1 BRA ALL_DATA_SENT
.01a6cf						ALL_DATA_SEND_JUMP_BYPASS
.01a6cf		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a6d2		48		pha		                PHA
.01a6d3		29 0f		and #$0f	                AND #$F
.01a6d5		18		clc		                CLC
.01a6d6		69 30		adc #$30	                ADC #$30
.01a6d8		48		pha		                PHA             ; begin setdbr macro
.01a6d9		08		php		                PHP
.01a6da		e2 20		sep #$20	                SEP #$20        ; set A short
.01a6dc		a9 af		lda #$af		LDA #`$AFA207
.01a6de		48		pha		                PHA
.01a6df		ab		plb		                PLB
.01a6e0		28		plp		                PLP
.01a6e1		68		pla		                PLA             ; end setdbr macro
.01a6e2		8d 07 a2	sta $afa207	                STA $AFA207
.01a6e5		a3 01		lda $01,s	                LDA #1, S
.01a6e7		4a		lsr a		                LSR A
.01a6e8		4a		lsr a		                LSR A
.01a6e9		4a		lsr a		                LSR A
.01a6ea		4a		lsr a		                LSR A
.01a6eb		29 0f		and #$0f	                AND #$F
.01a6ed		18		clc		                CLC
.01a6ee		69 30		adc #$30	                ADC #$30
.01a6f0		48		pha		                PHA             ; begin setdbr macro
.01a6f1		08		php		                PHP
.01a6f2		e2 20		sep #$20	                SEP #$20        ; set A short
.01a6f4		a9 af		lda #$af		LDA #`$AFA206
.01a6f6		48		pha		                PHA
.01a6f7		ab		plb		                PLB
.01a6f8		28		plp		                PLP
.01a6f9		68		pla		                PLA             ; end setdbr macro
.01a6fa		8d 06 a2	sta $afa206	                STA $AFA206
.01a6fd		68		pla		                PLA
.01a6fe		48		pha		                PHA             ; begin setdbr macro
.01a6ff		08		php		                PHP
.01a700		e2 20		sep #$20	                SEP #$20        ; set A short
.01a702		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a704		48		pha		                PHA
.01a705		ab		plb		                PLB
.01a706		28		plp		                PLP
.01a707		68		pla		                PLA             ; end setdbr macro
.01a708		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a70b		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a70d		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a70f		82 63 ff	brl $01a675	                BRL SEND_NEXT_DATA
.01a712		ea		nop		                NOP
.01a713		ea		nop		                NOP
.01a714		ea		nop		                NOP
.01a715		80 b4		bra $01a6cb	                BRA READ_MAIN_STATUS_REG_FOR_TRANSFERT  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a717						ALL_DATA_SENT
.01a717		68		pla		                PLA                       ; removing the number of commands byte to send
.01a718		a9 00		lda #$00	                LDA #0
.01a71a		6b		rtl		                RTL
.01a71b						IFDD_READ_CMD_RESULT
.01a71b		48		pha		                PHA             ; begin setdbr macro
.01a71c		08		php		                PHP
.01a71d		e2 20		sep #$20	                SEP #$20        ; set A short
.01a71f		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a721		48		pha		                PHA
.01a722		ab		plb		                PLB
.01a723		28		plp		                PLP
.01a724		68		pla		                PLA             ; end setdbr macro
.01a725		48		pha		                PHA                       ; save the number of byt to be sent to the FDC
.01a726		48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.01a727						IFDD_READ_CMD_RESULT_READ_MAIN_STATUS_REG
.01a727		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a72a		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a72e		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a731		83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.01a733		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a735		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a737		f0 0b		beq $01a744	                BEQ IFDD_READ_CMD_TRANSFERT_CAN_BE_DONE ;
.01a739		ea		nop		                NOP
.01a73a		a2 d0 07	ldx #$07d0	                LDX #2000
.01a73d		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.01a741		ea		nop		                NOP
.01a742		80 e3		bra $01a727	                BRA IFDD_READ_CMD_RESULT_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a744						IFDD_READ_CMD_TRANSFERT_CAN_BE_DONE
.01a744		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a747		29 40		and #$40	                AND #FDD_DIO              ; get DIO bit
.01a749		c9 40		cmp #$40	                CMP #$40                  ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.01a74b		f0 04		beq $01a751	                BEQ READDY_TO_READ_DATA   ; We want to read the result of the command
.01a74d		a9 01		lda #$01	                LDA #1                    ; error, the FDC after reciving the commans is suppos to sent you data
.01a74f		80 d6		bra $01a727	                BRA IFDD_READ_CMD_RESULT_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a751						READDY_TO_READ_DATA
.01a751		68		pla		                PLA
.01a752		48		pha		                PHA             ; begin setdbr macro
.01a753		08		php		                PHP
.01a754		e2 20		sep #$20	                SEP #$20        ; set A short
.01a756		a9 01		lda #$01		LDA #`Text_EOL
.01a758		48		pha		                PHA
.01a759		ab		plb		                PLB
.01a75a		28		plp		                PLP
.01a75b		68		pla		                PLA             ; end setdbr macro
.01a75c		a2 92 ac	ldx #$ac92	                LDX #<>Text_EOL
.01a75f		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a763		a2 2f ac	ldx #$ac2f	                LDX #<>Text_Start_Rx_CMD
.01a766		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a76a		a2 ad ac	ldx #$acad	                LDX #<>Text_CMD_Result_Number
.01a76d		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a771		a3 01		lda $01,s	                LDA #1, S                 ; Get the number of parametter
.01a773		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a777		a2 92 ac	ldx #$ac92	                LDX #<>Text_EOL
.01a77a		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a77e		a2 00 00	ldx #$0000	                LDX #0
.01a781		8a		txa		READ_NEXT_DATA  LDA X
.01a782		c3 01		cmp $01,s	                CMP #1, S                 ; Test if we read all the data ot not
.01a784		f0 72		beq $01a7f8	                BEQ ALL_DATA_READ
.01a786		48		pha		                PHA             ; begin setdbr macro
.01a787		08		php		                PHP
.01a788		e2 20		sep #$20	                SEP #$20        ; set A short
.01a78a		a9 af		lda #$af		LDA #`FDD_FIFO
.01a78c		48		pha		                PHA
.01a78d		ab		plb		                PLB
.01a78e		28		plp		                PLP
.01a78f		68		pla		                PLA             ; end setdbr macro
.01a790		ad f5 13	lda $af13f5	                LDA FDD_FIFO              ; Read the data from the FDC's FIFO
.01a793		48		pha		                PHA             ; begin setdbr macro
.01a794		08		php		                PHP
.01a795		e2 20		sep #$20	                SEP #$20        ; set A short
.01a797		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.01a799		48		pha		                PHA
.01a79a		ab		plb		                PLB
.01a79b		28		plp		                PLP
.01a79c		68		pla		                PLA             ; end setdbr macro
.01a79d		9d 00 a0	sta $01a000,x	                STA FLOPPY_CMD_BUFFER,X   ; Save it in the Buffer
.01a7a0		da		phx		                PHX
.01a7a1		48		pha		                PHA             ; begin setdbr macro
.01a7a2		08		php		                PHP
.01a7a3		e2 20		sep #$20	                SEP #$20        ; set A short
.01a7a5		a9 01		lda #$01		LDA #`Text_CMD_Parametter
.01a7a7		48		pha		                PHA
.01a7a8		ab		plb		                PLB
.01a7a9		28		plp		                PLP
.01a7aa		68		pla		                PLA             ; end setdbr macro
.01a7ab		a2 ba ac	ldx #$acba	                LDX #<>Text_CMD_Result
.01a7ae		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a7b2		fa		plx		                PLX
.01a7b3		da		phx		                PHX
.01a7b4		8a		txa		                TXA
.01a7b5		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a7b9		48		pha		                PHA             ; begin setdbr macro
.01a7ba		08		php		                PHP
.01a7bb		e2 20		sep #$20	                SEP #$20        ; set A short
.01a7bd		a9 01		lda #$01		LDA #`Text_duble_dot
.01a7bf		48		pha		                PHA
.01a7c0		ab		plb		                PLB
.01a7c1		28		plp		                PLP
.01a7c2		68		pla		                PLA             ; end setdbr macro
.01a7c3		a2 c2 ac	ldx #$acc2	                LDX #<>Text_duble_dot
.01a7c6		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a7ca		fa		plx		                PLX
.01a7cb		da		phx		                PHX
.01a7cc		bd 00 a0	lda $01a000,x	                LDA FLOPPY_CMD_BUFFER,X
.01a7cf		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a7d3		a2 92 ac	ldx #$ac92	                LDX #<>Text_EOL
.01a7d6		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a7da		22 19 a9 01	jsl $01a919	                JSL IFDD_PRINT_FDD_MS_REG
.01a7de		fa		plx		                PLX
.01a7df		e8		inx		                INX
.01a7e0		48		pha		                PHA             ; begin setdbr macro
.01a7e1		08		php		                PHP
.01a7e2		e2 20		sep #$20	                SEP #$20        ; set A short
.01a7e4		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a7e6		48		pha		                PHA
.01a7e7		ab		plb		                PLB
.01a7e8		28		plp		                PLP
.01a7e9		68		pla		                PLA             ; end setdbr macro
.01a7ea						READ_MAIN_STATUS_REG_FOR_TRANSFERT_2
.01a7ea		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a7ed		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a7ef		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a7f1		f0 8e		beq $01a781	                BEQ READ_NEXT_DATA
.01a7f3		ea		nop		                NOP
.01a7f4		ea		nop		                NOP
.01a7f5		ea		nop		                NOP
.01a7f6		80 f2		bra $01a7ea	                BRA READ_MAIN_STATUS_REG_FOR_TRANSFERT_2  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a7f8						ALL_DATA_READ
.01a7f8		a9 00		lda #$00	                LDA #0
.01a7fa		80 11		bra $01a80d	                BRA IFDD_READ_CMD_RESULT_RETURN
.01a7fc						IFDD_READ_CMD_RESULT_RETURN_ERROR
.01a7fc		48		pha		                PHA             ; begin setdbr macro
.01a7fd		08		php		                PHP
.01a7fe		e2 20		sep #$20	                SEP #$20        ; set A short
.01a800		a9 01		lda #$01		LDA #`Text_ERROR
.01a802		48		pha		                PHA
.01a803		ab		plb		                PLB
.01a804		28		plp		                PLP
.01a805		68		pla		                PLA             ; end setdbr macro
.01a806		a2 81 ac	ldx #$ac81	                LDX #<>Text_ERROR
.01a809		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a80d						IFDD_READ_CMD_RESULT_RETURN
.01a80d		68		pla		                PLA
.01a80e		48		pha		                PHA             ; begin setdbr macro
.01a80f		08		php		                PHP
.01a810		e2 20		sep #$20	                SEP #$20        ; set A short
.01a812		a9 01		lda #$01		LDA #`Text_Stop_Rx_CMD
.01a814		48		pha		                PHA
.01a815		ab		plb		                PLB
.01a816		28		plp		                PLP
.01a817		68		pla		                PLA             ; end setdbr macro
.01a818		a2 45 ac	ldx #$ac45	                LDX #<>Text_Stop_Rx_CMD
.01a81b		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a81f		a2 00 00	ldx #$0000	                LDX #0
.01a822		6b		rtl		                RTL
.01a823						IFDD_READ_DATA_FIFO
.01a823		c2 10		rep #$10	                REP #$10        ; set X long
.01a825		48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.01a826		48		pha		                PHA             ; begin setdbr macro
.01a827		08		php		                PHP
.01a828		e2 20		sep #$20	                SEP #$20        ; set A short
.01a82a		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a82c		48		pha		                PHA
.01a82d		ab		plb		                PLB
.01a82e		28		plp		                PLP
.01a82f		68		pla		                PLA             ; end setdbr macro
.01a830						IFDD_READ_DATA_FIFO_READ_MAIN_STATUS_REG
.01a830		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a833		83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.01a835		29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a837		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a839		f0 05		beq $01a840	                BEQ IFDD_READ_DATA_FIFO_TRANSFERT_CAN_BE_DONE ;
.01a83b		ea		nop		                NOP
.01a83c		ea		nop		                NOP
.01a83d		ea		nop		                NOP
.01a83e		80 f0		bra $01a830	                BRA IFDD_READ_DATA_FIFO_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a840						IFDD_READ_DATA_FIFO_TRANSFERT_CAN_BE_DONE
.01a840		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a843		29 40		and #$40	                AND #FDD_DIO              ; get DIO bit
.01a845		c9 40		cmp #$40	                CMP #$40                  ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.01a847		f0 06		beq $01a84f	                BEQ IFDD_READ_DATA_FIFO_READDY_TO_READ_DATA   ; We want to read the result of the command
.01a849		68		pla		                PLA
.01a84a		a9 01		lda #$01	                LDA #1                   ; error, the FDC after reciving the commans is suppos to sent you data
.01a84c		82 b6 00	brl $01a905	                BRL IFDD_READ_DATA_FIFO_RETURN_ERROR
.01a84f						IFDD_READ_DATA_FIFO_READDY_TO_READ_DATA
.01a84f		68		pla		                PLA
.01a850		a2 00 00	ldx #$0000	                LDX #0
.01a853		a0 00 06	ldy #$0600	                LDY #$600
.01a856						IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a856		48		pha		                PHA             ; begin setdbr macro
.01a857		08		php		                PHP
.01a858		e2 20		sep #$20	                SEP #$20        ; set A short
.01a85a		a9 af		lda #$af		LDA #`FDD_FIFO
.01a85c		48		pha		                PHA
.01a85d		ab		plb		                PLB
.01a85e		28		plp		                PLP
.01a85f		68		pla		                PLA             ; end setdbr macro
.01a860		ad f5 13	lda $af13f5	                LDA FDD_FIFO              ; Read the data from the FDC's FIFO
.01a863		48		pha		                PHA             ; begin setdbr macro
.01a864		08		php		                PHP
.01a865		e2 20		sep #$20	                SEP #$20        ; set A short
.01a867		a9 19		lda #$19		LDA #`$19A000
.01a869		48		pha		                PHA
.01a86a		ab		plb		                PLB
.01a86b		28		plp		                PLP
.01a86c		68		pla		                PLA             ; end setdbr macro
.01a86d		9d 00 a0	sta $19a000,x	                STA $19A000 ,X            ; Save it in the Buffer
.01a870		48		pha		                PHA             ; begin setdbr macro
.01a871		08		php		                PHP
.01a872		e2 20		sep #$20	                SEP #$20        ; set A short
.01a874		a9 af		lda #$af		LDA #`$AFA000
.01a876		48		pha		                PHA
.01a877		ab		plb		                PLB
.01a878		28		plp		                PLP
.01a879		68		pla		                PLA             ; end setdbr macro
.01a87a		da		phx		                PHX
.01a87b		48		pha		                PHA
.01a87c		a3 01		lda $01,s	                LDA #1, S
.01a87e		4a		lsr a		                LSR A                   ; Extracting the high part of the byte
.01a87f		4a		lsr a		                LSR A
.01a880		4a		lsr a		                LSR A
.01a881		4a		lsr a		                LSR A
.01a882		c2 20		rep #$20	                REP #$20        ; set A long
.01a884		29 0f 00	and #$000f	                AND #$F
.01a887		aa		tax		                LDX A
.01a888		e2 20		sep #$20	                SEP #$20        ; set A short
.01a88a		48		pha		                PHA             ; begin setdbr macro
.01a88b		08		php		                PHP
.01a88c		e2 20		sep #$20	                SEP #$20        ; set A short
.01a88e		a9 19		lda #$19		LDA #`hex_digits
.01a890		48		pha		                PHA
.01a891		ab		plb		                PLB
.01a892		28		plp		                PLP
.01a893		68		pla		                PLA             ; end setdbr macro
.01a894		bd a7 18	lda $1918a7,x	                LDA hex_digits,X
.01a897		bb		tyx		                TYX
.01a898		9f 00 a0 af	sta $afa000,x	                STA $AFA000 ,X
.01a89c		a3 01		lda $01,s	                LDA #1, S
.01a89e		c2 20		rep #$20	                REP #$20        ; set A long
.01a8a0		29 0f 00	and #$000f	                AND #$F
.01a8a3		aa		tax		                LDX A
.01a8a4		e2 20		sep #$20	                SEP #$20        ; set A short
.01a8a6		bd a7 18	lda $1918a7,x	                LDA hex_digits,X
.01a8a9		bb		tyx		                TYX
.01a8aa		9f 01 a0 af	sta $afa001,x	                STA $AFA000+1 ,X
.01a8ae		80 02		bra $01a8b2	                BRA BYPASS_IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a8b0		80 a4		bra $01a856	IFDD_READ_DATA_FIFO_READ_NEXT_DATA_step1 BRA IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a8b2						BYPASS_IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a8b2		c2 20		rep #$20	                REP #$20        ; set A long
.01a8b4		98		tya		                TYA
.01a8b5		18		clc		                CLC
.01a8b6		69 04 00	adc #$0004	                ADC #4
.01a8b9		29 40 00	and #$0040	                AND #$40
.01a8bc		c9 40 00	cmp #$0040	                CMP #$40
.01a8bf		d0 0a		bne $01a8cb	                BNE NO_NEED_NEW_LINE
.01a8c1		98		tya		                TYA
.01a8c2		29 80 ff	and #$ff80	                AND #$FF80
.01a8c5		18		clc		                CLC
.01a8c6		69 80 00	adc #$0080	                ADC #$80
.01a8c9		80 05		bra $01a8d0	                BRA NEW_LINE_ADDED
.01a8cb						NO_NEED_NEW_LINE
.01a8cb		98		tya		                TYA
.01a8cc		18		clc		                CLC
.01a8cd		69 04 00	adc #$0004	                ADC #4
.01a8d0		a8		tay		NEW_LINE_ADDED  TAY
.01a8d1		e2 20		sep #$20	                SEP #$20        ; set A short
.01a8d3		68		pla		                PLA
.01a8d4		fa		plx		                PLX
.01a8d5		e8		inx		                INC X
.01a8d6		e0 00 02	cpx #$0200	                CPX #512
.01a8d9		f0 18		beq $01a8f3	                BEQ ALL_DATA_READ_2
.01a8db		48		pha		                PHA             ; begin setdbr macro
.01a8dc		08		php		                PHP
.01a8dd		e2 20		sep #$20	                SEP #$20        ; set A short
.01a8df		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a8e1		48		pha		                PHA
.01a8e2		ab		plb		                PLB
.01a8e3		28		plp		                PLP
.01a8e4		68		pla		                PLA             ; end setdbr macro
.01a8e5						READ_MAIN_STATUS_REG_FOR_TRANSFERT_3
.01a8e5		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a8e8		29 80		and #$80	                AND #FDD_RQM              ; get RQM bit
.01a8ea		c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a8ec		f0 c2		beq $01a8b0	                BEQ IFDD_READ_DATA_FIFO_READ_NEXT_DATA_step1
.01a8ee		ea		nop		                NOP
.01a8ef		ea		nop		                NOP
.01a8f0		ea		nop		                NOP
.01a8f1		80 f2		bra $01a8e5	                BRA READ_MAIN_STATUS_REG_FOR_TRANSFERT_3  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a8f3						ALL_DATA_READ_2
.01a8f3		a9 0a		lda #$0a	                LDA #$A
.01a8f5		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a8f9		a9 0d		lda #$0d	                LDA #$D
.01a8fb		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a8ff		22 19 a9 01	jsl $01a919	                JSL IFDD_PRINT_FDD_MS_REG
.01a903		a9 00		lda #$00	                LDA #0
.01a905						IFDD_READ_DATA_FIFO_RETURN_ERROR
.01a905		48		pha		                PHA
.01a906		48		pha		                PHA             ; begin setdbr macro
.01a907		08		php		                PHP
.01a908		e2 20		sep #$20	                SEP #$20        ; set A short
.01a90a		a9 01		lda #$01		LDA #`Text_Stop_Rx_FIFO
.01a90c		48		pha		                PHA
.01a90d		ab		plb		                PLB
.01a90e		28		plp		                PLP
.01a90f		68		pla		                PLA             ; end setdbr macro
.01a910		a2 6e ac	ldx #$ac6e	                LDX #<>Text_Stop_Rx_FIFO
.01a913		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a917		68		pla		                PLA
.01a918		6b		rtl		                RTL
.01a919						IFDD_PRINT_FDD_MS_REG
.01a919		08		php		                PHP
.01a91a		0b		phd		                PHD
.01a91b		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a91d		da		phx		                PHX
.01a91e		48		pha		                PHA
.01a91f		48		pha		                PHA             ; begin setdbr macro
.01a920		08		php		                PHP
.01a921		e2 20		sep #$20	                SEP #$20        ; set A short
.01a923		a9 01		lda #$01		LDA #`Text_FDD_MAIN_STATUE
.01a925		48		pha		                PHA
.01a926		ab		plb		                PLB
.01a927		28		plp		                PLP
.01a928		68		pla		                PLA             ; end setdbr macro
.01a929		a2 1e ad	ldx #$ad1e	                LDX #<>Text_FDD_MAIN_STATUE
.01a92c		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a930		e2 20		sep #$20	                SEP #$20        ; set A short
.01a932		48		pha		                PHA             ; begin setdbr macro
.01a933		08		php		                PHP
.01a934		e2 20		sep #$20	                SEP #$20        ; set A short
.01a936		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01a938		48		pha		                PHA
.01a939		ab		plb		                PLB
.01a93a		28		plp		                PLP
.01a93b		68		pla		                PLA             ; end setdbr macro
.01a93c		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a93f		22 ec 00 16	jsl $1600ec	                JSL UART_PUTHEX_2
.01a943		a9 0a		lda #$0a	                LDA #$A
.01a945		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a949		a9 0d		lda #$0d	                LDA #$D
.01a94b		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a94f		c2 30		rep #$30	                REP #$30        ; set A&X long
.01a951		68		pla		                PLA
.01a952		fa		plx		                PLX
.01a953		2b		pld		                PLD
.01a954		28		plp		                PLP
.01a955		6b		rtl		                RTL
.01a956						IFDD_PRINT_REG
.01a956		e2 20		sep #$20	                SEP #$20        ; set A short
.01a958		48		pha		                PHA             ; begin setdbr macro
.01a959		08		php		                PHP
.01a95a		e2 20		sep #$20	                SEP #$20        ; set A short
.01a95c		a9 01		lda #$01		LDA #`Text_FDD_STATUS_A
.01a95e		48		pha		                PHA
.01a95f		ab		plb		                PLB
.01a960		28		plp		                PLP
.01a961		68		pla		                PLA             ; end setdbr macro
.01a962		a2 c6 ac	ldx #$acc6	                LDX #<>Text_FDD_STATUS_A
.01a965		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a969		48		pha		                PHA             ; begin setdbr macro
.01a96a		08		php		                PHP
.01a96b		e2 20		sep #$20	                SEP #$20        ; set A short
.01a96d		a9 af		lda #$af		LDA #`FDD_STATUS_A
.01a96f		48		pha		                PHA
.01a970		ab		plb		                PLB
.01a971		28		plp		                PLP
.01a972		68		pla		                PLA             ; end setdbr macro
.01a973		ad f0 13	lda $af13f0	                LDA FDD_STATUS_A
.01a976		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01a97a		a9 0a		lda #$0a	                LDA #$A
.01a97c		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a980		a9 0d		lda #$0d	                LDA #$D
.01a982		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a986		48		pha		                PHA             ; begin setdbr macro
.01a987		08		php		                PHP
.01a988		e2 20		sep #$20	                SEP #$20        ; set A short
.01a98a		a9 01		lda #$01		LDA #`Text_FDD_STATUS_B
.01a98c		48		pha		                PHA
.01a98d		ab		plb		                PLB
.01a98e		28		plp		                PLP
.01a98f		68		pla		                PLA             ; end setdbr macro
.01a990		a2 dc ac	ldx #$acdc	                LDX #<>Text_FDD_STATUS_B
.01a993		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a997		48		pha		                PHA             ; begin setdbr macro
.01a998		08		php		                PHP
.01a999		e2 20		sep #$20	                SEP #$20        ; set A short
.01a99b		a9 af		lda #$af		LDA #`FDD_STATUS_B
.01a99d		48		pha		                PHA
.01a99e		ab		plb		                PLB
.01a99f		28		plp		                PLP
.01a9a0		68		pla		                PLA             ; end setdbr macro
.01a9a1		ad f1 13	lda $af13f1	                LDA FDD_STATUS_B
.01a9a4		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01a9a8		a9 0a		lda #$0a	                LDA #$A
.01a9aa		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a9ae		a9 0d		lda #$0d	                LDA #$D
.01a9b0		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a9b4		48		pha		                PHA             ; begin setdbr macro
.01a9b5		08		php		                PHP
.01a9b6		e2 20		sep #$20	                SEP #$20        ; set A short
.01a9b8		a9 01		lda #$01		LDA #`Text_FDD_DIGITAL_OUTPUT
.01a9ba		48		pha		                PHA
.01a9bb		ab		plb		                PLB
.01a9bc		28		plp		                PLP
.01a9bd		68		pla		                PLA             ; end setdbr macro
.01a9be		a2 f2 ac	ldx #$acf2	                LDX #<>Text_FDD_DIGITAL_OUTPUT
.01a9c1		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a9c5		48		pha		                PHA             ; begin setdbr macro
.01a9c6		08		php		                PHP
.01a9c7		e2 20		sep #$20	                SEP #$20        ; set A short
.01a9c9		a9 af		lda #$af		LDA #`FDD_DIGITAL_OUTPUT
.01a9cb		48		pha		                PHA
.01a9cc		ab		plb		                PLB
.01a9cd		28		plp		                PLP
.01a9ce		68		pla		                PLA             ; end setdbr macro
.01a9cf		ad f2 13	lda $af13f2	                LDA FDD_DIGITAL_OUTPUT
.01a9d2		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01a9d6		a9 0a		lda #$0a	                LDA #$A
.01a9d8		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a9dc		a9 0d		lda #$0d	                LDA #$D
.01a9de		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01a9e2		48		pha		                PHA             ; begin setdbr macro
.01a9e3		08		php		                PHP
.01a9e4		e2 20		sep #$20	                SEP #$20        ; set A short
.01a9e6		a9 01		lda #$01		LDA #`Text_FDD_TAPE_DRIVER
.01a9e8		48		pha		                PHA
.01a9e9		ab		plb		                PLB
.01a9ea		28		plp		                PLP
.01a9eb		68		pla		                PLA             ; end setdbr macro
.01a9ec		a2 08 ad	ldx #$ad08	                LDX #<>Text_FDD_TAPE_DRIVER
.01a9ef		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01a9f3		48		pha		                PHA             ; begin setdbr macro
.01a9f4		08		php		                PHP
.01a9f5		e2 20		sep #$20	                SEP #$20        ; set A short
.01a9f7		a9 af		lda #$af		LDA #`FDD_TAPE_DRIVER
.01a9f9		48		pha		                PHA
.01a9fa		ab		plb		                PLB
.01a9fb		28		plp		                PLP
.01a9fc		68		pla		                PLA             ; end setdbr macro
.01a9fd		ad f3 13	lda $af13f3	                LDA FDD_TAPE_DRIVER
.01aa00		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01aa04		a9 0a		lda #$0a	                LDA #$A
.01aa06		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa0a		a9 0d		lda #$0d	                LDA #$D
.01aa0c		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa10		48		pha		                PHA             ; begin setdbr macro
.01aa11		08		php		                PHP
.01aa12		e2 20		sep #$20	                SEP #$20        ; set A short
.01aa14		a9 01		lda #$01		LDA #`Text_FDD_MAIN_STATUE
.01aa16		48		pha		                PHA
.01aa17		ab		plb		                PLB
.01aa18		28		plp		                PLP
.01aa19		68		pla		                PLA             ; end setdbr macro
.01aa1a		a2 1e ad	ldx #$ad1e	                LDX #<>Text_FDD_MAIN_STATUE
.01aa1d		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01aa21		48		pha		                PHA             ; begin setdbr macro
.01aa22		08		php		                PHP
.01aa23		e2 20		sep #$20	                SEP #$20        ; set A short
.01aa25		a9 af		lda #$af		LDA #`FDD_MAIN_STATUE
.01aa27		48		pha		                PHA
.01aa28		ab		plb		                PLB
.01aa29		28		plp		                PLP
.01aa2a		68		pla		                PLA             ; end setdbr macro
.01aa2b		ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01aa2e		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01aa32		a9 0a		lda #$0a	                LDA #$A
.01aa34		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa38		a9 0d		lda #$0d	                LDA #$D
.01aa3a		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa3e		48		pha		                PHA             ; begin setdbr macro
.01aa3f		08		php		                PHP
.01aa40		e2 20		sep #$20	                SEP #$20        ; set A short
.01aa42		a9 01		lda #$01		LDA #`Text_FDD_DIGITAL_INPUT
.01aa44		48		pha		                PHA
.01aa45		ab		plb		                PLB
.01aa46		28		plp		                PLP
.01aa47		68		pla		                PLA             ; end setdbr macro
.01aa48		a2 34 ad	ldx #$ad34	                LDX #<>Text_FDD_DIGITAL_INPUT
.01aa4b		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.01aa4f		48		pha		                PHA             ; begin setdbr macro
.01aa50		08		php		                PHP
.01aa51		e2 20		sep #$20	                SEP #$20        ; set A short
.01aa53		a9 af		lda #$af		LDA #`FDD_DIGITAL_INPUT
.01aa55		48		pha		                PHA
.01aa56		ab		plb		                PLB
.01aa57		28		plp		                PLP
.01aa58		68		pla		                PLA             ; end setdbr macro
.01aa59		ad f7 13	lda $af13f7	                LDA FDD_DIGITAL_INPUT
.01aa5c		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.01aa60		a9 0a		lda #$0a	                LDA #$A
.01aa62		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa66		a9 0d		lda #$0d	                LDA #$D
.01aa68		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa6c		a9 0a		lda #$0a	                LDA #$A
.01aa6e		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa72		a9 0d		lda #$0d	                LDA #$D
.01aa74		22 93 00 16	jsl $160093	                JSL UART_PUTC
.01aa78		6b		rtl		                RTL
>01aa79		2d 2d 2d 2d 2d 2d 2d 2d		Text_INIT_AT              .text "----------------- FDD INIT_AT -----------------",$A,$D,0
>01aa81		2d 2d 2d 2d 2d 2d 2d 2d 2d 20 46 44 44 20 49 4e
>01aa91		49 54 5f 41 54 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01aaa1		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01aaab		2d 2d 2d 2d 2d 2d 2d 2d		Text_RECALIBRATE          .text "--------------- FDD RECALIBRATE ---------------",$A,$D,0
>01aab3		2d 2d 2d 2d 2d 2d 2d 20 46 44 44 20 52 45 43 41
>01aac3		4c 49 42 52 41 54 45 20 2d 2d 2d 2d 2d 2d 2d 2d
>01aad3		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01aadd		2d 2d 2d 2d 2d 2d 2d 2d		Text_READ_ID              .text "------------------- READ_ID -------------------",$A,$D,0
>01aae5		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 52 45 41 44
>01aaf5		5f 49 44 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01ab05		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01ab0f		2d 2d 2d 2d 2d 2d 2d 2d		Text_READ                 .text "--------------------- READ --------------------",$A,$D,0
>01ab17		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 52 45
>01ab27		41 44 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01ab37		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01ab41		2d 2d 2d 2d 2d 2d 2d 2d		Text_SENS_INTERRUPT_STATUS .text "------------ SENS_INTERRUPT_STATUS ------------",$A,$D,0
>01ab49		2d 2d 2d 2d 20 53 45 4e 53 5f 49 4e 54 45 52 52
>01ab59		55 50 54 5f 53 54 41 54 55 53 20 2d 2d 2d 2d 2d
>01ab69		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01ab73		2d 2d 2d 2d 2d 2d 2d 2d		Text_FORMAT               .text "-------------------- FORMAT -------------------",$A,$D,0
>01ab7b		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 46 4f 52
>01ab8b		4d 41 54 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01ab9b		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01aba5		2d 2d 2d 2d 2d 2d 2d 2d		Text_SEEK                 .text "--------------------- SEEK --------------------",$A,$D,0
>01abad		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 53 45
>01abbd		45 4b 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01abcd		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01abd7		2d 2d 2d 2d 2d 2d 2d 2d		Text_SPECIFY               .text "------------------- SPECIFY ------------------",$A,$D,0
>01abdf		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 53 50 45 43
>01abef		49 46 59 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01abff		2d 2d 2d 2d 2d 2d 0a 0d 00
>01ac08		2d 20 53 45 4e 44 20 43		Text_SEND_CMD         .text "- SEND CMD Start -",$A,$D,0
>01ac10		4d 44 20 53 74 61 72 74 20 2d 0a 0d 00
>01ac1d		2d 20 54 58 20 43 4d 44		Text_Stop_Tx_CMD          .text "- TX CMD Stop -",$A,$D,0
>01ac25		20 53 74 6f 70 20 2d 0a 0d 00
>01ac2f		2d 20 52 58 20 52 45 53		Text_Start_Rx_CMD         .text "- RX RESULT Start -",$A,$D,0
>01ac37		55 4c 54 20 53 74 61 72 74 20 2d 0a 0d 00
>01ac45		2d 20 52 58 20 52 45 53		Text_Stop_Rx_CMD          .text "- RX RESULT Stop -",$A,$D,0
>01ac4d		55 4c 54 20 53 74 6f 70 20 2d 0a 0d 00
>01ac5a		2d 20 52 58 20 46 49 46		Text_Start_Rx_FIFO        .text "- RX FIFO Start -",$A,$D,0
>01ac62		4f 20 53 74 61 72 74 20 2d 0a 0d 00
>01ac6e		2d 20 52 58 20 46 49 46		Text_Stop_Rx_FIFO         .text "- RX FIFO Stop -",$A,$D,0
>01ac76		4f 20 53 74 6f 70 20 2d 0a 0d 00
>01ac81		2d 20 46 44 44 5f 45 52		Text_ERROR                .text "- FDD_ERROR : ",$A,$D,0
>01ac89		52 4f 52 20 3a 20 0a 0d 00
>01ac92		0a 0d 00			Text_EOL                  .text $A,$D,0
>01ac95		4e 62 20 70 61 72 61 6d		Text_CMD_Parametter_Number .text "Nb parametter : ",0
>01ac9d		65 74 74 65 72 20 3a 20 00
>01aca6		50 61 72 61 6d 20 00		Text_CMD_Parametter       .text "Param ",0
>01acad		4e 62 20 72 65 73 75 6c		Text_CMD_Result_Number    .text "Nb result : ",0
>01acb5		74 20 3a 20 00
>01acba		52 65 73 75 6c 74 20 00		Text_CMD_Result           .text "Result ",0
>01acc2		20 3a 20 00			Text_duble_dot             .text " : ",0
>01acc6		46 44 44 5f 53 54 41 54		Text_FDD_STATUS_A         .text "FDD_STATUS_A       0x",0
>01acce		55 53 5f 41 20 20 20 20 20 20 20 30 78 00
>01acdc		46 44 44 5f 53 54 41 54		Text_FDD_STATUS_B         .text "FDD_STATUS_B       0x",0
>01ace4		55 53 5f 42 20 20 20 20 20 20 20 30 78 00
>01acf2		46 44 44 5f 44 49 47 49		Text_FDD_DIGITAL_OUTPUT   .text "FDD_DIGITAL_OUTPUT 0x",0
>01acfa		54 41 4c 5f 4f 55 54 50 55 54 20 30 78 00
>01ad08		46 44 44 5f 54 41 50 45		Text_FDD_TAPE_DRIVER      .text "FDD_TAPE_DRIVER    0x",0
>01ad10		5f 44 52 49 56 45 52 20 20 20 20 30 78 00
>01ad1e		46 44 44 5f 4d 41 49 4e		Text_FDD_MAIN_STATUE      .text "FDD_MAIN_STATUE    0x",0
>01ad26		5f 53 54 41 54 55 45 20 20 20 20 30 78 00
>01ad34		46 44 44 5f 44 49 47 49		Text_FDD_DIGITAL_INPUT    .text "FDD_DIGITAL_INPUT  0x",0
>01ad3c		54 41 4c 5f 49 4e 50 55 54 20 20 30 78 00

;******  Processing file: FDD_row_TEXT_HEX.asm

>01ad4a		eb 3c 90 4d 53 44 4f 53		data_floppy .text $EB,$3C,$90,$4D,$53,$44,$4F,$53,$35,$2E,$30,$00,$02,$01,$01,$00,$02,$E0,$00,$40,$0B,$F0,$09,$00,$12,$00,$02,$00,$00,$00,$00,$00
>01ad52		35 2e 30 00 02 01 01 00 02 e0 00 40 0b f0 09 00
>01ad62		12 00 02 00 00 00 00 00
>01ad6a		00 00 00 00 00 00 29 07		.text $00,$00,$00,$00,$00,$00,$29,$07,$09,$31,$2D,$44,$49,$53,$4B,$20,$20,$20,$20,$20,$20,$31,$46,$41,$54,$31,$32,$20,$20,$20,$FA,$33
>01ad72		09 31 2d 44 49 53 4b 20 20 20 20 20 20 31 46 41
>01ad82		54 31 32 20 20 20 fa 33
>01ad8a		c0 8e d0 bc 00 7c 16 07		.text $C0,$8E,$D0,$BC,$00,$7C,$16,$07,$BB,$78,$00,$36,$C5,$37,$1E,$56,$16,$53,$BF,$3E,$7C,$B9,$0B,$00,$FC,$F3,$A4,$06,$1F,$C6,$45,$FE
>01ad92		bb 78 00 36 c5 37 1e 56 16 53 bf 3e 7c b9 0b 00
>01ada2		fc f3 a4 06 1f c6 45 fe
>01adaa		0f 8b 0e 18 7c 88 4d f9		.text $0F,$8B,$0E,$18,$7C,$88,$4D,$F9,$89,$47,$02,$C7,$07,$3E,$7C,$FB,$CD,$13,$72,$79,$33,$C0,$39,$06,$13,$7C,$74,$08,$8B,$0E,$13,$7C
>01adb2		89 47 02 c7 07 3e 7c fb cd 13 72 79 33 c0 39 06
>01adc2		13 7c 74 08 8b 0e 13 7c
>01adca		89 0e 20 7c a0 10 7c f7		.text $89,$0E,$20,$7C,$A0,$10,$7C,$F7,$26,$16,$7C,$03,$06,$1C,$7C,$13,$16,$1E,$7C,$03,$06,$0E,$7C,$83,$D2,$00,$A3,$50,$7C,$89,$16,$52
>01add2		26 16 7c 03 06 1c 7c 13 16 1e 7c 03 06 0e 7c 83
>01ade2		d2 00 a3 50 7c 89 16 52
>01adea		7c a3 49 7c 89 16 4b 7c		.text $7C,$A3,$49,$7C,$89,$16,$4B,$7C,$B8,$20,$00,$F7,$26,$11,$7C,$8B,$1E,$0B,$7C,$03,$C3,$48,$F7,$F3,$01,$06,$49,$7C,$83,$16,$4B,$7C
>01adf2		b8 20 00 f7 26 11 7c 8b 1e 0b 7c 03 c3 48 f7 f3
>01ae02		01 06 49 7c 83 16 4b 7c
>01ae0a		00 bb 00 05 8b 16 52 7c		.text $00,$BB,$00,$05,$8B,$16,$52,$7C,$A1,$50,$7C,$E8,$92,$00,$72,$1D,$B0,$01,$E8,$AC,$00,$72,$16,$8B,$FB,$B9,$0B,$00,$BE,$E6,$7D,$F3
>01ae12		a1 50 7c e8 92 00 72 1d b0 01 e8 ac 00 72 16 8b
>01ae22		fb b9 0b 00 be e6 7d f3
>01ae2a		a6 75 0a 8d 7f 20 b9 0b		.text $A6,$75,$0A,$8D,$7F,$20,$B9,$0B,$00,$F3,$A6,$74,$18,$BE,$9E,$7D,$E8,$5F,$00,$33,$C0,$CD,$16,$5E,$1F,$8F,$04,$8F,$44,$02,$CD,$19
>01ae32		00 f3 a6 74 18 be 9e 7d e8 5f 00 33 c0 cd 16 5e
>01ae42		1f 8f 04 8f 44 02 cd 19
>01ae4a		58 58 58 eb e8 8b 47 1a		.text $58,$58,$58,$EB,$E8,$8B,$47,$1A,$48,$48,$8A,$1E,$0D,$7C,$32,$FF,$F7,$E3,$03,$06,$49,$7C,$13,$16,$4B,$7C,$BB,$00,$07,$B9,$03,$00
>01ae52		48 48 8a 1e 0d 7c 32 ff f7 e3 03 06 49 7c 13 16
>01ae62		4b 7c bb 00 07 b9 03 00
>01ae6a		50 52 51 e8 3a 00 72 d8		.text $50,$52,$51,$E8,$3A,$00,$72,$D8,$B0,$01,$E8,$54,$00,$59,$5A,$58,$72,$BB,$05,$01,$00,$83,$D2,$00,$03,$1E,$0B,$7C,$E2,$E2,$8A,$2E
>01ae72		b0 01 e8 54 00 59 5a 58 72 bb 05 01 00 83 d2 00
>01ae82		03 1e 0b 7c e2 e2 8a 2e
>01ae8a		15 7c 8a 16 24 7c 8b 1e		.text $15,$7C,$8A,$16,$24,$7C,$8B,$1E,$49,$7C,$A1,$4B,$7C,$EA,$00,$00,$70,$00,$AC,$0A,$C0,$74,$29,$B4,$0E,$BB,$07,$00,$CD,$10,$EB,$F2
>01ae92		49 7c a1 4b 7c ea 00 00 70 00 ac 0a c0 74 29 b4
>01aea2		0e bb 07 00 cd 10 eb f2
>01aeaa		3b 16 18 7c 73 19 f7 36		.text $3B,$16,$18,$7C,$73,$19,$F7,$36,$18,$7C,$FE,$C2,$88,$16,$4F,$7C,$33,$D2,$F7,$36,$1A,$7C,$88,$16,$25,$7C,$A3,$4D,$7C,$F8,$C3,$F9
>01aeb2		18 7c fe c2 88 16 4f 7c 33 d2 f7 36 1a 7c 88 16
>01aec2		25 7c a3 4d 7c f8 c3 f9
>01aeca		c3 b4 02 8b 16 4d 7c b1		.text $C3,$B4,$02,$8B,$16,$4D,$7C,$B1,$06,$D2,$E6,$0A,$36,$4F,$7C,$8B,$CA,$86,$E9,$8A,$16,$24,$7C,$8A,$36,$25,$7C,$CD,$13,$C3,$0D,$0A
>01aed2		06 d2 e6 0a 36 4f 7c 8b ca 86 e9 8a 16 24 7c 8a
>01aee2		36 25 7c cd 13 c3 0d 0a
>01aeea		4e 6f 6e 2d 53 79 73 74		.text $4E,$6F,$6E,$2D,$53,$79,$73,$74,$65,$6D,$20,$64,$69,$73,$6B,$20,$6F,$72,$20,$64,$69,$73,$6B,$20,$65,$72,$72,$6F,$72,$0D,$0A,$52
>01aef2		65 6d 20 64 69 73 6b 20 6f 72 20 64 69 73 6b 20
>01af02		65 72 72 6f 72 0d 0a 52
>01af0a		65 70 6c 61 63 65 20 61		.text $65,$70,$6C,$61,$63,$65,$20,$61,$6E,$64,$20,$70,$72,$65,$73,$73,$20,$61,$6E,$79,$20,$6B,$65,$79,$20,$77,$68,$65,$6E,$20,$72,$65
>01af12		6e 64 20 70 72 65 73 73 20 61 6e 79 20 6b 65 79
>01af22		20 77 68 65 6e 20 72 65
>01af2a		61 64 79 0d 0a 00 49 4f		.text $61,$64,$79,$0D,$0A,$00,$49,$4F,$20,$20,$20,$20,$20,$20,$53,$59,$53,$4D,$53,$44,$4F,$53,$20,$20,$20,$53,$59,$53,$00,$00,$55,$AA
>01af32		20 20 20 20 20 20 53 59 53 4d 53 44 4f 53 20 20
>01af42		20 53 59 53 00 00 55 aa
>01af4a		f0 ff ff 03 40 00 05 60		.text $F0,$FF,$FF,$03,$40,$00,$05,$60,$00,$07,$80,$00,$09,$A0,$00,$0B,$C0,$00,$0D,$E0,$00,$0F,$00,$01,$11,$20,$01,$13,$40,$01,$15,$60
>01af52		00 07 80 00 09 a0 00 0b c0 00 0d e0 00 0f 00 01
>01af62		11 20 01 13 40 01 15 60
>01af6a		01 17 80 01 19 a0 01 1b		.text $01,$17,$80,$01,$19,$A0,$01,$1B,$C0,$01,$1D,$E0,$01,$1F,$00,$02,$21,$20,$02,$23,$40,$02,$25,$60,$02,$27,$80,$02,$29,$A0,$02,$2B
>01af72		c0 01 1d e0 01 1f 00 02 21 20 02 23 40 02 25 60
>01af82		02 27 80 02 29 a0 02 2b
>01af8a		c0 02 2d e0 02 2f 00 03		.text $C0,$02,$2D,$E0,$02,$2F,$00,$03,$31,$20,$03,$33,$40,$03,$35,$60,$03,$37,$80,$03,$39,$A0,$03,$3B,$C0,$03,$3D,$E0,$03,$3F,$00,$04
>01af92		31 20 03 33 40 03 35 60 03 37 80 03 39 a0 03 3b
>01afa2		c0 03 3d e0 03 3f 00 04
>01afaa		41 20 04 43 40 04 45 60		.text $41,$20,$04,$43,$40,$04,$45,$60,$04,$47,$80,$04,$49,$A0,$04,$4B,$C0,$04,$4D,$E0,$04,$4F,$00,$05,$51,$F0,$FF,$53,$40,$05,$55,$60
>01afb2		04 47 80 04 49 a0 04 4b c0 04 4d e0 04 4f 00 05
>01afc2		51 f0 ff 53 40 05 55 60
>01afca		05 57 80 05 59 a0 05 5b		.text $05,$57,$80,$05,$59,$A0,$05,$5B,$C0,$05,$5D,$E0,$05,$5F,$00,$06,$61,$20,$06,$63,$40,$06,$65,$60,$06,$67,$80,$06,$69,$A0,$06,$6B
>01afd2		c0 05 5d e0 05 5f 00 06 61 20 06 63 40 06 65 60
>01afe2		06 67 80 06 69 a0 06 6b
>01afea		c0 06 6d e0 06 6f 00 07		.text $C0,$06,$6D,$E0,$06,$6F,$00,$07,$71,$20,$07,$73,$40,$07,$75,$60,$07,$77,$80,$07,$79,$A0,$07,$7B,$C0,$07,$7D,$E0,$07,$7F,$00,$08
>01aff2		71 20 07 73 40 07 75 60 07 77 80 07 79 a0 07 7b
>01b002		c0 07 7d e0 07 7f 00 08
>01b00a		81 20 08 83 40 08 85 60		.text $81,$20,$08,$83,$40,$08,$85,$60,$08,$87,$80,$08,$89,$A0,$08,$8B,$C0,$08,$8D,$E0,$08,$8F,$00,$09,$91,$20,$09,$93,$40,$09,$95,$60
>01b012		08 87 80 08 89 a0 08 8b c0 08 8d e0 08 8f 00 09
>01b022		91 20 09 93 40 09 95 60
>01b02a		09 97 80 09 99 a0 09 9b		.text $09,$97,$80,$09,$99,$A0,$09,$9B,$C0,$09,$FF,$EF,$09,$9F,$00,$0A,$A1,$20,$0A,$A3,$40,$0A,$A5,$60,$0A,$A7,$80,$0A,$A9,$A0,$0A,$AB
>01b032		c0 09 ff ef 09 9f 00 0a a1 20 0a a3 40 0a a5 60
>01b042		0a a7 80 0a a9 a0 0a ab
>01b04a		c0 0a ad e0 0a af 00 0b		.text $C0,$0A,$AD,$E0,$0A,$AF,$00,$0B,$B1,$20,$0B,$B3,$40,$0B,$B5,$60,$0B,$B7,$80,$0B,$B9,$A0,$0B,$BB,$C0,$0B,$BD,$E0,$0B,$BF,$00,$0C
>01b052		b1 20 0b b3 40 0b b5 60 0b b7 80 0b b9 a0 0b bb
>01b062		c0 0b bd e0 0b bf 00 0c
>01b06a		c1 20 0c c3 40 0c c5 60		.text $C1,$20,$0C,$C3,$40,$0C,$C5,$60,$0C,$C7,$80,$0C,$C9,$A0,$0C,$CB,$C0,$0C,$CD,$E0,$0C,$CF,$00,$0D,$D1,$20,$0D,$D3,$40,$0D,$D5,$60
>01b072		0c c7 80 0c c9 a0 0c cb c0 0c cd e0 0c cf 00 0d
>01b082		d1 20 0d d3 40 0d d5 60
>01b08a		0d d7 80 0d d9 a0 0d db		.text $0D,$D7,$80,$0D,$D9,$A0,$0D,$DB,$C0,$0D,$DD,$E0,$0D,$DF,$00,$0E,$E1,$20,$0E,$E3,$40,$0E,$E5,$60,$0E,$E7,$80,$0E,$E9,$A0,$0E,$EB
>01b092		c0 0d dd e0 0d df 00 0e e1 20 0e e3 40 0e e5 60
>01b0a2		0e e7 80 0e e9 a0 0e eb
>01b0aa		c0 0e ed e0 0e ef 00 0f		.text $C0,$0E,$ED,$E0,$0E,$EF,$00,$0F,$F1,$20,$0F,$F3,$40,$0F,$F5,$60,$0F,$F7,$80,$0F,$F9,$A0,$0F,$FB,$C0,$0F,$FD,$E0,$0F,$FF,$00,$10
>01b0b2		f1 20 0f f3 40 0f f5 60 0f f7 80 0f f9 a0 0f fb
>01b0c2		c0 0f fd e0 0f ff 00 10
>01b0ca		01 21 10 03 41 10 05 61		.text $01,$21,$10,$03,$41,$10,$05,$61,$10,$07,$F1,$FF,$FF,$AF,$10,$0B,$C1,$10,$0D,$E1,$10,$0F,$01,$11,$11,$21,$11,$13,$41,$11,$15,$61
>01b0d2		10 07 f1 ff ff af 10 0b c1 10 0d e1 10 0f 01 11
>01b0e2		11 21 11 13 41 11 15 61
>01b0ea		11 17 81 11 19 a1 11 1b		.text $11,$17,$81,$11,$19,$A1,$11,$1B,$C1,$11,$1D,$E1,$11,$1F,$01,$12,$21,$21,$12,$23,$41,$12,$25,$61,$12,$27,$81,$12,$29,$A1,$12,$2B
>01b0f2		c1 11 1d e1 11 1f 01 12 21 21 12 23 41 12 25 61
>01b102		12 27 81 12 29 a1 12 2b
>01b10a		c1 12 2d e1 12 2f 01 13		.text $C1,$12,$2D,$E1,$12,$2F,$01,$13,$31,$21,$13,$33,$41,$13,$35,$61,$13,$37,$81,$13,$39,$A1,$13,$3B,$C1,$13,$3D,$E1,$13,$3F,$01,$14
>01b112		31 21 13 33 41 13 35 61 13 37 81 13 39 a1 13 3b
>01b122		c1 13 3d e1 13 3f 01 14
>01b12a		41 21 14 ff 4f 14 45 61		.text $41,$21,$14,$FF,$4F,$14,$45,$61,$14,$47,$81,$14,$49,$A1,$14,$4B,$C1,$14,$4D,$E1,$14,$4F,$01,$15,$51,$21,$15,$53,$41,$15,$55,$61
>01b132		14 47 81 14 49 a1 14 4b c1 14 4d e1 14 4f 01 15
>01b142		51 21 15 53 41 15 55 61
>01b14a		15 57 81 15 59 a1 15 5b		.text $15,$57,$81,$15,$59,$A1,$15,$5B,$C1,$15,$5D,$E1,$15,$5F,$01,$16,$61,$21,$16,$63,$41,$16,$65,$61,$16,$67,$81,$16,$69,$A1,$16,$6B
>01b152		c1 15 5d e1 15 5f 01 16 61 21 16 63 41 16 65 61
>01b162		16 67 81 16 69 a1 16 6b
>01b16a		c1 16 6d e1 16 6f 01 17		.text $C1,$16,$6D,$E1,$16,$6F,$01,$17,$71,$21,$17,$73,$41,$17,$75,$61,$17,$77,$81,$17,$79,$A1,$17,$7B,$C1,$17,$7D,$E1,$17,$7F,$01,$18
>01b172		71 21 17 73 41 17 75 61 17 77 81 17 79 a1 17 7b
>01b182		c1 17 7d e1 17 7f 01 18
>01b18a		81 21 18 83 41 18 85 61		.text $81,$21,$18,$83,$41,$18,$85,$61,$18,$87,$81,$18,$89,$A1,$18,$8B,$C1,$18,$8D,$E1,$18,$8F,$01,$19,$91,$21,$19,$93,$41,$19,$95,$61
>01b192		18 87 81 18 89 a1 18 8b c1 18 8d e1 18 8f 01 19
>01b1a2		91 21 19 93 41 19 95 61
>01b1aa		19 97 81 19 99 a1 19 9b		.text $19,$97,$81,$19,$99,$A1,$19,$9B,$C1,$19,$9D,$E1,$19,$9F,$01,$1A,$A1,$21,$1A,$A3,$41,$1A,$A5,$61,$1A,$A7,$81,$1A,$A9,$A1,$1A,$AB
>01b1b2		c1 19 9d e1 19 9f 01 1a a1 21 1a a3 41 1a a5 61
>01b1c2		1a a7 81 1a a9 a1 1a ab
>01b1ca		c1 1a ad e1 1a af 01 1b		.text $C1,$1A,$AD,$E1,$1A,$AF,$01,$1B,$B1,$21,$1B,$B3,$41,$1B,$B5,$61,$1B,$B7,$81,$1B,$B9,$A1,$1B,$BB,$C1,$1B,$BD,$E1,$1B,$BF,$01,$1C
>01b1d2		b1 21 1b b3 41 1b b5 61 1b b7 81 1b b9 a1 1b bb
>01b1e2		c1 1b bd e1 1b bf 01 1c
>01b1ea		c1 21 1c c3 41 1c ff 6f		.text $C1,$21,$1C,$C3,$41,$1C,$FF,$6F,$1C,$C7,$81,$1C,$FF,$FF,$FF,$CB,$C1,$1C,$CD,$E1,$1C,$CF,$01,$1D,$D1,$21,$1D,$D3,$41,$1D,$D5,$61
>01b1f2		1c c7 81 1c ff ff ff cb c1 1c cd e1 1c cf 01 1d
>01b202		d1 21 1d d3 41 1d d5 61
>01b20a		1d d7 81 1d d9 a1 1d db		.text $1D,$D7,$81,$1D,$D9,$A1,$1D,$DB,$C1,$1D,$DD,$E1,$1D,$DF,$01,$1E,$E1,$21,$1E,$E3,$41,$1E,$E5,$61,$1E,$E7,$81,$1E,$E9,$A1,$1E,$EB
>01b212		c1 1d dd e1 1d df 01 1e e1 21 1e e3 41 1e e5 61
>01b222		1e e7 81 1e e9 a1 1e eb
>01b22a		c1 1e ed e1 1e ef 01 1f		.text $C1,$1E,$ED,$E1,$1E,$EF,$01,$1F,$F1,$21,$1F,$F3,$41,$1F,$F5,$61,$1F,$FF,$8F,$1F,$F9,$A1,$1F,$FB,$C1,$1F,$FD,$E1,$1F,$FF,$01,$20
>01b232		f1 21 1f f3 41 1f f5 61 1f ff 8f 1f f9 a1 1f fb
>01b242		c1 1f fd e1 1f ff 01 20
>01b24a		01 22 20 03 42 20 05 62		.text $01,$22,$20,$03,$42,$20,$05,$62,$20,$07,$82,$20,$09,$A2,$20,$0B,$C2,$20,$0D,$E2,$20,$0F,$02,$21,$11,$22,$21,$13,$42,$21,$15,$F2
>01b252		20 07 82 20 09 a2 20 0b c2 20 0d e2 20 0f 02 21
>01b262		11 22 21 13 42 21 15 f2
>01b26a		ff 17 82 21 19 a2 21 1b		.text $FF,$17,$82,$21,$19,$A2,$21,$1B,$C2,$21,$1D,$E2,$21,$1F,$02,$22,$21,$22,$22,$23,$42,$22,$25,$62,$22,$27,$82,$22,$FF,$AF,$22,$2B
>01b272		c2 21 1d e2 21 1f 02 22 21 22 22 23 42 22 25 62
>01b282		22 27 82 22 ff af 22 2b
>01b28a		c2 22 2d e2 22 2f 02 23		.text $C2,$22,$2D,$E2,$22,$2F,$02,$23,$31,$22,$23,$33,$42,$23,$35,$62,$23,$37,$82,$23,$39,$A2,$23,$3B,$C2,$23,$3D,$E2,$23,$3F,$02,$24
>01b292		31 22 23 33 42 23 35 62 23 37 82 23 39 a2 23 3b
>01b2a2		c2 23 3d e2 23 3f 02 24
>01b2aa		41 22 24 43 42 24 45 62		.text $41,$22,$24,$43,$42,$24,$45,$62,$24,$47,$82,$24,$49,$A2,$24,$4B,$C2,$24,$FF,$EF,$24,$4F,$02,$25,$51,$22,$25,$53,$42,$25,$55,$62
>01b2b2		24 47 82 24 49 a2 24 4b c2 24 ff ef 24 4f 02 25
>01b2c2		51 22 25 53 42 25 55 62
>01b2ca		25 57 82 25 59 a2 25 5b		.text $25,$57,$82,$25,$59,$A2,$25,$5B,$C2,$25,$5D,$E2,$25,$5F,$02,$26,$61,$22,$26,$63,$42,$26,$65,$62,$26,$67,$82,$26,$69,$A2,$26,$6B
>01b2d2		c2 25 5d e2 25 5f 02 26 61 22 26 63 42 26 65 62
>01b2e2		26 67 82 26 69 a2 26 6b
>01b2ea		c2 26 6d e2 26 6f 02 27		.text $C2,$26,$6D,$E2,$26,$6F,$02,$27,$71,$22,$27,$FF,$4F,$27,$75,$62,$27,$77,$82,$27,$79,$A2,$27,$7B,$C2,$27,$7D,$E2,$27,$7F,$02,$28
>01b2f2		71 22 27 ff 4f 27 75 62 27 77 82 27 79 a2 27 7b
>01b302		c2 27 7d e2 27 7f 02 28
>01b30a		81 22 28 83 42 28 85 62		.text $81,$22,$28,$83,$42,$28,$85,$62,$28,$87,$82,$28,$89,$A2,$28,$8B,$C2,$28,$8D,$E2,$28,$8F,$02,$29,$91,$F2,$FF,$93,$42,$29,$95,$62
>01b312		28 87 82 28 89 a2 28 8b c2 28 8d e2 28 8f 02 29
>01b322		91 f2 ff 93 42 29 95 62
>01b32a		29 97 82 29 99 a2 29 9b		.text $29,$97,$82,$29,$99,$A2,$29,$9B,$C2,$29,$9D,$E2,$29,$9F,$02,$2A,$A1,$22,$2A,$A3,$42,$2A,$A5,$62,$2A,$A7,$F2,$FF,$A9,$A2,$2A,$AB
>01b332		c2 29 9d e2 29 9f 02 2a a1 22 2a a3 42 2a a5 62
>01b342		2a a7 f2 ff a9 a2 2a ab
>01b34a		c2 2a ad e2 2a af 02 2b		.text $C2,$2A,$AD,$E2,$2A,$AF,$02,$2B,$B1,$22,$2B,$B3,$42,$2B,$B5,$62,$2B,$B7,$82,$2B,$B9,$A2,$2B,$BB,$C2,$2B,$BD,$E2,$2B,$BF,$02,$2C
>01b352		b1 22 2b b3 42 2b b5 62 2b b7 82 2b b9 a2 2b bb
>01b362		c2 2b bd e2 2b bf 02 2c
>01b36a		c1 22 2c c3 42 2c c5 62		.text $C1,$22,$2C,$C3,$42,$2C,$C5,$62,$2C,$C7,$82,$2C,$C9,$A2,$2C,$CB,$C2,$2C,$CD,$E2,$2C,$CF,$02,$2D,$D1,$22,$2D,$D3,$42,$2D,$D5,$62
>01b372		2c c7 82 2c c9 a2 2c cb c2 2c cd e2 2c cf 02 2d
>01b382		d1 22 2d d3 42 2d d5 62
>01b38a		2d d7 82 2d d9 a2 2d db		.text $2D,$D7,$82,$2D,$D9,$A2,$2D,$DB,$C2,$2D,$DD,$E2,$2D,$DF,$02,$2E,$E1,$22,$2E,$E3,$42,$2E,$E5,$62,$2E,$E7,$82,$2E,$E9,$A2,$2E,$EB
>01b392		c2 2d dd e2 2d df 02 2e e1 22 2e e3 42 2e e5 62
>01b3a2		2e e7 82 2e e9 a2 2e eb
>01b3aa		c2 2e ed e2 2e ef 02 2f		.text $C2,$2E,$ED,$E2,$2E,$EF,$02,$2F,$F1,$22,$2F,$F3,$42,$2F,$F5,$62,$2F,$F7,$82,$2F,$F9,$A2,$2F,$FB,$C2,$2F,$FD,$E2,$2F,$FF,$02,$30
>01b3b2		f1 22 2f f3 42 2f f5 62 2f f7 82 2f f9 a2 2f fb
>01b3c2		c2 2f fd e2 2f ff 02 30
>01b3ca		01 23 30 03 43 30 05 63		.text $01,$23,$30,$03,$43,$30,$05,$63,$30,$07,$83,$30,$09,$A3,$30,$0B,$C3,$30,$0D,$E3,$30,$0F,$03,$31,$11,$23,$31,$13,$43,$31,$15,$63
>01b3d2		30 07 83 30 09 a3 30 0b c3 30 0d e3 30 0f 03 31
>01b3e2		11 23 31 13 43 31 15 63
>01b3ea		31 17 83 31 19 a3 31 1b		.text $31,$17,$83,$31,$19,$A3,$31,$1B,$C3,$31,$1D,$E3,$31,$1F,$03,$32,$21,$23,$32,$23,$43,$32,$25,$63,$32,$27,$83,$32,$29,$A3,$32,$2B
>01b3f2		c3 31 1d e3 31 1f 03 32 21 23 32 23 43 32 25 63
>01b402		32 27 83 32 29 a3 32 2b
>01b40a		c3 32 2d e3 32 2f 03 33		.text $C3,$32,$2D,$E3,$32,$2F,$03,$33,$31,$23,$33,$33,$43,$33,$35,$63,$33,$37,$83,$33,$FF,$AF,$33,$3B,$C3,$33,$3D,$E3,$33,$3F,$03,$34
>01b412		31 23 33 33 43 33 35 63 33 37 83 33 ff af 33 3b
>01b422		c3 33 3d e3 33 3f 03 34
>01b42a		41 23 34 43 43 34 45 63		.text $41,$23,$34,$43,$43,$34,$45,$63,$34,$47,$83,$34,$49,$A3,$34,$4B,$C3,$34,$4D,$E3,$34,$4F,$03,$35,$FF,$2F,$35,$53,$43,$35,$55,$63
>01b432		34 47 83 34 49 a3 34 4b c3 34 4d e3 34 4f 03 35
>01b442		ff 2f 35 53 43 35 55 63
>01b44a		35 57 83 35 59 a3 35 5b		.text $35,$57,$83,$35,$59,$A3,$35,$5B,$C3,$35,$5D,$E3,$35,$5F,$03,$36,$61,$23,$36,$63,$43,$36,$65,$63,$36,$67,$83,$36,$69,$A3,$36,$6B
>01b452		c3 35 5d e3 35 5f 03 36 61 23 36 63 43 36 65 63
>01b462		36 67 83 36 69 a3 36 6b
>01b46a		c3 36 6d e3 36 6f f3 ff		.text $C3,$36,$6D,$E3,$36,$6F,$F3,$FF,$71,$23,$37,$73,$43,$37,$75,$63,$37,$77,$83,$37,$79,$A3,$37,$7B,$C3,$37,$7D,$E3,$37,$7F,$03,$38
>01b472		71 23 37 73 43 37 75 63 37 77 83 37 79 a3 37 7b
>01b482		c3 37 7d e3 37 7f 03 38
>01b48a		81 23 38 83 43 38 85 63		.text $81,$23,$38,$83,$43,$38,$85,$63,$38,$87,$83,$38,$89,$A3,$38,$8B,$C3,$38,$8D,$E3,$38,$8F,$03,$39,$91,$23,$39,$93,$43,$39,$95,$63
>01b492		38 87 83 38 89 a3 38 8b c3 38 8d e3 38 8f 03 39
>01b4a2		91 23 39 93 43 39 95 63
>01b4aa		39 97 83 39 99 a3 39 9b		.text $39,$97,$83,$39,$99,$A3,$39,$9B,$C3,$39,$9D,$E3,$39,$9F,$03,$3A,$A1,$23,$3A,$A3,$43,$3A,$A5,$63,$3A,$A7,$83,$3A,$A9,$A3,$3A,$AB
>01b4b2		c3 39 9d e3 39 9f 03 3a a1 23 3a a3 43 3a a5 63
>01b4c2		3a a7 83 3a a9 a3 3a ab
>01b4ca		c3 3a ad e3 3a af 03 3b		.text $C3,$3A,$AD,$E3,$3A,$AF,$03,$3B,$B1,$23,$3B,$B3,$43,$3B,$B5,$63,$3B,$B7,$83,$3B,$B9,$A3,$3B,$BB,$C3,$3B,$BD,$E3,$3B,$BF,$03,$3C
>01b4d2		b1 23 3b b3 43 3b b5 63 3b b7 83 3b b9 a3 3b bb
>01b4e2		c3 3b bd e3 3b bf 03 3c
>01b4ea		c1 23 3c c3 43 3c c5 63		.text $C1,$23,$3C,$C3,$43,$3C,$C5,$63,$3C,$C7,$83,$3C,$C9,$A3,$3C,$CB,$C3,$3C,$CD,$E3,$3C,$CF,$03,$3D,$D1,$23,$3D,$D3,$43,$3D,$D5,$63
>01b4f2		3c c7 83 3c c9 a3 3c cb c3 3c cd e3 3c cf 03 3d
>01b502		d1 23 3d d3 43 3d d5 63
>01b50a		3d d7 83 3d d9 a3 3d db		.text $3D,$D7,$83,$3D,$D9,$A3,$3D,$DB,$C3,$3D,$DD,$E3,$3D,$DF,$03,$3E,$E1,$23,$3E,$E3,$43,$3E,$E5,$63,$3E,$E7,$83,$3E,$E9,$A3,$3E,$EB
>01b512		c3 3d dd e3 3d df 03 3e e1 23 3e e3 43 3e e5 63
>01b522		3e e7 83 3e e9 a3 3e eb
>01b52a		c3 3e ed e3 3e ef 03 3f		.text $C3,$3E,$ED,$E3,$3E,$EF,$03,$3F,$F1,$23,$3F,$F3,$43,$3F,$F5,$63,$3F,$F7,$83,$3F,$F9,$A3,$3F,$FB,$C3,$3F,$FD,$E3,$3F,$FF,$03,$40
>01b532		f1 23 3f f3 43 3f f5 63 3f f7 83 3f f9 a3 3f fb
>01b542		c3 3f fd e3 3f ff 03 40
>01b54a		01 24 40 03 44 40 05 64		.text $01,$24,$40,$03,$44,$40,$05,$64,$40,$07,$84,$40,$09,$A4,$40,$FF,$CF,$40,$0D,$E4,$40,$0F,$04,$41,$11,$24,$41,$13,$44,$41,$15,$64
>01b552		40 07 84 40 09 a4 40 ff cf 40 0d e4 40 0f 04 41
>01b562		11 24 41 13 44 41 15 64
>01b56a		41 17 84 41 19 a4 41 1b		.text $41,$17,$84,$41,$19,$A4,$41,$1B,$C4,$41,$1D,$E4,$41,$1F,$04,$42,$21,$24,$42,$23,$44,$42,$25,$64,$42,$27,$84,$42,$29,$A4,$42,$FF
>01b572		c4 41 1d e4 41 1f 04 42 21 24 42 23 44 42 25 64
>01b582		42 27 84 42 29 a4 42 ff
>01b58a		cf 42 2d e4 42 2f 04 43		.text $CF,$42,$2D,$E4,$42,$2F,$04,$43,$31,$24,$43,$33,$44,$43,$35,$64,$43,$37,$84,$43,$39,$A4,$43,$3B,$C4,$43,$3D,$E4,$43,$3F,$04,$44
>01b592		31 24 43 33 44 43 35 64 43 37 84 43 39 a4 43 3b
>01b5a2		c4 43 3d e4 43 3f 04 44
>01b5aa		41 24 44 43 44 44 45 64		.text $41,$24,$44,$43,$44,$44,$45,$64,$44,$47,$84,$44,$49,$A4,$44,$4B,$C4,$44,$4D,$E4,$44,$4F,$04,$45,$51,$24,$45,$53,$44,$45,$55,$64
>01b5b2		44 47 84 44 49 a4 44 4b c4 44 4d e4 44 4f 04 45
>01b5c2		51 24 45 53 44 45 55 64
>01b5ca		45 57 84 45 59 a4 45 5b		.text $45,$57,$84,$45,$59,$A4,$45,$5B,$C4,$45,$5D,$E4,$45,$5F,$04,$46,$61,$24,$46,$63,$44,$46,$FF,$6F,$46,$67,$84,$46,$69,$A4,$46,$6B
>01b5d2		c4 45 5d e4 45 5f 04 46 61 24 46 63 44 46 ff 6f
>01b5e2		46 67 84 46 69 a4 46 6b
>01b5ea		c4 46 6d e4 46 6f 04 47		.text $C4,$46,$6D,$E4,$46,$6F,$04,$47,$71,$24,$47,$73,$44,$47,$75,$64,$47,$77,$84,$47,$79,$A4,$47,$7B,$C4,$47,$7D,$E4,$47,$7F,$04,$48
>01b5f2		71 24 47 73 44 47 75 64 47 77 84 47 79 a4 47 7b
>01b602		c4 47 7d e4 47 7f 04 48
>01b60a		81 24 48 83 44 48 85 64		.text $81,$24,$48,$83,$44,$48,$85,$64,$48,$87,$84,$48,$89,$A4,$48,$8B,$C4,$48,$8D,$E4,$48,$8F,$04,$49,$91,$24,$49,$93,$44,$49,$95,$64
>01b612		48 87 84 48 89 a4 48 8b c4 48 8d e4 48 8f 04 49
>01b622		91 24 49 93 44 49 95 64
>01b62a		49 ff 8f 49 99 a4 49 9b		.text $49,$FF,$8F,$49,$99,$A4,$49,$9B,$C4,$49,$9D,$E4,$49,$9F,$04,$4A,$A1,$24,$4A,$A3,$44,$4A,$FF,$6F,$4A,$A7,$84,$4A,$A9,$A4,$4A,$AB
>01b632		c4 49 9d e4 49 9f 04 4a a1 24 4a a3 44 4a ff 6f
>01b642		4a a7 84 4a a9 a4 4a ab
>01b64a		c4 4a ad e4 4a af 04 4b		.text $C4,$4A,$AD,$E4,$4A,$AF,$04,$4B,$B1,$24,$4B,$B3,$44,$4B,$B5,$64,$4B,$B7,$84,$4B,$B9,$A4,$4B,$BB,$C4,$4B,$BD,$E4,$4B,$BF,$04,$4C
>01b652		b1 24 4b b3 44 4b b5 64 4b b7 84 4b b9 a4 4b bb
>01b662		c4 4b bd e4 4b bf 04 4c
>01b66a		c1 24 4c c3 44 4c c5 64		.text $C1,$24,$4C,$C3,$44,$4C,$C5,$64,$4C,$C7,$84,$4C,$C9,$A4,$4C,$CB,$C4,$4C,$CD,$E4,$4C,$CF,$04,$4D,$D1,$24,$4D,$D3,$44,$4D,$D5,$64
>01b672		4c c7 84 4c c9 a4 4c cb c4 4c cd e4 4c cf 04 4d
>01b682		d1 24 4d d3 44 4d d5 64
>01b68a		4d d7 84 4d d9 a4 4d db		.text $4D,$D7,$84,$4D,$D9,$A4,$4D,$DB,$C4,$4D,$DD,$E4,$4D,$DF,$04,$4E,$E1,$24,$4E,$E3,$44,$4E,$E5,$64,$4E,$E7,$84,$4E,$E9,$A4,$4E,$EB
>01b692		c4 4d dd e4 4d df 04 4e e1 24 4e e3 44 4e e5 64
>01b6a2		4e e7 84 4e e9 a4 4e eb
>01b6aa		c4 4e ed e4 4e ef 04 4f		.text $C4,$4E,$ED,$E4,$4E,$EF,$04,$4F,$F1,$24,$4F,$F3,$44,$4F,$F5,$64,$4F,$F7,$84,$4F,$F9,$A4,$4F,$FB,$C4,$4F,$FD,$E4,$4F,$FF,$04,$50
>01b6b2		f1 24 4f f3 44 4f f5 64 4f f7 84 4f f9 a4 4f fb
>01b6c2		c4 4f fd e4 4f ff 04 50
>01b6ca		01 25 50 03 45 50 05 65		.text $01,$25,$50,$03,$45,$50,$05,$65,$50,$07,$85,$50,$09,$A5,$50,$0B,$C5,$50,$0D,$E5,$50,$0F,$05,$51,$11,$25,$51,$13,$45,$51,$15,$65
>01b6d2		50 07 85 50 09 a5 50 0b c5 50 0d e5 50 0f 05 51
>01b6e2		11 25 51 13 45 51 15 65
>01b6ea		51 17 85 51 19 a5 51 1b		.text $51,$17,$85,$51,$19,$A5,$51,$1B,$C5,$51,$1D,$E5,$51,$1F,$05,$52,$21,$25,$52,$23,$45,$52,$25,$65,$52,$27,$85,$52,$29,$A5,$52,$2B
>01b6f2		c5 51 1d e5 51 1f 05 52 21 25 52 23 45 52 25 65
>01b702		52 27 85 52 29 a5 52 2b
>01b70a		c5 52 2d e5 52 2f 05 53		.text $C5,$52,$2D,$E5,$52,$2F,$05,$53,$31,$25,$53,$33,$45,$53,$35,$65,$53,$37,$85,$53,$39,$A5,$53,$3B,$C5,$53,$3D,$E5,$53,$3F,$05,$54
>01b712		31 25 53 33 45 53 35 65 53 37 85 53 39 a5 53 3b
>01b722		c5 53 3d e5 53 3f 05 54
>01b72a		41 25 54 43 45 54 45 65		.text $41,$25,$54,$43,$45,$54,$45,$65,$54,$47,$85,$54,$49,$A5,$54,$4B,$C5,$54,$4D,$E5,$54,$4F,$05,$55,$51,$25,$55,$53,$45,$55,$55,$65
>01b732		54 47 85 54 49 a5 54 4b c5 54 4d e5 54 4f 05 55
>01b742		51 25 55 53 45 55 55 65
>01b74a		55 57 85 55 59 a5 55 5b		.text $55,$57,$85,$55,$59,$A5,$55,$5B,$C5,$55,$5D,$E5,$55,$5F,$05,$56,$61,$25,$56,$63,$45,$56,$65,$65,$56,$67,$85,$56,$69,$A5,$56,$6B
>01b752		c5 55 5d e5 55 5f 05 56 61 25 56 63 45 56 65 65
>01b762		56 67 85 56 69 a5 56 6b
>01b76a		c5 56 6d e5 56 6f 05 57		.text $C5,$56,$6D,$E5,$56,$6F,$05,$57,$71,$25,$57,$73,$45,$57,$75,$65,$57,$77,$85,$57,$79,$A5,$57,$7B,$C5,$57,$7D,$E5,$57,$7F,$05,$58
>01b772		71 25 57 73 45 57 75 65 57 77 85 57 79 a5 57 7b
>01b782		c5 57 7d e5 57 7f 05 58
>01b78a		81 25 58 83 45 58 85 65		.text $81,$25,$58,$83,$45,$58,$85,$65,$58,$87,$85,$58,$89,$A5,$58,$8B,$C5,$58,$8D,$E5,$58,$8F,$05,$59,$91,$25,$59,$93,$45,$59,$95,$65
>01b792		58 87 85 58 89 a5 58 8b c5 58 8d e5 58 8f 05 59
>01b7a2		91 25 59 93 45 59 95 65
>01b7aa		59 97 85 59 99 a5 59 9b		.text $59,$97,$85,$59,$99,$A5,$59,$9B,$C5,$59,$9D,$E5,$59,$9F,$05,$5A,$A1,$25,$5A,$A3,$45,$5A,$A5,$65,$5A,$A7,$85,$5A,$A9,$A5,$5A,$AB
>01b7b2		c5 59 9d e5 59 9f 05 5a a1 25 5a a3 45 5a a5 65
>01b7c2		5a a7 85 5a a9 a5 5a ab
>01b7ca		c5 5a ad e5 5a af 05 5b		.text $C5,$5A,$AD,$E5,$5A,$AF,$05,$5B,$B1,$25,$5B,$B3,$45,$5B,$B5,$65,$5B,$B7,$85,$5B,$B9,$A5,$5B,$BB,$C5,$5B,$BD,$E5,$5B,$BF,$05,$5C
>01b7d2		b1 25 5b b3 45 5b b5 65 5b b7 85 5b b9 a5 5b bb
>01b7e2		c5 5b bd e5 5b bf 05 5c
>01b7ea		c1 25 5c c3 45 5c c5 65		.text $C1,$25,$5C,$C3,$45,$5C,$C5,$65,$5C,$C7,$85,$5C,$C9,$A5,$5C,$CB,$C5,$5C,$CD,$E5,$5C,$CF,$05,$5D,$D1,$25,$5D,$D3,$45,$5D,$D5,$65
>01b7f2		5c c7 85 5c c9 a5 5c cb c5 5c cd e5 5c cf 05 5d
>01b802		d1 25 5d d3 45 5d d5 65
>01b80a		5d d7 85 5d d9 a5 5d db		.text $5D,$D7,$85,$5D,$D9,$A5,$5D,$DB,$C5,$5D,$DD,$E5,$5D,$DF,$05,$5E,$E1,$25,$5E,$E3,$45,$5E,$E5,$65,$5E,$E7,$85,$5E,$E9,$A5,$5E,$EB
>01b812		c5 5d dd e5 5d df 05 5e e1 25 5e e3 45 5e e5 65
>01b822		5e e7 85 5e e9 a5 5e eb
>01b82a		c5 5e ed e5 5e ef 05 5f		.text $C5,$5E,$ED,$E5,$5E,$EF,$05,$5F,$F1,$25,$5F,$F3,$45,$5F,$F5,$65,$5F,$F7,$85,$5F,$F9,$A5,$5F,$FB,$C5,$5F,$FD,$E5,$5F,$FF,$05,$60
>01b832		f1 25 5f f3 45 5f f5 65 5f f7 85 5f f9 a5 5f fb
>01b842		c5 5f fd e5 5f ff 05 60
>01b84a		01 26 60 03 46 60 05 66		.text $01,$26,$60,$03,$46,$60,$05,$66,$60,$07,$86,$60,$09,$A6,$60,$0B,$C6,$60,$0D,$E6,$60,$0F,$06,$61,$11,$26,$61,$13,$46,$61,$15,$66
>01b852		60 07 86 60 09 a6 60 0b c6 60 0d e6 60 0f 06 61
>01b862		11 26 61 13 46 61 15 66
>01b86a		61 17 86 61 19 a6 61 1b		.text $61,$17,$86,$61,$19,$A6,$61,$1B,$C6,$61,$1D,$E6,$61,$1F,$06,$62,$FF,$2F,$62,$23,$46,$62,$25,$66,$62,$27,$86,$62,$29,$A6,$62,$2B
>01b872		c6 61 1d e6 61 1f 06 62 ff 2f 62 23 46 62 25 66
>01b882		62 27 86 62 29 a6 62 2b
>01b88a		c6 62 2d e6 62 2f 06 63		.text $C6,$62,$2D,$E6,$62,$2F,$06,$63,$31,$26,$63,$33,$46,$63,$35,$66,$63,$37,$86,$63,$39,$A6,$63,$3B,$C6,$63,$3D,$E6,$63,$3F,$06,$64
>01b892		31 26 63 33 46 63 35 66 63 37 86 63 39 a6 63 3b
>01b8a2		c6 63 3d e6 63 3f 06 64
>01b8aa		41 26 64 43 46 64 45 66		.text $41,$26,$64,$43,$46,$64,$45,$66,$64,$47,$86,$64,$49,$A6,$64,$4B,$C6,$64,$4D,$E6,$64,$4F,$06,$65,$51,$26,$65,$53,$46,$65,$55,$66
>01b8b2		64 47 86 64 49 a6 64 4b c6 64 4d e6 64 4f 06 65
>01b8c2		51 26 65 53 46 65 55 66
>01b8ca		65 57 86 65 59 a6 65 5b		.text $65,$57,$86,$65,$59,$A6,$65,$5B,$C6,$65,$5D,$E6,$65,$5F,$06,$66,$61,$26,$66,$63,$46,$66,$65,$66,$66,$67,$86,$66,$69,$A6,$66,$6B
>01b8d2		c6 65 5d e6 65 5f 06 66 61 26 66 63 46 66 65 66
>01b8e2		66 67 86 66 69 a6 66 6b
>01b8ea		c6 66 6d e6 66 6f 06 67		.text $C6,$66,$6D,$E6,$66,$6F,$06,$67,$71,$26,$67,$73,$46,$67,$75,$66,$67,$77,$86,$67,$79,$A6,$67,$7B,$C6,$67,$7D,$E6,$67,$7F,$06,$68
>01b8f2		71 26 67 73 46 67 75 66 67 77 86 67 79 a6 67 7b
>01b902		c6 67 7d e6 67 7f 06 68
>01b90a		81 26 68 83 46 68 85 66		.text $81,$26,$68,$83,$46,$68,$85,$66,$68,$87,$86,$68,$89,$A6,$68,$8B,$C6,$68,$8D,$E6,$68,$8F,$06,$69,$91,$26,$69,$93,$46,$69,$95,$66
>01b912		68 87 86 68 89 a6 68 8b c6 68 8d e6 68 8f 06 69
>01b922		91 26 69 93 46 69 95 66
>01b92a		69 97 86 69 99 a6 69 9b		.text $69,$97,$86,$69,$99,$A6,$69,$9B,$C6,$69,$9D,$E6,$69,$9F,$06,$6A,$A1,$26,$6A,$A3,$46,$6A,$A5,$66,$6A,$A7,$86,$6A,$A9,$A6,$6A,$AB
>01b932		c6 69 9d e6 69 9f 06 6a a1 26 6a a3 46 6a a5 66
>01b942		6a a7 86 6a a9 a6 6a ab
>01b94a		c6 6a ad e6 6a af 06 6b		.text $C6,$6A,$AD,$E6,$6A,$AF,$06,$6B,$B1,$26,$6B,$B3,$46,$6B,$B5,$66,$6B,$B7,$86,$6B,$B9,$A6,$6B,$BB,$C6,$6B,$BD,$E6,$6B,$BF,$06,$6C
>01b952		b1 26 6b b3 46 6b b5 66 6b b7 86 6b b9 a6 6b bb
>01b962		c6 6b bd e6 6b bf 06 6c
>01b96a		c1 26 6c c3 46 6c c5 66		.text $C1,$26,$6C,$C3,$46,$6C,$C5,$66,$6C,$C7,$86,$6C,$C9,$A6,$6C,$CB,$C6,$6C,$CD,$E6,$6C,$CF,$06,$6D,$D1,$26,$6D,$D3,$46,$6D,$D5,$66
>01b972		6c c7 86 6c c9 a6 6c cb c6 6c cd e6 6c cf 06 6d
>01b982		d1 26 6d d3 46 6d d5 66
>01b98a		6d d7 86 6d d9 a6 6d db		.text $6D,$D7,$86,$6D,$D9,$A6,$6D,$DB,$C6,$6D,$DD,$E6,$6D,$DF,$06,$6E,$E1,$26,$6E,$E3,$46,$6E,$E5,$66,$6E,$E7,$86,$6E,$E9,$A6,$6E,$EB
>01b992		c6 6d dd e6 6d df 06 6e e1 26 6e e3 46 6e e5 66
>01b9a2		6e e7 86 6e e9 a6 6e eb
>01b9aa		c6 6e ed e6 6e ef 06 6f		.text $C6,$6E,$ED,$E6,$6E,$EF,$06,$6F,$F1,$26,$6F,$F3,$46,$6F,$F5,$66,$6F,$F7,$86,$6F,$F9,$A6,$6F,$FB,$C6,$6F,$FD,$E6,$6F,$FF,$06,$70
>01b9b2		f1 26 6f f3 46 6f f5 66 6f f7 86 6f f9 a6 6f fb
>01b9c2		c6 6f fd e6 6f ff 06 70
>01b9ca		01 27 70 03 47 70 05 67		.text $01,$27,$70,$03,$47,$70,$05,$67,$70,$07,$87,$70,$09,$A7,$70,$0B,$C7,$70,$0D,$E7,$70,$0F,$07,$71,$11,$27,$71,$13,$F7,$FF,$15,$67
>01b9d2		70 07 87 70 09 a7 70 0b c7 70 0d e7 70 0f 07 71
>01b9e2		11 27 71 13 f7 ff 15 67
>01b9ea		71 17 87 71 19 a7 71 1b		.text $71,$17,$87,$71,$19,$A7,$71,$1B,$C7,$71,$1D,$E7,$71,$1F,$07,$72,$21,$27,$72,$23,$47,$72,$25,$67,$72,$27,$87,$72,$29,$A7,$72,$2B
>01b9f2		c7 71 1d e7 71 1f 07 72 21 27 72 23 47 72 25 67
>01ba02		72 27 87 72 29 a7 72 2b
>01ba0a		c7 72 2d e7 72 2f 07 73		.text $C7,$72,$2D,$E7,$72,$2F,$07,$73,$31,$27,$73,$33,$47,$73,$35,$67,$73,$37,$87,$73,$39,$A7,$73,$3B,$C7,$73,$3D,$E7,$73,$3F,$07,$74
>01ba12		31 27 73 33 47 73 35 67 73 37 87 73 39 a7 73 3b
>01ba22		c7 73 3d e7 73 3f 07 74
>01ba2a		41 27 74 43 47 74 45 67		.text $41,$27,$74,$43,$47,$74,$45,$67,$74,$47,$87,$74,$49,$A7,$74,$4B,$C7,$74,$4D,$E7,$74,$4F,$07,$75,$51,$27,$75,$53,$47,$75,$55,$67
>01ba32		74 47 87 74 49 a7 74 4b c7 74 4d e7 74 4f 07 75
>01ba42		51 27 75 53 47 75 55 67
>01ba4a		75 57 87 75 59 a7 75 5b		.text $75,$57,$87,$75,$59,$A7,$75,$5B,$C7,$75,$5D,$E7,$75,$5F,$07,$76,$61,$27,$76,$63,$47,$76,$65,$67,$76,$67,$87,$76,$69,$A7,$76,$6B
>01ba52		c7 75 5d e7 75 5f 07 76 61 27 76 63 47 76 65 67
>01ba62		76 67 87 76 69 a7 76 6b
>01ba6a		c7 76 6d e7 76 6f 07 77		.text $C7,$76,$6D,$E7,$76,$6F,$07,$77,$71,$27,$77,$73,$47,$77,$75,$67,$77,$77,$87,$77,$79,$A7,$77,$7B,$C7,$77,$7D,$E7,$77,$7F,$07,$78
>01ba72		71 27 77 73 47 77 75 67 77 77 87 77 79 a7 77 7b
>01ba82		c7 77 7d e7 77 7f 07 78
>01ba8a		81 27 78 83 47 78 85 67		.text $81,$27,$78,$83,$47,$78,$85,$67,$78,$87,$87,$78,$89,$A7,$78,$8B,$C7,$78,$8D,$E7,$78,$8F,$07,$79,$91,$27,$79,$93,$47,$79,$95,$67
>01ba92		78 87 87 78 89 a7 78 8b c7 78 8d e7 78 8f 07 79
>01baa2		91 27 79 93 47 79 95 67
>01baaa		79 97 87 79 99 a7 79 9b		.text $79,$97,$87,$79,$99,$A7,$79,$9B,$C7,$79,$9D,$E7,$79,$9F,$07,$7A,$A1,$27,$7A,$A3,$47,$7A,$A5,$67,$7A,$A7,$87,$7A,$A9,$A7,$7A,$AB
>01bab2		c7 79 9d e7 79 9f 07 7a a1 27 7a a3 47 7a a5 67
>01bac2		7a a7 87 7a a9 a7 7a ab
>01baca		c7 7a ad e7 7a af 07 7b		.text $C7,$7A,$AD,$E7,$7A,$AF,$07,$7B,$B1,$27,$7B,$B3,$47,$7B,$B5,$67,$7B,$B7,$87,$7B,$B9,$A7,$7B,$BB,$C7,$7B,$BD,$E7,$7B,$BF,$07,$7C
>01bad2		b1 27 7b b3 47 7b b5 67 7b b7 87 7b b9 a7 7b bb
>01bae2		c7 7b bd e7 7b bf 07 7c
>01baea		c1 27 7c c3 47 7c c5 67		.text $C1,$27,$7C,$C3,$47,$7C,$C5,$67,$7C,$C7,$87,$7C,$C9,$A7,$7C,$CB,$C7,$7C,$CD,$E7,$7C,$CF,$07,$7D,$D1,$27,$7D,$D3,$47,$7D,$D5,$67
>01baf2		7c c7 87 7c c9 a7 7c cb c7 7c cd e7 7c cf 07 7d
>01bb02		d1 27 7d d3 47 7d d5 67
>01bb0a		7d d7 87 7d d9 a7 7d db		.text $7D,$D7,$87,$7D,$D9,$A7,$7D,$DB,$C7,$7D,$DD,$E7,$7D,$DF,$07,$7E,$E1,$27,$7E,$E3,$47,$7E,$E5,$67,$7E,$E7,$87,$7E,$E9,$A7,$7E,$EB
>01bb12		c7 7d dd e7 7d df 07 7e e1 27 7e e3 47 7e e5 67
>01bb22		7e e7 87 7e e9 a7 7e eb
>01bb2a		c7 7e ed f7 ff ef 07 7f		.text $C7,$7E,$ED,$F7,$FF,$EF,$07,$7F,$F1,$27,$7F,$F3,$47,$7F,$F5,$67,$7F,$F7,$87,$7F,$F9,$A7,$7F,$FB,$C7,$7F,$FD,$E7,$7F,$FF,$07,$80
>01bb32		f1 27 7f f3 47 7f f5 67 7f f7 87 7f f9 a7 7f fb
>01bb42		c7 7f fd e7 7f ff 07 80
>01bb4a		01 28 80 03 48 80 05 68		.text $01,$28,$80,$03,$48,$80,$05,$68,$80,$07,$88,$80,$09,$A8,$80,$0B,$C8,$80,$0D,$E8,$80,$0F,$08,$81,$11,$28,$81,$13,$48,$81,$15,$68
>01bb52		80 07 88 80 09 a8 80 0b c8 80 0d e8 80 0f 08 81
>01bb62		11 28 81 13 48 81 15 68
>01bb6a		81 17 88 81 19 a8 81 1b		.text $81,$17,$88,$81,$19,$A8,$81,$1B,$C8,$81,$1D,$E8,$81,$1F,$08,$82,$21,$28,$82,$23,$48,$82,$25,$68,$82,$27,$88,$82,$29,$A8,$82,$2B
>01bb72		c8 81 1d e8 81 1f 08 82 21 28 82 23 48 82 25 68
>01bb82		82 27 88 82 29 a8 82 2b
>01bb8a		c8 82 2d e8 82 2f 08 83		.text $C8,$82,$2D,$E8,$82,$2F,$08,$83,$31,$28,$83,$33,$48,$83,$35,$68,$83,$37,$88,$83,$39,$A8,$83,$3B,$C8,$83,$3D,$E8,$83,$3F,$08,$84
>01bb92		31 28 83 33 48 83 35 68 83 37 88 83 39 a8 83 3b
>01bba2		c8 83 3d e8 83 3f 08 84
>01bbaa		41 28 84 43 48 84 45 68		.text $41,$28,$84,$43,$48,$84,$45,$68,$84,$47,$88,$84,$49,$A8,$84,$4B,$C8,$84,$4D,$E8,$84,$4F,$08,$85,$51,$28,$85,$53,$48,$85,$55,$68
>01bbb2		84 47 88 84 49 a8 84 4b c8 84 4d e8 84 4f 08 85
>01bbc2		51 28 85 53 48 85 55 68
>01bbca		85 57 88 85 59 a8 85 5b		.text $85,$57,$88,$85,$59,$A8,$85,$5B,$C8,$85,$5D,$E8,$85,$5F,$08,$86,$61,$28,$86,$63,$48,$86,$65,$68,$86,$67,$88,$86,$69,$A8,$86,$6B
>01bbd2		c8 85 5d e8 85 5f 08 86 61 28 86 63 48 86 65 68
>01bbe2		86 67 88 86 69 a8 86 6b
>01bbea		c8 86 6d e8 86 6f 08 87		.text $C8,$86,$6D,$E8,$86,$6F,$08,$87,$71,$28,$87,$73,$48,$87,$75,$68,$87,$77,$88,$87,$79,$A8,$87,$7B,$C8,$87,$7D,$E8,$87,$7F,$08,$88
>01bbf2		71 28 87 73 48 87 75 68 87 77 88 87 79 a8 87 7b
>01bc02		c8 87 7d e8 87 7f 08 88
>01bc0a		81 28 88 83 48 88 85 68		.text $81,$28,$88,$83,$48,$88,$85,$68,$88,$87,$88,$88,$89,$A8,$88,$8B,$C8,$88,$8D,$E8,$88,$8F,$08,$89,$91,$28,$89,$93,$48,$89,$95,$68
>01bc12		88 87 88 88 89 a8 88 8b c8 88 8d e8 88 8f 08 89
>01bc22		91 28 89 93 48 89 95 68
>01bc2a		89 97 88 89 99 f8 ff 9b		.text $89,$97,$88,$89,$99,$F8,$FF,$9B,$C8,$89,$9D,$E8,$89,$9F,$08,$8A,$A1,$28,$8A,$A3,$48,$8A,$A5,$68,$8A,$A7,$88,$8A,$A9,$A8,$8A,$AB
>01bc32		c8 89 9d e8 89 9f 08 8a a1 28 8a a3 48 8a a5 68
>01bc42		8a a7 88 8a a9 a8 8a ab
>01bc4a		c8 8a ad e8 8a af 08 8b		.text $C8,$8A,$AD,$E8,$8A,$AF,$08,$8B,$FF,$2F,$8B,$B3,$48,$8B,$B5,$68,$8B,$B7,$88,$8B,$B9,$A8,$8B,$BB,$C8,$8B,$BD,$E8,$8B,$BF,$08,$8C
>01bc52		ff 2f 8b b3 48 8b b5 68 8b b7 88 8b b9 a8 8b bb
>01bc62		c8 8b bd e8 8b bf 08 8c
>01bc6a		c1 28 8c c3 48 8c c5 68		.text $C1,$28,$8C,$C3,$48,$8C,$C5,$68,$8C,$C7,$88,$8C,$C9,$A8,$8C,$CB,$C8,$8C,$CD,$E8,$8C,$CF,$08,$8D,$D1,$28,$8D,$D3,$48,$8D,$D5,$68
>01bc72		8c c7 88 8c c9 a8 8c cb c8 8c cd e8 8c cf 08 8d
>01bc82		d1 28 8d d3 48 8d d5 68
>01bc8a		8d d7 88 8d d9 a8 8d db		.text $8D,$D7,$88,$8D,$D9,$A8,$8D,$DB,$C8,$8D,$DD,$E8,$8D,$DF,$08,$8E,$E1,$28,$8E,$E3,$48,$8E,$E5,$68,$8E,$E7,$88,$8E,$E9,$A8,$8E,$EB
>01bc92		c8 8d dd e8 8d df 08 8e e1 28 8e e3 48 8e e5 68
>01bca2		8e e7 88 8e e9 a8 8e eb
>01bcaa		c8 8e ed e8 8e ef 08 8f		.text $C8,$8E,$ED,$E8,$8E,$EF,$08,$8F,$F1,$28,$8F,$F3,$48,$8F,$F5,$68,$8F,$F7,$88,$8F,$F9,$A8,$8F,$FB,$C8,$8F,$FD,$E8,$8F,$FF,$08,$90
>01bcb2		f1 28 8f f3 48 8f f5 68 8f f7 88 8f f9 a8 8f fb
>01bcc2		c8 8f fd e8 8f ff 08 90
>01bcca		01 29 90 03 49 90 05 69		.text $01,$29,$90,$03,$49,$90,$05,$69,$90,$07,$89,$90,$09,$A9,$90,$0B,$C9,$90,$0D,$E9,$90,$0F,$09,$91,$11,$29,$91,$FF,$4F,$91,$15,$69
>01bcd2		90 07 89 90 09 a9 90 0b c9 90 0d e9 90 0f 09 91
>01bce2		11 29 91 ff 4f 91 15 69
>01bcea		91 17 89 91 19 a9 91 1b		.text $91,$17,$89,$91,$19,$A9,$91,$1B,$C9,$91,$1D,$E9,$91,$1F,$09,$92,$21,$29,$92,$23,$49,$92,$25,$69,$92,$27,$89,$92,$29,$A9,$92,$2B
>01bcf2		c9 91 1d e9 91 1f 09 92 21 29 92 23 49 92 25 69
>01bd02		92 27 89 92 29 a9 92 2b
>01bd0a		c9 92 2d e9 92 2f 09 93		.text $C9,$92,$2D,$E9,$92,$2F,$09,$93,$31,$29,$93,$33,$49,$93,$35,$69,$93,$37,$89,$93,$39,$F9,$FF,$3B,$C9,$93,$3D,$E9,$93,$3F,$09,$94
>01bd12		31 29 93 33 49 93 35 69 93 37 89 93 39 f9 ff 3b
>01bd22		c9 93 3d e9 93 3f 09 94
>01bd2a		41 29 94 43 49 94 45 69		.text $41,$29,$94,$43,$49,$94,$45,$69,$94,$47,$89,$94,$49,$A9,$94,$4B,$C9,$94,$4D,$E9,$94,$4F,$F9,$FF,$51,$29,$95,$53,$49,$95,$55,$69
>01bd32		94 47 89 94 49 a9 94 4b c9 94 4d e9 94 4f f9 ff
>01bd42		51 29 95 53 49 95 55 69
>01bd4a		95 57 89 95 ff af 95 5b		.text $95,$57,$89,$95,$FF,$AF,$95,$5B,$C9,$95,$5D,$F9,$FF,$5F,$09,$96,$61,$29,$96,$63,$49,$96,$65,$69,$96,$67,$89,$96,$69,$A9,$96,$6B
>01bd52		c9 95 5d f9 ff 5f 09 96 61 29 96 63 49 96 65 69
>01bd62		96 67 89 96 69 a9 96 6b
>01bd6a		c9 96 6d e9 96 6f 09 97		.text $C9,$96,$6D,$E9,$96,$6F,$09,$97,$71,$29,$97,$73,$49,$97,$75,$69,$97,$77,$89,$97,$79,$A9,$97,$FF,$CF,$97,$7D,$E9,$97,$7F,$09,$98
>01bd72		71 29 97 73 49 97 75 69 97 77 89 97 79 a9 97 ff
>01bd82		cf 97 7d e9 97 7f 09 98
>01bd8a		81 29 98 83 49 98 85 69		.text $81,$29,$98,$83,$49,$98,$85,$69,$98,$87,$89,$98,$FF,$AF,$98,$8B,$C9,$98,$8D,$E9,$98,$8F,$09,$99,$91,$29,$99,$93,$49,$99,$95,$69
>01bd92		98 87 89 98 ff af 98 8b c9 98 8d e9 98 8f 09 99
>01bda2		91 29 99 93 49 99 95 69
>01bdaa		99 ff 8f 99 99 a9 99 ff		.text $99,$FF,$8F,$99,$99,$A9,$99,$FF,$FF,$FF,$9D,$E9,$99,$9F,$09,$9A,$A1,$29,$9A,$A3,$49,$9A,$A5,$69,$9A,$A7,$89,$9A,$A9,$A9,$9A,$AB
>01bdb2		ff ff 9d e9 99 9f 09 9a a1 29 9a a3 49 9a a5 69
>01bdc2		9a a7 89 9a a9 a9 9a ab
>01bdca		c9 9a ad e9 9a af 09 9b		.text $C9,$9A,$AD,$E9,$9A,$AF,$09,$9B,$B1,$29,$9B,$B3,$49,$9B,$B5,$69,$9B,$B7,$89,$9B,$B9,$A9,$9B,$BB,$C9,$9B,$BD,$E9,$9B,$BF,$09,$9C
>01bdd2		b1 29 9b b3 49 9b b5 69 9b b7 89 9b b9 a9 9b bb
>01bde2		c9 9b bd e9 9b bf 09 9c
>01bdea		c1 29 9c c3 49 9c c5 69		.text $C1,$29,$9C,$C3,$49,$9C,$C5,$69,$9C,$C7,$89,$9C,$C9,$A9,$9C,$CB,$C9,$9C,$CD,$E9,$9C,$CF,$09,$9D,$FF,$2F,$9D,$D3,$49,$9D,$D5,$69
>01bdf2		9c c7 89 9c c9 a9 9c cb c9 9c cd e9 9c cf 09 9d
>01be02		ff 2f 9d d3 49 9d d5 69
>01be0a		9d d7 89 9d d9 a9 9d db		.text $9D,$D7,$89,$9D,$D9,$A9,$9D,$DB,$C9,$9D,$DD,$E9,$9D,$DF,$09,$9E,$E1,$29,$9E,$E3,$49,$9E,$E5,$69,$9E,$E7,$89,$9E,$E9,$A9,$9E,$EB
>01be12		c9 9d dd e9 9d df 09 9e e1 29 9e e3 49 9e e5 69
>01be22		9e e7 89 9e e9 a9 9e eb
>01be2a		c9 9e ed e9 9e ef 09 9f		.text $C9,$9E,$ED,$E9,$9E,$EF,$09,$9F,$F1,$29,$9F,$F3,$49,$9F,$F5,$69,$9F,$F7,$89,$9F,$F9,$A9,$9F,$FB,$C9,$9F,$FD,$E9,$9F,$FF,$09,$A0
>01be32		f1 29 9f f3 49 9f f5 69 9f f7 89 9f f9 a9 9f fb
>01be42		c9 9f fd e9 9f ff 09 a0
>01be4a		01 2a a0 03 4a a0 05 6a		.text $01,$2A,$A0,$03,$4A,$A0,$05,$6A,$A0,$07,$8A,$A0,$09,$AA,$A0,$0B,$CA,$A0,$0D,$EA,$A0,$0F,$0A,$A1,$11,$2A,$A1,$13,$4A,$A1,$FF,$6F
>01be52		a0 07 8a a0 09 aa a0 0b ca a0 0d ea a0 0f 0a a1
>01be62		11 2a a1 13 4a a1 ff 6f
>01be6a		a1 17 8a a1 19 aa a1 1b		.text $A1,$17,$8A,$A1,$19,$AA,$A1,$1B,$CA,$A1,$1D,$EA,$A1,$1F,$0A,$A2,$21,$2A,$A2,$23,$4A,$A2,$25,$6A,$A2,$27,$8A,$A2,$29,$AA,$A2,$2B
>01be72		ca a1 1d ea a1 1f 0a a2 21 2a a2 23 4a a2 25 6a
>01be82		a2 27 8a a2 29 aa a2 2b
>01be8a		fa ff 2d ea a2 2f 0a a3		.text $FA,$FF,$2D,$EA,$A2,$2F,$0A,$A3,$31,$2A,$A3,$33,$4A,$A3,$35,$6A,$A3,$37,$8A,$A3,$39,$AA,$A3,$3B,$CA,$A3,$3D,$EA,$A3,$3F,$0A,$A4
>01be92		31 2a a3 33 4a a3 35 6a a3 37 8a a3 39 aa a3 3b
>01bea2		ca a3 3d ea a3 3f 0a a4
>01beaa		41 2a a4 43 4a a4 45 6a		.text $41,$2A,$A4,$43,$4A,$A4,$45,$6A,$A4,$47,$8A,$A4,$49,$AA,$A4,$4B,$CA,$A4,$4D,$EA,$A4,$4F,$0A,$A5,$51,$2A,$A5,$FF,$4F,$A5,$55,$6A
>01beb2		a4 47 8a a4 49 aa a4 4b ca a4 4d ea a4 4f 0a a5
>01bec2		51 2a a5 ff 4f a5 55 6a
>01beca		a5 57 8a a5 59 aa a5 5b		.text $A5,$57,$8A,$A5,$59,$AA,$A5,$5B,$CA,$A5,$5D,$EA,$A5,$5F,$FA,$FF,$61,$2A,$A6,$63,$4A,$A6,$65,$6A,$A6,$67,$8A,$A6,$69,$AA,$A6,$6B
>01bed2		ca a5 5d ea a5 5f fa ff 61 2a a6 63 4a a6 65 6a
>01bee2		a6 67 8a a6 69 aa a6 6b
>01beea		ca a6 6d ea a6 6f 0a a7		.text $CA,$A6,$6D,$EA,$A6,$6F,$0A,$A7,$71,$2A,$A7,$73,$4A,$A7,$75,$6A,$A7,$77,$8A,$A7,$79,$AA,$A7,$7B,$CA,$A7,$7D,$EA,$A7,$7F,$0A,$A8
>01bef2		71 2a a7 73 4a a7 75 6a a7 77 8a a7 79 aa a7 7b
>01bf02		ca a7 7d ea a7 7f 0a a8
>01bf0a		81 2a a8 83 4a a8 85 6a		.text $81,$2A,$A8,$83,$4A,$A8,$85,$6A,$A8,$87,$8A,$A8,$89,$AA,$A8,$8B,$CA,$A8,$8D,$EA,$A8,$8F,$0A,$A9,$91,$2A,$A9,$93,$4A,$A9,$95,$6A
>01bf12		a8 87 8a a8 89 aa a8 8b ca a8 8d ea a8 8f 0a a9
>01bf22		91 2a a9 93 4a a9 95 6a
>01bf2a		a9 97 8a a9 99 aa a9 9b		.text $A9,$97,$8A,$A9,$99,$AA,$A9,$9B,$CA,$A9,$9D,$EA,$A9,$9F,$0A,$AA,$A1,$2A,$AA,$A3,$4A,$AA,$A5,$6A,$AA,$A7,$8A,$AA,$A9,$AA,$AA,$AB
>01bf32		ca a9 9d ea a9 9f 0a aa a1 2a aa a3 4a aa a5 6a
>01bf42		aa a7 8a aa a9 aa aa ab
>01bf4a		ca aa ad ea aa af 0a ab		.text $CA,$AA,$AD,$EA,$AA,$AF,$0A,$AB,$B1,$2A,$AB,$B3,$4A,$AB,$B5,$6A,$AB,$B7,$8A,$AB,$B9,$AA,$AB,$BB,$CA,$AB,$BD,$EA,$AB,$BF,$0A,$AC
>01bf52		b1 2a ab b3 4a ab b5 6a ab b7 8a ab b9 aa ab bb
>01bf62		ca ab bd ea ab bf 0a ac
>01bf6a		c1 2a ac c3 4a ac c5 6a		.text $C1,$2A,$AC,$C3,$4A,$AC,$C5,$6A,$AC,$C7,$8A,$AC,$C9,$AA,$AC,$CB,$CA,$AC,$CD,$EA,$AC,$CF,$0A,$AD,$D1,$2A,$AD,$D3,$4A,$AD,$D5,$6A
>01bf72		ac c7 8a ac c9 aa ac cb ca ac cd ea ac cf 0a ad
>01bf82		d1 2a ad d3 4a ad d5 6a
>01bf8a		ad d7 8a ad d9 aa ad db		.text $AD,$D7,$8A,$AD,$D9,$AA,$AD,$DB,$CA,$AD,$DD,$EA,$AD,$DF,$0A,$AE,$E1,$2A,$AE,$E3,$4A,$AE,$E5,$6A,$AE,$E7,$8A,$AE,$E9,$AA,$AE,$EB
>01bf92		ca ad dd ea ad df 0a ae e1 2a ae e3 4a ae e5 6a
>01bfa2		ae e7 8a ae e9 aa ae eb
>01bfaa		ca ae ed ea ae ef 0a af		.text $CA,$AE,$ED,$EA,$AE,$EF,$0A,$AF,$F1,$2A,$AF,$F3,$4A,$AF,$F5,$6A,$AF,$F7,$8A,$AF,$F9,$AA,$AF,$FB,$CA,$AF,$FD,$EA,$AF,$FF,$0A,$B0
>01bfb2		f1 2a af f3 4a af f5 6a af f7 8a af f9 aa af fb
>01bfc2		ca af fd ea af ff 0a b0
>01bfca		01 2b b0 03 4b b0 05 6b		.text $01,$2B,$B0,$03,$4B,$B0,$05,$6B,$B0,$07,$FB,$FF,$09,$AB,$B0,$0B,$CB,$B0,$0D,$EB,$B0,$0F,$0B,$B1,$FF,$0F,$00,$00,$00,$00,$00,$00
>01bfd2		b0 07 fb ff 09 ab b0 0b cb b0 0d eb b0 0f 0b b1
>01bfe2		ff 0f 00 00 00 00 00 00
>01bfea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01bff2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c002		00 00 00 00 00 00 00 00
>01c00a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c012		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c022		00 00 00 00 00 00 00 00
>01c02a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c032		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c042		00 00 00 00 00 00 00 00
>01c04a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c052		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c062		00 00 00 00 00 00 00 00
>01c06a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c072		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c082		00 00 00 00 00 00 00 00
>01c08a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c092		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c0a2		00 00 00 00 00 00 00 00
>01c0aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c0b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c0c2		00 00 00 00 00 00 00 00
>01c0ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c0d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c0e2		00 00 00 00 00 00 00 00
>01c0ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c0f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c102		00 00 00 00 00 00 00 00
>01c10a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c112		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c122		00 00 00 00 00 00 00 00
>01c12a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01c132		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01c142		00 00 00 00 00 00 00 00
>01c14a		f0 ff ff 03 40 00 05 60		.text $F0,$FF,$FF,$03,$40,$00,$05,$60,$00,$07,$80,$00,$09,$A0,$00,$0B,$C0,$00,$0D,$E0,$00,$0F,$00,$01,$11,$20,$01,$13,$40,$01,$15,$60
>01c152		00 07 80 00 09 a0 00 0b c0 00 0d e0 00 0f 00 01
>01c162		11 20 01 13 40 01 15 60
>01c16a		01 17 80 01 19 a0 01 1b		.text $01,$17,$80,$01,$19,$A0,$01,$1B,$C0,$01,$1D,$E0,$01,$1F,$00,$02,$21,$20,$02,$23,$40,$02,$25,$60,$02,$27,$80,$02,$29,$A0,$02,$2B
>01c172		c0 01 1d e0 01 1f 00 02 21 20 02 23 40 02 25 60
>01c182		02 27 80 02 29 a0 02 2b
>01c18a		c0 02 2d e0 02 2f 00 03		.text $C0,$02,$2D,$E0,$02,$2F,$00,$03,$31,$20,$03,$33,$40,$03,$35,$60,$03,$37,$80,$03,$39,$A0,$03,$3B,$C0,$03,$3D,$E0,$03,$3F,$00,$04
>01c192		31 20 03 33 40 03 35 60 03 37 80 03 39 a0 03 3b
>01c1a2		c0 03 3d e0 03 3f 00 04
>01c1aa		41 20 04 43 40 04 45 60		.text $41,$20,$04,$43,$40,$04,$45,$60,$04,$47,$80,$04,$49,$A0,$04,$4B,$C0,$04,$4D,$E0,$04,$4F,$00,$05,$51,$F0,$FF,$53,$40,$05,$55,$60
>01c1b2		04 47 80 04 49 a0 04 4b c0 04 4d e0 04 4f 00 05
>01c1c2		51 f0 ff 53 40 05 55 60
>01c1ca		05 57 80 05 59 a0 05 5b		.text $05,$57,$80,$05,$59,$A0,$05,$5B,$C0,$05,$5D,$E0,$05,$5F,$00,$06,$61,$20,$06,$63,$40,$06,$65,$60,$06,$67,$80,$06,$69,$A0,$06,$6B
>01c1d2		c0 05 5d e0 05 5f 00 06 61 20 06 63 40 06 65 60
>01c1e2		06 67 80 06 69 a0 06 6b
>01c1ea		c0 06 6d e0 06 6f 00 07		.text $C0,$06,$6D,$E0,$06,$6F,$00,$07,$71,$20,$07,$73,$40,$07,$75,$60,$07,$77,$80,$07,$79,$A0,$07,$7B,$C0,$07,$7D,$E0,$07,$7F,$00,$08
>01c1f2		71 20 07 73 40 07 75 60 07 77 80 07 79 a0 07 7b
>01c202		c0 07 7d e0 07 7f 00 08
>01c20a		81 20 08 83 40 08 85 60		.text $81,$20,$08,$83,$40,$08,$85,$60,$08,$87,$80,$08,$89,$A0,$08,$8B,$C0,$08,$8D,$E0,$08,$8F,$00,$09,$91,$20,$09,$93,$40,$09,$95,$60
>01c212		08 87 80 08 89 a0 08 8b c0 08 8d e0 08 8f 00 09
>01c222		91 20 09 93 40 09 95 60
>01c22a		09 97 80 09 99 a0 09 9b		.text $09,$97,$80,$09,$99,$A0,$09,$9B,$C0,$09,$FF,$EF,$09,$9F,$00,$0A,$A1,$20,$0A,$A3,$40,$0A,$A5,$60,$0A,$A7,$80,$0A,$A9,$A0,$0A,$AB
>01c232		c0 09 ff ef 09 9f 00 0a a1 20 0a a3 40 0a a5 60
>01c242		0a a7 80 0a a9 a0 0a ab
>01c24a		c0 0a ad e0 0a af 00 0b		.text $C0,$0A,$AD,$E0,$0A,$AF,$00,$0B,$B1,$20,$0B,$B3,$40,$0B,$B5,$60,$0B,$B7,$80,$0B,$B9,$A0,$0B,$BB,$C0,$0B,$BD,$E0,$0B,$BF,$00,$0C
>01c252		b1 20 0b b3 40 0b b5 60 0b b7 80 0b b9 a0 0b bb
>01c262		c0 0b bd e0 0b bf 00 0c
>01c26a		c1 20 0c c3 40 0c c5 60		.text $C1,$20,$0C,$C3,$40,$0C,$C5,$60,$0C,$C7,$80,$0C,$C9,$A0,$0C,$CB,$C0,$0C,$CD,$E0,$0C,$CF,$00,$0D,$D1,$20,$0D,$D3,$40,$0D,$D5,$60
>01c272		0c c7 80 0c c9 a0 0c cb c0 0c cd e0 0c cf 00 0d
>01c282		d1 20 0d d3 40 0d d5 60
>01c28a		0d d7 80 0d d9 a0 0d db		.text $0D,$D7,$80,$0D,$D9,$A0,$0D,$DB,$C0,$0D,$DD,$E0,$0D,$DF,$00,$0E,$E1,$20,$0E,$E3,$40,$0E,$E5,$60,$0E,$E7,$80,$0E,$E9,$A0,$0E,$EB
>01c292		c0 0d dd e0 0d df 00 0e e1 20 0e e3 40 0e e5 60
>01c2a2		0e e7 80 0e e9 a0 0e eb
>01c2aa		c0 0e ed e0 0e ef 00 0f		.text $C0,$0E,$ED,$E0,$0E,$EF,$00,$0F,$F1,$20,$0F,$F3,$40,$0F,$F5,$60,$0F,$F7,$80,$0F,$F9,$A0,$0F,$FB,$C0,$0F,$FD,$E0,$0F,$FF,$00,$10
>01c2b2		f1 20 0f f3 40 0f f5 60 0f f7 80 0f f9 a0 0f fb
>01c2c2		c0 0f fd e0 0f ff 00 10
>01c2ca		01 21 10 03 41 10 05 61		.text $01,$21,$10,$03,$41,$10,$05,$61,$10,$07,$F1,$FF,$FF,$AF,$10,$0B,$C1,$10,$0D,$E1,$10,$0F,$01,$11,$11,$21,$11,$13,$41,$11,$15,$61
>01c2d2		10 07 f1 ff ff af 10 0b c1 10 0d e1 10 0f 01 11
>01c2e2		11 21 11 13 41 11 15 61
>01c2ea		11 17 81 11 19 a1 11 1b		.text $11,$17,$81,$11,$19,$A1,$11,$1B,$C1,$11,$1D,$E1,$11,$1F,$01,$12,$21,$21,$12,$23,$41,$12,$25,$61,$12,$27,$81,$12,$29,$A1,$12,$2B
>01c2f2		c1 11 1d e1 11 1f 01 12 21 21 12 23 41 12 25 61
>01c302		12 27 81 12 29 a1 12 2b
>01c30a		c1 12 2d e1 12 2f 01 13		.text $C1,$12,$2D,$E1,$12,$2F,$01,$13,$31,$21,$13,$33,$41,$13,$35,$61,$13,$37,$81,$13,$39,$A1,$13,$3B,$C1,$13,$3D,$E1,$13,$3F,$01,$14
>01c312		31 21 13 33 41 13 35 61 13 37 81 13 39 a1 13 3b
>01c322		c1 13 3d e1 13 3f 01 14
>01c32a		41 21 14 ff 4f 14 45 61		.text $41,$21,$14,$FF,$4F,$14,$45,$61,$14,$47,$81,$14,$49,$A1,$14,$4B,$C1,$14,$4D,$E1,$14,$4F,$01,$15,$51,$21,$15,$53,$41,$15,$55,$61
>01c332		14 47 81 14 49 a1 14 4b c1 14 4d e1 14 4f 01 15
>01c342		51 21 15 53 41 15 55 61
>01c34a		15 57 81 15 59 a1 15 5b		.text $15,$57,$81,$15,$59,$A1,$15,$5B,$C1,$15,$5D,$E1,$15,$5F,$01,$16,$61,$21,$16,$63,$41,$16,$65,$61,$16,$67,$81,$16,$69,$A1,$16,$6B
>01c352		c1 15 5d e1 15 5f 01 16 61 21 16 63 41 16 65 61
>01c362		16 67 81 16 69 a1 16 6b
>01c36a		c1 16 6d e1 16 6f 01 17		.text $C1,$16,$6D,$E1,$16,$6F,$01,$17,$71,$21,$17,$73,$41,$17,$75,$61,$17,$77,$81,$17,$79,$A1,$17,$7B,$C1,$17,$7D,$E1,$17,$7F,$01,$18
>01c372		71 21 17 73 41 17 75 61 17 77 81 17 79 a1 17 7b
>01c382		c1 17 7d e1 17 7f 01 18
>01c38a		81 21 18 83 41 18 85 61		.text $81,$21,$18,$83,$41,$18,$85,$61,$18,$87,$81,$18,$89,$A1,$18,$8B,$C1,$18,$8D,$E1,$18,$8F,$01,$19,$91,$21,$19,$93,$41,$19,$95,$61
>01c392		18 87 81 18 89 a1 18 8b c1 18 8d e1 18 8f 01 19
>01c3a2		91 21 19 93 41 19 95 61
>01c3aa		19 97 81 19 99 a1 19 9b		.text $19,$97,$81,$19,$99,$A1,$19,$9B,$C1,$19,$9D,$E1,$19,$9F,$01,$1A,$A1,$21,$1A,$A3,$41,$1A,$A5,$61,$1A,$A7,$81,$1A,$A9,$A1,$1A,$AB
>01c3b2		c1 19 9d e1 19 9f 01 1a a1 21 1a a3 41 1a a5 61
>01c3c2		1a a7 81 1a a9 a1 1a ab
>01c3ca		c1 1a ad e1 1a af 01 1b		.text $C1,$1A,$AD,$E1,$1A,$AF,$01,$1B,$B1,$21,$1B,$B3,$41,$1B,$B5,$61,$1B,$B7,$81,$1B,$B9,$A1,$1B,$BB,$C1,$1B,$BD,$E1,$1B,$BF,$01,$1C
>01c3d2		b1 21 1b b3 41 1b b5 61 1b b7 81 1b b9 a1 1b bb
>01c3e2		c1 1b bd e1 1b bf 01 1c
>01c3ea		c1 21 1c c3 41 1c ff 6f		.text $C1,$21,$1C,$C3,$41,$1C,$FF,$6F,$1C,$C7,$81,$1C,$FF,$FF,$FF,$CB,$C1,$1C,$CD,$E1,$1C,$CF,$01,$1D,$D1,$21,$1D,$D3,$41,$1D,$D5,$61
>01c3f2		1c c7 81 1c ff ff ff cb c1 1c cd e1 1c cf 01 1d
>01c402		d1 21 1d d3 41 1d d5 61
>01c40a		1d d7 81 1d d9 a1 1d db		.text $1D,$D7,$81,$1D,$D9,$A1,$1D,$DB,$C1,$1D,$DD,$E1,$1D,$DF,$01,$1E,$E1,$21,$1E,$E3,$41,$1E,$E5,$61,$1E,$E7,$81,$1E,$E9,$A1,$1E,$EB
>01c412		c1 1d dd e1 1d df 01 1e e1 21 1e e3 41 1e e5 61
>01c422		1e e7 81 1e e9 a1 1e eb
>01c42a		c1 1e ed e1 1e ef 01 1f		.text $C1,$1E,$ED,$E1,$1E,$EF,$01,$1F,$F1,$21,$1F,$F3,$41,$1F,$F5,$61,$1F,$FF,$8F,$1F,$F9,$A1,$1F,$FB,$C1,$1F,$FD,$E1,$1F,$FF,$01,$20
>01c432		f1 21 1f f3 41 1f f5 61 1f ff 8f 1f f9 a1 1f fb
>01c442		c1 1f fd e1 1f ff 01 20
>01c44a		01 22 20 03 42 20 05 62		.text $01,$22,$20,$03,$42,$20,$05,$62,$20,$07,$82,$20,$09,$A2,$20,$0B,$C2,$20,$0D,$E2,$20,$0F,$02,$21,$11,$22,$21,$13,$42,$21,$15,$F2
>01c452		20 07 82 20 09 a2 20 0b c2 20 0d e2 20 0f 02 21
>01c462		11 22 21 13 42 21 15 f2
>01c46a		ff 17 82 21 19 a2 21 1b		.text $FF,$17,$82,$21,$19,$A2,$21,$1B,$C2,$21,$1D,$E2,$21,$1F,$02,$22,$21,$22,$22,$23,$42,$22,$25,$62,$22,$27,$82,$22,$FF,$AF,$22,$2B
>01c472		c2 21 1d e2 21 1f 02 22 21 22 22 23 42 22 25 62
>01c482		22 27 82 22 ff af 22 2b
>01c48a		c2 22 2d e2 22 2f 02 23		.text $C2,$22,$2D,$E2,$22,$2F,$02,$23,$31,$22,$23,$33,$42,$23,$35,$62,$23,$37,$82,$23,$39,$A2,$23,$3B,$C2,$23,$3D,$E2,$23,$3F,$02,$24
>01c492		31 22 23 33 42 23 35 62 23 37 82 23 39 a2 23 3b
>01c4a2		c2 23 3d e2 23 3f 02 24
>01c4aa		41 22 24 43 42 24 45 62		.text $41,$22,$24,$43,$42,$24,$45,$62,$24,$47,$82,$24,$49,$A2,$24,$4B,$C2,$24,$FF,$EF,$24,$4F,$02,$25,$51,$22,$25,$53,$42,$25,$55,$62
>01c4b2		24 47 82 24 49 a2 24 4b c2 24 ff ef 24 4f 02 25
>01c4c2		51 22 25 53 42 25 55 62
>01c4ca		25 57 82 25 59 a2 25 5b		.text $25,$57,$82,$25,$59,$A2,$25,$5B,$C2,$25,$5D,$E2,$25,$5F,$02,$26,$61,$22,$26,$63,$42,$26,$65,$62,$26,$67,$82,$26,$69,$A2,$26,$6B
>01c4d2		c2 25 5d e2 25 5f 02 26 61 22 26 63 42 26 65 62
>01c4e2		26 67 82 26 69 a2 26 6b
>01c4ea		c2 26 6d e2 26 6f 02 27		.text $C2,$26,$6D,$E2,$26,$6F,$02,$27,$71,$22,$27,$FF,$4F,$27,$75,$62,$27,$77,$82,$27,$79,$A2,$27,$7B,$C2,$27,$7D,$E2,$27,$7F,$02,$28
>01c4f2		71 22 27 ff 4f 27 75 62 27 77 82 27 79 a2 27 7b
>01c502		c2 27 7d e2 27 7f 02 28
>01c50a		81 22 28 83 42 28 85 62		.text $81,$22,$28,$83,$42,$28,$85,$62,$28,$87,$82,$28,$89,$A2,$28,$8B,$C2,$28,$8D,$E2,$28,$8F,$02,$29,$91,$F2,$FF,$93,$42,$29,$95,$62
>01c512		28 87 82 28 89 a2 28 8b c2 28 8d e2 28 8f 02 29
>01c522		91 f2 ff 93 42 29 95 62
>01c52a		29 97 82 29 99 a2 29 9b		.text $29,$97,$82,$29,$99,$A2,$29,$9B,$C2,$29,$9D,$E2,$29,$9F,$02,$2A,$A1,$22,$2A,$A3,$42,$2A,$A5,$62,$2A,$A7,$F2,$FF,$A9,$A2,$2A,$AB
>01c532		c2 29 9d e2 29 9f 02 2a a1 22 2a a3 42 2a a5 62
>01c542		2a a7 f2 ff a9 a2 2a ab
>01c54a		c2 2a ad e2 2a af 02 2b		.text $C2,$2A,$AD,$E2,$2A,$AF,$02,$2B,$B1,$22,$2B,$B3,$42,$2B,$B5,$62,$2B,$B7,$82,$2B,$B9,$A2,$2B,$BB,$C2,$2B,$BD,$E2,$2B,$BF,$02,$2C
>01c552		b1 22 2b b3 42 2b b5 62 2b b7 82 2b b9 a2 2b bb
>01c562		c2 2b bd e2 2b bf 02 2c
>01c56a		c1 22 2c c3 42 2c c5 62		.text $C1,$22,$2C,$C3,$42,$2C,$C5,$62,$2C,$C7,$82,$2C,$C9,$A2,$2C,$CB,$C2,$2C,$CD,$E2,$2C,$CF,$02,$2D,$D1,$22,$2D,$D3,$42,$2D,$D5,$62
>01c572		2c c7 82 2c c9 a2 2c cb c2 2c cd e2 2c cf 02 2d
>01c582		d1 22 2d d3 42 2d d5 62
>01c58a		2d d7 82 2d d9 a2 2d db		.text $2D,$D7,$82,$2D,$D9,$A2,$2D,$DB,$C2,$2D,$DD,$E2,$2D,$DF,$02,$2E,$E1,$22,$2E,$E3,$42,$2E,$E5,$62,$2E,$E7,$82,$2E,$E9,$A2,$2E,$EB
>01c592		c2 2d dd e2 2d df 02 2e e1 22 2e e3 42 2e e5 62
>01c5a2		2e e7 82 2e e9 a2 2e eb
>01c5aa		c2 2e ed e2 2e ef 02 2f		.text $C2,$2E,$ED,$E2,$2E,$EF,$02,$2F,$F1,$22,$2F,$F3,$42,$2F,$F5,$62,$2F,$F7,$82,$2F,$F9,$A2,$2F,$FB,$C2,$2F,$FD,$E2,$2F,$FF,$02,$30
>01c5b2		f1 22 2f f3 42 2f f5 62 2f f7 82 2f f9 a2 2f fb
>01c5c2		c2 2f fd e2 2f ff 02 30
>01c5ca		01 23 30 03 43 30 05 63		.text $01,$23,$30,$03,$43,$30,$05,$63,$30,$07,$83,$30,$09,$A3,$30,$0B,$C3,$30,$0D,$E3,$30,$0F,$03,$31,$11,$23,$31,$13,$43,$31,$15,$63
>01c5d2		30 07 83 30 09 a3 30 0b c3 30 0d e3 30 0f 03 31
>01c5e2		11 23 31 13 43 31 15 63
>01c5ea		31 17 83 31 19 a3 31 1b		.text $31,$17,$83,$31,$19,$A3,$31,$1B,$C3,$31,$1D,$E3,$31,$1F,$03,$32,$21,$23,$32,$23,$43,$32,$25,$63,$32,$27,$83,$32,$29,$A3,$32,$2B
>01c5f2		c3 31 1d e3 31 1f 03 32 21 23 32 23 43 32 25 63
>01c602		32 27 83 32 29 a3 32 2b
>01c60a		c3 32 2d e3 32 2f 03 33		.text $C3,$32,$2D,$E3,$32,$2F,$03,$33,$31,$23,$33,$33,$43,$33,$35,$63,$33,$37,$83,$33,$FF,$AF,$33,$3B,$C3,$33,$3D,$E3,$33,$3F,$03,$34
>01c612		31 23 33 33 43 33 35 63 33 37 83 33 ff af 33 3b
>01c622		c3 33 3d e3 33 3f 03 34
>01c62a		41 23 34 43 43 34 45 63		.text $41,$23,$34,$43,$43,$34,$45,$63,$34,$47,$83,$34,$49,$A3,$34,$4B,$C3,$34,$4D,$E3,$34,$4F,$03,$35,$FF,$2F,$35,$53,$43,$35,$55,$63
>01c632		34 47 83 34 49 a3 34 4b c3 34 4d e3 34 4f 03 35
>01c642		ff 2f 35 53 43 35 55 63
>01c64a		35 57 83 35 59 a3 35 5b		.text $35,$57,$83,$35,$59,$A3,$35,$5B,$C3,$35,$5D,$E3,$35,$5F,$03,$36,$61,$23,$36,$63,$43,$36,$65,$63,$36,$67,$83,$36,$69,$A3,$36,$6B
>01c652		c3 35 5d e3 35 5f 03 36 61 23 36 63 43 36 65 63
>01c662		36 67 83 36 69 a3 36 6b
>01c66a		c3 36 6d e3 36 6f f3 ff		.text $C3,$36,$6D,$E3,$36,$6F,$F3,$FF,$71,$23,$37,$73,$43,$37,$75,$63,$37,$77,$83,$37,$79,$A3,$37,$7B,$C3,$37,$7D,$E3,$37,$7F,$03,$38
>01c672		71 23 37 73 43 37 75 63 37 77 83 37 79 a3 37 7b
>01c682		c3 37 7d e3 37 7f 03 38
>01c68a		81 23 38 83 43 38 85 63		.text $81,$23,$38,$83,$43,$38,$85,$63,$38,$87,$83,$38,$89,$A3,$38,$8B,$C3,$38,$8D,$E3,$38,$8F,$03,$39,$91,$23,$39,$93,$43,$39,$95,$63
>01c692		38 87 83 38 89 a3 38 8b c3 38 8d e3 38 8f 03 39
>01c6a2		91 23 39 93 43 39 95 63
>01c6aa		39 97 83 39 99 a3 39 9b		.text $39,$97,$83,$39,$99,$A3,$39,$9B,$C3,$39,$9D,$E3,$39,$9F,$03,$3A,$A1,$23,$3A,$A3,$43,$3A,$A5,$63,$3A,$A7,$83,$3A,$A9,$A3,$3A,$AB
>01c6b2		c3 39 9d e3 39 9f 03 3a a1 23 3a a3 43 3a a5 63
>01c6c2		3a a7 83 3a a9 a3 3a ab
>01c6ca		c3 3a ad e3 3a af 03 3b		.text $C3,$3A,$AD,$E3,$3A,$AF,$03,$3B,$B1,$23,$3B,$B3,$43,$3B,$B5,$63,$3B,$B7,$83,$3B,$B9,$A3,$3B,$BB,$C3,$3B,$BD,$E3,$3B,$BF,$03,$3C
>01c6d2		b1 23 3b b3 43 3b b5 63 3b b7 83 3b b9 a3 3b bb
>01c6e2		c3 3b bd e3 3b bf 03 3c
>01c6ea		c1 23 3c c3 43 3c c5 63		.text $C1,$23,$3C,$C3,$43,$3C,$C5,$63,$3C,$C7,$83,$3C,$C9,$A3,$3C,$CB,$C3,$3C,$CD,$E3,$3C,$CF,$03,$3D,$D1,$23,$3D,$D3,$43,$3D,$D5,$63
>01c6f2		3c c7 83 3c c9 a3 3c cb c3 3c cd e3 3c cf 03 3d
>01c702		d1 23 3d d3 43 3d d5 63
>01c70a		3d d7 83 3d d9 a3 3d db		.text $3D,$D7,$83,$3D,$D9,$A3,$3D,$DB,$C3,$3D,$DD,$E3,$3D,$DF,$03,$3E,$E1,$23,$3E,$E3,$43,$3E,$E5,$63,$3E,$E7,$83,$3E,$E9,$A3,$3E,$EB
>01c712		c3 3d dd e3 3d df 03 3e e1 23 3e e3 43 3e e5 63
>01c722		3e e7 83 3e e9 a3 3e eb
>01c72a		c3 3e ed e3 3e ef 03 3f		.text $C3,$3E,$ED,$E3,$3E,$EF,$03,$3F,$F1,$23,$3F,$F3,$43,$3F,$F5,$63,$3F,$F7,$83,$3F,$F9,$A3,$3F,$FB,$C3,$3F,$FD,$E3,$3F,$FF,$03,$40
>01c732		f1 23 3f f3 43 3f f5 63 3f f7 83 3f f9 a3 3f fb
>01c742		c3 3f fd e3 3f ff 03 40
>01c74a		01 24 40 03 44 40 05 64		.text $01,$24,$40,$03,$44,$40,$05,$64,$40,$07,$84,$40,$09,$A4,$40,$FF,$CF,$40,$0D,$E4,$40,$0F,$04,$41,$11,$24,$41,$13,$44,$41,$15,$64
>01c752		40 07 84 40 09 a4 40 ff cf 40 0d e4 40 0f 04 41
>01c762		11 24 41 13 44 41 15 64
>01c76a		41 17 84 41 19 a4 41 1b		.text $41,$17,$84,$41,$19,$A4,$41,$1B,$C4,$41,$1D,$E4,$41,$1F,$04,$42,$21,$24,$42,$23,$44,$42,$25,$64,$42,$27,$84,$42,$29,$A4,$42,$FF
>01c772		c4 41 1d e4 41 1f 04 42 21 24 42 23 44 42 25 64
>01c782		42 27 84 42 29 a4 42 ff
>01c78a		cf 42 2d e4 42 2f 04 43		.text $CF,$42,$2D,$E4,$42,$2F,$04,$43,$31,$24,$43,$33,$44,$43,$35,$64,$43,$37,$84,$43,$39,$A4,$43,$3B,$C4,$43,$3D,$E4,$43,$3F,$04,$44
>01c792		31 24 43 33 44 43 35 64 43 37 84 43 39 a4 43 3b
>01c7a2		c4 43 3d e4 43 3f 04 44
>01c7aa		41 24 44 43 44 44 45 64		.text $41,$24,$44,$43,$44,$44,$45,$64,$44,$47,$84,$44,$49,$A4,$44,$4B,$C4,$44,$4D,$E4,$44,$4F,$04,$45,$51,$24,$45,$53,$44,$45,$55,$64
>01c7b2		44 47 84 44 49 a4 44 4b c4 44 4d e4 44 4f 04 45
>01c7c2		51 24 45 53 44 45 55 64
>01c7ca		45 57 84 45 59 a4 45 5b		.text $45,$57,$84,$45,$59,$A4,$45,$5B,$C4,$45,$5D,$E4,$45,$5F,$04,$46,$61,$24,$46,$63,$44,$46,$FF,$6F,$46,$67,$84,$46,$69,$A4,$46,$6B
>01c7d2		c4 45 5d e4 45 5f 04 46 61 24 46 63 44 46 ff 6f
>01c7e2		46 67 84 46 69 a4 46 6b
>01c7ea		c4 46 6d e4 46 6f 04 47		.text $C4,$46,$6D,$E4,$46,$6F,$04,$47,$71,$24,$47,$73,$44,$47,$75,$64,$47,$77,$84,$47,$79,$A4,$47,$7B,$C4,$47,$7D,$E4,$47,$7F,$04,$48
>01c7f2		71 24 47 73 44 47 75 64 47 77 84 47 79 a4 47 7b
>01c802		c4 47 7d e4 47 7f 04 48
>01c80a		81 24 48 83 44 48 85 64		.text $81,$24,$48,$83,$44,$48,$85,$64,$48,$87,$84,$48,$89,$A4,$48,$8B,$C4,$48,$8D,$E4,$48,$8F,$04,$49,$91,$24,$49,$93,$44,$49,$95,$64
>01c812		48 87 84 48 89 a4 48 8b c4 48 8d e4 48 8f 04 49
>01c822		91 24 49 93 44 49 95 64
>01c82a		49 ff 8f 49 99 a4 49 9b		.text $49,$FF,$8F,$49,$99,$A4,$49,$9B,$C4,$49,$9D,$E4,$49,$9F,$04,$4A,$A1,$24,$4A,$A3,$44,$4A,$FF,$6F,$4A,$A7,$84,$4A,$A9,$A4,$4A,$AB
>01c832		c4 49 9d e4 49 9f 04 4a a1 24 4a a3 44 4a ff 6f
>01c842		4a a7 84 4a a9 a4 4a ab
>01c84a		c4 4a ad e4 4a af 04 4b		.text $C4,$4A,$AD,$E4,$4A,$AF,$04,$4B,$B1,$24,$4B,$B3,$44,$4B,$B5,$64,$4B,$B7,$84,$4B,$B9,$A4,$4B,$BB,$C4,$4B,$BD,$E4,$4B,$BF,$04,$4C
>01c852		b1 24 4b b3 44 4b b5 64 4b b7 84 4b b9 a4 4b bb
>01c862		c4 4b bd e4 4b bf 04 4c
>01c86a		c1 24 4c c3 44 4c c5 64		.text $C1,$24,$4C,$C3,$44,$4C,$C5,$64,$4C,$C7,$84,$4C,$C9,$A4,$4C,$CB,$C4,$4C,$CD,$E4,$4C,$CF,$04,$4D,$D1,$24,$4D,$D3,$44,$4D,$D5,$64
>01c872		4c c7 84 4c c9 a4 4c cb c4 4c cd e4 4c cf 04 4d
>01c882		d1 24 4d d3 44 4d d5 64
>01c88a		4d d7 84 4d d9 a4 4d db		.text $4D,$D7,$84,$4D,$D9,$A4,$4D,$DB,$C4,$4D,$DD,$E4,$4D,$DF,$04,$4E,$E1,$24,$4E,$E3,$44,$4E,$E5,$64,$4E,$E7,$84,$4E,$E9,$A4,$4E,$EB
>01c892		c4 4d dd e4 4d df 04 4e e1 24 4e e3 44 4e e5 64
>01c8a2		4e e7 84 4e e9 a4 4e eb
>01c8aa		c4 4e ed e4 4e ef 04 4f		.text $C4,$4E,$ED,$E4,$4E,$EF,$04,$4F,$F1,$24,$4F,$F3,$44,$4F,$F5,$64,$4F,$F7,$84,$4F,$F9,$A4,$4F,$FB,$C4,$4F,$FD,$E4,$4F,$FF,$04,$50
>01c8b2		f1 24 4f f3 44 4f f5 64 4f f7 84 4f f9 a4 4f fb
>01c8c2		c4 4f fd e4 4f ff 04 50
>01c8ca		01 25 50 03 45 50 05 65		.text $01,$25,$50,$03,$45,$50,$05,$65,$50,$07,$85,$50,$09,$A5,$50,$0B,$C5,$50,$0D,$E5,$50,$0F,$05,$51,$11,$25,$51,$13,$45,$51,$15,$65
>01c8d2		50 07 85 50 09 a5 50 0b c5 50 0d e5 50 0f 05 51
>01c8e2		11 25 51 13 45 51 15 65
>01c8ea		51 17 85 51 19 a5 51 1b		.text $51,$17,$85,$51,$19,$A5,$51,$1B,$C5,$51,$1D,$E5,$51,$1F,$05,$52,$21,$25,$52,$23,$45,$52,$25,$65,$52,$27,$85,$52,$29,$A5,$52,$2B
>01c8f2		c5 51 1d e5 51 1f 05 52 21 25 52 23 45 52 25 65
>01c902		52 27 85 52 29 a5 52 2b
>01c90a		c5 52 2d e5 52 2f 05 53		.text $C5,$52,$2D,$E5,$52,$2F,$05,$53,$31,$25,$53,$33,$45,$53,$35,$65,$53,$37,$85,$53,$39,$A5,$53,$3B,$C5,$53,$3D,$E5,$53,$3F,$05,$54
>01c912		31 25 53 33 45 53 35 65 53 37 85 53 39 a5 53 3b
>01c922		c5 53 3d e5 53 3f 05 54
>01c92a		41 25 54 43 45 54 45 65		.text $41,$25,$54,$43,$45,$54,$45,$65,$54,$47,$85,$54,$49,$A5,$54,$4B,$C5,$54,$4D,$E5,$54,$4F,$05,$55,$51,$25,$55,$53,$45,$55,$55,$65
>01c932		54 47 85 54 49 a5 54 4b c5 54 4d e5 54 4f 05 55
>01c942		51 25 55 53 45 55 55 65
>01c94a		55 57 85 55 59 a5 55 5b		.text $55,$57,$85,$55,$59,$A5,$55,$5B,$C5,$55,$5D,$E5,$55,$5F,$05,$56,$61,$25,$56,$63,$45,$56,$65,$65,$56,$67,$85,$56,$69,$A5,$56,$6B
>01c952		c5 55 5d e5 55 5f 05 56 61 25 56 63 45 56 65 65
>01c962		56 67 85 56 69 a5 56 6b
>01c96a		c5 56 6d e5 56 6f 05 57		.text $C5,$56,$6D,$E5,$56,$6F,$05,$57,$71,$25,$57,$73,$45,$57,$75,$65,$57,$77,$85,$57,$79,$A5,$57,$7B,$C5,$57,$7D,$E5,$57,$7F,$05,$58
>01c972		71 25 57 73 45 57 75 65 57 77 85 57 79 a5 57 7b
>01c982		c5 57 7d e5 57 7f 05 58
>01c98a		81 25 58 83 45 58 85 65		.text $81,$25,$58,$83,$45,$58,$85,$65,$58,$87,$85,$58,$89,$A5,$58,$8B,$C5,$58,$8D,$E5,$58,$8F,$05,$59,$91,$25,$59,$93,$45,$59,$95,$65
>01c992		58 87 85 58 89 a5 58 8b c5 58 8d e5 58 8f 05 59
>01c9a2		91 25 59 93 45 59 95 65
>01c9aa		59 97 85 59 99 a5 59 9b		.text $59,$97,$85,$59,$99,$A5,$59,$9B,$C5,$59,$9D,$E5,$59,$9F,$05,$5A,$A1,$25,$5A,$A3,$45,$5A,$A5,$65,$5A,$A7,$85,$5A,$A9,$A5,$5A,$AB
>01c9b2		c5 59 9d e5 59 9f 05 5a a1 25 5a a3 45 5a a5 65
>01c9c2		5a a7 85 5a a9 a5 5a ab
>01c9ca		c5 5a ad e5 5a af 05 5b		.text $C5,$5A,$AD,$E5,$5A,$AF,$05,$5B,$B1,$25,$5B,$B3,$45,$5B,$B5,$65,$5B,$B7,$85,$5B,$B9,$A5,$5B,$BB,$C5,$5B,$BD,$E5,$5B,$BF,$05,$5C
>01c9d2		b1 25 5b b3 45 5b b5 65 5b b7 85 5b b9 a5 5b bb
>01c9e2		c5 5b bd e5 5b bf 05 5c
>01c9ea		c1 25 5c c3 45 5c c5 65		.text $C1,$25,$5C,$C3,$45,$5C,$C5,$65,$5C,$C7,$85,$5C,$C9,$A5,$5C,$CB,$C5,$5C,$CD,$E5,$5C,$CF,$05,$5D,$D1,$25,$5D,$D3,$45,$5D,$D5,$65
>01c9f2		5c c7 85 5c c9 a5 5c cb c5 5c cd e5 5c cf 05 5d
>01ca02		d1 25 5d d3 45 5d d5 65
>01ca0a		5d d7 85 5d d9 a5 5d db		.text $5D,$D7,$85,$5D,$D9,$A5,$5D,$DB,$C5,$5D,$DD,$E5,$5D,$DF,$05,$5E,$E1,$25,$5E,$E3,$45,$5E,$E5,$65,$5E,$E7,$85,$5E,$E9,$A5,$5E,$EB
>01ca12		c5 5d dd e5 5d df 05 5e e1 25 5e e3 45 5e e5 65
>01ca22		5e e7 85 5e e9 a5 5e eb
>01ca2a		c5 5e ed e5 5e ef 05 5f		.text $C5,$5E,$ED,$E5,$5E,$EF,$05,$5F,$F1,$25,$5F,$F3,$45,$5F,$F5,$65,$5F,$F7,$85,$5F,$F9,$A5,$5F,$FB,$C5,$5F,$FD,$E5,$5F,$FF,$05,$60
>01ca32		f1 25 5f f3 45 5f f5 65 5f f7 85 5f f9 a5 5f fb
>01ca42		c5 5f fd e5 5f ff 05 60
>01ca4a		01 26 60 03 46 60 05 66		.text $01,$26,$60,$03,$46,$60,$05,$66,$60,$07,$86,$60,$09,$A6,$60,$0B,$C6,$60,$0D,$E6,$60,$0F,$06,$61,$11,$26,$61,$13,$46,$61,$15,$66
>01ca52		60 07 86 60 09 a6 60 0b c6 60 0d e6 60 0f 06 61
>01ca62		11 26 61 13 46 61 15 66
>01ca6a		61 17 86 61 19 a6 61 1b		.text $61,$17,$86,$61,$19,$A6,$61,$1B,$C6,$61,$1D,$E6,$61,$1F,$06,$62,$FF,$2F,$62,$23,$46,$62,$25,$66,$62,$27,$86,$62,$29,$A6,$62,$2B
>01ca72		c6 61 1d e6 61 1f 06 62 ff 2f 62 23 46 62 25 66
>01ca82		62 27 86 62 29 a6 62 2b
>01ca8a		c6 62 2d e6 62 2f 06 63		.text $C6,$62,$2D,$E6,$62,$2F,$06,$63,$31,$26,$63,$33,$46,$63,$35,$66,$63,$37,$86,$63,$39,$A6,$63,$3B,$C6,$63,$3D,$E6,$63,$3F,$06,$64
>01ca92		31 26 63 33 46 63 35 66 63 37 86 63 39 a6 63 3b
>01caa2		c6 63 3d e6 63 3f 06 64
>01caaa		41 26 64 43 46 64 45 66		.text $41,$26,$64,$43,$46,$64,$45,$66,$64,$47,$86,$64,$49,$A6,$64,$4B,$C6,$64,$4D,$E6,$64,$4F,$06,$65,$51,$26,$65,$53,$46,$65,$55,$66
>01cab2		64 47 86 64 49 a6 64 4b c6 64 4d e6 64 4f 06 65
>01cac2		51 26 65 53 46 65 55 66
>01caca		65 57 86 65 59 a6 65 5b		.text $65,$57,$86,$65,$59,$A6,$65,$5B,$C6,$65,$5D,$E6,$65,$5F,$06,$66,$61,$26,$66,$63,$46,$66,$65,$66,$66,$67,$86,$66,$69,$A6,$66,$6B
>01cad2		c6 65 5d e6 65 5f 06 66 61 26 66 63 46 66 65 66
>01cae2		66 67 86 66 69 a6 66 6b
>01caea		c6 66 6d e6 66 6f 06 67		.text $C6,$66,$6D,$E6,$66,$6F,$06,$67,$71,$26,$67,$73,$46,$67,$75,$66,$67,$77,$86,$67,$79,$A6,$67,$7B,$C6,$67,$7D,$E6,$67,$7F,$06,$68
>01caf2		71 26 67 73 46 67 75 66 67 77 86 67 79 a6 67 7b
>01cb02		c6 67 7d e6 67 7f 06 68
>01cb0a		81 26 68 83 46 68 85 66		.text $81,$26,$68,$83,$46,$68,$85,$66,$68,$87,$86,$68,$89,$A6,$68,$8B,$C6,$68,$8D,$E6,$68,$8F,$06,$69,$91,$26,$69,$93,$46,$69,$95,$66
>01cb12		68 87 86 68 89 a6 68 8b c6 68 8d e6 68 8f 06 69
>01cb22		91 26 69 93 46 69 95 66
>01cb2a		69 97 86 69 99 a6 69 9b		.text $69,$97,$86,$69,$99,$A6,$69,$9B,$C6,$69,$9D,$E6,$69,$9F,$06,$6A,$A1,$26,$6A,$A3,$46,$6A,$A5,$66,$6A,$A7,$86,$6A,$A9,$A6,$6A,$AB
>01cb32		c6 69 9d e6 69 9f 06 6a a1 26 6a a3 46 6a a5 66
>01cb42		6a a7 86 6a a9 a6 6a ab
>01cb4a		c6 6a ad e6 6a af 06 6b		.text $C6,$6A,$AD,$E6,$6A,$AF,$06,$6B,$B1,$26,$6B,$B3,$46,$6B,$B5,$66,$6B,$B7,$86,$6B,$B9,$A6,$6B,$BB,$C6,$6B,$BD,$E6,$6B,$BF,$06,$6C
>01cb52		b1 26 6b b3 46 6b b5 66 6b b7 86 6b b9 a6 6b bb
>01cb62		c6 6b bd e6 6b bf 06 6c
>01cb6a		c1 26 6c c3 46 6c c5 66		.text $C1,$26,$6C,$C3,$46,$6C,$C5,$66,$6C,$C7,$86,$6C,$C9,$A6,$6C,$CB,$C6,$6C,$CD,$E6,$6C,$CF,$06,$6D,$D1,$26,$6D,$D3,$46,$6D,$D5,$66
>01cb72		6c c7 86 6c c9 a6 6c cb c6 6c cd e6 6c cf 06 6d
>01cb82		d1 26 6d d3 46 6d d5 66
>01cb8a		6d d7 86 6d d9 a6 6d db		.text $6D,$D7,$86,$6D,$D9,$A6,$6D,$DB,$C6,$6D,$DD,$E6,$6D,$DF,$06,$6E,$E1,$26,$6E,$E3,$46,$6E,$E5,$66,$6E,$E7,$86,$6E,$E9,$A6,$6E,$EB
>01cb92		c6 6d dd e6 6d df 06 6e e1 26 6e e3 46 6e e5 66
>01cba2		6e e7 86 6e e9 a6 6e eb
>01cbaa		c6 6e ed e6 6e ef 06 6f		.text $C6,$6E,$ED,$E6,$6E,$EF,$06,$6F,$F1,$26,$6F,$F3,$46,$6F,$F5,$66,$6F,$F7,$86,$6F,$F9,$A6,$6F,$FB,$C6,$6F,$FD,$E6,$6F,$FF,$06,$70
>01cbb2		f1 26 6f f3 46 6f f5 66 6f f7 86 6f f9 a6 6f fb
>01cbc2		c6 6f fd e6 6f ff 06 70
>01cbca		01 27 70 03 47 70 05 67		.text $01,$27,$70,$03,$47,$70,$05,$67,$70,$07,$87,$70,$09,$A7,$70,$0B,$C7,$70,$0D,$E7,$70,$0F,$07,$71,$11,$27,$71,$13,$F7,$FF,$15,$67
>01cbd2		70 07 87 70 09 a7 70 0b c7 70 0d e7 70 0f 07 71
>01cbe2		11 27 71 13 f7 ff 15 67
>01cbea		71 17 87 71 19 a7 71 1b		.text $71,$17,$87,$71,$19,$A7,$71,$1B,$C7,$71,$1D,$E7,$71,$1F,$07,$72,$21,$27,$72,$23,$47,$72,$25,$67,$72,$27,$87,$72,$29,$A7,$72,$2B
>01cbf2		c7 71 1d e7 71 1f 07 72 21 27 72 23 47 72 25 67
>01cc02		72 27 87 72 29 a7 72 2b
>01cc0a		c7 72 2d e7 72 2f 07 73		.text $C7,$72,$2D,$E7,$72,$2F,$07,$73,$31,$27,$73,$33,$47,$73,$35,$67,$73,$37,$87,$73,$39,$A7,$73,$3B,$C7,$73,$3D,$E7,$73,$3F,$07,$74
>01cc12		31 27 73 33 47 73 35 67 73 37 87 73 39 a7 73 3b
>01cc22		c7 73 3d e7 73 3f 07 74
>01cc2a		41 27 74 43 47 74 45 67		.text $41,$27,$74,$43,$47,$74,$45,$67,$74,$47,$87,$74,$49,$A7,$74,$4B,$C7,$74,$4D,$E7,$74,$4F,$07,$75,$51,$27,$75,$53,$47,$75,$55,$67
>01cc32		74 47 87 74 49 a7 74 4b c7 74 4d e7 74 4f 07 75
>01cc42		51 27 75 53 47 75 55 67
>01cc4a		75 57 87 75 59 a7 75 5b		.text $75,$57,$87,$75,$59,$A7,$75,$5B,$C7,$75,$5D,$E7,$75,$5F,$07,$76,$61,$27,$76,$63,$47,$76,$65,$67,$76,$67,$87,$76,$69,$A7,$76,$6B
>01cc52		c7 75 5d e7 75 5f 07 76 61 27 76 63 47 76 65 67
>01cc62		76 67 87 76 69 a7 76 6b
>01cc6a		c7 76 6d e7 76 6f 07 77		.text $C7,$76,$6D,$E7,$76,$6F,$07,$77,$71,$27,$77,$73,$47,$77,$75,$67,$77,$77,$87,$77,$79,$A7,$77,$7B,$C7,$77,$7D,$E7,$77,$7F,$07,$78
>01cc72		71 27 77 73 47 77 75 67 77 77 87 77 79 a7 77 7b
>01cc82		c7 77 7d e7 77 7f 07 78
>01cc8a		81 27 78 83 47 78 85 67		.text $81,$27,$78,$83,$47,$78,$85,$67,$78,$87,$87,$78,$89,$A7,$78,$8B,$C7,$78,$8D,$E7,$78,$8F,$07,$79,$91,$27,$79,$93,$47,$79,$95,$67
>01cc92		78 87 87 78 89 a7 78 8b c7 78 8d e7 78 8f 07 79
>01cca2		91 27 79 93 47 79 95 67
>01ccaa		79 97 87 79 99 a7 79 9b		.text $79,$97,$87,$79,$99,$A7,$79,$9B,$C7,$79,$9D,$E7,$79,$9F,$07,$7A,$A1,$27,$7A,$A3,$47,$7A,$A5,$67,$7A,$A7,$87,$7A,$A9,$A7,$7A,$AB
>01ccb2		c7 79 9d e7 79 9f 07 7a a1 27 7a a3 47 7a a5 67
>01ccc2		7a a7 87 7a a9 a7 7a ab
>01ccca		c7 7a ad e7 7a af 07 7b		.text $C7,$7A,$AD,$E7,$7A,$AF,$07,$7B,$B1,$27,$7B,$B3,$47,$7B,$B5,$67,$7B,$B7,$87,$7B,$B9,$A7,$7B,$BB,$C7,$7B,$BD,$E7,$7B,$BF,$07,$7C
>01ccd2		b1 27 7b b3 47 7b b5 67 7b b7 87 7b b9 a7 7b bb
>01cce2		c7 7b bd e7 7b bf 07 7c
>01ccea		c1 27 7c c3 47 7c c5 67		.text $C1,$27,$7C,$C3,$47,$7C,$C5,$67,$7C,$C7,$87,$7C,$C9,$A7,$7C,$CB,$C7,$7C,$CD,$E7,$7C,$CF,$07,$7D,$D1,$27,$7D,$D3,$47,$7D,$D5,$67
>01ccf2		7c c7 87 7c c9 a7 7c cb c7 7c cd e7 7c cf 07 7d
>01cd02		d1 27 7d d3 47 7d d5 67
>01cd0a		7d d7 87 7d d9 a7 7d db		.text $7D,$D7,$87,$7D,$D9,$A7,$7D,$DB,$C7,$7D,$DD,$E7,$7D,$DF,$07,$7E,$E1,$27,$7E,$E3,$47,$7E,$E5,$67,$7E,$E7,$87,$7E,$E9,$A7,$7E,$EB
>01cd12		c7 7d dd e7 7d df 07 7e e1 27 7e e3 47 7e e5 67
>01cd22		7e e7 87 7e e9 a7 7e eb
>01cd2a		c7 7e ed f7 ff ef 07 7f		.text $C7,$7E,$ED,$F7,$FF,$EF,$07,$7F,$F1,$27,$7F,$F3,$47,$7F,$F5,$67,$7F,$F7,$87,$7F,$F9,$A7,$7F,$FB,$C7,$7F,$FD,$E7,$7F,$FF,$07,$80
>01cd32		f1 27 7f f3 47 7f f5 67 7f f7 87 7f f9 a7 7f fb
>01cd42		c7 7f fd e7 7f ff 07 80
>01cd4a		01 28 80 03 48 80 05 68		.text $01,$28,$80,$03,$48,$80,$05,$68,$80,$07,$88,$80,$09,$A8,$80,$0B,$C8,$80,$0D,$E8,$80,$0F,$08,$81,$11,$28,$81,$13,$48,$81,$15,$68
>01cd52		80 07 88 80 09 a8 80 0b c8 80 0d e8 80 0f 08 81
>01cd62		11 28 81 13 48 81 15 68
>01cd6a		81 17 88 81 19 a8 81 1b		.text $81,$17,$88,$81,$19,$A8,$81,$1B,$C8,$81,$1D,$E8,$81,$1F,$08,$82,$21,$28,$82,$23,$48,$82,$25,$68,$82,$27,$88,$82,$29,$A8,$82,$2B
>01cd72		c8 81 1d e8 81 1f 08 82 21 28 82 23 48 82 25 68
>01cd82		82 27 88 82 29 a8 82 2b
>01cd8a		c8 82 2d e8 82 2f 08 83		.text $C8,$82,$2D,$E8,$82,$2F,$08,$83,$31,$28,$83,$33,$48,$83,$35,$68,$83,$37,$88,$83,$39,$A8,$83,$3B,$C8,$83,$3D,$E8,$83,$3F,$08,$84
>01cd92		31 28 83 33 48 83 35 68 83 37 88 83 39 a8 83 3b
>01cda2		c8 83 3d e8 83 3f 08 84
>01cdaa		41 28 84 43 48 84 45 68		.text $41,$28,$84,$43,$48,$84,$45,$68,$84,$47,$88,$84,$49,$A8,$84,$4B,$C8,$84,$4D,$E8,$84,$4F,$08,$85,$51,$28,$85,$53,$48,$85,$55,$68
>01cdb2		84 47 88 84 49 a8 84 4b c8 84 4d e8 84 4f 08 85
>01cdc2		51 28 85 53 48 85 55 68
>01cdca		85 57 88 85 59 a8 85 5b		.text $85,$57,$88,$85,$59,$A8,$85,$5B,$C8,$85,$5D,$E8,$85,$5F,$08,$86,$61,$28,$86,$63,$48,$86,$65,$68,$86,$67,$88,$86,$69,$A8,$86,$6B
>01cdd2		c8 85 5d e8 85 5f 08 86 61 28 86 63 48 86 65 68
>01cde2		86 67 88 86 69 a8 86 6b
>01cdea		c8 86 6d e8 86 6f 08 87		.text $C8,$86,$6D,$E8,$86,$6F,$08,$87,$71,$28,$87,$73,$48,$87,$75,$68,$87,$77,$88,$87,$79,$A8,$87,$7B,$C8,$87,$7D,$E8,$87,$7F,$08,$88
>01cdf2		71 28 87 73 48 87 75 68 87 77 88 87 79 a8 87 7b
>01ce02		c8 87 7d e8 87 7f 08 88
>01ce0a		81 28 88 83 48 88 85 68		.text $81,$28,$88,$83,$48,$88,$85,$68,$88,$87,$88,$88,$89,$A8,$88,$8B,$C8,$88,$8D,$E8,$88,$8F,$08,$89,$91,$28,$89,$93,$48,$89,$95,$68
>01ce12		88 87 88 88 89 a8 88 8b c8 88 8d e8 88 8f 08 89
>01ce22		91 28 89 93 48 89 95 68
>01ce2a		89 97 88 89 99 f8 ff 9b		.text $89,$97,$88,$89,$99,$F8,$FF,$9B,$C8,$89,$9D,$E8,$89,$9F,$08,$8A,$A1,$28,$8A,$A3,$48,$8A,$A5,$68,$8A,$A7,$88,$8A,$A9,$A8,$8A,$AB
>01ce32		c8 89 9d e8 89 9f 08 8a a1 28 8a a3 48 8a a5 68
>01ce42		8a a7 88 8a a9 a8 8a ab
>01ce4a		c8 8a ad e8 8a af 08 8b		.text $C8,$8A,$AD,$E8,$8A,$AF,$08,$8B,$FF,$2F,$8B,$B3,$48,$8B,$B5,$68,$8B,$B7,$88,$8B,$B9,$A8,$8B,$BB,$C8,$8B,$BD,$E8,$8B,$BF,$08,$8C
>01ce52		ff 2f 8b b3 48 8b b5 68 8b b7 88 8b b9 a8 8b bb
>01ce62		c8 8b bd e8 8b bf 08 8c
>01ce6a		c1 28 8c c3 48 8c c5 68		.text $C1,$28,$8C,$C3,$48,$8C,$C5,$68,$8C,$C7,$88,$8C,$C9,$A8,$8C,$CB,$C8,$8C,$CD,$E8,$8C,$CF,$08,$8D,$D1,$28,$8D,$D3,$48,$8D,$D5,$68
>01ce72		8c c7 88 8c c9 a8 8c cb c8 8c cd e8 8c cf 08 8d
>01ce82		d1 28 8d d3 48 8d d5 68
>01ce8a		8d d7 88 8d d9 a8 8d db		.text $8D,$D7,$88,$8D,$D9,$A8,$8D,$DB,$C8,$8D,$DD,$E8,$8D,$DF,$08,$8E,$E1,$28,$8E,$E3,$48,$8E,$E5,$68,$8E,$E7,$88,$8E,$E9,$A8,$8E,$EB
>01ce92		c8 8d dd e8 8d df 08 8e e1 28 8e e3 48 8e e5 68
>01cea2		8e e7 88 8e e9 a8 8e eb
>01ceaa		c8 8e ed e8 8e ef 08 8f		.text $C8,$8E,$ED,$E8,$8E,$EF,$08,$8F,$F1,$28,$8F,$F3,$48,$8F,$F5,$68,$8F,$F7,$88,$8F,$F9,$A8,$8F,$FB,$C8,$8F,$FD,$E8,$8F,$FF,$08,$90
>01ceb2		f1 28 8f f3 48 8f f5 68 8f f7 88 8f f9 a8 8f fb
>01cec2		c8 8f fd e8 8f ff 08 90
>01ceca		01 29 90 03 49 90 05 69		.text $01,$29,$90,$03,$49,$90,$05,$69,$90,$07,$89,$90,$09,$A9,$90,$0B,$C9,$90,$0D,$E9,$90,$0F,$09,$91,$11,$29,$91,$FF,$4F,$91,$15,$69
>01ced2		90 07 89 90 09 a9 90 0b c9 90 0d e9 90 0f 09 91
>01cee2		11 29 91 ff 4f 91 15 69
>01ceea		91 17 89 91 19 a9 91 1b		.text $91,$17,$89,$91,$19,$A9,$91,$1B,$C9,$91,$1D,$E9,$91,$1F,$09,$92,$21,$29,$92,$23,$49,$92,$25,$69,$92,$27,$89,$92,$29,$A9,$92,$2B
>01cef2		c9 91 1d e9 91 1f 09 92 21 29 92 23 49 92 25 69
>01cf02		92 27 89 92 29 a9 92 2b
>01cf0a		c9 92 2d e9 92 2f 09 93		.text $C9,$92,$2D,$E9,$92,$2F,$09,$93,$31,$29,$93,$33,$49,$93,$35,$69,$93,$37,$89,$93,$39,$F9,$FF,$3B,$C9,$93,$3D,$E9,$93,$3F,$09,$94
>01cf12		31 29 93 33 49 93 35 69 93 37 89 93 39 f9 ff 3b
>01cf22		c9 93 3d e9 93 3f 09 94
>01cf2a		41 29 94 43 49 94 45 69		.text $41,$29,$94,$43,$49,$94,$45,$69,$94,$47,$89,$94,$49,$A9,$94,$4B,$C9,$94,$4D,$E9,$94,$4F,$F9,$FF,$51,$29,$95,$53,$49,$95,$55,$69
>01cf32		94 47 89 94 49 a9 94 4b c9 94 4d e9 94 4f f9 ff
>01cf42		51 29 95 53 49 95 55 69
>01cf4a		95 57 89 95 ff af 95 5b		.text $95,$57,$89,$95,$FF,$AF,$95,$5B,$C9,$95,$5D,$F9,$FF,$5F,$09,$96,$61,$29,$96,$63,$49,$96,$65,$69,$96,$67,$89,$96,$69,$A9,$96,$6B
>01cf52		c9 95 5d f9 ff 5f 09 96 61 29 96 63 49 96 65 69
>01cf62		96 67 89 96 69 a9 96 6b
>01cf6a		c9 96 6d e9 96 6f 09 97		.text $C9,$96,$6D,$E9,$96,$6F,$09,$97,$71,$29,$97,$73,$49,$97,$75,$69,$97,$77,$89,$97,$79,$A9,$97,$FF,$CF,$97,$7D,$E9,$97,$7F,$09,$98
>01cf72		71 29 97 73 49 97 75 69 97 77 89 97 79 a9 97 ff
>01cf82		cf 97 7d e9 97 7f 09 98
>01cf8a		81 29 98 83 49 98 85 69		.text $81,$29,$98,$83,$49,$98,$85,$69,$98,$87,$89,$98,$FF,$AF,$98,$8B,$C9,$98,$8D,$E9,$98,$8F,$09,$99,$91,$29,$99,$93,$49,$99,$95,$69
>01cf92		98 87 89 98 ff af 98 8b c9 98 8d e9 98 8f 09 99
>01cfa2		91 29 99 93 49 99 95 69
>01cfaa		99 ff 8f 99 99 a9 99 ff		.text $99,$FF,$8F,$99,$99,$A9,$99,$FF,$FF,$FF,$9D,$E9,$99,$9F,$09,$9A,$A1,$29,$9A,$A3,$49,$9A,$A5,$69,$9A,$A7,$89,$9A,$A9,$A9,$9A,$AB
>01cfb2		ff ff 9d e9 99 9f 09 9a a1 29 9a a3 49 9a a5 69
>01cfc2		9a a7 89 9a a9 a9 9a ab
>01cfca		c9 9a ad e9 9a af 09 9b		.text $C9,$9A,$AD,$E9,$9A,$AF,$09,$9B,$B1,$29,$9B,$B3,$49,$9B,$B5,$69,$9B,$B7,$89,$9B,$B9,$A9,$9B,$BB,$C9,$9B,$BD,$E9,$9B,$BF,$09,$9C
>01cfd2		b1 29 9b b3 49 9b b5 69 9b b7 89 9b b9 a9 9b bb
>01cfe2		c9 9b bd e9 9b bf 09 9c
>01cfea		c1 29 9c c3 49 9c c5 69		.text $C1,$29,$9C,$C3,$49,$9C,$C5,$69,$9C,$C7,$89,$9C,$C9,$A9,$9C,$CB,$C9,$9C,$CD,$E9,$9C,$CF,$09,$9D,$FF,$2F,$9D,$D3,$49,$9D,$D5,$69
>01cff2		9c c7 89 9c c9 a9 9c cb c9 9c cd e9 9c cf 09 9d
>01d002		ff 2f 9d d3 49 9d d5 69
>01d00a		9d d7 89 9d d9 a9 9d db		.text $9D,$D7,$89,$9D,$D9,$A9,$9D,$DB,$C9,$9D,$DD,$E9,$9D,$DF,$09,$9E,$E1,$29,$9E,$E3,$49,$9E,$E5,$69,$9E,$E7,$89,$9E,$E9,$A9,$9E,$EB
>01d012		c9 9d dd e9 9d df 09 9e e1 29 9e e3 49 9e e5 69
>01d022		9e e7 89 9e e9 a9 9e eb
>01d02a		c9 9e ed e9 9e ef 09 9f		.text $C9,$9E,$ED,$E9,$9E,$EF,$09,$9F,$F1,$29,$9F,$F3,$49,$9F,$F5,$69,$9F,$F7,$89,$9F,$F9,$A9,$9F,$FB,$C9,$9F,$FD,$E9,$9F,$FF,$09,$A0
>01d032		f1 29 9f f3 49 9f f5 69 9f f7 89 9f f9 a9 9f fb
>01d042		c9 9f fd e9 9f ff 09 a0
>01d04a		01 2a a0 03 4a a0 05 6a		.text $01,$2A,$A0,$03,$4A,$A0,$05,$6A,$A0,$07,$8A,$A0,$09,$AA,$A0,$0B,$CA,$A0,$0D,$EA,$A0,$0F,$0A,$A1,$11,$2A,$A1,$13,$4A,$A1,$FF,$6F
>01d052		a0 07 8a a0 09 aa a0 0b ca a0 0d ea a0 0f 0a a1
>01d062		11 2a a1 13 4a a1 ff 6f
>01d06a		a1 17 8a a1 19 aa a1 1b		.text $A1,$17,$8A,$A1,$19,$AA,$A1,$1B,$CA,$A1,$1D,$EA,$A1,$1F,$0A,$A2,$21,$2A,$A2,$23,$4A,$A2,$25,$6A,$A2,$27,$8A,$A2,$29,$AA,$A2,$2B
>01d072		ca a1 1d ea a1 1f 0a a2 21 2a a2 23 4a a2 25 6a
>01d082		a2 27 8a a2 29 aa a2 2b
>01d08a		fa ff 2d ea a2 2f 0a a3		.text $FA,$FF,$2D,$EA,$A2,$2F,$0A,$A3,$31,$2A,$A3,$33,$4A,$A3,$35,$6A,$A3,$37,$8A,$A3,$39,$AA,$A3,$3B,$CA,$A3,$3D,$EA,$A3,$3F,$0A,$A4
>01d092		31 2a a3 33 4a a3 35 6a a3 37 8a a3 39 aa a3 3b
>01d0a2		ca a3 3d ea a3 3f 0a a4
>01d0aa		41 2a a4 43 4a a4 45 6a		.text $41,$2A,$A4,$43,$4A,$A4,$45,$6A,$A4,$47,$8A,$A4,$49,$AA,$A4,$4B,$CA,$A4,$4D,$EA,$A4,$4F,$0A,$A5,$51,$2A,$A5,$FF,$4F,$A5,$55,$6A
>01d0b2		a4 47 8a a4 49 aa a4 4b ca a4 4d ea a4 4f 0a a5
>01d0c2		51 2a a5 ff 4f a5 55 6a
>01d0ca		a5 57 8a a5 59 aa a5 5b		.text $A5,$57,$8A,$A5,$59,$AA,$A5,$5B,$CA,$A5,$5D,$EA,$A5,$5F,$FA,$FF,$61,$2A,$A6,$63,$4A,$A6,$65,$6A,$A6,$67,$8A,$A6,$69,$AA,$A6,$6B
>01d0d2		ca a5 5d ea a5 5f fa ff 61 2a a6 63 4a a6 65 6a
>01d0e2		a6 67 8a a6 69 aa a6 6b
>01d0ea		ca a6 6d ea a6 6f 0a a7		.text $CA,$A6,$6D,$EA,$A6,$6F,$0A,$A7,$71,$2A,$A7,$73,$4A,$A7,$75,$6A,$A7,$77,$8A,$A7,$79,$AA,$A7,$7B,$CA,$A7,$7D,$EA,$A7,$7F,$0A,$A8
>01d0f2		71 2a a7 73 4a a7 75 6a a7 77 8a a7 79 aa a7 7b
>01d102		ca a7 7d ea a7 7f 0a a8
>01d10a		81 2a a8 83 4a a8 85 6a		.text $81,$2A,$A8,$83,$4A,$A8,$85,$6A,$A8,$87,$8A,$A8,$89,$AA,$A8,$8B,$CA,$A8,$8D,$EA,$A8,$8F,$0A,$A9,$91,$2A,$A9,$93,$4A,$A9,$95,$6A
>01d112		a8 87 8a a8 89 aa a8 8b ca a8 8d ea a8 8f 0a a9
>01d122		91 2a a9 93 4a a9 95 6a
>01d12a		a9 97 8a a9 99 aa a9 9b		.text $A9,$97,$8A,$A9,$99,$AA,$A9,$9B,$CA,$A9,$9D,$EA,$A9,$9F,$0A,$AA,$A1,$2A,$AA,$A3,$4A,$AA,$A5,$6A,$AA,$A7,$8A,$AA,$A9,$AA,$AA,$AB
>01d132		ca a9 9d ea a9 9f 0a aa a1 2a aa a3 4a aa a5 6a
>01d142		aa a7 8a aa a9 aa aa ab
>01d14a		ca aa ad ea aa af 0a ab		.text $CA,$AA,$AD,$EA,$AA,$AF,$0A,$AB,$B1,$2A,$AB,$B3,$4A,$AB,$B5,$6A,$AB,$B7,$8A,$AB,$B9,$AA,$AB,$BB,$CA,$AB,$BD,$EA,$AB,$BF,$0A,$AC
>01d152		b1 2a ab b3 4a ab b5 6a ab b7 8a ab b9 aa ab bb
>01d162		ca ab bd ea ab bf 0a ac
>01d16a		c1 2a ac c3 4a ac c5 6a		.text $C1,$2A,$AC,$C3,$4A,$AC,$C5,$6A,$AC,$C7,$8A,$AC,$C9,$AA,$AC,$CB,$CA,$AC,$CD,$EA,$AC,$CF,$0A,$AD,$D1,$2A,$AD,$D3,$4A,$AD,$D5,$6A
>01d172		ac c7 8a ac c9 aa ac cb ca ac cd ea ac cf 0a ad
>01d182		d1 2a ad d3 4a ad d5 6a
>01d18a		ad d7 8a ad d9 aa ad db		.text $AD,$D7,$8A,$AD,$D9,$AA,$AD,$DB,$CA,$AD,$DD,$EA,$AD,$DF,$0A,$AE,$E1,$2A,$AE,$E3,$4A,$AE,$E5,$6A,$AE,$E7,$8A,$AE,$E9,$AA,$AE,$EB
>01d192		ca ad dd ea ad df 0a ae e1 2a ae e3 4a ae e5 6a
>01d1a2		ae e7 8a ae e9 aa ae eb
>01d1aa		ca ae ed ea ae ef 0a af		.text $CA,$AE,$ED,$EA,$AE,$EF,$0A,$AF,$F1,$2A,$AF,$F3,$4A,$AF,$F5,$6A,$AF,$F7,$8A,$AF,$F9,$AA,$AF,$FB,$CA,$AF,$FD,$EA,$AF,$FF,$0A,$B0
>01d1b2		f1 2a af f3 4a af f5 6a af f7 8a af f9 aa af fb
>01d1c2		ca af fd ea af ff 0a b0
>01d1ca		01 2b b0 03 4b b0 05 6b		.text $01,$2B,$B0,$03,$4B,$B0,$05,$6B,$B0,$07,$FB,$FF,$09,$AB,$B0,$0B,$CB,$B0,$0D,$EB,$B0,$0F,$0B,$B1,$FF,$0F,$00,$00,$00,$00,$00,$00
>01d1d2		b0 07 fb ff 09 ab b0 0b cb b0 0d eb b0 0f 0b b1
>01d1e2		ff 0f 00 00 00 00 00 00
>01d1ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d1f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d202		00 00 00 00 00 00 00 00
>01d20a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d212		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d222		00 00 00 00 00 00 00 00
>01d22a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d232		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d242		00 00 00 00 00 00 00 00
>01d24a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d252		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d262		00 00 00 00 00 00 00 00
>01d26a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d272		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d282		00 00 00 00 00 00 00 00
>01d28a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d292		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d2a2		00 00 00 00 00 00 00 00
>01d2aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d2b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d2c2		00 00 00 00 00 00 00 00
>01d2ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d2d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d2e2		00 00 00 00 00 00 00 00
>01d2ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d2f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d302		00 00 00 00 00 00 00 00
>01d30a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d312		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d322		00 00 00 00 00 00 00 00
>01d32a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d332		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d342		00 00 00 00 00 00 00 00
>01d34a		49 4f 20 20 20 20 20 20		.text $49,$4F,$20,$20,$20,$20,$20,$20,$53,$59,$53,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$02,$00,$36,$9F,$00,$00
>01d352		53 59 53 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d362		a9 1c 02 00 36 9f 00 00
>01d36a		4d 53 44 4f 53 20 20 20		.text $4D,$53,$44,$4F,$53,$20,$20,$20,$53,$59,$53,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$52,$00,$FA,$94,$00,$00
>01d372		53 59 53 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d382		a9 1c 52 00 fa 94 00 00
>01d38a		43 4f 4d 4d 41 4e 44 20		.text $43,$4F,$4D,$4D,$41,$4E,$44,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$9D,$00,$60,$D5,$00,$00
>01d392		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d3a2		a9 1c 9d 00 60 d5 00 00
>01d3aa		41 55 54 4f 45 58 45 43		.text $41,$55,$54,$4F,$45,$58,$45,$43,$42,$41,$54,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$08,$01,$26,$00,$00,$00
>01d3b2		42 41 54 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d3c2		a9 1c 08 01 26 00 00 00
>01d3ca		44 42 4c 53 50 41 43 45		.text $44,$42,$4C,$53,$50,$41,$43,$45,$42,$49,$23,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$09,$01,$68,$73,$00,$00
>01d3d2		42 49 23 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d3e2		a9 1c 09 01 68 73 00 00
>01d3ea		44 52 56 53 50 41 43 45		.text $44,$52,$56,$53,$50,$41,$43,$45,$42,$49,$4E,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$43,$01,$F6,$02,$01,$00
>01d3f2		42 49 4e 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d402		a9 1c 43 01 f6 02 01 00
>01d40a		43 48 4f 49 43 45 20 20		.text $43,$48,$4F,$49,$43,$45,$20,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$C5,$01,$DA,$06,$00,$00
>01d412		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d422		a9 1c c5 01 da 06 00 00
>01d42a		45 44 49 54 20 20 20 20		.text $45,$44,$49,$54,$20,$20,$20,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$C9,$01,$9D,$01,$00,$00
>01d432		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d442		a9 1c c9 01 9d 01 00 00
>01d44a		46 4f 52 4d 41 54 20 20		.text $46,$4F,$52,$4D,$41,$54,$20,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$CA,$01,$C5,$59,$00,$00
>01d452		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d462		a9 1c ca 01 c5 59 00 00
>01d46a		4b 45 59 42 20 20 20 20		.text $4B,$45,$59,$42,$20,$20,$20,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$F7,$01,$86,$3D,$00,$00
>01d472		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d482		a9 1c f7 01 86 3d 00 00
>01d48a		53 59 53 20 20 20 20 20		.text $53,$59,$53,$20,$20,$20,$20,$20,$43,$4F,$4D,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$16,$02,$D8,$24,$00,$00
>01d492		43 4f 4d 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d4a2		a9 1c 16 02 d8 24 00 00
>01d4aa		45 47 41 20 20 20 20 20		.text $45,$47,$41,$20,$20,$20,$20,$20,$43,$50,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$29,$02,$A4,$47,$00,$00
>01d4b2		43 50 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d4c2		a9 1c 29 02 a4 47 00 00
>01d4ca		45 47 41 32 20 20 20 20		.text $45,$47,$41,$32,$20,$20,$20,$20,$43,$50,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$4D,$02,$69,$4A,$00,$00
>01d4d2		43 50 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d4e2		a9 1c 4d 02 69 4a 00 00
>01d4ea		45 47 41 33 20 20 20 20		.text $45,$47,$41,$33,$20,$20,$20,$20,$43,$50,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$73,$02,$C6,$3C,$00,$00
>01d4f2		43 50 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d502		a9 1c 73 02 c6 3c 00 00
>01d50a		41 54 54 52 49 42 20 20		.text $41,$54,$54,$52,$49,$42,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$92,$02,$C8,$2B,$00,$00
>01d512		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d522		a9 1c 92 02 c8 2b 00 00
>01d52a		42 55 53 45 54 55 50 20		.text $42,$55,$53,$45,$54,$55,$50,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$A8,$02,$1F,$20,$01,$00
>01d532		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d542		a9 1c a8 02 1f 20 01 00
>01d54a		43 48 4b 44 53 4b 20 20		.text $43,$48,$4B,$44,$53,$4B,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$39,$03,$D1,$2F,$00,$00
>01d552		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d562		a9 1c 39 03 d1 2f 00 00
>01d56a		44 45 42 55 47 20 20 20		.text $44,$45,$42,$55,$47,$20,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$51,$03,$66,$3D,$00,$00
>01d572		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d582		a9 1c 51 03 66 3d 00 00
>01d58a		44 45 46 52 41 47 20 20		.text $44,$45,$46,$52,$41,$47,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$70,$03,$D9,$34,$01,$00
>01d592		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d5a2		a9 1c 70 03 d9 34 01 00
>01d5aa		45 58 50 41 4e 44 20 20		.text $45,$58,$50,$41,$4E,$44,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$0B,$04,$01,$3F,$00,$00
>01d5b2		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d5c2		a9 1c 0b 04 01 3f 00 00
>01d5ca		46 44 49 53 4b 20 20 20		.text $46,$44,$49,$53,$4B,$20,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$2B,$04,$98,$72,$00,$00
>01d5d2		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d5e2		a9 1c 2b 04 98 72 00 00
>01d5ea		4d 53 43 44 45 58 20 20		.text $4D,$53,$43,$44,$45,$58,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$65,$04,$11,$63,$00,$00
>01d5f2		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d602		a9 1c 65 04 11 63 00 00
>01d60a		4e 4c 53 46 55 4e 43 20		.text $4E,$4C,$53,$46,$55,$4E,$43,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$97,$04,$7C,$1B,$00,$00
>01d612		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d622		a9 1c 97 04 7c 1b 00 00
>01d62a		51 42 41 53 49 43 20 20		.text $51,$42,$41,$53,$49,$43,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$A5,$04,$05,$F7,$02,$00
>01d632		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d642		a9 1c a5 04 05 f7 02 00
>01d64a		53 43 41 4e 44 49 53 4b		.text $53,$43,$41,$4E,$44,$49,$53,$4B,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$21,$06,$66,$E5,$01,$00
>01d652		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d662		a9 1c 21 06 66 e5 01 00
>01d66a		53 45 54 55 50 20 20 20		.text $53,$45,$54,$55,$50,$20,$20,$20,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$14,$07,$38,$B2,$01,$00
>01d672		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d682		a9 1c 14 07 38 b2 01 00
>01d68a		55 4e 49 4e 53 54 41 4c		.text $55,$4E,$49,$4E,$53,$54,$41,$4C,$45,$58,$45,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$EE,$07,$C7,$57,$01,$00
>01d692		45 58 45 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d6a2		a9 1c ee 07 c7 57 01 00
>01d6aa		44 45 4c 4f 4c 44 4f 53		.text $44,$45,$4C,$4F,$4C,$44,$4F,$53,$45,$58,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$9A,$08,$48,$2C,$00,$00
>01d6b2		45 58 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d6c2		a9 1c 9a 08 48 2c 00 00
>01d6ca		45 4d 4d 33 38 36 20 20		.text $45,$4D,$4D,$33,$38,$36,$20,$20,$45,$58,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$B1,$08,$8A,$C3,$00,$00
>01d6d2		45 58 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d6e2		a9 1c b1 08 8a c3 00 00
>01d6ea		4d 45 4d 20 20 20 20 20		.text $4D,$45,$4D,$20,$20,$20,$20,$20,$45,$58,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$13,$09,$38,$4C,$00,$00
>01d6f2		45 58 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d702		a9 1c 13 09 38 4c 00 00
>01d70a		58 43 4f 50 59 20 20 20		.text $58,$43,$4F,$50,$59,$20,$20,$20,$45,$58,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$3A,$09,$55,$2B,$00,$00
>01d712		45 58 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d722		a9 1c 3a 09 55 2b 00 00
>01d72a		44 45 46 52 41 47 20 20		.text $44,$45,$46,$52,$41,$47,$20,$20,$48,$4C,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$50,$09,$BC,$10,$00,$00
>01d732		48 4c 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d742		a9 1c 50 09 bc 10 00 00
>01d74a		44 4f 53 48 45 4c 50 20		.text $44,$4F,$53,$48,$45,$4C,$50,$20,$48,$4C,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$59,$09,$A0,$09,$00,$00
>01d752		48 4c 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d762		a9 1c 59 09 a0 09 00 00
>01d76a		44 4f 53 53 45 54 55 50		.text $44,$4F,$53,$53,$45,$54,$55,$50,$49,$4E,$49,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$5E,$09,$02,$39,$00,$00
>01d772		49 4e 49 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d782		a9 1c 5e 09 02 39 00 00
>01d78a		53 43 41 4e 44 49 53 4b		.text $53,$43,$41,$4E,$44,$49,$53,$4B,$49,$4E,$49,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$7B,$09,$08,$1B,$00,$00
>01d792		49 4e 49 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d7a2		a9 1c 7b 09 08 1b 00 00
>01d7aa		50 41 43 4b 49 4e 47 20		.text $50,$41,$43,$4B,$49,$4E,$47,$20,$4C,$53,$54,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$89,$09,$69,$1A,$00,$00
>01d7b2		4c 53 54 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d7c2		a9 1c 89 09 69 1a 00 00
>01d7ca		53 45 54 55 50 20 20 20		.text $53,$45,$54,$55,$50,$20,$20,$20,$4D,$53,$47,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$97,$09,$FD,$06,$00,$00
>01d7d2		4d 53 47 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d7e2		a9 1c 97 09 fd 06 00 00
>01d7ea		43 4f 4e 46 49 47 20 20		.text $43,$4F,$4E,$46,$49,$47,$20,$20,$53,$59,$53,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$9B,$09,$0D,$00,$00,$00
>01d7f2		53 59 53 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d802		a9 1c 9b 09 0d 00 00 00
>01d80a		43 4f 55 4e 54 52 59 20		.text $43,$4F,$55,$4E,$54,$52,$59,$20,$53,$59,$53,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$9C,$09,$38,$69,$00,$00
>01d812		53 59 53 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d822		a9 1c 9c 09 38 69 00 00
>01d82a		4b 45 59 42 4f 41 52 44		.text $4B,$45,$59,$42,$4F,$41,$52,$44,$53,$59,$53,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$D1,$09,$26,$87,$00,$00
>01d832		53 59 53 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d842		a9 1c d1 09 26 87 00 00
>01d84a		4b 45 59 42 52 44 32 20		.text $4B,$45,$59,$42,$52,$44,$32,$20,$53,$59,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$15,$0A,$EF,$2D,$00,$00
>01d852		53 59 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d862		a9 1c 15 0a ef 2d 00 00
>01d86a		4e 45 54 57 4f 52 4b 53		.text $4E,$45,$54,$57,$4F,$52,$4B,$53,$54,$58,$54,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$2C,$0A,$EF,$4D,$00,$00
>01d872		54 58 54 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d882		a9 1c 2c 0a ef 4d 00 00
>01d88a		4f 53 32 20 20 20 20 20		.text $4F,$53,$32,$20,$20,$20,$20,$20,$54,$58,$54,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$53,$0A,$D6,$18,$00,$00
>01d892		54 58 54 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d8a2		a9 1c 53 0a d6 18 00 00
>01d8aa		52 45 41 44 4d 45 20 20		.text $52,$45,$41,$44,$4D,$45,$20,$20,$54,$58,$54,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$60,$0A,$A4,$4F,$01,$00
>01d8b2		54 58 54 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d8c2		a9 1c 60 0a a4 4f 01 00
>01d8ca		43 4f 55 4e 54 52 59 20		.text $43,$4F,$55,$4E,$54,$52,$59,$20,$54,$58,$5F,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$32,$A9,$1C,$08,$0B,$F1,$10,$00,$00
>01d8d2		54 58 5f 20 00 00 00 00 00 00 00 00 00 00 c0 32
>01d8e2		a9 1c 08 0b f1 10 00 00
>01d8ea		44 49 53 4b 20 20 20 20		.text $44,$49,$53,$4B,$20,$20,$20,$20,$20,$20,$31,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E3,$32,$A9,$1C,$00,$00,$00,$00,$00,$00
>01d8f2		20 20 31 28 00 00 00 00 00 00 00 00 00 00 e3 32
>01d902		a9 1c 00 00 00 00 00 00
>01d90a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d912		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d922		00 00 00 00 00 00 00 00
>01d92a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d932		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d942		00 00 00 00 00 00 00 00
>01d94a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d952		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d962		00 00 00 00 00 00 00 00
>01d96a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d972		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d982		00 00 00 00 00 00 00 00
>01d98a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d992		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d9a2		00 00 00 00 00 00 00 00
>01d9aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d9b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d9c2		00 00 00 00 00 00 00 00
>01d9ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d9d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01d9e2		00 00 00 00 00 00 00 00
>01d9ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01d9f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01da02		00 00 00 00 00 00 00 00
>01da0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01da12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01da22		00 00 00 00 00 00 00 00
>01da2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01da32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01da42		00 00 00 00 00 00 00 00
>01da4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01da52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01da62		00 00 00 00 00 00 00 00
>01da6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01da72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01da82		00 00 00 00 00 00 00 00
>01da8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01da92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01daa2		00 00 00 00 00 00 00 00
>01daaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dab2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dac2		00 00 00 00 00 00 00 00
>01daca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dad2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dae2		00 00 00 00 00 00 00 00
>01daea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01daf2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01db02		00 00 00 00 00 00 00 00
>01db0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01db12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01db22		00 00 00 00 00 00 00 00
>01db2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01db32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01db42		00 00 00 00 00 00 00 00
>01db4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01db52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01db62		00 00 00 00 00 00 00 00
>01db6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01db72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01db82		00 00 00 00 00 00 00 00
>01db8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01db92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dba2		00 00 00 00 00 00 00 00
>01dbaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dbb2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dbc2		00 00 00 00 00 00 00 00
>01dbca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dbd2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dbe2		00 00 00 00 00 00 00 00
>01dbea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dbf2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dc02		00 00 00 00 00 00 00 00
>01dc0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dc12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dc22		00 00 00 00 00 00 00 00
>01dc2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dc32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dc42		00 00 00 00 00 00 00 00
>01dc4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dc52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dc62		00 00 00 00 00 00 00 00
>01dc6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dc72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dc82		00 00 00 00 00 00 00 00
>01dc8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dc92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dca2		00 00 00 00 00 00 00 00
>01dcaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dcb2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dcc2		00 00 00 00 00 00 00 00
>01dcca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dcd2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dce2		00 00 00 00 00 00 00 00
>01dcea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dcf2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dd02		00 00 00 00 00 00 00 00
>01dd0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dd12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dd22		00 00 00 00 00 00 00 00
>01dd2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dd32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dd42		00 00 00 00 00 00 00 00
>01dd4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dd52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dd62		00 00 00 00 00 00 00 00
>01dd6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dd72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dd82		00 00 00 00 00 00 00 00
>01dd8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dd92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dda2		00 00 00 00 00 00 00 00
>01ddaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ddb2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ddc2		00 00 00 00 00 00 00 00
>01ddca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ddd2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dde2		00 00 00 00 00 00 00 00
>01ddea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ddf2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01de02		00 00 00 00 00 00 00 00
>01de0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01de12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01de22		00 00 00 00 00 00 00 00
>01de2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01de32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01de42		00 00 00 00 00 00 00 00
>01de4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01de52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01de62		00 00 00 00 00 00 00 00
>01de6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01de72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01de82		00 00 00 00 00 00 00 00
>01de8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01de92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dea2		00 00 00 00 00 00 00 00
>01deaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01deb2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dec2		00 00 00 00 00 00 00 00
>01deca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ded2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dee2		00 00 00 00 00 00 00 00
>01deea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01def2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01df02		00 00 00 00 00 00 00 00
>01df0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01df12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01df22		00 00 00 00 00 00 00 00
>01df2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01df32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01df42		00 00 00 00 00 00 00 00
>01df4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01df52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01df62		00 00 00 00 00 00 00 00
>01df6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01df72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01df82		00 00 00 00 00 00 00 00
>01df8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01df92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dfa2		00 00 00 00 00 00 00 00
>01dfaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dfb2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dfc2		00 00 00 00 00 00 00 00
>01dfca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dfd2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01dfe2		00 00 00 00 00 00 00 00
>01dfea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01dff2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e002		00 00 00 00 00 00 00 00
>01e00a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e012		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e022		00 00 00 00 00 00 00 00
>01e02a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e032		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e042		00 00 00 00 00 00 00 00
>01e04a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e052		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e062		00 00 00 00 00 00 00 00
>01e06a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e072		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e082		00 00 00 00 00 00 00 00
>01e08a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e092		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e0a2		00 00 00 00 00 00 00 00
>01e0aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e0b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e0c2		00 00 00 00 00 00 00 00
>01e0ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e0d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e0e2		00 00 00 00 00 00 00 00
>01e0ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e0f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e102		00 00 00 00 00 00 00 00
>01e10a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e112		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e122		00 00 00 00 00 00 00 00
>01e12a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e132		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e142		00 00 00 00 00 00 00 00
>01e14a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e152		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e162		00 00 00 00 00 00 00 00
>01e16a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e172		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e182		00 00 00 00 00 00 00 00
>01e18a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e192		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e1a2		00 00 00 00 00 00 00 00
>01e1aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e1b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e1c2		00 00 00 00 00 00 00 00
>01e1ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e1d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e1e2		00 00 00 00 00 00 00 00
>01e1ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e1f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e202		00 00 00 00 00 00 00 00
>01e20a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e212		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e222		00 00 00 00 00 00 00 00
>01e22a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e232		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e242		00 00 00 00 00 00 00 00
>01e24a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e252		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e262		00 00 00 00 00 00 00 00
>01e26a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e272		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e282		00 00 00 00 00 00 00 00
>01e28a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e292		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e2a2		00 00 00 00 00 00 00 00
>01e2aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e2b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e2c2		00 00 00 00 00 00 00 00
>01e2ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e2d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e2e2		00 00 00 00 00 00 00 00
>01e2ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e2f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e302		00 00 00 00 00 00 00 00
>01e30a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e312		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e322		00 00 00 00 00 00 00 00
>01e32a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e332		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e342		00 00 00 00 00 00 00 00
>01e34a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e352		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e362		00 00 00 00 00 00 00 00
>01e36a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e372		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e382		00 00 00 00 00 00 00 00
>01e38a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e392		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e3a2		00 00 00 00 00 00 00 00
>01e3aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e3b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e3c2		00 00 00 00 00 00 00 00
>01e3ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e3d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e3e2		00 00 00 00 00 00 00 00
>01e3ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e3f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e402		00 00 00 00 00 00 00 00
>01e40a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e412		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e422		00 00 00 00 00 00 00 00
>01e42a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e432		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e442		00 00 00 00 00 00 00 00
>01e44a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e452		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e462		00 00 00 00 00 00 00 00
>01e46a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e472		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e482		00 00 00 00 00 00 00 00
>01e48a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e492		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e4a2		00 00 00 00 00 00 00 00
>01e4aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e4b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e4c2		00 00 00 00 00 00 00 00
>01e4ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e4d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e4e2		00 00 00 00 00 00 00 00
>01e4ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e4f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e502		00 00 00 00 00 00 00 00
>01e50a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e512		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e522		00 00 00 00 00 00 00 00
>01e52a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e532		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e542		00 00 00 00 00 00 00 00
>01e54a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e552		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e562		00 00 00 00 00 00 00 00
>01e56a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e572		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e582		00 00 00 00 00 00 00 00
>01e58a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e592		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e5a2		00 00 00 00 00 00 00 00
>01e5aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e5b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e5c2		00 00 00 00 00 00 00 00
>01e5ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e5d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e5e2		00 00 00 00 00 00 00 00
>01e5ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e5f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e602		00 00 00 00 00 00 00 00
>01e60a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e612		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e622		00 00 00 00 00 00 00 00
>01e62a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e632		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e642		00 00 00 00 00 00 00 00
>01e64a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e652		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e662		00 00 00 00 00 00 00 00
>01e66a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e672		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e682		00 00 00 00 00 00 00 00
>01e68a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e692		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e6a2		00 00 00 00 00 00 00 00
>01e6aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e6b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e6c2		00 00 00 00 00 00 00 00
>01e6ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e6d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e6e2		00 00 00 00 00 00 00 00
>01e6ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e6f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e702		00 00 00 00 00 00 00 00
>01e70a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e712		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e722		00 00 00 00 00 00 00 00
>01e72a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e732		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e742		00 00 00 00 00 00 00 00
>01e74a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e752		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e762		00 00 00 00 00 00 00 00
>01e76a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e772		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e782		00 00 00 00 00 00 00 00
>01e78a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e792		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e7a2		00 00 00 00 00 00 00 00
>01e7aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e7b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e7c2		00 00 00 00 00 00 00 00
>01e7ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e7d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e7e2		00 00 00 00 00 00 00 00
>01e7ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e7f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e802		00 00 00 00 00 00 00 00
>01e80a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e812		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e822		00 00 00 00 00 00 00 00
>01e82a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e832		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e842		00 00 00 00 00 00 00 00
>01e84a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e852		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e862		00 00 00 00 00 00 00 00
>01e86a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e872		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e882		00 00 00 00 00 00 00 00
>01e88a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e892		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e8a2		00 00 00 00 00 00 00 00
>01e8aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e8b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e8c2		00 00 00 00 00 00 00 00
>01e8ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e8d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e8e2		00 00 00 00 00 00 00 00
>01e8ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e8f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e902		00 00 00 00 00 00 00 00
>01e90a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e912		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e922		00 00 00 00 00 00 00 00
>01e92a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e932		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e942		00 00 00 00 00 00 00 00
>01e94a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e952		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e962		00 00 00 00 00 00 00 00
>01e96a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e972		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e982		00 00 00 00 00 00 00 00
>01e98a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e992		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e9a2		00 00 00 00 00 00 00 00
>01e9aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e9b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e9c2		00 00 00 00 00 00 00 00
>01e9ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e9d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01e9e2		00 00 00 00 00 00 00 00
>01e9ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01e9f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ea02		00 00 00 00 00 00 00 00
>01ea0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ea12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ea22		00 00 00 00 00 00 00 00
>01ea2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ea32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ea42		00 00 00 00 00 00 00 00
>01ea4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ea52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ea62		00 00 00 00 00 00 00 00
>01ea6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ea72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ea82		00 00 00 00 00 00 00 00
>01ea8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ea92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eaa2		00 00 00 00 00 00 00 00
>01eaaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eab2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eac2		00 00 00 00 00 00 00 00
>01eaca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ead2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eae2		00 00 00 00 00 00 00 00
>01eaea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eaf2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eb02		00 00 00 00 00 00 00 00
>01eb0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eb12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eb22		00 00 00 00 00 00 00 00
>01eb2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eb32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eb42		00 00 00 00 00 00 00 00
>01eb4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eb52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eb62		00 00 00 00 00 00 00 00
>01eb6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eb72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eb82		00 00 00 00 00 00 00 00
>01eb8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eb92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eba2		00 00 00 00 00 00 00 00
>01ebaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ebb2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ebc2		00 00 00 00 00 00 00 00
>01ebca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ebd2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ebe2		00 00 00 00 00 00 00 00
>01ebea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ebf2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ec02		00 00 00 00 00 00 00 00
>01ec0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ec12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ec22		00 00 00 00 00 00 00 00
>01ec2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ec32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ec42		00 00 00 00 00 00 00 00
>01ec4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ec52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ec62		00 00 00 00 00 00 00 00
>01ec6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ec72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ec82		00 00 00 00 00 00 00 00
>01ec8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ec92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eca2		00 00 00 00 00 00 00 00
>01ecaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ecb2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ecc2		00 00 00 00 00 00 00 00
>01ecca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ecd2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ece2		00 00 00 00 00 00 00 00
>01ecea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ecf2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ed02		00 00 00 00 00 00 00 00
>01ed0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ed12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ed22		00 00 00 00 00 00 00 00
>01ed2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ed32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ed42		00 00 00 00 00 00 00 00
>01ed4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ed52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ed62		00 00 00 00 00 00 00 00
>01ed6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ed72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ed82		00 00 00 00 00 00 00 00
>01ed8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ed92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eda2		00 00 00 00 00 00 00 00
>01edaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01edb2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01edc2		00 00 00 00 00 00 00 00
>01edca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01edd2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ede2		00 00 00 00 00 00 00 00
>01edea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01edf2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ee02		00 00 00 00 00 00 00 00
>01ee0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ee12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ee22		00 00 00 00 00 00 00 00
>01ee2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ee32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ee42		00 00 00 00 00 00 00 00
>01ee4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ee52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ee62		00 00 00 00 00 00 00 00
>01ee6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ee72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ee82		00 00 00 00 00 00 00 00
>01ee8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ee92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eea2		00 00 00 00 00 00 00 00
>01eeaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eeb2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eec2		00 00 00 00 00 00 00 00
>01eeca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eed2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01eee2		00 00 00 00 00 00 00 00
>01eeea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eef2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ef02		00 00 00 00 00 00 00 00
>01ef0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ef12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ef22		00 00 00 00 00 00 00 00
>01ef2a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ef32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ef42		00 00 00 00 00 00 00 00
>01ef4a		e9 35 01 06 16 00 00 00		.text $E9,$35,$01,$06,$16,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ef52		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ef62		00 00 00 00 00 00 00 00
>01ef6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ef72		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01ef82		00 00 00 00 00 00 00 00
>01ef8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ef92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01efa2		00 00 00 00 00 00 00 00
>01efaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01efb2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01efc2		00 00 00 00 00 00 00 00
>01efca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01efd2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01efe2		00 00 00 00 00 00 00 00
>01efea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01eff2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f002		00 00 00 00 00 00 00 00
>01f00a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f012		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f022		00 00 00 00 00 00 00 00
>01f02a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f032		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f042		00 00 00 00 00 00 00 00
>01f04a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f052		00 00 00 00 00 00 00 00 00 ff ff 00 00 00 00 00
>01f062		00 00 00 00 00 00 00 00
>01f06a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$2E,$89,$1E,$23,$01,$2E,$88,$2E
>01f072		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f082		2e 89 1e 23 01 2e 88 2e
>01f08a		2f 01 2e 88 16 2d 01 2e		.text $2F,$01,$2E,$88,$16,$2D,$01,$2E,$89,$36,$31,$01,$1E,$2E,$8F,$06,$33,$01,$33,$C9,$8E,$D9,$06,$8E,$C1,$8B,$36,$78,$00,$8E,$1E,$7A
>01f092		89 36 31 01 1e 2e 8f 06 33 01 33 c9 8e d9 06 8e
>01f0a2		c1 8b 36 78 00 8e 1e 7a
>01f0aa		00 bf 22 05 b9 0b 00 fc		.text $00,$BF,$22,$05,$B9,$0B,$00,$FC,$F3,$A4,$06,$1F,$C7,$06,$78,$00,$22,$05,$8C,$1E,$7A,$00,$07,$8B,$0E,$0B,$7C,$2E,$89,$0E,$1B,$01
>01f0b2		f3 a4 06 1f c7 06 78 00 22 05 8c 1e 7a 00 07 8b
>01f0c2		0e 0b 7c 2e 89 0e 1b 01
>01f0ca		8a 0e 0d 7c 2e 88 0e 37		.text $8A,$0E,$0D,$7C,$2E,$88,$0E,$37,$01,$8B,$0E,$18,$7C,$2E,$89,$0E,$2B,$01,$8B,$0E,$1A,$7C,$2E,$89,$0E,$05,$01,$8B,$0E,$16,$7C,$2E
>01f0d2		01 8b 0e 18 7c 2e 89 0e 2b 01 8b 0e 1a 7c 2e 89
>01f0e2		0e 05 01 8b 0e 16 7c 2e
>01f0ea		89 0e 15 01 8b 0e 0e 7c		.text $89,$0E,$15,$01,$8B,$0E,$0E,$7C,$2E,$89,$0E,$1D,$01,$8B,$0E,$1C,$7C,$2E,$89,$0E,$17,$01,$8B,$0E,$13,$7C,$2E,$89,$0E,$27,$01,$80
>01f0f2		2e 89 0e 1d 01 8b 0e 1c 7c 2e 89 0e 17 01 8b 0e
>01f102		13 7c 2e 89 0e 27 01 80
>01f10a		3e 26 7c 29 75 1e 2e a3		.text $3E,$26,$7C,$29,$75,$1E,$2E,$A3,$25,$01,$A1,$1E,$7C,$2E,$A3,$19,$01,$83,$F9,$00,$75,$0E,$A1,$20,$7C,$2E,$A3,$27,$01,$A1,$22,$7C
>01f112		25 01 a1 1e 7c 2e a3 19 01 83 f9 00 75 0e a1 20
>01f122		7c 2e a3 27 01 a1 22 7c
>01f12a		2e a3 29 01 fc 33 f6 8b		.text $2E,$A3,$29,$01,$FC,$33,$F6,$8B,$FE,$CD,$12,$B1,$06,$D3,$E0,$33,$DB,$8E,$DB,$8B,$1E,$BC,$00,$8E,$1E,$BE,$00,$81,$7F,$03,$52,$50
>01f132		fe cd 12 b1 06 d3 e0 33 db 8e db 8b 1e bc 00 8e
>01f142		1e be 00 81 7f 03 52 50
>01f14a		75 0f 80 7f 05 4c 75 09		.text $75,$0F,$80,$7F,$05,$4C,$75,$09,$8B,$D0,$B8,$06,$4A,$CD,$2F,$8B,$C2,$B1,$04,$2E,$8B,$16,$1B,$01,$D3,$EA,$42,$2B,$C2,$2E,$A3,$35
>01f152		8b d0 b8 06 4a cd 2f 8b c2 b1 04 2e 8b 16 1b 01
>01f162		d3 ea 42 2b c2 2e a3 35
>01f16a		01 ba a6 05 d3 ea 42 2b		.text $01,$BA,$A6,$05,$D3,$EA,$42,$2B,$C2,$8E,$C0,$0E,$1F,$B9,$A6,$05,$F3,$A4,$06,$B8,$38,$02,$50,$CB,$8C,$C8,$8E,$D0,$BC,$05,$01,$33
>01f172		c2 8e c0 0e 1f b9 a6 05 f3 a4 06 b8 38 02 50 cb
>01f182		8c c8 8e d0 bc 05 01 33
>01f18a		c0 8e d8 a1 0b 7c 33 db		.text $C0,$8E,$D8,$A1,$0B,$7C,$33,$DB,$8A,$1E,$0D,$7C,$F7,$E3,$2E,$A3,$07,$01,$2E,$C6,$06,$2E,$01,$01,$2E,$8B,$16,$29,$01,$2E,$A1,$27
>01f192		8a 1e 0d 7c f7 e3 2e a3 07 01 2e c6 06 2e 01 01
>01f1a2		2e 8b 16 29 01 2e a1 27
>01f1aa		01 2e 2b 06 1d 01 83 da		.text $01,$2E,$2B,$06,$1D,$01,$83,$DA,$00,$2E,$8B,$1E,$15,$01,$D1,$E3,$2B,$C3,$83,$DA,$00,$8B,$1E,$11,$7C,$B1,$04,$D3,$EB,$2B,$C3,$83
>01f1b2		00 2e 8b 1e 15 01 d1 e3 2b c3 83 da 00 8b 1e 11
>01f1c2		7c b1 04 d3 eb 2b c3 83
>01f1ca		da 00 33 c9 8a 0e 0d 7c		.text $DA,$00,$33,$C9,$8A,$0E,$0D,$7C,$50,$8B,$C2,$33,$D2,$F7,$F1,$2E,$A3,$0D,$01,$58,$F7,$F1,$3D,$F6,$0F,$72,$06,$2E,$C6,$06,$2E,$01
>01f1d2		50 8b c2 33 d2 f7 f1 2e a3 0d 01 58 f7 f1 3d f6
>01f1e2		0f 72 06 2e c6 06 2e 01
>01f1ea		04 a1 1a 05 48 48 2e a3		.text $04,$A1,$1A,$05,$48,$48,$2E,$A3,$1F,$01,$B8,$03,$00,$2E,$F6,$36,$37,$01,$80,$FC,$00,$74,$5C,$32,$E4,$50,$2E,$8B,$0E,$23,$01,$2E
>01f1f2		1f 01 b8 03 00 2e f6 36 37 01 80 fc 00 74 5c 32
>01f202		e4 50 2e 8b 0e 23 01 2e
>01f20a		89 0e 09 01 2e 8b 0e 25		.text $89,$0E,$09,$01,$2E,$8B,$0E,$25,$01,$2E,$89,$0E,$0B,$01,$2E,$F6,$26,$37,$01,$2E,$01,$06,$09,$01,$2E,$83,$16,$0B,$01,$00,$A1,$1A
>01f212		01 2e 89 0e 0b 01 2e f6 26 37 01 2e 01 06 09 01
>01f222		2e 83 16 0b 01 00 a1 1a
>01f22a		05 48 48 33 db 2e 8a 1e		.text $05,$48,$48,$33,$DB,$2E,$8A,$1E,$37,$01,$F7,$E3,$2E,$01,$06,$09,$01,$2E,$11,$16,$0B,$01,$58,$50,$2E,$F7,$26,$07,$01,$BF,$00,$07
>01f232		37 01 f7 e3 2e 01 06 09 01 2e 11 16 0b 01 58 50
>01f242		2e f7 26 07 01 bf 00 07
>01f24a		03 f8 33 c0 8e c0 2e a0		.text $03,$F8,$33,$C0,$8E,$C0,$2E,$A0,$37,$01,$2E,$A3,$13,$01,$E8,$A3,$00,$58,$40,$40,$2E,$01,$06,$1F,$01,$48,$1E,$2E,$F7,$26,$07,$01
>01f252		37 01 2e a3 13 01 e8 a3 00 58 40 40 2e 01 06 1f
>01f262		01 48 1e 2e f7 26 07 01
>01f26a		2d a6 05 8b c8 b8 70 00		.text $2D,$A6,$05,$8B,$C8,$B8,$70,$00,$8E,$D8,$8E,$C0,$BE,$A6,$05,$33,$FF,$F3,$A4,$2E,$89,$3E,$21,$01,$1F,$32,$E4,$2E,$A0,$37,$01,$2E
>01f272		8e d8 8e c0 be a6 05 33 ff f3 a4 2e 89 3e 21 01
>01f282		1f 32 e4 2e a0 37 01 2e
>01f28a		a3 13 01 2e ff 36 13 01		.text $A3,$13,$01,$2E,$FF,$36,$13,$01,$E8,$18,$01,$2E,$8F,$06,$13,$01,$2E,$A3,$1F,$01,$2E,$80,$3E,$30,$01,$FF,$74,$40,$33,$D2,$2D,$02
>01f292		e8 18 01 2e 8f 06 13 01 2e a3 1f 01 2e 80 3e 30
>01f2a2		01 ff 74 40 33 d2 2d 02
>01f2aa		00 32 ed 2e 8a 0e 37 01		.text $00,$32,$ED,$2E,$8A,$0E,$37,$01,$F7,$E1,$2E,$03,$06,$23,$01,$2E,$13,$16,$25,$01,$2E,$A3,$09,$01,$2E,$89,$16,$0B,$01,$2E,$8B,$3E
>01f2b2		f7 e1 2e 03 06 23 01 2e 13 16 25 01 2e a3 09 01
>01f2c2		2e 89 16 0b 01 2e 8b 3e
>01f2ca		21 01 2e ff 36 13 01 b8		.text $21,$01,$2E,$FF,$36,$13,$01,$B8,$70,$00,$8E,$C0,$E8,$25,$00,$58,$2E,$F7,$26,$1B,$01,$2E,$01,$06,$21,$01,$EB,$9D,$2E,$8A,$2E,$2F
>01f2d2		70 00 8e c0 e8 25 00 58 2e f7 26 1b 01 2e 01 06
>01f2e2		21 01 eb 9d 2e 8a 2e 2f
>01f2ea		01 2e 8a 16 2d 01 2e 8b		.text $01,$2E,$8A,$16,$2D,$01,$2E,$8B,$1E,$23,$01,$2E,$A1,$25,$01,$EA,$00,$00,$70,$00,$B9,$05,$00,$51,$2E,$A1,$09,$01,$2E,$8B,$16,$0B
>01f2f2		1e 23 01 2e a1 25 01 ea 00 00 70 00 b9 05 00 51
>01f302		2e a1 09 01 2e 8b 16 0b
>01f30a		01 50 8b c2 33 d2 2e f7		.text $01,$50,$8B,$C2,$33,$D2,$2E,$F7,$36,$2B,$01,$2E,$A3,$0D,$01,$58,$2E,$F7,$36,$2B,$01,$2E,$8B,$1E,$2B,$01,$2B,$DA,$8B,$F3,$2E,$39
>01f312		36 2b 01 2e a3 0d 01 58 2e f7 36 2b 01 2e 8b 1e
>01f322		2b 01 2b da 8b f3 2e 39
>01f32a		36 13 01 73 05 2e 8b 36		.text $36,$13,$01,$73,$05,$2E,$8B,$36,$13,$01,$FE,$C2,$8A,$DA,$2E,$8B,$16,$0D,$01,$50,$8B,$C2,$33,$D2,$2E,$F7,$36,$05,$01,$2E,$A3,$0D
>01f332		13 01 fe c2 8a da 2e 8b 16 0d 01 50 8b c2 33 d2
>01f342		2e f7 36 05 01 2e a3 0d
>01f34a		01 58 2e f7 36 05 01 8a		.text $01,$58,$2E,$F7,$36,$05,$01,$8A,$F2,$B1,$06,$D2,$E4,$0A,$E3,$8A,$E8,$8A,$CC,$8B,$DF,$2E,$8A,$16,$2D,$01,$8B,$C6,$B4,$02,$50,$57
>01f352		f2 b1 06 d2 e4 0a e3 8a e8 8a cc 8b df 2e 8a 16
>01f362		2d 01 8b c6 b4 02 50 57
>01f36a		cd 13 5f 58 59 73 18 8b		.text $CD,$13,$5F,$58,$59,$73,$18,$8B,$DF,$32,$E4,$51,$2E,$8A,$16,$2D,$01,$57,$CD,$13,$5F,$59,$49,$74,$03,$E9,$7B,$FF,$E9,$F3,$00,$32
>01f372		df 32 e4 51 2e 8a 16 2d 01 57 cd 13 5f 59 49 74
>01f382		03 e9 7b ff e9 f3 00 32
>01f38a		e4 2e 29 06 13 01 74 1a		.text $E4,$2E,$29,$06,$13,$01,$74,$1A,$2E,$01,$06,$09,$01,$2E,$83,$16,$0B,$01,$00,$33,$DB,$8A,$D8,$2E,$A1,$1B,$01,$F7,$E3,$03,$F8,$E9
>01f392		2e 01 06 09 01 2e 83 16 0b 01 00 33 db 8a d8 2e
>01f3a2		a1 1b 01 f7 e3 03 f8 e9
>01f3aa		52 ff c3 06 2e a1 35 01		.text $52,$FF,$C3,$06,$2E,$A1,$35,$01,$8E,$C0,$2E,$C6,$06,$30,$01,$FF,$2E,$A1,$1F,$01,$2E,$80,$3E,$2E,$01,$01,$75,$48,$8B,$F0,$D1,$E8
>01f3b2		8e c0 2e c6 06 30 01 ff 2e a1 1f 01 2e 80 3e 2e
>01f3c2		01 01 75 48 8b f0 d1 e8
>01f3ca		03 f0 52 33 d2 e8 5a 00		.text $03,$F0,$52,$33,$D2,$E8,$5A,$00,$5A,$75,$1D,$26,$8A,$07,$2E,$A2,$0F,$01,$46,$52,$33,$D2,$E8,$49,$00,$5A,$26,$A0,$00,$00,$2E,$A2
>01f3d2		5a 75 1d 26 8a 07 2e a2 0f 01 46 52 33 d2 e8 49
>01f3e2		00 5a 26 a0 00 00 2e a2
>01f3ea		10 01 2e a1 0f 01 eb 03		.text $10,$01,$2E,$A1,$0F,$01,$EB,$03,$26,$8B,$07,$2E,$F7,$06,$1F,$01,$01,$00,$75,$05,$25,$FF,$0F,$EB,$04,$B1,$04,$D3,$E8,$3D,$F8,$0F
>01f3f2		26 8b 07 2e f7 06 1f 01 01 00 75 05 25 ff 0f eb
>01f402		04 b1 04 d3 e8 3d f8 0f
>01f40a		73 1e eb 16 52 33 d2 d1		.text $73,$1E,$EB,$16,$52,$33,$D2,$D1,$E0,$83,$D2,$00,$8B,$F0,$E8,$11,$00,$5A,$26,$8B,$07,$3D,$F8,$FF,$73,$06,$2E,$C6,$06,$30,$01,$00
>01f412		e0 83 d2 00 8b f0 e8 11 00 5a 26 8b 07 3d f8 ff
>01f422		73 06 2e c6 06 30 01 00
>01f42a		07 c3 50 56 57 8b c6 2e		.text $07,$C3,$50,$56,$57,$8B,$C6,$2E,$8B,$0E,$1B,$01,$F7,$F1,$2E,$3B,$06,$11,$01,$74,$34,$2E,$A3,$11,$01,$52,$33,$D2,$2E,$03,$06,$17
>01f432		8b 0e 1b 01 f7 f1 2e 3b 06 11 01 74 34 2e a3 11
>01f442		01 52 33 d2 2e 03 06 17
>01f44a		01 2e 13 16 19 01 2e 03		.text $01,$2E,$13,$16,$19,$01,$2E,$03,$06,$1D,$01,$83,$D2,$00,$2E,$A3,$09,$01,$2E,$89,$16,$0B,$01,$2E,$C7,$06,$13,$01,$01,$00,$33,$FF
>01f452		06 1d 01 83 d2 00 2e a3 09 01 2e 89 16 0b 01 2e
>01f462		c7 06 13 01 01 00 33 ff
>01f46a		e8 91 fe 5a 2e 8b 0e 1b		.text $E8,$91,$FE,$5A,$2E,$8B,$0E,$1B,$01,$49,$3B,$D1,$8B,$DA,$5F,$5E,$58,$C3,$0E,$1F,$BE,$5E,$05,$E8,$16,$00,$32,$E4,$CD,$16,$33,$DB
>01f472		01 49 3b d1 8b da 5f 5e 58 c3 0e 1f be 5e 05 e8
>01f482		16 00 32 e4 cd 16 33 db
>01f48a		8e db c4 1e 31 01 be 78		.text $8E,$DB,$C4,$1E,$31,$01,$BE,$78,$00,$89,$1C,$8C,$44,$02,$CD,$19,$AC,$0A,$C0,$74,$08,$B4,$0E,$B3,$07,$CD,$10,$EB,$F3,$C3,$0D,$0A
>01f492		00 89 1c 8c 44 02 cd 19 ac 0a c0 74 08 b4 0e b3
>01f4a2		07 cd 10 eb f3 c3 0d 0a
>01f4aa		4e 6f 6e 2d 53 79 73 74		.text $4E,$6F,$6E,$2D,$53,$79,$73,$74,$65,$6D,$20,$64,$69,$73,$6B,$20,$6F,$72,$20,$64,$69,$73,$6B,$20,$65,$72,$72,$6F,$72,$0D,$0A,$52
>01f4b2		65 6d 20 64 69 73 6b 20 6f 72 20 64 69 73 6b 20
>01f4c2		65 72 72 6f 72 0d 0a 52
>01f4ca		65 70 6c 61 63 65 20 61		.text $65,$70,$6C,$61,$63,$65,$20,$61,$6E,$64,$20,$70,$72,$65,$73,$73,$20,$61,$6E,$79,$20,$6B,$65,$79,$20,$77,$68,$65,$6E,$20,$72,$65
>01f4d2		6e 64 20 70 72 65 73 73 20 61 6e 79 20 6b 65 79
>01f4e2		20 77 68 65 6e 20 72 65
>01f4ea		61 64 79 0d 0a 00 e9 f8		.text $61,$64,$79,$0D,$0A,$00,$E9,$F8,$17,$00,$00,$EA,$93,$08,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f4f2		17 00 00 ea 93 08 70 00 00 00 00 00 00 00 00 00
>01f502		00 00 00 00 00 00 00 00
>01f50a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$35,$00,$70,$00,$13,$80,$F5,$06,$00,$07,$43,$4F,$4E,$20,$20,$20,$20,$20,$47,$00,$70,$00,$00
>01f512		00 35 00 70 00 13 80 f5 06 00 07 43 4f 4e 20 20
>01f522		20 20 20 47 00 70 00 00
>01f52a		80 f5 06 21 07 41 55 58		.text $80,$F5,$06,$21,$07,$41,$55,$58,$20,$20,$20,$20,$20,$59,$00,$70,$00,$C0,$A0,$F5,$06,$05,$07,$50,$52,$4E,$20,$20,$20,$20,$20,$6B
>01f532		20 20 20 20 20 59 00 70 00 c0 a0 f5 06 05 07 50
>01f542		52 4e 20 20 20 20 20 6b
>01f54a		00 70 00 08 80 f5 06 39		.text $00,$70,$00,$08,$80,$F5,$06,$39,$07,$43,$4C,$4F,$43,$4B,$24,$20,$20,$7B,$00,$70,$00,$C2,$08,$F5,$06,$3E,$07,$04,$FE,$00,$00,$00
>01f552		07 43 4c 4f 43 4b 24 20 20 7b 00 70 00 c2 08 f5
>01f562		06 3e 07 04 fe 00 00 00
>01f56a		00 8d 00 70 00 00 80 f5		.text $00,$8D,$00,$70,$00,$00,$80,$F5,$06,$21,$07,$43,$4F,$4D,$31,$20,$20,$20,$20,$9F,$00,$70,$00,$C0,$A0,$F5,$06,$0C,$07,$4C,$50,$54
>01f572		06 21 07 43 4f 4d 31 20 20 20 20 9f 00 70 00 c0
>01f582		a0 f5 06 0c 07 4c 50 54
>01f58a		31 20 20 20 20 b8 00 70		.text $31,$20,$20,$20,$20,$B8,$00,$70,$00,$C0,$A0,$F5,$06,$13,$07,$4C,$50,$54,$32,$20,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$CA,$00
>01f592		00 c0 a0 f5 06 13 07 4c 50 54 32 20 20 20 20 00
>01f5a2		00 00 00 00 00 00 ca 00
>01f5aa		70 00 c0 a0 f5 06 1a 07		.text $70,$00,$C0,$A0,$F5,$06,$1A,$07,$4C,$50,$54,$33,$20,$20,$20,$20,$DC,$00,$70,$00,$00,$80,$F5,$06,$27,$07,$43,$4F,$4D,$32,$20,$20
>01f5b2		4c 50 54 33 20 20 20 20 dc 00 70 00 00 80 f5 06
>01f5c2		27 07 43 4f 4d 32 20 20
>01f5ca		20 20 ee 00 70 00 00 80		.text $20,$20,$EE,$00,$70,$00,$00,$80,$F5,$06,$2D,$07,$43,$4F,$4D,$33,$20,$20,$20,$20,$FF,$FF,$70,$00,$00,$80,$F5,$06,$33,$07,$43,$4F
>01f5d2		f5 06 2d 07 43 4f 4d 33 20 20 20 20 ff ff 70 00
>01f5e2		00 80 f5 06 33 07 43 4f
>01f5ea		4d 34 20 20 20 20 10 00		.text $4D,$34,$20,$20,$20,$20,$10,$00,$00,$00,$00,$13,$00,$00,$00,$00,$15,$00,$00,$00,$00,$19,$00,$00,$00,$00,$1B,$00,$00,$00,$00,$4E
>01f5f2		00 00 00 13 00 00 00 00 15 00 00 00 00 19 00 00
>01f602		00 00 1b 00 00 00 00 4e
>01f60a		03 70 00 00 ff 00 02 00		.text $03,$70,$00,$00,$FF,$00,$02,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$09,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00
>01f612		00 00 00 01 00 00 00 00 00 00 09 00 00 00 00 00
>01f622		00 00 00 00 00 08 00 00
>01f62a		00 50 cc 80 40 10 08 06		.text $00,$50,$CC,$80,$40,$10,$08,$06,$04,$03,$00,$0A,$02,$06,$04,$04,$0F,$08,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f632		04 03 00 0a 02 06 04 04 0f 08 00 0c 00 00 00 00
>01f642		00 00 00 00 00 00 00 00
>01f64a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f652		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f662		00 00 00 00 00 00 00 00
>01f66a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f672		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f682		00 00 00 00 00 00 00 00
>01f68a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f692		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f6a2		00 00 00 00 00 00 00 00
>01f6aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f6b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f6c2		00 00 00 00 00 00 00 00
>01f6ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f6d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f6e2		00 00 00 00 00 00 00 00
>01f6ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f6f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f702		00 00 00 00 00 00 00 00
>01f70a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f712		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f722		00 00 00 00 00 00 00 00
>01f72a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f732		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f742		00 00 00 00 00 00 00 00
>01f74a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f752		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f762		00 00 00 00 00 00 00 00
>01f76a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f772		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f782		00 00 00 00 00 00 00 00
>01f78a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f792		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f7a2		00 00 00 00 00 00 00 00
>01f7aa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f7b2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f7c2		00 00 00 00 00 00 00 00
>01f7ca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f7d2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f7e2		00 00 00 00 00 00 00 00
>01f7ea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f7f2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f802		00 00 00 00 00 00 00 00
>01f80a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f812		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f822		00 00 00 00 00 00 00 00
>01f82a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$B2,$03,$70,$00,$00,$00,$00,$02,$FF,$01,$00,$02
>01f832		00 00 00 00 00 00 00 00 00 00 00 00 b2 03 70 00
>01f842		00 00 00 02 ff 01 00 02
>01f84a		40 00 68 01 00 02 00 09		.text $40,$00,$68,$01,$00,$02,$00,$09,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$02,$01,$01,$00
>01f852		00 01 00 00 00 00 00 00 00 00 00 00 00 00 03 20
>01f862		00 28 00 00 02 01 01 00
>01f86a		02 e0 00 68 01 f0 02 00		.text $02,$E0,$00,$68,$01,$F0,$02,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$4E
>01f872		09 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00
>01f882		00 00 ff ff ff ff ff 4e
>01f88a		4f 20 4e 41 4d 45 20 20		.text $4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$16,$04,$70,$00,$00,$01,$00,$02
>01f892		20 20 00 00 00 00 00 46 41 54 31 32 20 20 20 00
>01f8a2		16 04 70 00 00 01 00 02
>01f8aa		ff 01 00 02 40 00 68 01		.text $FF,$01,$00,$02,$40,$00,$68,$01,$00,$02,$00,$09,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00
>01f8b2		00 02 00 09 00 01 00 00 00 00 00 00 00 00 00 00
>01f8c2		00 00 03 20 00 28 00 00
>01f8ca		02 01 01 00 02 e0 00 68		.text $02,$01,$01,$00,$02,$E0,$00,$68,$01,$F0,$02,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF
>01f8d2		01 f0 02 00 09 00 02 00 00 00 00 00 00 00 00 00
>01f8e2		00 00 00 00 00 00 ff ff
>01f8ea		ff ff ff 4e 4f 20 4e 41		.text $FF,$FF,$FF,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$7A,$04,$70,$00
>01f8f2		4d 45 20 20 20 20 00 00 00 00 00 46 41 54 31 32
>01f902		20 20 20 00 7a 04 70 00
>01f90a		00 00 00 02 ff 01 00 02		.text $00,$00,$00,$02,$FF,$01,$00,$02,$40,$00,$68,$01,$00,$02,$00,$09,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20
>01f912		40 00 68 01 00 02 00 09 00 01 00 00 00 00 00 00
>01f922		00 00 00 00 00 00 03 20
>01f92a		00 28 00 00 02 01 01 00		.text $00,$28,$00,$00,$02,$01,$01,$00,$02,$E0,$00,$68,$01,$F0,$02,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f932		02 e0 00 68 01 f0 02 00 09 00 02 00 00 00 00 00
>01f942		00 00 00 00 00 00 00 00
>01f94a		00 00 ff ff ff ff ff 4e		.text $00,$00,$FF,$FF,$FF,$FF,$FF,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00
>01f952		4f 20 4e 41 4d 45 20 20 20 20 00 00 00 00 00 46
>01f962		41 54 31 32 20 20 20 00
>01f96a		ff ff 70 00 00 00 00 02		.text $FF,$FF,$70,$00,$00,$00,$00,$02,$FF,$01,$00,$02,$40,$00,$68,$01,$00,$02,$00,$09,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f972		ff 01 00 02 40 00 68 01 00 02 00 09 00 01 00 00
>01f982		00 00 00 00 00 00 00 00
>01f98a		00 00 03 20 00 28 00 00		.text $00,$00,$03,$20,$00,$28,$00,$00,$02,$01,$01,$00,$02,$E0,$00,$68,$01,$F0,$02,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01f992		02 01 01 00 02 e0 00 68 01 f0 02 00 09 00 02 00
>01f9a2		00 00 00 00 00 00 00 00
>01f9aa		00 00 00 00 00 00 ff ff		.text $00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32
>01f9b2		ff ff ff 4e 4f 20 4e 41 4d 45 20 20 20 20 00 00
>01f9c2		00 00 00 46 41 54 31 32
>01f9ca		20 20 20 00 03 09 70 a0		.text $20,$20,$20,$00,$03,$09,$70,$A0,$05,$02,$02,$00,$01,$00,$50,$00,$50,$00,$50,$00,$50,$00,$00,$00,$00,$00,$13,$50,$1F,$1C,$1F,$1E
>01f9d2		05 02 02 00 01 00 50 00 50 00 50 00 50 00 00 00
>01f9e2		00 00 13 50 1f 1c 1f 1e
>01f9ea		1f 1e 1f 1f 1e 1f 1e 1f		.text $1F,$1E,$1F,$1F,$1E,$1F,$1E,$1F,$FF,$14,$70,$00,$2E,$14,$70,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$46,$41,$54,$31,$36,$20
>01f9f2		ff 14 70 00 2e 14 70 00 00 46 41 54 31 32 20 20
>01fa02		20 00 46 41 54 31 36 20
>01fa0a		20 20 00 4e 4f 20 4e 41		.text $20,$20,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$24
>01fa12		4d 45 20 20 20 20 00 00 00 00 00 00 00 00 00 00
>01fa22		00 00 00 00 00 00 00 24
>01fa2a		00 00 00 01 02 00 00 02		.text $00,$00,$00,$01,$02,$00,$00,$02,$02,$00,$00,$03,$02,$00,$00,$04,$02,$00,$00,$05,$02,$00,$00,$06,$02,$00,$00,$07,$02,$00,$00,$08
>01fa32		02 00 00 03 02 00 00 04 02 00 00 05 02 00 00 06
>01fa42		02 00 00 07 02 00 00 08
>01fa4a		02 00 00 09 02 00 00 0a		.text $02,$00,$00,$09,$02,$00,$00,$0A,$02,$00,$00,$0B,$02,$00,$00,$0C,$02,$00,$00,$0D,$02,$00,$00,$0E,$02,$00,$00,$0F,$02,$00,$00,$10
>01fa52		02 00 00 0b 02 00 00 0c 02 00 00 0d 02 00 00 0e
>01fa62		02 00 00 0f 02 00 00 10
>01fa6a		02 00 00 11 02 00 00 12		.text $02,$00,$00,$11,$02,$00,$00,$12,$02,$00,$00,$13,$02,$00,$00,$14,$02,$00,$00,$15,$02,$00,$00,$16,$02,$00,$00,$17,$02,$00,$00,$18
>01fa72		02 00 00 13 02 00 00 14 02 00 00 15 02 00 00 16
>01fa82		02 00 00 17 02 00 00 18
>01fa8a		02 00 00 19 02 00 00 1a		.text $02,$00,$00,$19,$02,$00,$00,$1A,$02,$00,$00,$1B,$02,$00,$00,$1C,$02,$00,$00,$1D,$02,$00,$00,$1E,$02,$00,$00,$1F,$02,$00,$00,$20
>01fa92		02 00 00 1b 02 00 00 1c 02 00 00 1d 02 00 00 1e
>01faa2		02 00 00 1f 02 00 00 20
>01faaa		02 00 00 21 02 00 00 22		.text $02,$00,$00,$21,$02,$00,$00,$22,$02,$00,$00,$23,$02,$00,$00,$24,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fab2		02 00 00 23 02 00 00 24 02 00 00 00 00 00 00 00
>01fac2		00 00 00 00 00 00 00 00
>01faca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fad2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fae2		00 00 00 00 00 00 00 00
>01faea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01faf2		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fb02		00 00 00 00 00 00 00 00
>01fb0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fb12		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fb22		00 00 00 00 00 00 00 00
>01fb2a		ff ff ff ff ff 00 00 02		.text $FF,$FF,$FF,$FF,$FF,$00,$00,$02,$FF,$FF,$FF,$FF,$08,$FF,$FF,$FF,$FF,$09,$FF,$FF,$FF,$FF,$0A,$FF,$FF,$FF,$FF,$0B,$FF,$FF,$FF,$FF
>01fb32		ff ff ff ff 08 ff ff ff ff 09 ff ff ff ff 0a ff
>01fb42		ff ff ff 0b ff ff ff ff
>01fb4a		0c ff ff ff ff 0d ff ff		.text $0C,$FF,$FF,$FF,$FF,$0D,$FF,$FF,$FF,$FF,$0E,$FF,$FF,$FF,$FF,$70,$FF,$FF,$FF,$FF,$72,$FF,$FF,$FF,$FF,$73,$FF,$FF,$FF,$FF,$74,$FF
>01fb52		ff ff 0e ff ff ff ff 70 ff ff ff ff 72 ff ff ff
>01fb62		ff 73 ff ff ff ff 74 ff
>01fb6a		ff ff ff 76 ff ff ff ff		.text $FF,$FF,$FF,$76,$FF,$FF,$FF,$FF,$77,$FF,$FF,$FF,$FF,$54,$03,$B8,$03,$1C,$04,$80,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fb72		77 ff ff ff ff 54 03 b8 03 1c 04 80 04 00 00 00
>01fb82		00 00 00 00 00 00 00 00
>01fb8a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fb92		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fba2		00 00 00 00 00 00 00 00
>01fbaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$00,$3B,$00,$5A,$00,$78,$00,$97,$00,$B5,$00,$D4,$00,$F3,$00,$11,$01,$30,$01,$4E
>01fbb2		00 00 00 1f 00 3b 00 5a 00 78 00 97 00 b5 00 d4
>01fbc2		00 f3 00 11 01 30 01 4e
>01fbca		01 00 00 00 43 00 cc 02		.text $01,$00,$00,$00,$43,$00,$CC,$02,$96,$03,$CC,$02,$02,$13,$CC,$02,$4B,$15,$CC,$02,$2E,$C6,$06,$0C,$00,$03,$CF,$2E,$89,$1E,$12,$00
>01fbd2		96 03 cc 02 02 13 cc 02 4b 15 cc 02 2e c6 06 0c
>01fbe2		00 03 cf 2e 89 1e 12 00
>01fbea		2e 8c 06 14 00 cb e8 40		.text $2E,$8C,$06,$14,$00,$CB,$E8,$40,$00,$E4,$00,$E8,$3B,$00,$FB,$00,$00,$00,$E8,$34,$00,$FB,$00,$00,$01,$E8,$2D,$00,$FB,$00,$01,$02
>01fbf2		00 e4 00 e8 3b 00 fb 00 00 00 e8 34 00 fb 00 00
>01fc02		01 e8 2d 00 fb 00 01 02
>01fc0a		e8 26 00 fb 00 02 03 e8		.text $E8,$26,$00,$FB,$00,$02,$03,$E8,$1F,$00,$30,$01,$00,$E8,$19,$00,$30,$01,$01,$E8,$13,$00,$30,$01,$02,$E8,$0D,$00,$30,$01,$03,$E8
>01fc12		1f 00 30 01 00 e8 19 00 30 01 01 e8 13 00 30 01
>01fc22		02 e8 0d 00 30 01 03 e8
>01fc2a		07 00 47 01 e8 02 00 a2		.text $07,$00,$47,$01,$E8,$02,$00,$A2,$04,$2E,$80,$3E,$0D,$00,$00,$74,$0D,$50,$2E,$A1,$03,$00,$2E,$39,$06,$14,$00,$58,$75,$05,$2E,$FF
>01fc32		04 2e 80 3e 0d 00 00 74 0d 50 2e a1 03 00 2e 39
>01fc42		06 14 00 58 75 05 2e ff
>01fc4a		2e de 06 e8 63 00 eb f6		.text $2E,$DE,$06,$E8,$63,$00,$EB,$F6,$50,$56,$57,$55,$53,$B4,$0E,$BB,$07,$00,$CD,$10,$5B,$5D,$5F,$5E,$58,$CF,$2E,$80,$3E,$0D,$00,$00
>01fc52		50 56 57 55 53 b4 0e bb 07 00 cd 10 5b 5d 5f 5e
>01fc62		58 cf 2e 80 3e 0d 00 00
>01fc6a		74 08 e8 56 00 75 03 e8		.text $74,$08,$E8,$56,$00,$75,$03,$E8,$45,$00,$2E,$8C,$1E,$1C,$00,$9C,$2E,$FF,$1E,$EA,$06,$2E,$8E,$1E,$1C,$00,$CA,$02,$00,$8E,$1E,$1C
>01fc72		45 00 2e 8c 1e 1c 00 9c 2e ff 1e ea 06 2e 8e 1e
>01fc82		1c 00 ca 02 00 8e 1e 1c
>01fc8a		00 9c 2e ff 1e b4 00 2e		.text $00,$9C,$2E,$FF,$1E,$B4,$00,$2E,$8C,$1E,$1C,$00,$0E,$1F,$9C,$2E,$80,$3E,$0D,$00,$00,$74,$08,$E8,$21,$00,$75,$03,$E8,$10,$00,$9D
>01fc92		8c 1e 1c 00 0e 1f 9c 2e 80 3e 0d 00 00 74 08 e8
>01fca2		21 00 75 03 e8 10 00 9d
>01fcaa		cb 90 00 ff ff 80 00 00		.text $CB,$90,$00,$FF,$FF,$80,$00,$00,$00,$E8,$0F,$00,$74,$01,$C3,$50,$53,$B4,$05,$2E,$FF,$1E,$0E,$00,$5B,$58,$C3,$1E,$06,$51,$56,$57
>01fcb2		00 e8 0f 00 74 01 c3 50 53 b4 05 2e ff 1e 0e 00
>01fcc2		5b 58 c3 1e 06 51 56 57
>01fcca		2e c5 36 bb 07 2e c4 3e		.text $2E,$C5,$36,$BB,$07,$2E,$C4,$3E,$BF,$07,$B9,$08,$00,$F3,$A7,$5F,$5E,$59,$07,$1F,$C3,$50,$53,$B4,$06,$2E,$FF,$1E,$0E,$00,$5B,$58
>01fcd2		bf 07 b9 08 00 f3 a7 5f 5e 59 07 1f c3 50 53 b4
>01fce2		06 2e ff 1e 0e 00 5b 58
>01fcea		c3 0e 1f 8e 06 1a 00 b9		.text $C3,$0E,$1F,$8E,$06,$1A,$00,$B9,$05,$00,$BE,$00,$01,$AC,$98,$D1,$E0,$D1,$E0,$8B,$F8,$AD,$AB,$AD,$AB,$E2,$F2,$80,$3E,$40,$06,$00
>01fcf2		05 00 be 00 01 ac 98 d1 e0 d1 e0 8b f8 ad ab ad
>01fd02		ab e2 f2 80 3e 40 06 00
>01fd0a		74 22 be 41 06 b9 0e 00		.text $74,$22,$BE,$41,$06,$B9,$0E,$00,$AC,$98,$8B,$F8,$AD,$8B,$D8,$AD,$83,$FB,$FF,$74,$0D,$3D,$FF,$FF,$74,$08,$03,$FF,$03,$FF,$93,$AB
>01fd12		ac 98 8b f8 ad 8b d8 ad 83 fb ff 74 0d 3d ff ff
>01fd22		74 08 03 ff 03 ff 93 ab
>01fd2a		93 ab e2 e4 80 3e 0d 00		.text $93,$AB,$E2,$E4,$80,$3E,$0D,$00,$00,$74,$03,$E8,$30,$00,$CD,$19,$3D,$53,$4F,$74,$05,$2E,$FF,$2E,$0B,$01,$1E,$50,$B8,$40,$00,$8E
>01fd32		00 74 03 e8 30 00 cd 19 3d 53 4f 74 05 2e ff 2e
>01fd42		0b 01 1e 50 b8 40 00 8e
>01fd4a		d8 a0 17 00 24 0c 3c 0c		.text $D8,$A0,$17,$00,$24,$0C,$3C,$0C,$75,$0C,$0E,$1F,$80,$3E,$0D,$00,$00,$74,$03,$E8,$08,$00,$58,$1F,$F9,$2E,$FF,$2E,$0B,$01,$50,$51
>01fd52		75 0c 0e 1f 80 3e 0d 00 00 74 03 e8 08 00 58 1f
>01fd62		f9 2e ff 2e 0b 01 50 51
>01fd6a		57 06 e8 44 ff b8 ff ff		.text $57,$06,$E8,$44,$FF,$B8,$FF,$FF,$8E,$C0,$BF,$10,$00,$B9,$10,$00,$33,$C0,$F3,$AB,$07,$5F,$59,$58,$C3,$2E,$FF,$2E,$E6,$06,$E9,$A3
>01fd72		8e c0 bf 10 00 b9 10 00 33 c0 f3 ab 07 5f 59 58
>01fd82		c3 2e ff 2e e6 06 e9 a3
>01fd8a		fe cb 03 00 00 00 00 00		.text $FE,$CB,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$AE,$08,$70,$00,$00,$00,$50,$00,$02,$00,$0E,$00,$50,$00,$14,$00
>01fd92		00 00 00 00 00 00 00 00 ae 08 70 00 00 00 50 00
>01fda2		02 00 0e 00 50 00 14 00
>01fdaa		0c 00 70 00 01 00 00 00		.text $0C,$00,$70,$00,$01,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$57,$06,$53,$50,$33,$FF,$8E,$C7,$BB
>01fdb2		00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 57
>01fdc2		06 53 50 33 ff 8e c7 bb
>01fdca		15 00 b8 84 16 cd 2f 8c		.text $15,$00,$B8,$84,$16,$CD,$2F,$8C,$C0,$0B,$C7,$74,$0B,$0E,$B8,$F2,$08,$50,$06,$57,$B8,$01,$00,$CB,$58,$5B,$07,$5F,$CB,$FF,$FF,$8C
>01fdd2		c0 0b c7 74 0b 0e b8 f2 08 50 06 57 b8 01 00 cb
>01fde2		58 5b 07 5f cb ff ff 8c
>01fdea		0b 73 04 00 00 00 4e 4f		.text $0B,$73,$04,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$80,$FF
>01fdf2		20 4e 41 4d 45 20 20 20 20 00 4e 4f 20 4e 41 4d
>01fe02		45 20 20 20 20 00 80 ff
>01fe0a		ff 00 00 50 03 00 02 01		.text $FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fe12		01 00 02 10 00 00 00 f8 01 00 00 00 00 00 00 00
>01fe22		00 00 00 00 00 00 00 00
>01fe2a		00 03 20 00 28 00 00 00		.text $00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fe32		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fe42		00 00 00 00 00 00 00 00
>01fe4a		00 00 00 00 00 ff 01 00		.text $00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20
>01fe52		00 00 4e 4f 20 4e 41 4d 45 20 20 20 20 00 00 00
>01fe62		00 00 46 41 54 31 32 20
>01fe6a		20 20 00 ff ff 00 00 50		.text $20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fe72		03 00 02 01 01 00 02 10 00 00 00 f8 01 00 00 00
>01fe82		00 00 00 00 00 00 00 00
>01fe8a		00 00 00 00 00 03 20 00		.text $00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fe92		28 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>01fea2		00 00 00 00 00 00 00 00
>01feaa		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41
>01feb2		00 ff 01 00 00 00 4e 4f 20 4e 41 4d 45 20 20 20
>01fec2		20 00 00 00 00 00 46 41
>01feca		54 31 32 20 20 20 00 ff		.text $54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00
>01fed2		ff 00 00 50 03 00 02 01 01 00 02 10 00 00 00 f8
>01fee2		01 00 00 00 00 00 00 00
>01feea		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01fef2		00 03 20 00 28 00 00 00 00 00 00 00 00 00 00 00
>01ff02		00 00 00 00 00 00 00 00
>01ff0a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00
>01ff12		00 00 00 00 00 ff 01 00 00 00 4e 4f 20 4e 41 4d
>01ff22		45 20 20 20 20 00 00 00
>01ff2a		00 00 46 41 54 31 32 20		.text $00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00
>01ff32		20 20 00 ff ff 00 00 50 03 00 02 01 01 00 02 10
>01ff42		00 00 00 f8 01 00 00 00
>01ff4a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ff52		00 00 00 00 00 03 20 00 28 00 00 00 00 00 00 00
>01ff62		00 00 00 00 00 00 00 00
>01ff6a		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20
>01ff72		00 00 00 00 00 00 00 00 00 ff 01 00 00 00 4e 4f
>01ff82		20 4e 41 4d 45 20 20 20
>01ff8a		20 00 00 00 00 00 46 41		.text $20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8
>01ff92		54 31 32 20 20 20 00 ff ff 00 00 50 03 00 02 01
>01ffa2		01 00 02 10 00 00 00 f8
>01ffaa		01 00 00 00 00 00 00 00		.text $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>01ffb2		00 00 00 00 00 00 00 00 00 03 20 00 28 00 00 00
>01ffc2		00 00 00 00 00 00 00 00
>01ffca		00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D
>01ffd2		00 00 00 00 00 00 00 00 00 00 00 00 00 ff 01 00
>01ffe2		00 00 4e 4f 20 4e 41 4d
>01ffea		45 20 20 20 20 00 00 00		.text $45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10
>01fff2		00 00 46 41 54 31 32 20 20 20 00 ff ff 00 00 50
>020002	010002	03 00 02 01 01 00 02 10
>02000a	01000a	00 00 00 f8 01 00 00 00		.text $00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00
>020012	010012	00 00 00 00 00 00 00 00 00 00 00 00 00 03 20 00
>020022	010022	28 00 00 00 00 00 00 00
>02002a	01002a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F
>020032	010032	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020042	010042	00 ff 01 00 00 00 4e 4f
>02004a	01004a	20 4e 41 4d 45 20 20 20		.text $20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01
>020052	010052	20 00 00 00 00 00 46 41 54 31 32 20 20 20 00 ff
>020062	010062	ff 00 00 50 03 00 02 01
>02006a	01006a	01 00 02 10 00 00 00 f8		.text $01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00
>020072	010072	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020082	010082	00 03 20 00 28 00 00 00
>02008a	01008a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00
>020092	010092	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0200a2	0100a2	00 00 00 00 00 ff 01 00
>0200aa	0100aa	00 00 4e 4f 20 4e 41 4d		.text $00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50
>0200b2	0100b2	45 20 20 20 20 00 00 00 00 00 46 41 54 31 32 20
>0200c2	0100c2	20 20 00 ff ff 00 00 50
>0200ca	0100ca	03 00 02 01 01 00 02 10		.text $03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00
>0200d2	0100d2	00 00 00 f8 01 00 00 00 00 00 00 00 00 00 00 00
>0200e2	0100e2	00 00 00 00 00 03 20 00
>0200ea	0100ea	28 00 00 00 00 00 00 00		.text $28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0200f2	0100f2	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020102	010102	00 00 00 00 00 00 00 00
>02010a	01010a	00 ff 01 00 00 00 4e 4f		.text $00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF
>020112	010112	20 4e 41 4d 45 20 20 20 20 00 00 00 00 00 46 41
>020122	010122	54 31 32 20 20 20 00 ff
>02012a	01012a	ff 00 00 50 03 00 02 01		.text $FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020132	010132	01 00 02 10 00 00 00 f8 01 00 00 00 00 00 00 00
>020142	010142	00 00 00 00 00 00 00 00
>02014a	01014a	00 03 20 00 28 00 00 00		.text $00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020152	010152	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020162	010162	00 00 00 00 00 00 00 00
>02016a	01016a	00 00 00 00 00 ff 01 00		.text $00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20
>020172	010172	00 00 4e 4f 20 4e 41 4d 45 20 20 20 20 00 00 00
>020182	010182	00 00 46 41 54 31 32 20
>02018a	01018a	20 20 00 ff ff 00 00 50		.text $20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020192	010192	03 00 02 01 01 00 02 10 00 00 00 f8 01 00 00 00
>0201a2	0101a2	00 00 00 00 00 00 00 00
>0201aa	0101aa	00 00 00 00 00 03 20 00		.text $00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0201b2	0101b2	28 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0201c2	0101c2	00 00 00 00 00 00 00 00
>0201ca	0101ca	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41
>0201d2	0101d2	00 ff 01 00 00 00 4e 4f 20 4e 41 4d 45 20 20 20
>0201e2	0101e2	20 00 00 00 00 00 46 41
>0201ea	0101ea	54 31 32 20 20 20 00 ff		.text $54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00
>0201f2	0101f2	ff 00 00 50 03 00 02 01 01 00 02 10 00 00 00 f8
>020202	010202	01 00 00 00 00 00 00 00
>02020a	01020a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020212	010212	00 03 20 00 28 00 00 00 00 00 00 00 00 00 00 00
>020222	010222	00 00 00 00 00 00 00 00
>02022a	01022a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00
>020232	010232	00 00 00 00 00 ff 01 00 00 00 4e 4f 20 4e 41 4d
>020242	010242	45 20 20 20 20 00 00 00
>02024a	01024a	00 00 46 41 54 31 32 20		.text $00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00
>020252	010252	20 20 00 ff ff 00 00 50 03 00 02 01 01 00 02 10
>020262	010262	00 00 00 f8 01 00 00 00
>02026a	01026a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020272	010272	00 00 00 00 00 03 20 00 28 00 00 00 00 00 00 00
>020282	010282	00 00 00 00 00 00 00 00
>02028a	01028a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20
>020292	010292	00 00 00 00 00 00 00 00 00 ff 01 00 00 00 4e 4f
>0202a2	0102a2	20 4e 41 4d 45 20 20 20
>0202aa	0102aa	20 00 00 00 00 00 46 41		.text $20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8
>0202b2	0102b2	54 31 32 20 20 20 00 ff ff 00 00 50 03 00 02 01
>0202c2	0102c2	01 00 02 10 00 00 00 f8
>0202ca	0102ca	01 00 00 00 00 00 00 00		.text $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0202d2	0102d2	00 00 00 00 00 00 00 00 00 03 20 00 28 00 00 00
>0202e2	0102e2	00 00 00 00 00 00 00 00
>0202ea	0102ea	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D
>0202f2	0102f2	00 00 00 00 00 00 00 00 00 00 00 00 00 ff 01 00
>020302	010302	00 00 4e 4f 20 4e 41 4d
>02030a	01030a	45 20 20 20 20 00 00 00		.text $45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10
>020312	010312	00 00 46 41 54 31 32 20 20 20 00 ff ff 00 00 50
>020322	010322	03 00 02 01 01 00 02 10
>02032a	01032a	00 00 00 f8 01 00 00 00		.text $00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00
>020332	010332	00 00 00 00 00 00 00 00 00 00 00 00 00 03 20 00
>020342	010342	28 00 00 00 00 00 00 00
>02034a	01034a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F
>020352	010352	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020362	010362	00 ff 01 00 00 00 4e 4f
>02036a	01036a	20 4e 41 4d 45 20 20 20		.text $20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01
>020372	010372	20 00 00 00 00 00 46 41 54 31 32 20 20 20 00 ff
>020382	010382	ff 00 00 50 03 00 02 01
>02038a	01038a	01 00 02 10 00 00 00 f8		.text $01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00
>020392	010392	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0203a2	0103a2	00 03 20 00 28 00 00 00
>0203aa	0103aa	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00
>0203b2	0103b2	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0203c2	0103c2	00 00 00 00 00 ff 01 00
>0203ca	0103ca	00 00 4e 4f 20 4e 41 4d		.text $00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50
>0203d2	0103d2	45 20 20 20 20 00 00 00 00 00 46 41 54 31 32 20
>0203e2	0103e2	20 20 00 ff ff 00 00 50
>0203ea	0103ea	03 00 02 01 01 00 02 10		.text $03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00
>0203f2	0103f2	00 00 00 f8 01 00 00 00 00 00 00 00 00 00 00 00
>020402	010402	00 00 00 00 00 03 20 00
>02040a	01040a	28 00 00 00 00 00 00 00		.text $28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020412	010412	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020422	010422	00 00 00 00 00 00 00 00
>02042a	01042a	00 ff 01 00 00 00 4e 4f		.text $00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF
>020432	010432	20 4e 41 4d 45 20 20 20 20 00 00 00 00 00 46 41
>020442	010442	54 31 32 20 20 20 00 ff
>02044a	01044a	ff 00 00 50 03 00 02 01		.text $FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020452	010452	01 00 02 10 00 00 00 f8 01 00 00 00 00 00 00 00
>020462	010462	00 00 00 00 00 00 00 00
>02046a	01046a	00 03 20 00 28 00 00 00		.text $00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020472	010472	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020482	010482	00 00 00 00 00 00 00 00
>02048a	01048a	00 00 00 00 00 ff 01 00		.text $00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20
>020492	010492	00 00 4e 4f 20 4e 41 4d 45 20 20 20 20 00 00 00
>0204a2	0104a2	00 00 46 41 54 31 32 20
>0204aa	0104aa	20 20 00 ff ff 00 00 50		.text $20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0204b2	0104b2	03 00 02 01 01 00 02 10 00 00 00 f8 01 00 00 00
>0204c2	0104c2	00 00 00 00 00 00 00 00
>0204ca	0104ca	00 00 00 00 00 03 20 00		.text $00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0204d2	0104d2	28 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0204e2	0104e2	00 00 00 00 00 00 00 00
>0204ea	0104ea	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41
>0204f2	0104f2	00 ff 01 00 00 00 4e 4f 20 4e 41 4d 45 20 20 20
>020502	010502	20 00 00 00 00 00 46 41
>02050a	01050a	54 31 32 20 20 20 00 ff		.text $54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00
>020512	010512	ff 00 00 50 03 00 02 01 01 00 02 10 00 00 00 f8
>020522	010522	01 00 00 00 00 00 00 00
>02052a	01052a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020532	010532	00 03 20 00 28 00 00 00 00 00 00 00 00 00 00 00
>020542	010542	00 00 00 00 00 00 00 00
>02054a	01054a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00
>020552	010552	00 00 00 00 00 ff 01 00 00 00 4e 4f 20 4e 41 4d
>020562	010562	45 20 20 20 20 00 00 00
>02056a	01056a	00 00 46 41 54 31 32 20		.text $00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00
>020572	010572	20 20 00 ff ff 00 00 50 03 00 02 01 01 00 02 10
>020582	010582	00 00 00 f8 01 00 00 00
>02058a	01058a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020592	010592	00 00 00 00 00 03 20 00 28 00 00 00 00 00 00 00
>0205a2	0105a2	00 00 00 00 00 00 00 00
>0205aa	0105aa	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20
>0205b2	0105b2	00 00 00 00 00 00 00 00 00 ff 01 00 00 00 4e 4f
>0205c2	0105c2	20 4e 41 4d 45 20 20 20
>0205ca	0105ca	20 00 00 00 00 00 46 41		.text $20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8
>0205d2	0105d2	54 31 32 20 20 20 00 ff ff 00 00 50 03 00 02 01
>0205e2	0105e2	01 00 02 10 00 00 00 f8
>0205ea	0105ea	01 00 00 00 00 00 00 00		.text $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>0205f2	0105f2	00 00 00 00 00 00 00 00 00 03 20 00 28 00 00 00
>020602	010602	00 00 00 00 00 00 00 00
>02060a	01060a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D
>020612	010612	00 00 00 00 00 00 00 00 00 00 00 00 00 ff 01 00
>020622	010622	00 00 4e 4f 20 4e 41 4d
>02062a	01062a	45 20 20 20 20 00 00 00		.text $45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10
>020632	010632	00 00 46 41 54 31 32 20 20 20 00 ff ff 00 00 50
>020642	010642	03 00 02 01 01 00 02 10
>02064a	01064a	00 00 00 f8 01 00 00 00		.text $00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00
>020652	010652	00 00 00 00 00 00 00 00 00 00 00 00 00 03 20 00
>020662	010662	28 00 00 00 00 00 00 00
>02066a	01066a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F
>020672	010672	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020682	010682	00 ff 01 00 00 00 4e 4f
>02068a	01068a	20 4e 41 4d 45 20 20 20		.text $20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50,$03,$00,$02,$01
>020692	010692	20 00 00 00 00 00 46 41 54 31 32 20 20 20 00 ff
>0206a2	0106a2	ff 00 00 50 03 00 02 01
>0206aa	0106aa	01 00 02 10 00 00 00 f8		.text $01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00,$28,$00,$00,$00
>0206b2	0106b2	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0206c2	0106c2	00 03 20 00 28 00 00 00
>0206ca	0106ca	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$00
>0206d2	0106d2	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0206e2	0106e2	00 00 00 00 00 ff 01 00
>0206ea	0106ea	00 00 4e 4f 20 4e 41 4d		.text $00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF,$FF,$00,$00,$50
>0206f2	0106f2	45 20 20 20 20 00 00 00 00 00 46 41 54 31 32 20
>020702	010702	20 20 00 ff ff 00 00 50
>02070a	01070a	03 00 02 01 01 00 02 10		.text $03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$20,$00
>020712	010712	00 00 00 f8 01 00 00 00 00 00 00 00 00 00 00 00
>020722	010722	00 00 00 00 00 03 20 00
>02072a	01072a	28 00 00 00 00 00 00 00		.text $28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020732	010732	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>020742	010742	00 00 00 00 00 00 00 00
>02074a	01074a	00 ff 01 00 00 00 4e 4f		.text $00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20,$20,$20,$00,$FF
>020752	010752	20 4e 41 4d 45 20 20 20 20 00 00 00 00 00 46 41
>020762	010762	54 31 32 20 20 20 00 ff
>02076a	01076a	ff 00 00 50 03 00 02 01		.text $FF,$00,$00,$50,$03,$00,$02,$01,$01,$00,$02,$10,$00,$00,$00,$F8,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020772	010772	01 00 02 10 00 00 00 f8 01 00 00 00 00 00 00 00
>020782	010782	00 00 00 00 00 00 00 00
>02078a	01078a	00 03 20 00 28 00 00 00		.text $00,$03,$20,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>020792	010792	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0207a2	0107a2	00 00 00 00 00 00 00 00
>0207aa	0107aa	00 00 00 00 00 ff 01 00		.text $00,$00,$00,$00,$00,$FF,$01,$00,$00,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$00,$00,$00,$00,$00,$46,$41,$54,$31,$32,$20
>0207b2	0107b2	00 00 4e 4f 20 4e 41 4d 45 20 20 20 20 00 00 00
>0207c2	0107c2	00 00 46 41 54 31 32 20
>0207ca	0107ca	20 20 00 00 80 fa 80 72		.text $20,$20,$00,$00,$80,$FA,$80,$72,$0A,$80,$FC,$02,$74,$0A,$80,$FC,$0A,$74,$05,$2E,$FF,$2E,$06,$01,$53,$51,$52,$57,$1E,$06,$50,$B8
>0207d2	0107d2	0a 80 fc 02 74 0a 80 fc 0a 74 05 2e ff 2e 06 01
>0207e2	0107e2	53 51 52 57 1e 06 50 b8
>0207ea	0107ea	40 00 8e d8 c6 06 74 00		.text $40,$00,$8E,$D8,$C6,$06,$74,$00,$00,$80,$E2,$7F,$3A,$16,$75,$00,$72,$07,$C6,$06,$74,$00,$01,$EB,$20,$53,$8C,$C0,$C1,$EB,$04,$03
>0207f2	0107f2	00 80 e2 7f 3a 16 75 00 72 07 c6 06 74 00 01 eb
>020802	010802	20 53 8c c0 c1 eb 04 03
>02080a	01080a	c3 8e c0 5b 83 e3 0f 0e		.text $C3,$8E,$C0,$5B,$83,$E3,$0F,$0E,$E8,$DF,$00,$72,$0C,$58,$50,$E8,$1A,$00,$BA,$F6,$03,$EE,$E8,$6B,$00,$58,$8A,$26,$74,$00,$0A,$E4
>020812	010812	e8 df 00 72 0c 58 50 e8 1a 00 ba f6 03 ee e8 6b
>020822	010822	00 58 8a 26 74 00 0a e4
>02082a	01082a	74 01 f9 07 1f 5f 5a 59		.text $74,$01,$F9,$07,$1F,$5F,$5A,$59,$5B,$CA,$02,$00,$A2,$43,$00,$C6,$06,$48,$00,$20,$80,$FC,$02,$74,$05,$C6,$06,$48,$00,$22,$8A,$C1
>020832	010832	5b ca 02 00 a2 43 00 c6 06 48 00 20 80 fc 02 74
>020842	010842	05 c6 06 48 00 22 8a c1
>02084a	01084a	24 3f a2 44 00 88 2e 45		.text $24,$3F,$A2,$44,$00,$88,$2E,$45,$00,$8A,$C1,$C0,$E8,$06,$A2,$46,$00,$8B,$C2,$C0,$E0,$04,$80,$E4,$0F,$0A,$C4,$0C,$A0,$A2,$47,$00
>020852	010852	00 8a c1 c0 e8 06 a2 46 00 8b c2 c0 e0 04 80 e4
>020862	010862	0f 0a c4 0c a0 a2 47 00
>02086a	01086a	06 53 0e e8 5c 00 26 8b		.text $06,$53,$0E,$E8,$5C,$00,$26,$8B,$47,$05,$C1,$E8,$02,$A2,$42,$00,$26,$8A,$47,$08,$5B,$07,$8A,$26,$76,$00,$80,$E4,$C0,$0A,$E0,$88
>020872	010872	47 05 c1 e8 02 a2 42 00 26 8a 47 08 5b 07 8a 26
>020882	010882	76 00 80 e4 c0 0a e0 88
>02088a	01088a	26 76 00 c3 8b fb 0e e8		.text $26,$76,$00,$C3,$8B,$FB,$0E,$E8,$40,$00,$75,$35,$0E,$E8,$42,$00,$75,$2F,$B9,$00,$01,$BA,$F0,$01,$FC,$FA,$6D,$E2,$FD,$FB,$F6,$06
>020892	010892	40 00 75 35 0e e8 42 00 75 2f b9 00 01 ba f0 01
>0208a2	0108a2	fc fa 6d e2 fd fb f6 06
>0208aa	0108aa	48 00 02 74 10 0e e8 31		.text $48,$00,$02,$74,$10,$0E,$E8,$31,$00,$72,$16,$B9,$04,$00,$BA,$F0,$01,$FA,$F3,$6C,$FB,$0E,$E8,$29,$00,$75,$06,$FE,$0E,$43,$00,$75
>0208b2	0108b2	00 72 16 b9 04 00 ba f0 01 fa f3 6c fb 0e e8 29
>0208c2	0108c2	00 75 06 fe 0e 43 00 75
>0208ca	0108ca	cb c3 68 65 ff ea 8e 2f		.text $CB,$C3,$68,$65,$FF,$EA,$8E,$2F,$00,$F0,$68,$65,$FF,$EA,$1E,$2E,$00,$F0,$68,$65,$FF,$EA,$7F,$2E,$00,$F0,$68,$65,$FF,$EA,$E2,$2E
>0208d2	0108d2	00 f0 68 65 ff ea 1e 2e 00 f0 68 65 ff ea 7f 2e
>0208e2	0108e2	00 f0 68 65 ff ea e2 2e
>0208ea	0108ea	00 f0 68 65 ff ea f8 2e		.text $00,$F0,$68,$65,$FF,$EA,$F8,$2E,$00,$F0,$68,$65,$FF,$EA,$69,$2F,$00,$F0,$80,$FC,$15,$77,$05,$2E,$FF,$2E,$06,$01,$80,$FA,$80,$72
>0208f2	0108f2	00 f0 68 65 ff ea 69 2f 00 f0 80 fc 15 77 05 2e
>020902	010902	ff 2e 06 01 80 fa 80 72
>02090a	01090a	f6 1e 50 b8 40 00 8e d8		.text $F6,$1E,$50,$B8,$40,$00,$8E,$D8,$58,$9C,$2E,$FF,$1E,$06,$01,$1F,$CA,$02,$00,$00,$2E,$FF,$36,$F0,$04,$2E,$81,$3E,$F0,$04,$89,$1C
>020912	010912	58 9c 2e ff 1e 06 01 1f ca 02 00 00 2e ff 36 f0
>020922	010922	04 2e 81 3e f0 04 89 1c
>02092a	01092a	73 0e 2e c6 06 f4 04 13		.text $73,$0E,$2E,$C6,$06,$F4,$04,$13,$2E,$C6,$06,$F5,$04,$50,$EB,$13,$2E,$C6,$06,$F4,$04,$14,$2E,$C6,$06,$F5,$04,$00,$2E,$81,$2E,$F0
>020932	010932	2e c6 06 f5 04 50 eb 13 2e c6 06 f4 04 14 2e c6
>020942	010942	06 f5 04 00 2e 81 2e f0
>02094a	01094a	04 89 1c 33 d2 2e a1 f0		.text $04,$89,$1C,$33,$D2,$2E,$A1,$F0,$04,$BB,$B5,$05,$F7,$F3,$2E,$89,$16,$F0,$04,$B3,$04,$F6,$E3,$2E,$00,$06,$F5,$04,$2E,$FF,$06,$F0
>020952	010952	04 bb b5 05 f7 f3 2e 89 16 f0 04 b3 04 f6 e3 2e
>020962	010962	00 06 f5 04 2e ff 06 f0
>02096a	01096a	04 2e 81 3e f0 04 6e 01		.text $04,$2E,$81,$3E,$F0,$04,$6E,$01,$76,$26,$2E,$FE,$06,$F5,$04,$2E,$81,$2E,$F0,$04,$6E,$01,$B9,$03,$00,$2E,$81,$3E,$F0,$04,$6D,$01
>020972	010972	76 26 2e fe 06 f5 04 2e 81 2e f0 04 6e 01 b9 03
>020982	010982	00 2e 81 3e f0 04 6d 01
>02098a	01098a	76 14 2e fe 06 f5 04 2e		.text $76,$14,$2E,$FE,$06,$F5,$04,$2E,$81,$2E,$F0,$04,$6D,$01,$E2,$E9,$2E,$C6,$06,$F7,$04,$1D,$33,$DB,$33,$D2,$2E,$A1,$F0,$04,$BE,$F6
>020992	010992	81 2e f0 04 6d 01 e2 e9 2e c6 06 f7 04 1d 33 db
>0209a2	0109a2	33 d2 2e a1 f0 04 be f6
>0209aa	0109aa	04 b9 0c 00 fe c3 8a 14		.text $04,$B9,$0C,$00,$FE,$C3,$8A,$14,$3B,$C2,$76,$05,$46,$2B,$C2,$E2,$F3,$2E,$C6,$06,$F7,$04,$1C,$8A,$D3,$2E,$8A,$36,$F5,$04,$2E,$8A
>0209b2	0109b2	3b c2 76 05 46 2b c2 e2 f3 2e c6 06 f7 04 1c 8a
>0209c2	0109c2	d3 2e 8a 36 f5 04 2e 8a
>0209ca	0109ca	0e f4 04 2e ff 1e 02 05		.text $0E,$F4,$04,$2E,$FF,$1E,$02,$05,$86,$D0,$2E,$FF,$1E,$02,$05,$86,$F0,$2E,$FF,$1E,$02,$05,$86,$C8,$2E,$FF,$1E,$02,$05,$8A,$E8,$2E
>0209d2	0109d2	86 d0 2e ff 1e 02 05 86 f0 2e ff 1e 02 05 86 c8
>0209e2	0109e2	2e ff 1e 02 05 8a e8 2e
>0209ea	0109ea	8f 06 f0 04 cb 51 d4 0a		.text $8F,$06,$F0,$04,$CB,$51,$D4,$0A,$B1,$04,$D2,$E4,$0A,$C4,$59,$CB,$0E,$1F,$8F,$06,$BB,$06,$8F,$06,$BD,$06,$9D,$E8,$13,$00,$FA,$89
>0209f2	0109f2	b1 04 d2 e4 0a c4 59 cb 0e 1f 8f 06 bb 06 8f 06
>020a02	010a02	bd 06 9d e8 13 00 fa 89
>020a0a	010a0a	36 f0 04 fb e8 cb 00 fa		.text $36,$F0,$04,$FB,$E8,$CB,$00,$FA,$B4,$01,$CD,$1A,$FB,$FF,$2E,$BB,$06,$50,$51,$52,$32,$E4,$CD,$1A,$5A,$59,$58,$50,$53,$51,$52,$2E
>020a12	010a12	b4 01 cd 1a fb ff 2e bb 06 50 51 52 32 e4 cd 1a
>020a22	010a22	5a 59 58 50 53 51 52 2e
>020a2a	010a2a	c7 06 db 06 01 00 b4 04		.text $C7,$06,$DB,$06,$01,$00,$B4,$04,$CD,$1A,$73,$03,$E9,$93,$00,$88,$2E,$BF,$06,$88,$0E,$C0,$06,$88,$36,$C1,$06,$88,$16,$C2,$06,$2E
>020a32	010a32	cd 1a 73 03 e9 93 00 88 2e bf 06 88 0e c0 06 88
>020a42	010a42	36 c1 06 88 16 c2 06 2e
>020a4a	010a4a	c7 06 db 06 02 00 e8 49		.text $C7,$06,$DB,$06,$02,$00,$E8,$49,$01,$72,$77,$2E,$C7,$06,$DB,$06,$03,$00,$E8,$E6,$00,$72,$6B,$2E,$C7,$06,$DB,$06,$00,$00,$E8,$AA
>020a52	010a52	01 72 77 2e c7 06 db 06 03 00 e8 e6 00 72 6b 2e
>020a62	010a62	c7 06 db 06 00 00 e8 aa
>020a6a	010a6a	00 a0 c0 06 98 80 3e bf		.text $00,$A0,$C0,$06,$98,$80,$3E,$BF,$06,$14,$75,$03,$05,$64,$00,$2D,$50,$00,$B1,$04,$F6,$F1,$8A,$DC,$98,$B9,$B5,$05,$F7,$E1,$2E,$A3
>020a72	010a72	06 14 75 03 05 64 00 2d 50 00 b1 04 f6 f1 8a dc
>020a82	010a82	98 b9 b5 05 f7 e1 2e a3
>020a8a	010a8a	db 06 8a c3 98 0b c0 74		.text $DB,$06,$8A,$C3,$98,$0B,$C0,$74,$0C,$B9,$6D,$01,$F7,$E1,$2E,$01,$06,$DB,$06,$EB,$07,$80,$3E,$C1,$06,$02,$76,$05,$2E,$FF,$06,$DB
>020a92	010a92	0c b9 6d 01 f7 e1 2e 01 06 db 06 eb 07 80 3e c1
>020aa2	010aa2	06 02 76 05 2e ff 06 db
>020aaa	010aaa	06 8a 0e c2 06 32 ed 49		.text $06,$8A,$0E,$C2,$06,$32,$ED,$49,$2E,$01,$0E,$DB,$06,$8A,$0E,$C1,$06,$32,$ED,$49,$D1,$E1,$BE,$C3,$06,$03,$F1,$8B,$04,$2E,$01,$06
>020ab2	010ab2	2e 01 0e db 06 8a 0e c1 06 32 ed 49 d1 e1 be c3
>020ac2	010ac2	06 03 f1 8b 04 2e 01 06
>020aca	010aca	db 06 2e 8b 36 db 06 5a		.text $DB,$06,$2E,$8B,$36,$DB,$06,$5A,$59,$5B,$58,$C3,$33,$C9,$33,$D2,$EB,$38,$B4,$02,$CD,$1A,$72,$F4,$88,$2E,$BF,$06,$88,$0E,$C0,$06
>020ad2	010ad2	59 5b 58 c3 33 c9 33 d2 eb 38 b4 02 cd 1a 72 f4
>020ae2	010ae2	88 2e bf 06 88 0e c0 06
>020aea	010aea	88 36 c1 06 c6 06 c2 06		.text $88,$36,$C1,$06,$C6,$06,$C2,$06,$00,$E8,$A6,$00,$72,$DE,$E8,$88,$00,$72,$D9,$E8,$15,$00,$8A,$2E,$BF,$06,$8A,$0E,$C0,$06,$8A,$36
>020af2	010af2	00 e8 a6 00 72 de e8 88 00 72 d9 e8 15 00 8a 2e
>020b02	010b02	bf 06 8a 0e c0 06 8a 36
>020b0a	010b0a	c1 06 8a 16 c2 06 ff 1e		.text $C1,$06,$8A,$16,$C2,$06,$FF,$1E,$E2,$06,$C3,$A0,$BF,$06,$E8,$1F,$00,$A2,$BF,$06,$A0,$C0,$06,$E8,$16,$00,$A2,$C0,$06,$A0,$C1,$06
>020b12	010b12	e2 06 c3 a0 bf 06 e8 1f 00 a2 bf 06 a0 c0 06 e8
>020b22	010b22	16 00 a2 c0 06 a0 c1 06
>020b2a	010b2a	e8 0d 00 a2 c1 06 a0 c2		.text $E8,$0D,$00,$A2,$C1,$06,$A0,$C2,$06,$E8,$04,$00,$A2,$C2,$06,$C3,$8A,$E0,$24,$0F,$B1,$04,$D2,$EC,$D5,$0A,$C3,$80,$3E,$BF,$06,$20
>020b32	010b32	06 e8 04 00 a2 c2 06 c3 8a e0 24 0f b1 04 d2 ec
>020b42	010b42	d5 0a c3 80 3e bf 06 20
>020b4a	010b4a	77 35 74 0e 80 3e bf 06		.text $77,$35,$74,$0E,$80,$3E,$BF,$06,$19,$72,$2C,$80,$3E,$C0,$06,$80,$72,$25,$80,$3E,$C0,$06,$99,$77,$1E,$80,$3E,$C1,$06,$12,$77,$17
>020b52	010b52	19 72 2c 80 3e c0 06 80 72 25 80 3e c0 06 99 77
>020b62	010b62	1e 80 3e c1 06 12 77 17
>020b6a	010b6a	80 3e c1 06 00 76 10 80		.text $80,$3E,$C1,$06,$00,$76,$10,$80,$3E,$C2,$06,$31,$77,$09,$80,$3E,$C2,$06,$00,$76,$02,$F8,$C3,$F9,$C3,$80,$3E,$BF,$06,$24,$77,$10
>020b72	010b72	3e c2 06 31 77 09 80 3e c2 06 00 76 02 f8 c3 f9
>020b82	010b82	c3 80 3e bf 06 24 77 10
>020b8a	010b8a	80 3e c0 06 59 77 09 80		.text $80,$3E,$C0,$06,$59,$77,$09,$80,$3E,$C1,$06,$59,$77,$02,$F8,$C3,$F9,$C3,$B9,$04,$00,$BB,$BF,$06,$8A,$07,$8A,$E0,$25,$0F,$F0,$3C
>020b92	010b92	3e c1 06 59 77 02 f8 c3 f9 c3 b9 04 00 bb bf 06
>020ba2	010ba2	8a 07 8a e0 25 0f f0 3c
>020baa	010baa	0a 77 16 d0 ec d0 ec d0		.text $0A,$77,$16,$D0,$EC,$D0,$EC,$D0,$EC,$D0,$EC,$80,$E4,$0F,$80,$FC,$0A,$77,$06,$43,$49,$75,$E1,$F8,$C3,$F9,$C3,$90,$00,$00,$00,$00
>020bb2	010bb2	ec d0 ec 80 e4 0f 80 fc 0a 77 06 43 49 75 e1 f8
>020bc2	010bc2	c3 f9 c3 90 00 00 00 00
>020bca	010bca	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$02,$00,$00,$FF,$FF,$02,$09,$28,$00,$00,$02,$00,$01,$40,$00,$00,$00,$00,$08,$01,$02
>020bd2	010bd2	00 80 00 02 00 00 ff ff 02 09 28 00 00 02 00 01
>020be2	010be2	40 00 00 00 00 08 01 02
>020bea	010bea	70 00 00 00 00 20 02 04		.text $70,$00,$00,$00,$00,$20,$02,$04,$00,$01,$00,$00,$A8,$7F,$03,$08,$00,$02,$00,$00,$FF,$FF,$04,$10,$00,$04,$00,$00,$00,$00,$A8,$7F
>020bf2	010bf2	00 01 00 00 a8 7f 03 08 00 02 00 00 ff ff 04 10
>020c02	010c02	00 04 00 00 00 00 a8 7f
>020c0a	010c0a	03 08 00 02 00 00 04 00		.text $03,$08,$00,$02,$00,$00,$04,$00,$00,$00,$02,$04,$00,$02,$40,$00,$08,$00,$00,$00,$03,$08,$00,$02,$40,$00,$10,$00,$00,$00,$04,$10
>020c12	010c12	00 00 02 04 00 02 40 00 08 00 00 00 03 08 00 02
>020c22	010c22	40 00 10 00 00 00 04 10
>020c2a	010c2a	00 02 40 00 20 00 00 00		.text $00,$02,$40,$00,$20,$00,$00,$00,$05,$20,$00,$02,$40,$00,$40,$00,$00,$00,$06,$40,$00,$02,$40,$00,$80,$00,$00,$00,$07,$80,$00,$02
>020c32	010c32	05 20 00 02 40 00 40 00 00 00 06 40 00 02 40 00
>020c42	010c42	80 00 00 00 07 80 00 02
>020c4a	010c4a	40 00 00 00 87 06 19 09		.text $40,$00,$00,$00,$87,$06,$19,$09,$00,$00,$00,$00,$30,$31,$2F,$31,$30,$2F,$38,$34,$00,$90,$00,$02,$02,$01,$00,$02,$70,$00,$D0,$02
>020c52	010c52	00 00 00 00 30 31 2f 31 30 2f 38 34 00 90 00 02
>020c62	010c62	02 01 00 02 70 00 d0 02
>020c6a	010c6a	fd 02 00 09 00 02 00 00		.text $FD,$02,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$00,$02,$01,$01,$00,$02,$E0,$00,$60,$09,$F9,$07,$00,$0F,$00,$02
>020c72	010c72	00 00 00 00 00 00 00 90 00 02 01 01 00 02 e0 00
>020c82	010c82	60 09 f9 07 00 0f 00 02
>020c8a	010c8a	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$00,$02,$02,$01,$00,$02,$70,$00,$A0,$05,$F9,$03,$00,$09,$00,$02,$00,$00,$00,$00,$00,$00
>020c92	010c92	00 90 00 02 02 01 00 02 70 00 a0 05 f9 03 00 09
>020ca2	010ca2	00 02 00 00 00 00 00 00
>020caa	010caa	00 00 00 90 00 02 02 01		.text $00,$00,$00,$90,$00,$02,$02,$01,$00,$02,$F0,$00,$80,$16,$F0,$09,$00,$24,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$70,$17
>020cb2	010cb2	00 02 f0 00 80 16 f0 09 00 24 00 02 00 00 00 00
>020cc2	010cc2	00 00 00 00 00 90 70 17
>020cca	010cca	8a 17 a4 17 a4 17 a4 17		.text $8A,$17,$A4,$17,$A4,$17,$A4,$17,$A4,$17,$A4,$17,$A4,$17,$A4,$17,$BE,$17,$C8,$00,$2E,$FF,$36,$EC,$17,$2E,$FF,$36,$E0,$06,$55,$CB
>020cd2	010cd2	a4 17 a4 17 a4 17 a4 17 be 17 c8 00 2e ff 36 ec
>020ce2	010ce2	17 2e ff 36 e0 06 55 cb
>020cea	010cea	00 fa 50 33 c0 8e d8 58		.text $00,$FA,$50,$33,$C0,$8E,$D8,$58,$2E,$A3,$DA,$16,$2E,$89,$1E,$D8,$16,$0E,$07,$51,$57,$1E,$B8,$73,$04,$8E,$D8,$BE,$35,$57,$AC,$0A
>020cf2	010cf2	2e a3 da 16 2e 89 1e d8 16 0e 07 51 57 1e b8 73
>020d02	010d02	04 8e d8 be 35 57 ac 0a
>020d0a	010d0a	c0 74 09 b4 0e bb 07 00		.text $C0,$74,$09,$B4,$0E,$BB,$07,$00,$CD,$10,$EB,$F2,$1F,$B9,$05,$00,$BE,$00,$01,$2E,$AC,$98,$D1,$E0,$D1,$E0,$8B,$F8,$87,$F7,$AD,$AB
>020d12	010d12	cd 10 eb f2 1f b9 05 00 be 00 01 2e ac 98 d1 e0
>020d22	010d22	d1 e0 8b f8 87 f7 ad ab
>020d2a	010d2a	ad ab 87 f7 e2 ed 5f 59		.text $AD,$AB,$87,$F7,$E2,$ED,$5F,$59,$2E,$A1,$06,$01,$2E,$A3,$B4,$00,$2E,$A1,$08,$01,$2E,$A3,$B6,$00,$C7,$06,$4C,$00,$74,$07,$8C,$0E
>020d32	010d32	2e a1 06 01 2e a3 b4 00 2e a1 08 01 2e a3 b6 00
>020d42	010d42	c7 06 4c 00 74 07 8c 0e
>020d4a	010d4a	4e 00 c7 06 54 00 4a 08		.text $4E,$00,$C7,$06,$54,$00,$4A,$08,$8C,$0E,$56,$00,$C7,$06,$64,$00,$FB,$07,$8C,$0E,$66,$00,$FB,$CD,$11,$A9,$01,$00,$75,$36,$50,$53
>020d52	010d52	8c 0e 56 00 c7 06 64 00 fb 07 8c 0e 66 00 fb cd
>020d62	010d62	11 a9 01 00 75 36 50 53
>020d6a	010d6a	51 52 57 06 b4 08 b2 00		.text $51,$52,$57,$06,$B4,$08,$B2,$00,$CD,$13,$72,$05,$2E,$88,$16,$FA,$17,$07,$5F,$5A,$59,$5B,$58,$72,$1B,$2E,$80,$3E,$FA,$17,$00,$74
>020d72	010d72	cd 13 72 05 2e 88 16 fa 17 07 5f 5a 59 5b 58 72
>020d82	010d82	1b 2e 80 3e fa 17 00 74
>020d8a	010d8a	08 2e a0 fa 17 fe c8 eb		.text $08,$2E,$A0,$FA,$17,$FE,$C8,$EB,$0F,$2E,$C6,$06,$ED,$16,$01,$B8,$01,$00,$EB,$0A,$D0,$C0,$D0,$C0,$25,$03,$00,$75,$06,$40,$2E,$FE
>020d92	010d92	0f 2e c6 06 ed 16 01 b8 01 00 eb 0a d0 c0 d0 c0
>020da2	010da2	25 03 00 75 06 40 2e fe
>020daa	010daa	06 78 00 40 8a c8 f6 c2		.text $06,$78,$00,$40,$8A,$C8,$F6,$C2,$80,$75,$02,$33,$C0,$33,$D2,$FA,$8E,$D2,$BC,$00,$07,$FB,$51,$8A,$E5,$50,$B4,$C0,$CD,$15,$72,$17
>020db2	010db2	80 75 02 33 c0 33 d2 fa 8e d2 bc 00 07 fb 51 8a
>020dc2	010dc2	e5 50 b4 c0 cd 15 72 17
>020dca	010dca	80 fc 00 75 12 26 8a 47		.text $80,$FC,$00,$75,$12,$26,$8A,$47,$02,$2E,$A2,$3E,$06,$26,$8A,$47,$03,$2E,$A2,$3F,$06,$EB,$0D,$BE,$FF,$FF,$8E,$C6,$26,$A0,$0E,$00
>020dd2	010dd2	02 2e a2 3e 06 26 8a 47 03 2e a2 3f 06 eb 0d be
>020de2	010de2	ff ff 8e c6 26 a0 0e 00
>020dea	010dea	2e a2 3e 06 b0 20 e6 20		.text $2E,$A2,$3E,$06,$B0,$20,$E6,$20,$2E,$80,$3E,$3E,$06,$00,$75,$10,$E4,$66,$A8,$20,$74,$0A,$B0,$0F,$E6,$50,$E4,$50,$A8,$01,$74,$14
>020df2	010df2	2e 80 3e 3e 06 00 75 10 e4 66 a8 20 74 0a b0 0f
>020e02	010e02	e6 50 e4 50 a8 01 74 14
>020e0a	010e0a	b0 03 e8 86 09 b0 02 e8		.text $B0,$03,$E8,$86,$09,$B0,$02,$E8,$81,$09,$B0,$01,$E8,$7C,$09,$32,$C0,$E8,$77,$09,$B0,$02,$E8,$6A,$09,$B0,$01,$E8,$65,$09,$32,$C0
>020e12	010e12	81 09 b0 01 e8 7c 09 32 c0 e8 77 09 b0 02 e8 6a
>020e22	010e22	09 b0 01 e8 65 09 32 c0
>020e2a	010e2a	e8 60 09 33 d2 8e da 8e		.text $E8,$60,$09,$33,$D2,$8E,$DA,$8E,$C2,$33,$C0,$BF,$34,$05,$AB,$AB,$8C,$C8,$C7,$06,$6C,$00,$EE,$06,$A3,$6E,$00,$C7,$06,$A4,$00,$62
>020e32	010e32	c2 33 c0 bf 34 05 ab ab 8c c8 c7 06 6c 00 ee 06
>020e42	010e42	a3 6e 00 c7 06 a4 00 62
>020e4a	010e4a	07 a3 a6 00 bf 04 00 bb		.text $07,$A3,$A6,$00,$BF,$04,$00,$BB,$F4,$06,$93,$AB,$93,$AB,$83,$C7,$04,$93,$AB,$93,$AB,$93,$AB,$93,$AB,$89,$16,$00,$05,$89,$16,$04
>020e52	010e52	f4 06 93 ab 93 ab 83 c7 04 93 ab 93 ab 93 ab 93
>020e62	010e62	ab 89 16 00 05 89 16 04
>020e6a	010e6a	05 a0 2c 05 2e a2 26 01		.text $05,$A0,$2C,$05,$2E,$A2,$26,$01,$2E,$80,$3E,$3E,$06,$FD,$72,$0B,$C7,$06,$2B,$05,$0F,$02,$C6,$06,$22,$05,$DF,$CD,$12,$B1,$06,$D3
>020e72	010e72	2e 80 3e 3e 06 fd 72 0b c7 06 2b 05 0f 02 c6 06
>020e82	010e82	22 05 df cd 12 b1 06 d3
>020e8a	010e8a	e0 59 2e 89 0e d6 16 50		.text $E0,$59,$2E,$89,$0E,$D6,$16,$50,$1E,$53,$33,$DB,$8E,$DB,$8B,$1E,$BC,$00,$8E,$1E,$BE,$00,$81,$7F,$03,$52,$50,$75,$0F,$80,$7F,$05
>020e92	010e92	1e 53 33 db 8e db 8b 1e bc 00 8e 1e be 00 81 7f
>020ea2	010ea2	03 52 50 75 0f 80 7f 05
>020eaa	010eaa	4c 75 09 8b d0 b8 06 4a		.text $4C,$75,$09,$8B,$D0,$B8,$06,$4A,$CD,$2F,$8B,$C2,$5B,$1F,$2D,$40,$00,$2E,$A3,$DF,$16,$2D,$40,$00,$2E,$A3,$E1,$16,$58,$BA,$73,$04
>020eb2	010eb2	cd 2f 8b c2 5b 1f 2d 40 00 2e a3 df 16 2d 40 00
>020ec2	010ec2	2e a3 e1 16 58 ba 73 04
>020eca	010eca	8e da c7 06 75 02 23 00		.text $8E,$DA,$C7,$06,$75,$02,$23,$00,$8C,$0E,$77,$02,$A3,$94,$02,$FE,$C1,$88,$0E,$98,$02,$C7,$06,$73,$02,$09,$0A,$B8,$73,$04,$8E,$C0
>020ed2	010ed2	8c 0e 77 02 a3 94 02 fe c1 88 0e 98 02 c7 06 73
>020ee2	010ee2	02 09 0a b8 73 04 8e c0
>020eea	010eea	33 c0 8e d8 a1 3e 00 26		.text $33,$C0,$8E,$D8,$A1,$3E,$00,$26,$3B,$06,$94,$02,$76,$05,$3D,$00,$F0,$75,$0A,$C7,$06,$3C,$00,$F4,$06,$8C,$0E,$3E,$00,$33,$C9,$8E
>020ef2	010ef2	3b 06 94 02 76 05 3d 00 f0 75 0a c7 06 3c 00 f4
>020f02	010f02	06 8c 0e 3e 00 33 c9 8e
>020f0a	010f0a	d9 8a 0e 96 04 f6 c1 10		.text $D9,$8A,$0E,$96,$04,$F6,$C1,$10,$74,$0C,$2E,$C6,$06,$E5,$04,$10,$2E,$C6,$06,$E6,$04,$11,$0E,$1F,$0E,$07,$E8,$B7,$09,$C7,$06,$00
>020f12	010f12	74 0c 2e c6 06 e5 04 10 2e c6 06 e6 04 11 0e 1f
>020f22	010f22	0e 07 e8 b7 09 c7 06 00
>020f2a	010f2a	00 18 09 58 32 e4 a2 75		.text $00,$18,$09,$58,$32,$E4,$A2,$75,$00,$A2,$25,$01,$D1,$E0,$01,$06,$5E,$17,$1E,$B8,$00,$F0,$8E,$D8,$81,$3E,$EA,$FF,$43,$4F,$75,$1F
>020f32	010f32	00 a2 25 01 d1 e0 01 06 5e 17 1e b8 00 f0 8e d8
>020f42	010f42	81 3e ea ff 43 4f 75 1f
>020f4a	010f4a	81 3e ec ff 4d 50 75 17		.text $81,$3E,$EC,$FF,$4D,$50,$75,$17,$81,$3E,$EE,$FF,$41,$51,$75,$0F,$B8,$00,$E4,$CD,$15,$72,$08,$83,$CB,$40,$B8,$80,$E4,$CD,$15,$1F
>020f52	010f52	81 3e ee ff 41 51 75 0f b8 00 e4 cd 15 72 08 83
>020f62	010f62	cb 40 b8 80 e4 cd 15 1f
>020f6a	010f6a	b2 80 b4 08 cd 13 72 04		.text $B2,$80,$B4,$08,$CD,$13,$72,$04,$88,$16,$5D,$17,$32,$D2,$0E,$1F,$C6,$06,$2C,$01,$09,$BF,$19,$01,$80,$3E,$ED,$16,$01,$75,$0B,$8B
>020f72	010f72	88 16 5d 17 32 d2 0e 1f c6 06 2c 01 09 bf 19 01
>020f82	010f82	80 3e ed 16 01 75 0b 8b
>020f8a	010f8a	3d 8b 3d c7 05 ff ff e9		.text $3D,$8B,$3D,$C7,$05,$FF,$FF,$E9,$14,$01,$3A,$16,$75,$00,$72,$03,$E9,$07,$01,$33,$C9,$8B,$3D,$B6,$00,$C6,$06,$EC,$16,$28,$1E,$57
>020f92	010f92	14 01 3a 16 75 00 72 03 e9 07 01 33 c9 8b 3d b6
>020fa2	010fa2	00 c6 06 ec 16 28 1e 57
>020faa	010faa	52 51 06 b4 08 cd 13 72		.text $52,$51,$06,$B4,$08,$CD,$13,$72,$78,$80,$FD,$00,$75,$06,$B5,$27,$B1,$09,$B6,$01,$FE,$C6,$FE,$C5,$88,$36,$EA,$16,$80,$E1,$3F,$88
>020fb2	010fb2	78 80 fd 00 75 06 b5 27 b1 09 b6 01 fe c6 fe c5
>020fc2	010fc2	88 36 ea 16 80 e1 3f 88
>020fca	010fca	0e eb 16 88 2e ec 16 3a		.text $0E,$EB,$16,$88,$2E,$EC,$16,$3A,$0E,$2C,$01,$76,$04,$88,$0E,$2C,$01,$07,$59,$5A,$5F,$1F,$B4,$15,$CD,$13,$72,$0D,$80,$FC,$02,$75
>020fd2	010fd2	0e 2c 01 76 04 88 0e 2c 01 07 59 5a 5f 1f b4 15
>020fe2	010fe2	cd 13 72 0d 80 fc 02 75
>020fea	010fea	08 80 c9 02 c6 06 77 00		.text $08,$80,$C9,$02,$C6,$06,$77,$00,$01,$80,$3E,$EC,$16,$28,$75,$0B,$80,$3E,$EB,$16,$09,$76,$54,$B6,$07,$EB,$50,$80,$3E,$EC,$16,$50
>020ff2	010ff2	01 80 3e ec 16 28 75 0b 80 3e eb 16 09 76 54 b6
>021002	011002	07 eb 50 80 3e ec 16 50
>02100a	01100a	75 f5 b6 09 80 3e eb 16		.text $75,$F5,$B6,$09,$80,$3E,$EB,$16,$24,$74,$40,$80,$3E,$EB,$16,$0F,$74,$0B,$80,$3E,$EB,$16,$09,$75,$DE,$B6,$02,$EB,$2E,$B6,$01,$EB
>021012	011012	24 74 40 80 3e eb 16 0f 74 0b 80 3e eb 16 09 75
>021022	011022	de b6 02 eb 2e b6 01 eb
>02102a	01102a	2a 07 59 5a 5f 1f b4 15		.text $2A,$07,$59,$5A,$5F,$1F,$B4,$15,$CD,$13,$72,$1F,$80,$FC,$02,$75,$1A,$80,$C9,$02,$C6,$06,$77,$00,$01,$C6,$06,$EC,$16,$50,$B6,$01
>021032	011032	cd 13 72 1f 80 fc 02 75 1a 80 c9 02 c6 06 77 00
>021042	011042	01 c6 06 ec 16 50 b6 01
>02104a	01104a	b0 0f 3a 06 2c 01 76 03		.text $B0,$0F,$3A,$06,$2C,$01,$76,$03,$A2,$2C,$01,$80,$C9,$20,$8A,$FA,$80,$3E,$78,$00,$02,$75,$05,$FE,$CF,$80,$F1,$20,$33,$C0,$A0,$EA
>021052	011052	a2 2c 01 80 c9 20 8a fa 80 3e 78 00 02 75 05 fe
>021062	011062	cf 80 f1 20 33 c0 a0 ea
>02106a	01106a	16 89 45 36 a0 eb 16 89		.text $16,$89,$45,$36,$A0,$EB,$16,$89,$45,$34,$89,$4D,$23,$88,$75,$22,$88,$55,$05,$88,$7D,$04,$8A,$1E,$EC,$16,$88,$5D,$25,$80,$3E,$78
>021072	011072	45 34 89 4d 23 88 75 22 88 55 05 88 7d 04 8a 1e
>021082	011082	ec 16 88 5d 25 80 3e 78
>02108a	01108a	00 01 75 11 c6 06 78 00		.text $00,$01,$75,$11,$C6,$06,$78,$00,$02,$83,$C9,$10,$09,$4D,$23,$8B,$3D,$FE,$C2,$EB,$B6,$FE,$C2,$E9,$F0,$FE,$C7,$05,$FF,$FF,$8A,$36
>021092	011092	02 83 c9 10 09 4d 23 8b 3d fe c2 eb b6 fe c2 e9
>0210a2	0110a2	f0 fe c7 05 ff ff 8a 36
>0210aa	0110aa	5d 17 0a f6 74 5b b2 80		.text $5D,$17,$0A,$F6,$74,$5B,$B2,$80,$52,$8B,$3E,$60,$17,$8A,$1E,$75,$00,$B7,$00,$E8,$53,$02,$72,$08,$E8,$CF,$07,$73,$03,$E8,$DF,$07
>0210b2	0110b2	52 8b 3e 60 17 8a 1e 75 00 b7 00 e8 53 02 72 08
>0210c2	0110c2	e8 cf 07 73 03 e8 df 07
>0210ca	0110ca	5a fe c2 fe ce 75 e1 e8		.text $5A,$FE,$C2,$FE,$CE,$75,$E1,$E8,$CB,$06,$8A,$36,$5D,$17,$B2,$80,$B7,$01,$52,$53,$8B,$3E,$60,$17,$8A,$1E,$75,$00,$E8,$2A,$02,$72
>0210d2	0110d2	cb 06 8a 36 5d 17 b2 80 b7 01 52 53 8b 3e 60 17
>0210e2	0110e2	8a 1e 75 00 e8 2a 02 72
>0210ea	0110ea	0e e8 a6 07 73 09 e8 b6		.text $0E,$E8,$A6,$07,$73,$09,$E8,$B6,$07,$5B,$5A,$FE,$C7,$EB,$E3,$5B,$5A,$FE,$C2,$FE,$CE,$75,$D9,$80,$3E,$25,$01,$02,$76,$03,$E8,$83
>0210f2	0110f2	07 5b 5a fe c7 eb e3 5b 5a fe c2 fe ce 75 d9 80
>021102	011102	3e 25 01 02 76 03 e8 83
>02110a	01110a	01 8b 3e 60 17 81 ff 19		.text $01,$8B,$3E,$60,$17,$81,$FF,$19,$09,$75,$0D,$BF,$18,$09,$80,$3E,$77,$00,$00,$75,$03,$BF,$FE,$08,$0E,$07,$FC,$80,$3E,$3E,$06,$FC
>021112	011112	09 75 0d bf 18 09 80 3e 77 00 00 75 03 bf fe 08
>021122	011122	0e 07 fc 80 3e 3e 06 fc
>02112a	01112a	75 23 80 3e 5d 17 00 74		.text $75,$23,$80,$3E,$5D,$17,$00,$74,$1C,$97,$BE,$00,$F0,$8E,$C6,$BE,$66,$17,$BF,$F5,$FF,$B9,$09,$00,$F3,$A6,$97,$75,$08,$B9,$0C,$14
>021132	011132	1c 97 be 00 f0 8e c6 be 66 17 bf f5 ff b9 09 00
>021142	011142	f3 a6 97 75 08 b9 0c 14
>02114a	01114a	be de 12 eb 4b b8 00 f0		.text $BE,$DE,$12,$EB,$4B,$B8,$00,$F0,$8E,$C0,$26,$81,$3E,$EA,$FF,$43,$4F,$75,$4B,$26,$81,$3E,$EC,$FF,$4D,$50,$75,$42,$26,$81,$3E,$EE
>021152	011152	8e c0 26 81 3e ea ff 43 4f 75 4b 26 81 3e ec ff
>021162	011162	4d 50 75 42 26 81 3e ee
>02116a	01116a	ff 41 51 75 39 26 a1 fb		.text $FF,$41,$51,$75,$39,$26,$A1,$FB,$FF,$86,$E0,$3D,$36,$38,$77,$2E,$72,$18,$26,$A1,$F5,$FF,$86,$E0,$3D,$38,$30,$77,$21,$72,$0B,$26
>021172	011172	ff 86 e0 3d 36 38 77 2e 72 18 26 a1 f5 ff 86 e0
>021182	011182	3d 38 30 77 21 72 0b 26
>02118a	01118a	a1 f8 ff 86 e0 3d 34 30		.text $A1,$F8,$FF,$86,$E0,$3D,$34,$30,$73,$14,$B9,$2D,$14,$BE,$0C,$14,$0E,$07,$89,$3E,$B4,$00,$8C,$0E,$B6,$00,$2B,$CE,$F3,$A4,$0E,$07
>021192	011192	73 14 b9 2d 14 be 0c 14 0e 07 89 3e b4 00 8c 0e
>0211a2	0111a2	b6 00 2b ce f3 a4 0e 07
>0211aa	0111aa	80 3e f3 04 01 75 18 89		.text $80,$3E,$F3,$04,$01,$75,$18,$89,$3E,$06,$05,$B9,$D1,$00,$BE,$2E,$14,$F3,$A4,$89,$3E,$02,$05,$B9,$0B,$00,$BE,$FF,$14,$F3,$A4,$57
>0211b2	0111b2	3e 06 05 b9 d1 00 be 2e 14 f3 a4 89 3e 02 05 b9
>0211c2	0111c2	0b 00 be ff 14 f3 a4 57
>0211ca	0111ca	b8 01 41 b3 01 26 8a 3d		.text $B8,$01,$41,$B3,$01,$26,$8A,$3D,$F9,$CD,$15,$5F,$72,$1B,$C6,$06,$79,$00,$01,$1E,$33,$C0,$8E,$D8,$89,$3E,$B0,$01,$8C,$0E,$B2,$01
>0211d2	0111d2	f9 cd 15 5f 72 1b c6 06 79 00 01 1e 33 c0 8e d8
>0211e2	0111e2	89 3e b0 01 8c 0e b2 01
>0211ea	0111ea	1f be 0a 15 b9 cb 01 f3		.text $1F,$BE,$0A,$15,$B9,$CB,$01,$F3,$A4,$0E,$1F,$83,$C7,$0F,$D1,$EF,$D1,$EF,$D1,$EF,$D1,$EF,$81,$C7,$70,$00,$89,$3E,$03,$00,$A1,$D6
>0211f2	0111f2	a4 0e 1f 83 c7 0f d1 ef d1 ef d1 ef d1 ef 81 c7
>021202	011202	70 00 89 3e 03 00 a1 d6
>02120a	01120a	16 bd d7 04 0e e8 cc fa		.text $16,$BD,$D7,$04,$0E,$E8,$CC,$FA,$BD,$06,$06,$0E,$E8,$C5,$FA,$06,$1F,$33,$FF,$26,$8A,$05,$26,$A2,$D7,$16,$26,$A1,$D6,$16,$06,$1E
>021212	011212	bd 06 06 0e e8 c5 fa 06 1f 33 ff 26 8a 05 26 a2
>021222	011222	d7 16 26 a1 d6 16 06 1e
>02122a	01122a	07 0e 1f bd d7 04 0e e8		.text $07,$0E,$1F,$BD,$D7,$04,$0E,$E8,$AA,$FA,$06,$1F,$07,$8B,$5D,$06,$2E,$89,$1E,$E4,$16,$8A,$5D,$1F,$26,$88,$1E,$DE,$16,$8A,$4D,$08
>021232	011232	aa fa 06 1f 07 8b 5d 06 2e 89 1e e4 16 8a 5d 1f
>021242	011242	26 88 1e de 16 8a 4d 08
>02124a	01124a	8b 45 17 26 29 06 d8 16		.text $8B,$45,$17,$26,$29,$06,$D8,$16,$8B,$45,$19,$26,$19,$06,$DA,$16,$32,$ED,$1E,$33,$FF,$8E,$DF,$8B,$1E,$3A,$05,$1F,$B8,$73,$04,$8E
>021252	011252	8b 45 19 26 19 06 da 16 32 ed 1e 33 ff 8e df 8b
>021262	011262	1e 3a 05 1f b8 73 04 8e
>02126a	01126a	c0 26 8e 06 73 02 e8 16		.text $C0,$26,$8E,$06,$73,$02,$E8,$16,$07,$2E,$F6,$06,$DE,$16,$40,$75,$06,$81,$FB,$F7,$0F,$EB,$03,$83,$FB,$F7,$72,$E0,$E8,$49,$04,$EA
>021272	011272	07 2e f6 06 de 16 40 75 06 81 fb f7 0f eb 03 83
>021282	011282	fb f7 72 e0 e8 49 04 ea
>02128a	01128a	69 02 73 04 2e 8b 3e 19		.text $69,$02,$73,$04,$2E,$8B,$3E,$19,$01,$80,$7D,$04,$80,$74,$09,$8B,$3D,$83,$FF,$FF,$75,$F3,$EB,$50,$B0,$02,$88,$45,$05,$8B,$3D,$FE
>021292	011292	01 80 7d 04 80 74 09 8b 3d 83 ff ff 75 f3 eb 50
>0212a2	0112a2	b0 02 88 45 05 8b 3d fe
>0212aa	0112aa	c0 83 ff ff 75 f4 2e 8b		.text $C0,$83,$FF,$FF,$75,$F4,$2E,$8B,$3E,$19,$01,$8B,$3D,$2E,$8A,$26,$25,$01,$80,$EC,$02,$8B,$3D,$88,$45,$05,$FE,$C0,$FE,$CC,$75,$F5
>0212b2	0112b2	3e 19 01 8b 3d 2e 8a 26 25 01 80 ec 02 8b 3d 88
>0212c2	0112c2	45 05 fe c0 fe cc 75 f5
>0212ca	0112ca	2e a0 d6 16 3c 02 72 20		.text $2E,$A0,$D6,$16,$3C,$02,$72,$20,$2E,$2A,$06,$25,$01,$72,$04,$04,$02,$EB,$05,$2E,$02,$06,$75,$00,$2E,$A2,$D6,$16,$FE,$C0,$1E,$BF
>0212d2	0112d2	2e 2a 06 25 01 72 04 04 02 eb 05 2e 02 06 75 00
>0212e2	0112e2	2e a2 d6 16 fe c0 1e bf
>0212ea	0112ea	73 04 8e df a2 98 02 1f		.text $73,$04,$8E,$DF,$A2,$98,$02,$1F,$C3,$2E,$A1,$E1,$16,$8E,$C0,$BB,$00,$02,$B8,$01,$02,$32,$F6,$B9,$01,$00,$CD,$13,$72,$09,$26,$81
>0212f2	0112f2	c3 2e a1 e1 16 8e c0 bb 00 02 b8 01 02 32 f6 b9
>021302	011302	01 00 cd 13 72 09 26 81
>02130a	01130a	3e fe 03 55 aa 74 01 f9		.text $3E,$FE,$03,$55,$AA,$74,$01,$F9,$C3,$57,$53,$1E,$06,$88,$5D,$05,$88,$55,$04,$80,$4D,$23,$01,$C6,$45,$22,$05,$C6,$06,$DE,$16,$00
>021312	011312	c3 57 53 1e 06 88 5d 05 88 55 04 80 4d 23 01 c6
>021322	011322	45 22 05 c6 06 de 16 00
>02132a	01132a	8a f7 52 b4 08 cd 13 fe		.text $8A,$F7,$52,$B4,$08,$CD,$13,$FE,$C6,$88,$75,$15,$5A,$72,$63,$80,$E1,$3F,$88,$4D,$13,$52,$E8,$B0,$FF,$5A,$72,$56,$BB,$C2,$03,$26
>021332	011332	c6 88 75 15 5a 72 63 80 e1 3f 88 4d 13 52 e8 b0
>021342	011342	ff 5a 72 56 bb c2 03 26
>02134a	01134a	f6 47 fc 80 74 18 26 80		.text $F6,$47,$FC,$80,$74,$18,$26,$80,$3F,$01,$74,$0C,$26,$80,$3F,$04,$74,$06,$26,$80,$3F,$06,$75,$06,$0A,$F6,$74,$3A,$FE,$CE,$83,$C3
>021352	011352	3f 01 74 0c 26 80 3f 04 74 06 26 80 3f 06 75 06
>021362	011362	0a f6 74 3a fe ce 83 c3
>02136a	01136a	10 81 fb 02 04 75 d8 bb		.text $10,$81,$FB,$02,$04,$75,$D8,$BB,$C2,$03,$26,$F6,$47,$FC,$80,$75,$18,$26,$80,$3F,$01,$74,$0C,$26,$80,$3F,$04,$74,$06,$26,$80,$3F
>021372	011372	c2 03 26 f6 47 fc 80 75 18 26 80 3f 01 74 0c 26
>021382	011382	80 3f 04 74 06 26 80 3f
>02138a	01138a	06 75 06 0a f6 74 0f fe		.text $06,$75,$06,$0A,$F6,$74,$0F,$FE,$CE,$83,$C3,$10,$81,$FB,$02,$04,$75,$D8,$F9,$E9,$E7,$02,$2E,$88,$16,$E3,$16,$26,$8B,$47,$04,$26
>021392	011392	ce 83 c3 10 81 fb 02 04 75 d8 f9 e9 e7 02 2e 88
>0213a2	0113a2	16 e3 16 26 8b 47 04 26
>0213aa	0113aa	8b 57 06 2d 01 00 83 da		.text $8B,$57,$06,$2D,$01,$00,$83,$DA,$00,$26,$03,$47,$08,$26,$13,$57,$0A,$73,$05,$80,$0E,$DE,$16,$80,$26,$8B,$47,$04,$89,$45,$17,$26
>0213b2	0113b2	00 26 03 47 08 26 13 57 0a 73 05 80 0e de 16 80
>0213c2	0113c2	26 8b 47 04 89 45 17 26
>0213ca	0113ca	8b 47 06 89 45 19 26 8b		.text $8B,$47,$06,$89,$45,$19,$26,$8B,$57,$0A,$26,$8B,$47,$08,$89,$55,$1D,$89,$45,$1B,$83,$FA,$00,$77,$05,$3D,$40,$00,$72,$B4,$8B,$55
>0213d2	0113d2	57 0a 26 8b 47 08 89 55 1d 89 45 1b 83 fa 00 77
>0213e2	0113e2	05 3d 40 00 72 b4 8b 55
>0213ea	0113ea	19 8b 45 17 33 db 8a 5d		.text $19,$8B,$45,$17,$33,$DB,$8A,$5D,$13,$50,$8B,$C2,$33,$D2,$F7,$F3,$2E,$A3,$29,$05,$58,$F7,$F3,$8A,$CA,$FE,$C1,$33,$DB,$8A,$5D,$15
>0213f2	0113f2	13 50 8b c2 33 d2 f7 f3 2e a3 29 05 58 f7 f3 8a
>021402	011402	ca fe c1 33 db 8a 5d 15
>02140a	01140a	50 33 d2 2e a1 29 05 f7		.text $50,$33,$D2,$2E,$A1,$29,$05,$F7,$F3,$2E,$A3,$29,$05,$58,$F7,$F3,$2E,$83,$3E,$29,$05,$00,$77,$7C,$3D,$00,$04,$77,$77,$83,$7D,$47
>021412	011412	f3 2e a3 29 05 58 f7 f3 2e 83 3e 29 05 00 77 7c
>021422	011422	3d 00 04 77 77 83 7d 47
>02142a	01142a	01 75 03 03 45 49 d0 cc		.text $01,$75,$03,$03,$45,$49,$D0,$CC,$D0,$CC,$80,$E4,$C0,$0A,$CC,$8A,$E8,$8A,$F2,$2E,$8A,$16,$E3,$16,$0E,$07,$BB,$4E,$01,$B8,$01,$02
>021432	011432	d0 cc 80 e4 c0 0a cc 8a e8 8a f2 2e 8a 16 e3 16
>021442	011442	0e 07 bb 4e 01 b8 01 02
>02144a	01144a	cd 13 bb 4e 01 53 50 2e		.text $CD,$13,$BB,$4E,$01,$53,$50,$2E,$80,$3F,$E9,$74,$0D,$2E,$80,$3F,$EB,$75,$29,$2E,$80,$7F,$02,$90,$75,$22,$BB,$59,$01,$2E,$8A,$47
>021452	011452	80 3f e9 74 0d 2e 80 3f eb 75 29 2e 80 7f 02 90
>021462	011462	75 22 bb 59 01 2e 8a 47
>02146a	01146a	0a 24 f0 3c f0 75 15 2e		.text $0A,$24,$F0,$3C,$F0,$75,$15,$2E,$81,$3F,$00,$02,$75,$0E,$2E,$8A,$47,$02,$0A,$C0,$74,$06,$D0,$E8,$73,$FC,$74,$05,$58,$5B,$E9,$36
>021472	011472	81 3f 00 02 75 0e 2e 8a 47 02 0a c0 74 06 d0 e8
>021482	011482	73 fc 74 05 58 5b e9 36
>02148a	01148a	01 58 5b 2e 81 7f 08 32		.text $01,$58,$5B,$2E,$81,$7F,$08,$32,$2E,$75,$0F,$2E,$80,$7F,$0A,$30,$75,$08,$EB,$2F,$E9,$FB,$FE,$E9,$22,$01,$E8,$E5,$01,$2E,$81,$7F
>021492	011492	2e 75 0f 2e 80 7f 0a 30 75 08 eb 2f e9 fb fe e9
>0214a2	0114a2	22 01 e8 e5 01 2e 81 7f
>0214aa	0114aa	08 30 2e 75 0d 2e 8a 47		.text $08,$30,$2E,$75,$0D,$2E,$8A,$47,$07,$2C,$31,$24,$FE,$74,$14,$E9,$05,$01,$2E,$81,$7F,$08,$33,$2E,$72,$DD,$75,$07,$2E,$80,$7F,$0A
>0214b2	0114b2	07 2c 31 24 fe 74 14 e9 05 01 2e 81 7f 08 33 2e
>0214c2	0114c2	72 dd 75 07 2e 80 7f 0a
>0214ca	0114ca	31 72 d4 2e 80 3e 74 01		.text $31,$72,$D4,$2E,$80,$3E,$74,$01,$29,$75,$57,$2E,$80,$3E,$5E,$01,$00,$75,$4F,$57,$1E,$1E,$07,$0E,$1F,$BE,$59,$01,$83,$C7,$06,$2E
>0214d2	0114d2	29 75 57 2e 80 3e 5e 01 00 75 4f 57 1e 1e 07 0e
>0214e2	0114e2	1f be 59 01 83 c7 06 2e
>0214ea	0114ea	83 7c 08 00 75 23 2e 83		.text $83,$7C,$08,$00,$75,$23,$2E,$83,$7C,$15,$00,$75,$1C,$2E,$83,$7C,$17,$00,$75,$15,$8B,$45,$08,$2E,$89,$44,$08,$8B,$45,$15,$2E,$89
>0214f2	0114f2	7c 15 00 75 1c 2e 83 7c 17 00 75 15 8b 45 08 2e
>021502	011502	89 44 08 8b 45 15 2e 89
>02150a	01150a	44 15 8b 45 17 2e 89 44		.text $44,$15,$8B,$45,$17,$2E,$89,$44,$17,$B9,$19,$00,$F3,$A4,$1F,$5F,$06,$1E,$07,$0E,$1F,$BD,$51,$07,$0E,$E8,$B8,$F7,$06,$1F,$07,$E9
>021512	011512	17 b9 19 00 f3 a4 1f 5f 06 1e 07 0e 1f bd 51 07
>021522	011522	0e e8 b8 f7 06 1f 07 e9
>02152a	01152a	53 01 be 59 01 33 d2 2e		.text $53,$01,$BE,$59,$01,$33,$D2,$2E,$8B,$44,$08,$0B,$C0,$75,$0E,$2E,$8B,$44,$15,$2E,$8B,$54,$17,$8B,$CA,$0B,$C8,$74,$06,$89,$45,$1B
>021532	011532	8b 44 08 0b c0 75 0e 2e 8b 44 15 2e 8b 54 17 8b
>021542	011542	ca 0b c8 74 06 89 45 1b
>02154a	01154a	89 55 1d 8b 45 1b 8b 55		.text $89,$55,$1D,$8B,$45,$1B,$8B,$55,$1D,$2E,$8B,$5C,$03,$89,$5D,$09,$2B,$C3,$83,$DA,$00,$2E,$8B,$5C,$0B,$89,$5D,$11,$D1,$E3,$2B,$C3
>021552	011552	1d 2e 8b 5c 03 89 5d 09 2b c3 83 da 00 2e 8b 5c
>021562	011562	0b 89 5d 11 d1 e3 2b c3
>02156a	01156a	83 da 00 2e 8b 5c 06 89		.text $83,$DA,$00,$2E,$8B,$5C,$06,$89,$5D,$0C,$B1,$04,$D3,$EB,$2B,$C3,$83,$DA,$00,$33,$C9,$2E,$8A,$4C,$02,$88,$4D,$08,$50,$8B,$C2,$33
>021572	011572	5d 0c b1 04 d3 eb 2b c3 83 da 00 33 c9 2e 8a 4c
>021582	011582	02 88 4d 08 50 8b c2 33
>02158a	01158a	d2 f7 f1 2e a3 29 05 58		.text $D2,$F7,$F1,$2E,$A3,$29,$05,$58,$F7,$F1,$2E,$83,$3E,$29,$05,$00,$77,$1C,$3D,$F6,$0F,$72,$05,$80,$0E,$DE,$16,$40,$06,$1E,$07,$0E
>021592	011592	f7 f1 2e 83 3e 29 05 00 77 1c 3d f6 0f 72 05 80
>0215a2	0115a2	0e de 16 40 06 1e 07 0e
>0215aa	0115aa	1f bd 51 07 0e e8 2c f7		.text $1F,$BD,$51,$07,$0E,$E8,$2C,$F7,$06,$1F,$07,$E9,$A6,$00,$2E,$80,$0E,$DE,$16,$80,$E9,$BE,$00,$81,$4D,$23,$00,$02,$8B,$55,$1D,$8B
>0215b2	0115b2	06 1f 07 e9 a6 00 2e 80 0e de 16 80 e9 be 00 81
>0215c2	0115c2	4d 23 00 02 8b 55 1d 8b
>0215ca	0115ca	45 1b be 16 17 2e 3b 14		.text $45,$1B,$BE,$16,$17,$2E,$3B,$14,$72,$0D,$77,$06,$2E,$3B,$44,$02,$76,$05,$83,$C6,$0A,$EB,$EE,$8A,$4C,$08,$08,$0E,$DE,$16,$2E,$8B
>0215d2	0115d2	72 0d 77 06 2e 3b 44 02 76 05 83 c6 0a eb ee 8a
>0215e2	0115e2	4c 08 08 0e de 16 2e 8b
>0215ea	0115ea	4c 04 2e 8b 54 06 89 55		.text $4C,$04,$2E,$8B,$54,$06,$89,$55,$0C,$8B,$55,$1D,$8B,$45,$1B,$88,$6D,$08,$F6,$06,$DE,$16,$40,$75,$1E,$33,$DB,$8A,$DD,$4B,$03,$D8
>0215f2	0115f2	0c 8b 55 1d 8b 45 1b 88 6d 08 f6 06 de 16 40 75
>021602	011602	1e 33 db 8a dd 4b 03 d8
>02160a	01160a	d3 eb 43 80 e3 fe 8b f3		.text $D3,$EB,$43,$80,$E3,$FE,$8B,$F3,$D1,$EB,$03,$DE,$81,$C3,$FF,$01,$D0,$EF,$88,$7D,$11,$EB,$3D,$B1,$04,$52,$8B,$55,$0C,$D3,$EA,$2B
>021612	011612	d1 eb 03 de 81 c3 ff 01 d0 ef 88 7d 11 eb 3d b1
>021622	011622	04 52 8b 55 0c d3 ea 2b
>02162a	01162a	c2 5a 83 da 00 2d 01 00		.text $C2,$5A,$83,$DA,$00,$2D,$01,$00,$83,$DA,$00,$B3,$02,$8A,$7D,$08,$03,$C3,$83,$D2,$00,$2D,$01,$00,$83,$DA,$00,$F7,$F3,$89,$45,$11
>021632	011632	83 da 00 b3 02 8a 7d 08 03 c3 83 d2 00 2d 01 00
>021642	011642	83 da 00 f7 f3 89 45 11
>02164a	01164a	8a 1e de 16 88 5d 1f 1e		.text $8A,$1E,$DE,$16,$88,$5D,$1F,$1E,$1E,$07,$0E,$1F,$BD,$D9,$05,$0E,$E8,$81,$F6,$1F,$8B,$55,$1D,$8B,$45,$1B,$83,$FA,$00,$77,$16,$83
>021652	011652	1e 07 0e 1f bd d9 05 0e e8 81 f6 1f 8b 55 1d 8b
>021662	011662	45 1b 83 fa 00 77 16 83
>02166a	01166a	7d 19 00 77 10 03 45 17		.text $7D,$19,$00,$77,$10,$03,$45,$17,$72,$0B,$8B,$45,$1B,$89,$45,$0E,$C7,$45,$1B,$00,$00,$8A,$1E,$DE,$16,$88,$5D,$1F,$F8,$07,$1F,$5B
>021672	011672	72 0b 8b 45 1b 89 45 0e c7 45 1b 00 00 8a 1e de
>021682	011682	16 88 5d 1f f8 07 1f 5b
>02168a	01168a	5f c3 50 52 56 2e 80 3e		.text $5F,$C3,$50,$52,$56,$2E,$80,$3E,$74,$01,$29,$74,$31,$2E,$81,$7F,$07,$31,$30,$75,$07,$2E,$80,$7F,$0A,$30,$75,$22,$BE,$59,$01,$2E
>021692	011692	74 01 29 74 31 2e 81 7f 07 31 30 75 07 2e 80 7f
>0216a2	0116a2	0a 30 75 22 be 59 01 2e
>0216aa	0116aa	83 7c 08 00 74 18 2e 8b		.text $83,$7C,$08,$00,$74,$18,$2E,$8B,$44,$08,$2E,$03,$44,$11,$73,$0E,$75,$0C,$2E,$FF,$4C,$08,$83,$6D,$1B,$01,$83,$5D,$1D,$00,$5E,$5A
>0216b2	0116b2	44 08 2e 03 44 11 73 0e 75 0c 2e ff 4c 08 83 6d
>0216c2	0116c2	1b 01 83 5d 1d 00 5e 5a
>0216ca	0116ca	58 c3 02 00 03 00 00 02		.text $58,$C3,$02,$00,$03,$00,$00,$02,$33,$DB,$C4,$3E,$19,$01,$06,$57,$26,$8A,$5D,$22,$80,$FB,$05,$75,$3E,$33,$D2,$26,$8B,$45,$0E,$0B
>0216d2	0116d2	33 db c4 3e 19 01 06 57 26 8a 5d 22 80 fb 05 75
>0216e2	0116e2	3e 33 d2 26 8b 45 0e 0b
>0216ea	0116ea	c0 75 08 26 8b 55 1d 26		.text $C0,$75,$08,$26,$8B,$55,$1D,$26,$8B,$45,$1B,$52,$50,$26,$8B,$45,$15,$26,$F7,$65,$13,$8B,$C8,$58,$5A,$50,$8B,$C2,$33,$D2,$F7,$F1
>0216f2	0116f2	8b 45 1b 52 50 26 8b 45 15 26 f7 65 13 8b c8 58
>021702	011702	5a 50 8b c2 33 d2 f7 f1
>02170a	01170a	2e a3 29 05 58 f7 f1 0b		.text $2E,$A3,$29,$05,$58,$F7,$F1,$0B,$D2,$74,$01,$40,$26,$89,$45,$25,$06,$1F,$8D,$75,$06,$EB,$56,$0E,$1F,$2E,$80,$3E,$ED,$16,$01,$74
>021712	011712	d2 74 01 40 26 89 45 25 06 1f 8d 75 06 eb 56 0e
>021722	011722	1f 2e 80 3e ed 16 01 74
>02172a	01172a	54 80 fb 07 75 40 33 d2		.text $54,$80,$FB,$07,$75,$40,$33,$D2,$8B,$45,$25,$F7,$65,$36,$F7,$65,$34,$89,$45,$2F,$48,$B2,$01,$3D,$F6,$0F,$72,$06,$D1,$E8,$D0,$E2
>021732	011732	8b 45 25 f7 65 36 f7 65 34 89 45 2f 48 b2 01 3d
>021742	011742	f6 0f 72 06 d1 e8 d0 e2
>02174a	01174a	eb f5 80 fa 01 74 05 c7		.text $EB,$F5,$80,$FA,$01,$74,$05,$C7,$45,$2D,$F0,$00,$88,$55,$29,$2E,$F7,$26,$DE,$21,$2E,$F7,$36,$DC,$21,$33,$D2,$2E,$F7,$36,$E0,$21
>021752	011752	45 2d f0 00 88 55 29 2e f7 26 de 21 2e f7 36 dc
>021762	011762	21 33 d2 2e f7 36 e0 21
>02176a	01176a	40 89 45 32 eb 0f d1 e3		.text $40,$89,$45,$32,$EB,$0F,$D1,$E3,$BE,$D8,$17,$8B,$30,$8D,$7D,$27,$B9,$19,$00,$F3,$A4,$5F,$07,$26,$C4,$3D,$83,$FF,$FF,$74,$03,$E9
>021772	011772	be d8 17 8b 30 8d 7d 27 b9 19 00 f3 a4 5f 07 26
>021782	011782	c4 3d 83 ff ff 74 03 e9
>02178a	01178a	4c ff c3 98 8b d0 b4 01		.text $4C,$FF,$C3,$98,$8B,$D0,$B4,$01,$CD,$17,$C3,$98,$8B,$D0,$B0,$A3,$B4,$00,$CD,$14,$C3,$8A,$36,$5D,$17,$80,$FE,$00,$74,$31,$B2,$80
>021792	011792	cd 17 c3 98 8b d0 b0 a3 b4 00 cd 14 c3 8a 36 5d
>0217a2	0117a2	17 80 fe 00 74 31 b2 80
>0217aa	0117aa	52 88 16 5c 17 b4 08 cd		.text $52,$88,$16,$5C,$17,$B4,$08,$CD,$13,$FE,$C6,$33,$C0,$8A,$C6,$A3,$62,$17,$80,$E1,$3F,$8A,$C1,$A3,$64,$17,$06,$8A,$16,$5C,$17,$E8
>0217b2	0117b2	13 fe c6 33 c0 8a c6 a3 62 17 80 e1 3f 8a c1 a3
>0217c2	0117c2	64 17 06 8a 16 5c 17 e8
>0217ca	0117ca	27 fb 72 03 e8 09 00 07		.text $27,$FB,$72,$03,$E8,$09,$00,$07,$5A,$FE,$C2,$FE,$CE,$75,$D1,$C3,$81,$C3,$C2,$01,$26,$80,$3F,$05,$74,$0B,$83,$C3,$10,$81,$FB,$02
>0217d2	0117d2	5a fe c2 fe ce 75 d1 c3 81 c3 c2 01 26 80 3f 05
>0217e2	0117e2	74 0b 83 c3 10 81 fb 02
>0217ea	0117ea	04 75 f1 eb 7c e8 a2 00		.text $04,$75,$F1,$EB,$7C,$E8,$A2,$00,$73,$77,$8B,$3E,$60,$17,$C7,$45,$47,$01,$00,$83,$4D,$23,$01,$C6,$45,$22,$05,$C6,$06,$DE,$16,$00
>0217f2	0117f2	73 77 8b 3e 60 17 c7 45 47 01 00 83 4d 23 01 c6
>021802	011802	45 22 05 c6 06 de 16 00
>02180a	01180a	a1 62 17 89 45 15 a1 64		.text $A1,$62,$17,$89,$45,$15,$A1,$64,$17,$89,$45,$13,$A0,$5C,$17,$88,$45,$04,$A0,$75,$00,$88,$45,$05,$26,$83,$7F,$0A,$00,$77,$07,$26
>021812	011812	17 89 45 13 a0 5c 17 88 45 04 a0 75 00 88 45 05
>021822	011822	26 83 7f 0a 00 77 07 26
>02182a	01182a	83 7f 08 40 72 3b 83 eb		.text $83,$7F,$08,$40,$72,$3B,$83,$EB,$04,$26,$8A,$77,$02,$80,$E6,$C0,$D0,$C6,$D0,$C6,$26,$8A,$57,$03,$89,$55,$49,$26,$8B,$4F,$02,$26
>021832	011832	04 26 8a 77 02 80 e6 c0 d0 c6 d0 c6 26 8a 57 03
>021842	011842	89 55 49 26 8b 4f 02 26
>02184a	01184a	8a 77 01 8a 16 5c 17 bb		.text $8A,$77,$01,$8A,$16,$5C,$17,$BB,$00,$02,$B8,$01,$02,$CD,$13,$72,$10,$BB,$C2,$03,$06,$E8,$0A,$00,$07,$72,$03,$E8,$41,$00,$E9,$73
>021852	011852	00 02 b8 01 02 cd 13 72 10 bb c2 03 06 e8 0a 00
>021862	011862	07 72 03 e8 41 00 e9 73
>02186a	01186a	ff c3 57 53 1e 06 26 80		.text $FF,$C3,$57,$53,$1E,$06,$26,$80,$3F,$01,$74,$1B,$26,$80,$3F,$04,$74,$15,$26,$80,$3F,$06,$74,$0F,$83,$C3,$10,$81,$FB,$02,$04,$75
>021872	011872	3f 01 74 1b 26 80 3f 04 74 15 26 80 3f 06 74 0f
>021882	011882	83 c3 10 81 fb 02 04 75
>02188a	01188a	e5 f9 07 1f 5b 5f c3 e9		.text $E5,$F9,$07,$1F,$5B,$5F,$C3,$E9,$0C,$FB,$80,$3E,$75,$00,$1A,$72,$0D,$06,$B8,$73,$04,$8E,$C0,$26,$C6,$06,$84,$03,$01,$07,$C3,$56
>021892	011892	0c fb 80 3e 75 00 1a 72 0d 06 b8 73 04 8e c0 26
>0218a2	0118a2	c6 06 84 03 01 07 c3 56
>0218aa	0118aa	53 8b 36 19 01 83 3c ff		.text $53,$8B,$36,$19,$01,$83,$3C,$FF,$74,$04,$8B,$34,$EB,$F7,$89,$3C,$8C,$5C,$02,$C7,$05,$FF,$FF,$8C,$5D,$02,$8D,$5D,$06,$8B,$36,$5E
>0218b2	0118b2	74 04 8b 34 eb f7 89 3c 8c 5c 02 c7 05 ff ff 8c
>0218c2	0118c2	5d 02 8d 5d 06 8b 36 5e
>0218ca	0118ca	17 89 1c 83 06 5e 17 02		.text $17,$89,$1C,$83,$06,$5E,$17,$02,$FE,$06,$75,$00,$83,$06,$60,$17,$64,$5B,$5E,$C3,$50,$51,$52,$55,$33,$ED,$33,$C9,$33,$D2,$B4,$02
>0218d2	0118d2	fe 06 75 00 83 06 60 17 64 5b 5e c3 50 51 52 55
>0218e2	0118e2	33 ed 33 c9 33 d2 b4 02
>0218ea	0118ea	cd 1a 83 f9 00 75 12 83		.text $CD,$1A,$83,$F9,$00,$75,$12,$83,$FA,$00,$75,$0D,$83,$FD,$01,$74,$1C,$45,$B9,$00,$40,$E2,$FE,$EB,$E1,$2E,$C6,$06,$F3,$04,$01,$E8
>0218f2	0118f2	fa 00 75 0d 83 fd 01 74 1c 45 b9 00 40 e2 fe eb
>021902	011902	e1 2e c6 06 f3 04 01 e8
>02190a	01190a	10 00 56 e8 0b f1 fa 89		.text $10,$00,$56,$E8,$0B,$F1,$FA,$89,$36,$F0,$04,$FB,$5E,$5D,$5A,$59,$58,$C3,$50,$2E,$80,$3E,$3E,$06,$FC,$75,$25,$2E,$80,$3E,$3F,$06
>021912	011912	36 f0 04 fb 5e 5d 5a 59 58 c3 50 2e 80 3e 3e 06
>021922	011922	fc 75 25 2e 80 3e 3f 06
>02192a	01192a	06 74 08 2e 80 3e 3f 06		.text $06,$74,$08,$2E,$80,$3E,$3F,$06,$04,$73,$15,$B0,$8A,$B4,$26,$E8,$30,$00,$B0,$8B,$E8,$0B,$00,$24,$07,$8A,$E0,$B0,$0B,$E8,$22,$00
>021932	011932	04 73 15 b0 8a b4 26 e8 30 00 b0 8b e8 0b 00 24
>021942	011942	07 8a e0 b0 0b e8 22 00
>02194a	01194a	58 c3 9c fa 53 50 0c 80		.text $58,$C3,$9C,$FA,$53,$50,$0C,$80,$E6,$70,$90,$E4,$71,$8B,$D8,$58,$24,$80,$0C,$0F,$E6,$70,$90,$E4,$71,$8B,$C3,$5B,$0E,$E8,$01,$00
>021952	011952	e6 70 90 e4 71 8b d8 58 24 80 0c 0f e6 70 90 e4
>021962	011962	71 8b c3 5b 0e e8 01 00
>02196a	01196a	c3 cf 9c 50 fa 50 0c 80		.text $C3,$CF,$9C,$50,$FA,$50,$0C,$80,$E6,$70,$90,$8A,$C4,$E6,$71,$58,$24,$80,$0C,$0F,$E6,$70,$90,$E4,$71,$58,$0E,$E8,$E3,$FF,$C3,$51
>021972	011972	e6 70 90 8a c4 e6 71 58 24 80 0c 0f e6 70 90 e4
>021982	011982	71 58 0e e8 e3 ff c3 51
>02198a	01198a	57 2e 89 0e dc 16 8b c3		.text $57,$2E,$89,$0E,$DC,$16,$8B,$C3,$48,$48,$F7,$E1,$2E,$03,$06,$D8,$16,$2E,$13,$16,$DA,$16,$1E,$50,$53,$2E,$8B,$36,$DF,$16,$8E,$DE
>021992	011992	48 48 f7 e1 2e 03 06 d8 16 2e 13 16 da 16 1e 50
>0219a2	0119a2	53 2e 8b 36 df 16 8e de
>0219aa	0119aa	8b f3 2e f6 06 de 16 40		.text $8B,$F3,$2E,$F6,$06,$DE,$16,$40,$75,$3E,$D1,$EE,$03,$F3,$52,$33,$D2,$E8,$7E,$00,$5A,$8B,$07,$75,$19,$8A,$07,$2E,$A2,$E6,$16,$46
>0219b2	0119b2	75 3e d1 ee 03 f3 52 33 d2 e8 7e 00 5a 8b 07 75
>0219c2	0119c2	19 8a 07 2e a2 e6 16 46
>0219ca	0119ca	52 33 d2 e8 6c 00 5a a0		.text $52,$33,$D2,$E8,$6C,$00,$5A,$A0,$00,$00,$2E,$A2,$E7,$16,$2E,$A1,$E6,$16,$5B,$53,$D1,$EB,$73,$08,$D1,$E8,$D1,$E8,$D1,$E8,$D1,$E8
>0219d2	0119d2	00 00 2e a2 e7 16 2e a1 e6 16 5b 53 d1 eb 73 08
>0219e2	0119e2	d1 e8 d1 e8 d1 e8 d1 e8
>0219ea	0119ea	8b d8 81 e3 ff 0f eb 0e		.text $8B,$D8,$81,$E3,$FF,$0F,$EB,$0E,$52,$33,$D2,$D1,$E6,$83,$D2,$00,$E8,$3F,$00,$5A,$8B,$1F,$5E,$58,$1F,$2B,$F3,$83,$FE,$FF,$75,$07
>0219f2	0119f2	52 33 d2 d1 e6 83 d2 00 e8 3f 00 5a 8b 1f 5e 58
>021a02	011a02	1f 2b f3 83 fe ff 75 07
>021a0a	011a0a	2e 01 0e dc 16 eb 8f 53		.text $2E,$01,$0E,$DC,$16,$EB,$8F,$53,$52,$50,$2E,$A1,$D6,$16,$2E,$8B,$0E,$DC,$16,$5A,$2E,$8F,$06,$2B,$05,$1E,$0E,$1F,$0E,$BD,$E5,$08
>021a12	011a12	52 50 2e a1 d6 16 2e 8b 0e dc 16 5a 2e 8f 06 2b
>021a22	011a22	05 1e 0e 1f 0e bd e5 08
>021a2a	011a2a	e8 b1 f2 1f 5b 5f 2e a1		.text $E8,$B1,$F2,$1F,$5B,$5F,$2E,$A1,$DC,$16,$86,$E0,$D1,$E0,$03,$F8,$59,$C3,$50,$51,$57,$56,$06,$1E,$8B,$C6,$2E,$8B,$0E,$E4,$16,$F7
>021a32	011a32	dc 16 86 e0 d1 e0 03 f8 59 c3 50 51 57 56 06 1e
>021a42	011a42	8b c6 2e 8b 0e e4 16 f7
>021a4a	011a4a	f1 90 06 1e 57 50 0e 1f		.text $F1,$90,$06,$1E,$57,$50,$0E,$1F,$2E,$A1,$D6,$16,$BD,$D7,$04,$0E,$E8,$81,$F2,$58,$26,$03,$45,$09,$5F,$1F,$07,$2E,$3B,$06,$E8,$16
>021a52	011a52	2e a1 d6 16 bd d7 04 0e e8 81 f2 58 26 03 45 09
>021a62	011a62	5f 1f 07 2e 3b 06 e8 16
>021a6a	011a6a	74 2a 2e a3 e8 16 52 2e		.text $74,$2A,$2E,$A3,$E8,$16,$52,$2E,$C7,$06,$2B,$05,$00,$00,$8B,$D0,$B9,$01,$00,$2E,$A1,$D6,$16,$1E,$07,$33,$FF,$1E,$0E,$1F,$0E,$BD
>021a72	011a72	c7 06 2b 05 00 00 8b d0 b9 01 00 2e a1 d6 16 1e
>021a82	011a82	07 33 ff 1e 0e 1f 0e bd
>021a8a	011a8a	e5 08 e8 4f f2 1f 5a 2e		.text $E5,$08,$E8,$4F,$F2,$1F,$5A,$2E,$8B,$0E,$E4,$16,$49,$3B,$D1,$8B,$DA,$1F,$07,$5E,$5F,$59,$58,$C3,$00,$00,$00,$00,$00,$00,$00,$00
>021a92	011a92	8b 0e e4 16 49 3b d1 8b da 1f 07 5e 5f 59 58 c3
>021aa2	011aa2	00 00 00 00 00 00 00 00
>021aaa	011aaa	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>021ab2	011ab2	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>021ac2	011ac2	00 00 00 00 00 00 00 00
>021aca	011aca	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$70,$00,$2E,$8E,$06,$30,$00,$BF,$E0,$06
>021ad2	011ad2	00 00 00 00 00 00 00 00 00 00 00 00 00 00 70 00
>021ae2	011ae2	2e 8e 06 30 00 bf e0 06
>021aea	011aea	b9 04 00 ab 47 47 e2 fb		.text $B9,$04,$00,$AB,$47,$47,$E2,$FB,$CB,$56,$50,$51,$52,$57,$55,$1E,$06,$53,$8B,$EC,$8B,$76,$12,$2E,$8E,$1E,$30,$00,$8B,$44,$02,$A2
>021af2	011af2	cb 56 50 51 52 57 55 1e 06 53 8b ec 8b 76 12 2e
>021b02	011b02	8e 1e 30 00 8b 44 02 a2
>021b0a	011b0a	21 00 88 26 e7 04 8b 34		.text $21,$00,$88,$26,$E7,$04,$8B,$34,$C4,$1E,$12,$00,$26,$8A,$47,$01,$26,$8A,$67,$0D,$26,$8B,$4F,$12,$26,$8B,$57,$14,$81,$FE,$A2,$04
>021b12	011b12	c4 1e 12 00 26 8a 47 01 26 8a 67 0d 26 8b 4f 12
>021b22	011b22	26 8b 57 14 81 fe a2 04
>021b2a	011b2a	75 17 c7 06 2b 05 00 00		.text $75,$17,$C7,$06,$2B,$05,$00,$00,$83,$FA,$FF,$75,$0C,$26,$8B,$57,$1C,$89,$16,$2B,$05,$26,$8B,$57,$1A,$97,$26,$8A,$47,$02,$2E,$3A
>021b32	011b32	83 fa ff 75 0c 26 8b 57 1c 89 16 2b 05 26 8b 57
>021b42	011b42	1a 97 26 8a 47 02 2e 3a
>021b4a	011b4a	04 73 2c 98 d1 e0 03 f0		.text $04,$73,$2C,$98,$D1,$E0,$03,$F0,$97,$26,$C4,$7F,$0E,$FC,$2E,$FF,$54,$01,$72,$02,$B4,$01,$2E,$8E,$1E,$30,$00,$C5,$1E,$12,$00,$89
>021b52	011b52	97 26 c4 7f 0e fc 2e ff 54 01 72 02 b4 01 2e 8e
>021b62	011b62	1e 30 00 c5 1e 12 00 89
>021b6a	011b6a	47 03 5b 07 1f 5d 5f 5a		.text $47,$03,$5B,$07,$1F,$5D,$5F,$5A,$59,$58,$5E,$83,$C4,$02,$CB,$E8,$09,$00,$EB,$E2,$00,$00,$00,$00,$00,$00,$00,$B0,$03,$C4,$1E,$12
>021b72	011b72	59 58 5e 83 c4 02 cb e8 09 00 eb e2 00 00 00 00
>021b82	011b82	00 00 00 b0 03 c4 1e 12
>021b8a	011b8a	00 26 29 4f 12 b4 81 f9		.text $00,$26,$29,$4F,$12,$B4,$81,$F9,$C3,$00,$0B,$FB,$01,$FB,$01,$FB,$01,$D5,$00,$5C,$01,$9F,$01,$FB,$01,$09,$02,$FD,$01,$FD,$01,$FB
>021b92	011b92	c3 00 0b fb 01 fb 01 fb 01 d5 00 5c 01 9f 01 fb
>021ba2	011ba2	01 09 02 fd 01 fd 01 fb
>021baa	011baa	01 1a fb 01 fb 01 fb 01		.text $01,$1A,$FB,$01,$FB,$01,$FB,$01,$D5,$00,$1A,$02,$C8,$01,$FB,$01,$FB,$01,$1F,$02,$1F,$02,$51,$02,$FB,$01,$FB,$01,$FB,$01,$FB,$01
>021bb2	011bb2	d5 00 1a 02 c8 01 fb 01 fb 01 1f 02 1f 02 51 02
>021bc2	011bc2	fb 01 fb 01 fb 01 fb 01
>021bca	011bca	fb 01 8b 02 fb 01 fb 01		.text $FB,$01,$8B,$02,$FB,$01,$FB,$01,$BA,$02,$FB,$01,$FB,$01,$FB,$01,$FB,$01,$FB,$01,$F0,$02,$0B,$FB,$01,$FB,$01,$FB,$01,$D5,$00,$0D
>021bd2	011bd2	ba 02 fb 01 fb 01 fb 01 fb 01 fb 01 f0 02 0b fb
>021be2	011be2	01 fb 01 fb 01 d5 00 0d
>021bea	011bea	03 35 03 fb 01 6c 03 74		.text $03,$35,$03,$FB,$01,$6C,$03,$74,$03,$74,$03,$55,$03,$0A,$FB,$01,$FB,$01,$FB,$01,$D5,$00,$35,$04,$C8,$01,$FB,$01,$FB,$01,$DB,$03
>021bf2	011bf2	03 74 03 55 03 0a fb 01 fb 01 fb 01 d5 00 35 04
>021c02	011c02	c8 01 fb 01 fb 01 db 03
>021c0a	011c0a	db 03 e3 06 e8 05 00 aa		.text $DB,$03,$E3,$06,$E8,$05,$00,$AA,$E2,$FA,$F8,$C3,$8A,$26,$E5,$04,$32,$C0,$86,$06,$0C,$00,$0A,$C0,$75,$2A,$CD,$16,$0B,$C0,$74,$EC
>021c12	011c12	e2 fa f8 c3 8a 26 e5 04 32 c0 86 06 0c 00 0a c0
>021c22	011c22	75 2a cd 16 0b c0 74 ec
>021c2a	011c2a	3d 00 72 75 04 b0 10 eb		.text $3D,$00,$72,$75,$04,$B0,$10,$EB,$1B,$80,$3E,$E5,$04,$00,$74,$0C,$3C,$E0,$75,$08,$0A,$E4,$74,$0C,$32,$C0,$EB,$04,$0A,$C0,$75,$04
>021c32	011c32	1b 80 3e e5 04 00 74 0c 3c e0 75 08 0a e4 74 0c
>021c42	011c42	32 c0 eb 04 0a c0 75 04
>021c4a	011c4a	88 26 0c 00 c3 a0 0c 00		.text $88,$26,$0C,$00,$C3,$A0,$0C,$00,$0A,$C0,$75,$4D,$8A,$26,$E6,$04,$CD,$16,$75,$1E,$80,$3E,$79,$00,$00,$74,$13,$C4,$1E,$12,$00,$26
>021c52	011c52	0a c0 75 4d 8a 26 e6 04 cd 16 75 1e 80 3e 79 00
>021c62	011c62	00 74 13 c4 1e 12 00 26
>021c6a	011c6a	f7 47 03 00 04 74 07 b8		.text $F7,$47,$03,$00,$04,$74,$07,$B8,$00,$41,$32,$DB,$CD,$15,$F9,$B4,$03,$C3,$0B,$C0,$75,$08,$8A,$26,$E5,$04,$CD,$16,$EB,$C7,$3D,$00
>021c72	011c72	00 41 32 db cd 15 f9 b4 03 c3 0b c0 75 08 8a 26
>021c82	011c82	e5 04 cd 16 eb c7 3d 00
>021c8a	011c8a	72 75 04 b0 10 eb 12 80		.text $72,$75,$04,$B0,$10,$EB,$12,$80,$3E,$E5,$04,$00,$74,$0B,$3C,$E0,$75,$07,$80,$FC,$00,$74,$02,$B0,$00,$C4,$1E,$12,$00,$26,$88,$47
>021c92	011c92	3e e5 04 00 74 0b 3c e0 75 07 80 fc 00 74 02 b0
>021ca2	011ca2	00 c4 1e 12 00 26 88 47
>021caa	011caa	0d f8 c3 e3 fc 26 8a 05		.text $0D,$F8,$C3,$E3,$FC,$26,$8A,$05,$47,$CD,$29,$E2,$F8,$F8,$C3,$C6,$06,$0C,$00,$00,$B4,$01,$CD,$16,$74,$F3,$32,$E4,$CD,$16,$EB,$F4
>021cb2	011cb2	47 cd 29 e2 f8 f8 c3 c6 06 0c 00 00 b4 01 cd 16
>021cc2	011cc2	74 f3 32 e4 cd 16 eb f4
>021cca	011cca	e8 ba fe f8 c3 e3 2e bb		.text $E8,$BA,$FE,$F8,$C3,$E3,$2E,$BB,$02,$00,$E8,$37,$00,$75,$1D,$26,$8A,$05,$32,$E4,$E8,$2F,$00,$74,$19,$80,$FC,$FF,$75,$09,$B0,$0C
>021cd2	011cd2	02 00 e8 37 00 75 1d 26 8a 05 32 e4 e8 2f 00 74
>021ce2	011ce2	19 80 fc ff 75 09 b0 0c
>021cea	011cea	c6 06 0c 00 00 eb 08 f6		.text $C6,$06,$0C,$00,$00,$EB,$08,$F6,$C4,$01,$74,$06,$4B,$75,$DB,$E9,$8B,$FE,$47,$E2,$D2,$F8,$C3,$E8,$0A,$00,$75,$F3,$F6,$C4,$80,$75
>021cf2	011cf2	c4 01 74 06 4b 75 db e9 8b fe 47 e2 d2 f8 c3 e8
>021d02	011d02	0a 00 75 f3 f6 c4 80 75
>021d0a	011d0a	f4 e9 6a ff b4 02 8b 16		.text $F4,$E9,$6A,$FF,$B4,$02,$8B,$16,$21,$00,$CD,$17,$50,$80,$E4,$30,$80,$FC,$30,$58,$75,$06,$80,$E4,$DF,$80,$CC,$08,$F6,$C4,$28,$74
>021d12	011d12	21 00 cd 17 50 80 e4 30 80 fc 30 58 75 06 80 e4
>021d22	011d22	df 80 cc 08 f6 c4 28 74
>021d2a	011d2a	0a b0 09 f6 c4 20 75 02		.text $0A,$B0,$09,$F6,$C4,$20,$75,$02,$FE,$C0,$C3,$B0,$02,$F6,$C4,$01,$C3,$8B,$F7,$51,$53,$32,$FF,$8A,$1E,$E7,$04,$D1,$E3,$8B,$8F,$E8
>021d32	011d32	fe c0 c3 b0 02 f6 c4 01 c3 8b f7 51 53 32 ff 8a
>021d42	011d42	1e e7 04 d1 e3 8b 8f e8
>021d4a	011d4a	04 5b e8 bf ff 75 15 f6		.text $04,$5B,$E8,$BF,$FF,$75,$15,$F6,$C4,$80,$E1,$F6,$59,$74,$0E,$26,$AC,$32,$E4,$E8,$B0,$FF,$75,$05,$E2,$D9,$F8,$C3,$59,$E9,$1D,$FE
>021d52	011d52	c4 80 e1 f6 59 74 0e 26 ac 32 e4 e8 b0 ff 75 05
>021d62	011d62	e2 d9 f8 c3 59 e9 1d fe
>021d6a	011d6a	c4 3e 12 00 26 80 7d 0d		.text $C4,$3E,$12,$00,$26,$80,$7D,$0D,$05,$74,$03,$E9,$0D,$FE,$26,$8A,$45,$0E,$26,$C4,$7D,$13,$32,$FF,$8A,$1E,$E7,$04,$D1,$E3,$8B,$8F
>021d72	011d72	05 74 03 e9 0d fe 26 8a 45 0e 26 c4 7d 13 32 ff
>021d82	011d82	8a 1e e7 04 d1 e3 8b 8f
>021d8a	011d8a	e8 04 3c 65 74 07 3c 45		.text $E8,$04,$3C,$65,$74,$07,$3C,$45,$75,$E1,$26,$8B,$0D,$89,$8F,$E8,$04,$26,$89,$0D,$F8,$C3,$C4,$3E,$12,$00,$26,$80,$7D,$0D,$05,$75
>021d92	011d92	75 e1 26 8b 0d 89 8f e8 04 26 89 0d f8 c3 c4 3e
>021da2	011da2	12 00 26 80 7d 0d 05 75
>021daa	011daa	0e 26 8a 45 0e 3c 65 74		.text $0E,$26,$8A,$45,$0E,$3C,$65,$74,$04,$3C,$45,$75,$02,$F8,$C3,$F9,$E9,$C8,$FD,$E3,$11,$E8,$7B,$00,$32,$C0,$86,$07,$0A,$C0,$75,$03
>021db2	011db2	04 3c 45 75 02 f8 c3 f9 e9 c8 fd e3 11 e8 7b 00
>021dc2	011dc2	32 c0 86 07 0a c0 75 03
>021dca	011dca	e8 05 00 aa e2 fa f8 c3		.text $E8,$05,$00,$AA,$E2,$FA,$F8,$C3,$B4,$02,$E8,$3E,$00,$F6,$C4,$0E,$75,$01,$C3,$58,$32,$C0,$0C,$B0,$E9,$A2,$FD,$E8,$55,$00,$8A,$07
>021dd2	011dd2	b4 02 e8 3e 00 f6 c4 0e 75 01 c3 58 32 c0 0c b0
>021de2	011de2	e9 a2 fd e8 55 00 8a 07
>021dea	011dea	0a c0 75 11 e8 22 00 f6		.text $0A,$C0,$75,$11,$E8,$22,$00,$F6,$C4,$01,$74,$0C,$A8,$20,$74,$08,$E8,$D5,$FF,$88,$07,$E9,$A1,$FE,$E9,$73,$FE,$E8,$0B,$00,$A8,$20
>021df2	011df2	c4 01 74 0c a8 20 74 08 e8 d5 ff 88 07 e9 a1 fe
>021e02	011e02	e9 73 fe e8 0b 00 a8 20
>021e0a	011e0a	74 f6 f6 c4 20 74 f1 f8		.text $74,$F6,$F6,$C4,$20,$74,$F1,$F8,$C3,$B4,$03,$8B,$16,$21,$00,$CD,$14,$C3,$E8,$1E,$00,$C6,$07,$00,$F8,$C3,$E3,$AA,$26,$8A,$05,$47
>021e12	011e12	c3 b4 03 8b 16 21 00 cd 14 c3 e8 1e 00 c6 07 00
>021e22	011e22	f8 c3 e3 aa 26 8a 05 47
>021e2a	011e2a	b4 01 e8 e6 ff f6 c4 80		.text $B4,$01,$E8,$E6,$FF,$F6,$C4,$80,$74,$05,$B0,$0A,$E9,$4E,$FD,$E2,$EB,$F8,$C3,$8B,$1E,$21,$00,$81,$C3,$16,$00,$C3,$B0,$3C,$F6,$E5
>021e32	011e32	74 05 b0 0a e9 4e fd e2 eb f8 c3 8b 1e 21 00 81
>021e42	011e42	c3 16 00 c3 b0 3c f6 e5
>021e4a	011e4a	b5 00 03 c1 b9 70 17 8b		.text $B5,$00,$03,$C1,$B9,$70,$17,$8B,$DA,$F7,$E1,$8B,$C8,$B0,$64,$F6,$E7,$03,$C8,$83,$D2,$00,$B7,$00,$03,$CB,$83,$D2,$00,$92,$91,$BB
>021e52	011e52	da f7 e1 8b c8 b0 64 f6 e7 03 c8 83 d2 00 b7 00
>021e62	011e62	03 cb 83 d2 00 92 91 bb
>021e6a	011e6a	0b e9 f7 e3 87 d1 92 f7		.text $0B,$E9,$F7,$E3,$87,$D1,$92,$F7,$E3,$03,$C1,$83,$D2,$00,$92,$BB,$05,$00,$F6,$F3,$8A,$C8,$B5,$00,$8A,$C4,$98,$92,$F7,$F3,$8B,$D0
>021e72	011e72	e3 03 c1 83 d2 00 92 bb 05 00 f6 f3 8a c8 b5 00
>021e82	011e82	8a c4 98 92 f7 f3 8b d0
>021e8a	011e8a	cb 26 8b 05 50 80 3e f3		.text $CB,$26,$8B,$05,$50,$80,$3E,$F3,$04,$00,$74,$26,$26,$8A,$45,$03,$FF,$1E,$02,$05,$8A,$E8,$26,$8A,$45,$02,$FF,$1E,$02,$05,$8A,$C8
>021e92	011e92	04 00 74 26 26 8a 45 03 ff 1e 02 05 8a e8 26 8a
>021ea2	011ea2	45 02 ff 1e 02 05 8a c8
>021eaa	011eaa	26 8a 45 05 ff 1e 02 05		.text $26,$8A,$45,$05,$FF,$1E,$02,$05,$8A,$F0,$B2,$00,$FA,$B4,$03,$CD,$1A,$FB,$26,$8B,$4D,$02,$26,$8B,$55,$04,$FF,$1E,$E2,$06,$FA,$B4
>021eb2	011eb2	8a f0 b2 00 fa b4 03 cd 1a fb 26 8b 4d 02 26 8b
>021ec2	011ec2	55 04 ff 1e e2 06 fa b4
>021eca	011eca	01 cd 1a 8f 06 f0 04 fb		.text $01,$CD,$1A,$8F,$06,$F0,$04,$FB,$80,$3E,$F3,$04,$00,$74,$0A,$FF,$1E,$06,$05,$FA,$B4,$05,$CD,$1A,$FB,$F8,$C3,$E8,$4E,$00,$8B,$36
>021ed2	011ed2	80 3e f3 04 00 74 0a ff 1e 06 05 fa b4 05 cd 1a
>021ee2	011ee2	fb f8 c3 e8 4e 00 8b 36
>021eea	011eea	f0 04 8b c1 8b da d1 e2		.text $F0,$04,$8B,$C1,$8B,$DA,$D1,$E2,$D1,$D1,$D1,$E2,$D1,$D1,$03,$D3,$13,$C1,$92,$B9,$0B,$E9,$F7,$F1,$8B,$D8,$33,$C0,$F7,$F1,$8B,$D3
>021ef2	011ef2	d1 d1 d1 e2 d1 d1 03 d3 13 c1 92 b9 0b e9 f7 f1
>021f02	011f02	8b d8 33 c0 f7 f1 8b d3
>021f0a	011f0a	b9 c8 00 f7 f1 80 fa 64		.text $B9,$C8,$00,$F7,$F1,$80,$FA,$64,$72,$03,$80,$EA,$64,$F5,$8A,$DA,$D1,$D0,$B2,$00,$D1,$D2,$B9,$3C,$00,$F7,$F1,$8A,$FA,$F6,$F1,$86
>021f12	011f12	72 03 80 ea 64 f5 8a da d1 d0 b2 00 d1 d2 b9 3c
>021f22	011f22	00 f7 f1 8a fa f6 f1 86
>021f2a	011f2a	c4 50 8b c6 ab 58 ab 8b		.text $C4,$50,$8B,$C6,$AB,$58,$AB,$8B,$C3,$AB,$F8,$C3,$32,$E4,$CD,$1A,$80,$3E,$F2,$04,$00,$75,$07,$32,$E4,$01,$06,$F0,$04,$C3,$0A,$C0
>021f32	011f32	c3 ab f8 c3 32 e4 cd 1a 80 3e f2 04 00 75 07 32
>021f42	011f42	e4 01 06 f0 04 c3 0a c0
>021f4a	011f4a	74 04 ff 06 f0 04 c3 00		.text $74,$04,$FF,$06,$F0,$04,$C3,$00,$1A,$42,$17,$EB,$04,$92,$05,$D5,$00,$57,$08,$3D,$08,$58,$05,$58,$05,$49,$08,$41,$08,$58,$05,$58
>021f52	011f52	1a 42 17 eb 04 92 05 d5 00 57 08 3d 08 58 05 58
>021f62	011f62	05 49 08 41 08 58 05 58
>021f6a	011f6a	05 d5 00 0a 08 1a 08 31		.text $05,$D5,$00,$0A,$08,$1A,$08,$31,$08,$58,$05,$58,$05,$58,$05,$6B,$0C,$58,$05,$58,$05,$58,$05,$24,$11,$42,$11,$9A,$12,$C4,$3E,$19
>021f72	011f72	08 58 05 58 05 58 05 6b 0c 58 05 58 05 58 05 24
>021f82	011f82	11 42 11 9a 12 c4 3e 19
>021f8a	011f8a	01 26 38 45 05 74 09 26		.text $01,$26,$38,$45,$05,$74,$09,$26,$C4,$3D,$83,$FF,$FF,$75,$F2,$F9,$C3,$E8,$E9,$FF,$BE,$01,$00,$26,$F6,$45,$24,$01,$74,$17,$26,$81
>021f92	011f92	c4 3d 83 ff ff 75 f2 f9 c3 e8 e9 ff be 01 00 26
>021fa2	011fa2	f6 45 24 01 74 17 26 81
>021faa	011faa	65 23 ff fe c6 06 1e 01		.text $65,$23,$FF,$FE,$C6,$06,$1E,$01,$FF,$26,$F6,$45,$23,$01,$74,$0C,$BE,$FF,$FF,$EB,$2C,$26,$F6,$45,$23,$01,$75,$25,$33,$F6,$80,$3E
>021fb2	011fb2	ff 26 f6 45 23 01 74 0c be ff ff eb 2c 26 f6 45
>021fc2	011fc2	23 01 75 25 33 f6 80 3e
>021fca	011fca	77 00 00 74 0a e8 f8 12		.text $77,$00,$00,$74,$0A,$E8,$F8,$12,$72,$36,$E8,$55,$14,$75,$12,$BE,$01,$00,$A0,$1E,$01,$26,$3A,$45,$04,$75,$05,$E8,$28,$00,$EB,$01
>021fd2	011fd2	72 36 e8 55 14 75 12 be 01 00 a0 1e 01 26 3a 45
>021fe2	011fe2	04 75 05 e8 28 00 eb 01
>021fea	011fea	4e 06 c4 1e 12 00 26 89		.text $4E,$06,$C4,$1E,$12,$00,$26,$89,$77,$0E,$07,$0B,$F6,$79,$0F,$80,$3E,$77,$00,$00,$74,$03,$E8,$B2,$13,$C6,$06,$1E,$01,$FF,$F8,$C3
>021ff2	011ff2	77 0e 07 0b f6 79 0f 80 3e 77 00 00 74 03 e8 b2
>022002	012002	13 c6 06 1e 01 ff f8 c3
>02200a	01200a	e8 98 06 b4 81 c3 be 01		.text $E8,$98,$06,$B4,$81,$C3,$BE,$01,$00,$E8,$20,$FF,$26,$8B,$45,$47,$2B,$D0,$26,$8B,$45,$49,$1B,$C8,$75,$1A,$0B,$D2,$75,$11,$FE,$06
>022012	012012	00 e8 20 ff 26 8b 45 47 2b d0 26 8b 45 49 1b c8
>022022	012022	75 1a 0b d2 75 11 fe 06
>02202a	01202a	1d 01 80 3e 1d 01 05 72		.text $1D,$01,$80,$3E,$1D,$01,$05,$72,$0C,$FE,$0E,$1D,$01,$EB,$05,$83,$FA,$24,$76,$01,$4E,$C3,$EB,$C8,$26,$8A,$25,$E8,$3F,$FF,$26,$F6
>022032	012032	0c fe 0e 1d 01 eb 05 83 fa 24 76 01 4e c3 eb c8
>022042	012042	26 8a 25 e8 3f ff 26 f6
>02204a	01204a	45 23 01 75 23 e8 37 00		.text $45,$23,$01,$75,$23,$E8,$37,$00,$C6,$06,$0A,$05,$01,$E8,$5C,$00,$72,$B1,$80,$3E,$0A,$05,$02,$C6,$06,$0A,$05,$00,$74,$0A,$80,$3E
>022052	012052	c6 06 0a 05 01 e8 5c 00 72 b1 80 3e 0a 05 02 c6
>022062	012062	06 0a 05 00 74 0a 80 3e
>02206a	01206a	77 00 00 74 03 e8 c1 13		.text $77,$00,$00,$74,$03,$E8,$C1,$13,$83,$C7,$06,$8C,$C1,$C4,$1E,$12,$00,$26,$88,$67,$0D,$26,$89,$7F,$12,$26,$89,$4F,$14,$F8,$C3,$57
>022072	012072	83 c7 06 8c c1 c4 1e 12 00 26 88 67 0d 26 89 7f
>022082	012082	12 26 89 4f 14 f8 c3 57
>02208a	01208a	33 c9 26 89 4d 57 26 89		.text $33,$C9,$26,$89,$4D,$57,$26,$89,$4D,$59,$B9,$0B,$00,$BE,$1D,$05,$83,$C7,$4B,$F3,$A4,$26,$F6,$45,$1F,$40,$BE,$14,$05,$75,$03,$BE
>022092	012092	4d 59 b9 0b 00 be 1d 05 83 c7 4b f3 a4 26 f6 45
>0220a2	0120a2	1f 40 be 14 05 75 03 be
>0220aa	0120aa	0b 05 b9 08 00 83 c7 05		.text $0B,$05,$B9,$08,$00,$83,$C7,$05,$F3,$A4,$5F,$C3,$26,$F6,$45,$23,$05,$74,$03,$E9,$9E,$00,$51,$52,$53,$E8,$AD,$00,$72,$09,$0B,$DB
>0220b2	0120b2	f3 a4 5f c3 26 f6 45 23 05 74 03 e9 9e 00 51 52
>0220c2	0120c2	53 e8 ad 00 72 09 0b db
>0220ca	0120ca	75 08 e8 fa 00 eb 5c e9		.text $75,$08,$E8,$FA,$00,$EB,$5C,$E9,$8B,$00,$E8,$61,$01,$72,$F8,$80,$3E,$77,$00,$00,$74,$03,$E8,$E7,$12,$26,$80,$7D,$22,$02,$75,$1A
>0220d2	0120d2	8b 00 e8 61 01 72 f8 80 3e 77 00 00 74 03 e8 e7
>0220e2	0120e2	12 26 80 7d 22 02 75 1a
>0220ea	0120ea	80 fc f9 75 7a bb de 04		.text $80,$FC,$F9,$75,$7A,$BB,$DE,$04,$8A,$87,$00,$00,$8B,$8F,$03,$00,$8B,$97,$05,$00,$8B,$9F,$01,$00,$EB,$29,$80,$FC,$F8,$72,$60,$B0
>0220f2	0120f2	8a 87 00 00 8b 8f 03 00 8b 97 05 00 8b 9f 01 00
>022102	012102	eb 29 80 fc f8 72 60 b0
>02210a	01210a	01 bb 08 40 b9 40 01 ba		.text $01,$BB,$08,$40,$B9,$40,$01,$BA,$01,$01,$F6,$C4,$02,$75,$07,$FE,$C0,$FE,$C3,$83,$C1,$28,$F6,$C4,$01,$74,$08,$03,$C9,$B7,$70,$FE
>022112	012112	01 01 f6 c4 02 75 07 fe c0 fe c3 83 c1 28 f6 c4
>022122	012122	01 74 08 03 c9 b7 70 fe
>02212a	01212a	c6 fe c2 26 88 75 08 26		.text $C6,$FE,$C2,$26,$88,$75,$08,$26,$88,$7D,$0C,$26,$89,$4D,$0E,$26,$88,$65,$10,$26,$88,$45,$11,$26,$88,$5D,$13,$26,$88,$55,$15,$26
>022132	012132	88 7d 0c 26 89 4d 0e 26 88 65 10 26 88 45 11 26
>022142	012142	88 5d 13 26 88 55 15 26
>02214a	01214a	c7 45 19 00 00 26 c7 45		.text $C7,$45,$19,$00,$00,$26,$C7,$45,$17,$00,$00,$26,$C7,$45,$1D,$00,$00,$5B,$5A,$59,$C3,$C6,$06,$0A,$05,$00,$E8,$3E,$05,$EB,$F2,$C6
>022152	012152	17 00 00 26 c7 45 1d 00 00 5b 5a 59 c3 c6 06 0a
>022162	012162	05 00 e8 3e 05 eb f2 c6
>02216a	01216a	06 0a 05 00 b0 07 f9 eb		.text $06,$0A,$05,$00,$B0,$07,$F9,$EB,$E8,$B6,$00,$B9,$01,$00,$E8,$CA,$00,$72,$4B,$33,$DB,$80,$3E,$4E,$01,$69,$74,$15,$80,$3E,$4E,$01
>022172	012172	e8 b6 00 b9 01 00 e8 ca 00 72 4b 33 db 80 3e 4e
>022182	012182	01 69 74 15 80 3e 4e 01
>02218a	01218a	e9 74 0e 80 3e 4e 01 eb		.text $E9,$74,$0E,$80,$3E,$4E,$01,$EB,$75,$31,$80,$3E,$50,$01,$90,$75,$2A,$A0,$63,$01,$24,$F0,$3C,$F0,$75,$21,$A0,$63,$01,$3C,$F0,$74
>022192	012192	75 31 80 3e 50 01 90 75 2a a0 63 01 24 f0 3c f0
>0221a2	0121a2	75 21 a0 63 01 3c f0 74
>0221aa	0121aa	1b a8 01 75 17 81 3e 56		.text $1B,$A8,$01,$75,$17,$81,$3E,$56,$01,$33,$2E,$75,$07,$80,$3E,$58,$01,$32,$73,$08,$C6,$06,$5B,$01,$01,$EB,$01,$43,$F8,$C3,$C3,$8A
>0221b2	0121b2	01 33 2e 75 07 80 3e 58 01 32 73 08 c6 06 5b 01
>0221c2	0121c2	01 eb 01 43 f8 c3 c3 8a
>0221ca	0121ca	36 5b 01 8a 3e 5f 01 8b		.text $36,$5B,$01,$8A,$3E,$5F,$01,$8B,$0E,$61,$01,$8A,$26,$63,$01,$A0,$64,$01,$8A,$1E,$66,$01,$8A,$16,$68,$01,$80,$3E,$0A,$05,$01,$75
>0221d2	0121d2	0e 61 01 8a 26 63 01 a0 64 01 8a 1e 66 01 8a 16
>0221e2	0121e2	68 01 80 3e 0a 05 01 75
>0221ea	0121ea	14 e8 13 00 72 05 c6 06		.text $14,$E8,$13,$00,$72,$05,$C6,$06,$0A,$05,$02,$80,$3E,$77,$00,$01,$75,$03,$E8,$27,$12,$F8,$C3,$80,$3E,$74,$01,$29,$75,$2E,$51,$8B
>0221f2	0121f2	0a 05 02 80 3e 77 00 01 75 03 e8 27 12 f8 c3 80
>022202	012202	3e 74 01 29 75 2e 51 8b
>02220a	01220a	0e 75 01 26 89 4d 57 8b		.text $0E,$75,$01,$26,$89,$4D,$57,$8B,$0E,$77,$01,$26,$89,$4D,$59,$57,$56,$B9,$0B,$00,$BE,$79,$01,$83,$C7,$4B,$F3,$A4,$B9,$08,$00,$BE
>022212	012212	0e 77 01 26 89 4d 59 57 56 b9 0b 00 be 79 01 83
>022222	012222	c7 4b f3 a4 b9 08 00 be
>02222a	01222a	84 01 83 c7 05 f3 a4 5e		.text $84,$01,$83,$C7,$05,$F3,$A4,$5E,$5F,$59,$F8,$C3,$F9,$C3,$B6,$00,$B9,$02,$00,$E8,$05,$00,$72,$02,$8A,$27,$C3,$55,$BD,$03,$00,$26
>022232	012232	5f 59 f8 c3 f9 c3 b6 00 b9 02 00 e8 05 00 72 02
>022242	012242	8a 27 c3 55 bd 03 00 26
>02224a	01224a	8a 55 04 bb 4e 01 06 1e		.text $8A,$55,$04,$BB,$4E,$01,$06,$1E,$07,$B8,$01,$02,$CD,$13,$07,$73,$4C,$E8,$80,$04,$74,$44,$26,$F6,$45,$23,$01,$75,$E9,$80,$3E,$38
>022252	012252	07 b8 01 02 cd 13 07 73 4c e8 80 04 74 44 26 f6
>022262	012262	45 23 01 75 e9 80 3e 38
>02226a	01226a	06 00 75 12 50 1e c5 36		.text $06,$00,$75,$12,$50,$1E,$C5,$36,$2D,$01,$8A,$44,$09,$C6,$44,$09,$0F,$1F,$A2,$2A,$01,$58,$06,$1E,$07,$B8,$01,$02,$CD,$13,$07,$9C
>022272	012272	2d 01 8a 44 09 c6 44 09 0f 1f a2 2a 01 58 06 1e
>022282	012282	07 b8 01 02 cd 13 07 9c
>02228a	01228a	80 3e 38 06 00 75 0e 50		.text $80,$3E,$38,$06,$00,$75,$0E,$50,$A0,$2A,$01,$1E,$C5,$36,$2D,$01,$88,$44,$09,$1F,$58,$9D,$73,$05,$EB,$B7,$B2,$FF,$F9,$88,$16,$76
>022292	012292	a0 2a 01 1e c5 36 2d 01 88 44 09 1f 58 9d 73 05
>0222a2	0122a2	eb b7 b2 ff f9 88 16 76
>0222aa	0122aa	00 88 16 1e 01 26 88 6d		.text $00,$88,$16,$1E,$01,$26,$88,$6D,$46,$9C,$E8,$07,$04,$9D,$5D,$C3,$80,$3E,$77,$00,$00,$74,$07,$E8,$C3,$FC,$26,$FF,$45,$20,$F8,$C3
>0222b2	0122b2	46 9c e8 07 04 9d 5d c3 80 3e 77 00 00 74 07 e8
>0222c2	0122c2	c3 fc 26 ff 45 20 f8 c3
>0222ca	0122ca	80 3e 77 00 00 74 0e e8		.text $80,$3E,$77,$00,$00,$74,$0E,$E8,$B3,$FC,$26,$83,$7D,$20,$00,$74,$04,$26,$FF,$4D,$20,$F8,$C3,$E8,$A3,$FC,$26,$F6,$45,$23,$01,$75
>0222d2	0122d2	b3 fc 26 83 7d 20 00 74 04 26 ff 4d 20 f8 c3 e8
>0222e2	0122e2	a3 fc 26 f6 45 23 01 75
>0222ea	0122ea	02 f8 c3 b4 03 f9 c3 c7		.text $02,$F8,$C3,$B4,$03,$F9,$C3,$C7,$06,$20,$01,$03,$01,$EB,$06,$C7,$06,$20,$01,$03,$00,$E8,$98,$00,$73,$EC,$E9,$80,$F8,$E8,$8B,$00
>0222f2	0122f2	06 20 01 03 01 eb 06 c7 06 20 01 03 00 e8 98 00
>022302	012302	73 ec e9 80 f8 e8 8b 00
>02230a	01230a	eb f6 50 53 26 8b 5d 23		.text $EB,$F6,$50,$53,$26,$8B,$5D,$23,$F6,$C3,$21,$75,$73,$F6,$C3,$10,$74,$6E,$26,$8A,$45,$04,$06,$57,$C4,$3E,$19,$01,$26,$38,$45,$04
>022312	012312	f6 c3 21 75 73 f6 c3 10 74 6e 26 8a 45 04 06 57
>022322	012322	c4 3e 19 01 26 38 45 04
>02232a	01232a	75 53 b3 20 26 84 5d 23		.text $75,$53,$B3,$20,$26,$84,$5D,$23,$74,$4B,$26,$30,$5D,$23,$5F,$07,$26,$08,$5D,$23,$80,$3E,$7A,$00,$01,$75,$17,$26,$80,$7D,$04,$00
>022332	012332	74 4b 26 30 5d 23 5f 07 26 08 5d 23 80 3e 7a 00
>022342	012342	01 75 17 26 80 7d 04 00
>02234a	01234a	75 3e 26 8a 45 05 06 8e		.text $75,$3E,$26,$8A,$45,$05,$06,$8E,$06,$1A,$00,$26,$A2,$04,$05,$07,$EB,$2E,$80,$3E,$78,$00,$02,$75,$17,$50,$26,$8A,$45,$05,$8A,$E0
>022352	012352	06 1a 00 26 a2 04 05 07 eb 2e 80 3e 78 00 02 75
>022362	012362	17 50 26 8a 45 05 8a e0
>02236a	01236a	06 8e 06 1a 00 26 86 06		.text $06,$8E,$06,$1A,$00,$26,$86,$06,$04,$05,$07,$3A,$E0,$58,$74,$10,$E8,$C6,$0E,$EB,$0B,$26,$C4,$3D,$83,$FF,$FF,$75,$9F,$F9,$5F,$07
>022372	012372	04 05 07 3a e0 58 74 10 e8 c6 0e eb 0b 26 c4 3d
>022382	012382	83 ff ff 75 9f f9 5f 07
>02238a	01238a	5b 58 c3 b0 08 eb 02 b0		.text $5B,$58,$C3,$B0,$08,$EB,$02,$B0,$07,$F9,$C3,$C6,$06,$20,$01,$02,$8B,$DF,$8C,$06,$37,$05,$E8,$E4,$FB,$26,$8A,$45,$10,$A2,$1F,$01
>022392	012392	07 f9 c3 c6 06 20 01 02 8b df 8c 06 37 05 e8 e4
>0223a2	0123a2	fb 26 8a 45 10 a2 1f 01
>0223aa	0123aa	e3 e8 26 f6 45 24 02 75		.text $E3,$E8,$26,$F6,$45,$24,$02,$75,$DE,$89,$0E,$22,$01,$89,$26,$35,$01,$8B,$C2,$33,$F6,$03,$D1,$83,$D6,$00,$26,$83,$7D,$0E,$00,$74
>0223b2	0123b2	de 89 0e 22 01 89 26 35 01 8b c2 33 f6 03 d1 83
>0223c2	0123c2	d6 00 26 83 7d 0e 00 74
>0223ca	0123ca	0d 83 fe 00 75 bd 26 3b		.text $0D,$83,$FE,$00,$75,$BD,$26,$3B,$55,$0E,$77,$B7,$EB,$12,$03,$36,$2B,$05,$26,$3B,$75,$1D,$72,$08,$77,$A9,$26,$3B,$55,$1B,$77,$A3
>0223d2	0123d2	55 0e 77 b7 eb 12 03 36 2b 05 26 3b 75 1d 72 08
>0223e2	0123e2	77 a9 26 3b 55 1b 77 a3
>0223ea	0123ea	8b 16 2b 05 26 03 45 17		.text $8B,$16,$2B,$05,$26,$03,$45,$17,$26,$13,$55,$19,$A3,$2D,$05,$06,$8E,$06,$1A,$00,$26,$C4,$36,$78,$00,$89,$36,$2D,$01,$8C,$06,$2F
>0223f2	0123f2	26 13 55 19 a3 2d 05 06 8e 06 1a 00 26 c4 36 78
>022402	012402	00 89 36 2d 01 8c 06 2f
>02240a	01240a	01 07 26 f6 45 23 01 75		.text $01,$07,$26,$F6,$45,$23,$01,$75,$10,$E8,$F6,$FE,$80,$3E,$77,$00,$00,$74,$03,$E8,$F1,$0E,$E8,$4A,$00,$8B,$C2,$33,$D2,$26,$F7,$75
>022412	012412	10 e8 f6 fe 80 3e 77 00 00 74 03 e8 f1 0e e8 4a
>022422	012422	00 8b c2 33 d2 26 f7 75
>02242a	01242a	13 a3 29 05 a1 2d 05 26		.text $13,$A3,$29,$05,$A1,$2D,$05,$26,$F7,$75,$13,$FE,$C2,$88,$16,$31,$01,$26,$8B,$4D,$15,$50,$33,$D2,$A1,$29,$05,$F7,$F1,$A3,$29,$05
>022432	012432	f7 75 13 fe c2 88 16 31 01 26 8b 4d 15 50 33 d2
>022442	012442	a1 29 05 f7 f1 a3 29 05
>02244a	01244a	58 f7 f1 83 3e 29 05 00		.text $58,$F7,$F1,$83,$3E,$29,$05,$00,$77,$16,$3D,$00,$04,$77,$11,$88,$16,$32,$01,$A3,$33,$01,$A1,$22,$01,$E8,$87,$00,$E8,$4D,$00,$C3
>022452	012452	77 16 3d 00 04 77 11 88 16 32 01 a3 33 01 a1 22
>022462	012462	01 e8 87 00 e8 4d 00 c3
>02246a	01246a	e9 20 ff 26 8a 45 04 a2		.text $E9,$20,$FF,$26,$8A,$45,$04,$A2,$1E,$01,$80,$3E,$38,$06,$00,$75,$3A,$A0,$2C,$01,$1E,$C5,$36,$2D,$01,$88,$44,$04,$8A,$44,$0A,$8A
>022472	012472	1e 01 80 3e 38 06 00 75 3a a0 2c 01 1e c5 36 2d
>022482	012482	01 88 44 04 8a 44 0a 8a
>02248a	01248a	64 04 1f a2 26 01 88 26		.text $64,$04,$1F,$A2,$26,$01,$88,$26,$2B,$01,$1E,$C5,$36,$2D,$01,$26,$80,$7D,$22,$02,$75,$05,$B0,$04,$86,$44,$0A,$32,$C0,$FE,$C0,$86
>022492	012492	2b 01 1e c5 36 2d 01 26 80 7d 22 02 75 05 b0 04
>0224a2	0124a2	86 44 0a 32 c0 fe c0 86
>0224aa	0124aa	44 09 1f a2 27 01 b0 0f		.text $44,$09,$1F,$A2,$27,$01,$B0,$0F,$A2,$28,$01,$C3,$26,$F6,$45,$23,$01,$75,$2F,$E8,$FE,$01,$9C,$80,$3E,$38,$06,$00,$75,$23,$50,$06
>0224b2	0124b2	a2 28 01 c3 26 f6 45 23 01 75 2f e8 fe 01 9c 80
>0224c2	0124c2	3e 38 06 00 75 23 50 06
>0224ca	0124ca	c4 36 2d 01 a0 2b 01 26		.text $C4,$36,$2D,$01,$A0,$2B,$01,$26,$88,$44,$04,$A0,$27,$01,$8A,$26,$26,$01,$26,$88,$44,$09,$26,$C6,$44,$03,$02,$26,$88,$64,$0A,$07
>0224d2	0124d2	88 44 04 a0 27 01 8a 26 26 01 26 88 44 09 26 c6
>0224e2	0124e2	44 03 02 26 88 64 0a 07
>0224ea	0124ea	58 9d c3 0b c0 74 fb 26		.text $58,$9D,$C3,$0B,$C0,$74,$FB,$26,$F6,$45,$23,$01,$74,$0D,$F6,$06,$2F,$05,$80,$74,$06,$E8,$29,$00,$33,$C0,$C3,$26,$8A,$4D,$13,$FE
>0224f2	0124f2	f6 45 23 01 74 0d f6 06 2f 05 80 74 06 e8 29 00
>022502	012502	33 c0 c3 26 8a 4d 13 fe
>02250a	01250a	c1 2a 0e 31 01 32 ed 3b		.text $C1,$2A,$0E,$31,$01,$32,$ED,$3B,$C1,$73,$02,$8B,$C8,$50,$51,$8B,$C1,$E8,$0D,$00,$59,$58,$2B,$C1,$D0,$E1,$02,$F9,$EB,$C5,$E9,$EC
>022512	012512	c1 73 02 8b c8 50 51 8b c1 e8 0d 00 59 58 2b c1
>022522	012522	d0 e1 02 f9 eb c5 e9 ec
>02252a	01252a	00 bd 05 00 26 f6 45 23		.text $00,$BD,$05,$00,$26,$F6,$45,$23,$01,$74,$08,$80,$FC,$04,$74,$03,$BD,$02,$00,$89,$2E,$32,$05,$89,$2E,$34,$05,$8A,$26,$20,$01,$50
>022532	012532	01 74 08 80 fc 04 74 03 bd 02 00 89 2e 32 05 89
>022542	012542	2e 34 05 8a 26 20 01 50
>02254a	01254a	8b 16 33 01 26 f6 45 23		.text $8B,$16,$33,$01,$26,$F6,$45,$23,$01,$74,$0B,$26,$83,$7D,$47,$01,$75,$04,$26,$03,$55,$49,$D0,$CE,$D0,$CE,$0A,$36,$31,$01,$8B,$CA
>022552	012552	01 74 0b 26 83 7d 47 01 75 04 26 03 55 49 d0 ce
>022562	012562	d0 ce 0a 36 31 01 8b ca
>02256a	01256a	86 e9 8a 36 32 01 26 8a		.text $86,$E9,$8A,$36,$32,$01,$26,$8A,$55,$04,$26,$80,$7D,$22,$05,$74,$13,$80,$3E,$76,$00,$FF,$74,$0A,$80,$FC,$02,$74,$07,$80,$FC,$04
>022572	012572	55 04 26 80 7d 22 05 74 13 80 3e 76 00 ff 74 0a
>022582	012582	80 fc 02 74 07 80 fc 04
>02258a	01258a	74 02 eb 56 e8 fc 00 72		.text $74,$02,$EB,$56,$E8,$FC,$00,$72,$95,$88,$16,$76,$00,$26,$88,$6D,$46,$81,$3E,$20,$01,$03,$01,$74,$52,$58,$26,$F6,$45,$23,$01,$74
>022592	012592	95 88 16 76 00 26 88 6d 46 81 3e 20 01 03 01 74
>0225a2	0125a2	52 58 26 f6 45 23 01 74
>0225aa	0125aa	07 f6 06 2f 05 80 75 30		.text $07,$F6,$06,$2F,$05,$80,$75,$30,$80,$E1,$3F,$32,$E4,$29,$06,$22,$01,$02,$C8,$88,$0E,$31,$01,$26,$3A,$4D,$13,$76,$1B,$C6,$06,$31
>0225b2	0125b2	80 e1 3f 32 e4 29 06 22 01 02 c8 88 0e 31 01 26
>0225c2	0125c2	3a 4d 13 76 1b c6 06 31
>0225ca	0125ca	01 01 8a 36 32 01 fe c6		.text $01,$01,$8A,$36,$32,$01,$FE,$C6,$26,$3A,$75,$15,$72,$06,$32,$F6,$FF,$06,$33,$01,$88,$36,$32,$01,$F8,$C3,$3A,$16,$76,$00,$75,$06
>0225d2	0125d2	26 3a 75 15 72 06 32 f6 ff 06 33 01 88 36 32 01
>0225e2	0125e2	f8 c3 3a 16 76 00 75 06
>0225ea	0125ea	26 3a 6d 46 74 9e e8 75		.text $26,$3A,$6D,$46,$74,$9E,$E8,$75,$00,$EB,$9C,$58,$50,$B4,$04,$E8,$91,$00,$73,$A5,$80,$FC,$11,$75,$0B,$FF,$0E,$34,$05,$74,$9A,$E8
>0225f2	0125f2	00 eb 9c 58 50 b4 04 e8 91 00 73 a5 80 fc 11 75
>022602	012602	0b ff 0e 34 05 74 9a e8
>02260a	01260a	58 05 eb 3e e8 53 05 ff		.text $58,$05,$EB,$3E,$E8,$53,$05,$FF,$0E,$32,$05,$EB,$1C,$80,$3E,$77,$00,$00,$74,$03,$E8,$66,$0D,$80,$3E,$36,$05,$01,$75,$08,$BD,$01
>022612	012612	0e 32 05 eb 1c 80 3e 77 00 00 74 03 e8 66 0d 80
>022622	012622	3e 36 05 01 75 08 bd 01
>02262a	01262a	00 c6 06 36 05 00 e8 ab		.text $00,$C6,$06,$36,$05,$00,$E8,$AB,$00,$74,$20,$26,$F6,$45,$23,$01,$75,$05,$80,$FC,$80,$74,$14,$80,$FC,$CC,$74,$0A,$C7,$06,$34,$05
>022632	012632	00 74 20 26 f6 45 23 01 75 05 80 fc 80 74 14 80
>022642	012642	fc cc 74 0a c7 06 34 05
>02264a	01264a	05 00 58 e9 f9 fe bd 01		.text $05,$00,$58,$E9,$F9,$FE,$BD,$01,$00,$EB,$F7,$E8,$4D,$00,$C6,$06,$1E,$01,$FF,$8B,$0E,$22,$01,$8B,$26,$35,$01,$E9,$58,$FE,$80,$3E
>022652	012652	00 eb f7 e8 4d 00 c6 06 1e 01 ff 8b 0e 22 01 8b
>022662	012662	26 35 01 e9 58 fe 80 3e
>02266a	01266a	38 06 00 75 1e 06 50 a0		.text $38,$06,$00,$75,$1E,$06,$50,$A0,$28,$01,$C4,$36,$2D,$01,$26,$88,$44,$09,$58,$07,$E8,$0C,$00,$06,$C4,$36,$2D,$01,$26,$C6,$44,$09
>022672	012672	28 01 c4 36 2d 01 26 88 44 09 58 07 e8 0c 00 06
>022682	012682	c4 36 2d 01 26 c6 44 09
>02268a	01268a	01 07 c3 26 f6 45 1f 80		.text $01,$07,$C3,$26,$F6,$45,$1F,$80,$75,$0D,$06,$8E,$06,$37,$05,$CD,$13,$8C,$06,$37,$05,$07,$C3,$F9,$B4,$80,$C3,$51,$06,$1E,$07,$8A
>022692	012692	75 0d 06 8e 06 37 05 cd 13 8c 06 37 05 07 c3 f9
>0226a2	0126a2	b4 80 c3 51 06 1e 07 8a
>0226aa	0126aa	c4 a2 44 01 b9 09 00 bf		.text $C4,$A2,$44,$01,$B9,$09,$00,$BF,$3C,$01,$F2,$AE,$8A,$85,$08,$00,$07,$59,$F9,$C3,$50,$E8,$74,$F8,$26,$3B,$55,$47,$75,$06,$26,$3B
>0226b2	0126b2	3c 01 f2 ae 8a 85 08 00 07 59 f9 c3 50 e8 74 f8
>0226c2	0126c2	26 3b 55 47 75 06 26 3b
>0226ca	0126ca	4d 49 74 0d c6 06 1d 01		.text $4D,$49,$74,$0D,$C6,$06,$1D,$01,$00,$26,$89,$55,$47,$26,$89,$4D,$49,$F8,$58,$C3,$E8,$83,$04,$80,$FC,$06,$74,$02,$4D,$C3,$0A,$E4
>0226d2	0126d2	00 26 89 55 47 26 89 4d 49 f8 58 c3 e8 83 04 80
>0226e2	0126e2	fc 06 74 02 4d c3 0a e4
>0226ea	0126ea	c3 00 08 a7 0c e8 0e 86		.text $C3,$00,$08,$A7,$0C,$E8,$0E,$86,$0E,$A3,$0C,$A3,$0C,$A3,$0C,$9A,$11,$69,$12,$C1,$12,$07,$F3,$0C,$EF,$0E,$C1,$0D,$A3,$0C,$A3,$0C
>0226f2	0126f2	0e a3 0c a3 0c a3 0c 9a 11 69 12 c1 12 07 f3 0c
>022702	012702	ef 0e c1 0d a3 0c a3 0c
>02270a	01270a	a3 0c d2 11 80 12 60 40		.text $A3,$0C,$D2,$11,$80,$12,$60,$40,$61,$41,$62,$42,$66,$46,$67,$47,$68,$E8,$69,$F8,$06,$C4,$1E,$12,$00,$26,$80,$7F,$0D,$08,$26,$8A
>022712	012712	61 41 62 42 66 46 67 47 68 e8 69 f8 06 c4 1e 12
>022722	012722	00 26 80 7f 0d 08 26 8a
>02272a	01272a	47 0e 07 75 25 be 3c 0c		.text $47,$0E,$07,$75,$25,$BE,$3C,$0C,$A8,$20,$75,$03,$BE,$4F,$0C,$24,$DF,$2C,$40,$2E,$3A,$04,$77,$12,$98,$D1,$E0,$46,$03,$F0,$2E,$FF
>022732	012732	a8 20 75 03 be 4f 0c 24 df 2c 40 2e 3a 04 77 12
>022742	012742	98 d1 e0 46 03 f0 2e ff
>02274a	01274a	14 2e 8e 1e 30 00 b4 81		.text $14,$2E,$8E,$1E,$30,$00,$B4,$81,$C3,$5A,$E9,$2E,$F4,$C5,$1E,$12,$00,$C5,$5F,$13,$26,$8A,$45,$22,$88,$47,$01,$26,$8B,$45,$23,$25
>022752	012752	c3 5a e9 2e f4 c5 1e 12 00 c5 5f 13 26 8a 45 22
>022762	012762	88 47 01 26 8b 45 23 25
>02276a	01276a	03 00 89 47 02 26 8b 45		.text $03,$00,$89,$47,$02,$26,$8B,$45,$25,$89,$47,$04,$32,$C0,$88,$47,$06,$8D,$75,$27,$F6,$07,$01,$74,$12,$1E,$2E,$8E,$1E,$30,$00,$E8
>022772	012772	25 89 47 04 32 c0 88 47 06 8d 75 27 f6 07 01 74
>022782	012782	12 1e 2e 8e 1e 30 00 e8
>02278a	01278a	80 fb e8 27 f9 1f 72 10		.text $80,$FB,$E8,$27,$F9,$1F,$72,$10,$8D,$75,$06,$8D,$7F,$07,$B9,$19,$00,$1E,$06,$1F,$07,$F3,$A4,$F8,$C3,$C5,$1E,$12,$00,$C5,$5F,$13
>022792	012792	8d 75 06 8d 7f 07 b9 19 00 1e 06 1f 07 f3 a4 f8
>0227a2	0127a2	c3 c5 1e 12 00 c5 5f 13
>0227aa	0127aa	26 81 4d 23 40 01 f6 07		.text $26,$81,$4D,$23,$40,$01,$F6,$07,$02,$75,$7C,$8A,$47,$01,$26,$88,$45,$22,$8B,$47,$04,$26,$89,$45,$25,$8B,$47,$02,$1E,$2E,$8E,$1E
>0227b2	0127b2	02 75 7c 8a 47 01 26 88 45 22 8b 47 04 26 89 45
>0227c2	0127c2	25 8b 47 02 1e 2e 8e 1e
>0227ca	0127ca	30 00 80 3e 77 00 00 1f		.text $30,$00,$80,$3E,$77,$00,$00,$1F,$75,$03,$25,$FD,$FF,$25,$03,$00,$26,$8B,$4D,$23,$81,$E1,$F4,$FD,$0B,$C1,$26,$89,$45,$23,$8A,$47
>0227d2	0127d2	75 03 25 fd ff 25 03 00 26 8b 4d 23 81 e1 f4 fd
>0227e2	0127e2	0b c1 26 89 45 23 8a 47
>0227ea	0127ea	06 1e 2e 8e 1e 30 00 a2		.text $06,$1E,$2E,$8E,$1E,$30,$00,$A2,$37,$06,$1F,$26,$81,$4D,$23,$80,$00,$57,$F6,$07,$01,$75,$15,$26,$F7,$45,$23,$04,$00,$74,$05,$26
>0227f2	0127f2	37 06 1f 26 81 4d 23 80 00 57 f6 07 01 75 15 26
>022802	012802	f7 45 23 04 00 74 05 26
>02280a	01280a	83 65 23 fb b9 1f 00 8d		.text $83,$65,$23,$FB,$B9,$1F,$00,$8D,$7D,$27,$EB,$0B,$26,$83,$4D,$23,$04,$B9,$19,$00,$8D,$7D,$06,$8D,$77,$07,$F3,$A4,$1E,$2E,$8E,$1E
>022812	012812	7d 27 eb 0b 26 83 4d 23 04 b9 19 00 8d 7d 06 8d
>022822	012822	77 07 f3 a4 1e 2e 8e 1e
>02282a	01282a	30 00 e8 ec 03 1f 5f 8b		.text $30,$00,$E8,$EC,$03,$1F,$5F,$8B,$4F,$26,$1E,$2E,$8E,$1E,$30,$00,$89,$0E,$39,$05,$1F,$26,$83,$65,$23,$F7,$F6,$07,$04,$74,$05,$26
>022832	012832	4f 26 1e 2e 8e 1e 30 00 89 0e 39 05 1f 26 83 65
>022842	012842	23 f7 f6 07 04 74 05 26
>02284a	01284a	83 4d 23 08 83 f9 3f 77		.text $83,$4D,$23,$08,$83,$F9,$3F,$77,$1A,$E3,$16,$BF,$3B,$05,$8D,$77,$28,$2E,$8E,$06,$30,$00,$47,$47,$AD,$AA,$AD,$E8,$E8,$01,$AA,$E2
>022852	012852	1a e3 16 bf 3b 05 8d 77 28 2e 8e 06 30 00 47 47
>022862	012862	ad aa ad e8 e8 01 aa e2
>02286a	01286a	f5 f8 c3 b0 0c f9 c3 c5		.text $F5,$F8,$C3,$B0,$0C,$F9,$C3,$C5,$1E,$12,$00,$C5,$5F,$13,$F6,$07,$01,$74,$0E,$1E,$2E,$8E,$1E,$30,$00,$E8,$41,$02,$1F,$88,$07,$F8
>022872	012872	1e 12 00 c5 5f 13 f6 07 01 74 0e 1e 2e 8e 1e 30
>022882	012882	00 e8 41 02 1f 88 07 f8
>02288a	01288a	c3 26 80 7d 22 05 75 08		.text $C3,$26,$80,$7D,$22,$05,$75,$08,$2E,$8E,$1E,$30,$00,$E9,$9C,$00,$8B,$4F,$01,$8B,$57,$03,$F6,$07,$02,$2E,$8E,$1E,$30,$00,$74,$03
>022892	012892	2e 8e 1e 30 00 e9 9c 00 8b 4f 01 8b 57 03 f6 07
>0228a2	0128a2	02 2e 8e 1e 30 00 74 03
>0228aa	0128aa	e9 e6 00 e8 17 02 3c 01		.text $E9,$E6,$00,$E8,$17,$02,$3C,$01,$74,$06,$3C,$03,$75,$07,$EB,$67,$52,$E8,$A5,$01,$5A,$E8,$4A,$FA,$8B,$C2,$A3,$39,$01,$88,$0E,$38
>0228b2	0128b2	74 06 3c 03 75 07 eb 67 52 e8 a5 01 5a e8 4a fa
>0228c2	0128c2	8b c2 a3 39 01 88 0e 38
>0228ca	0128ca	01 8a e1 bb 3b 05 8b 0e		.text $01,$8A,$E1,$BB,$3B,$05,$8B,$0E,$39,$05,$89,$07,$83,$C3,$04,$E2,$F9,$B9,$05,$00,$51,$BB,$3B,$05,$A0,$39,$05,$B4,$05,$8C,$1E,$37
>0228d2	0128d2	39 05 89 07 83 c3 04 e2 f9 b9 05 00 51 bb 3b 05
>0228e2	0128e2	a0 39 05 b4 05 8c 1e 37
>0228ea	0128ea	05 e8 8e 02 59 72 16 51		.text $05,$E8,$8E,$02,$59,$72,$16,$51,$53,$33,$DB,$89,$1E,$37,$05,$A0,$39,$05,$B4,$04,$B1,$01,$E8,$79,$02,$5B,$59,$73,$29,$E8,$5A,$02
>0228f2	0128f2	53 33 db 89 1e 37 05 a0 39 05 b4 04 b1 01 e8 79
>022902	012902	02 5b 59 73 29 e8 5a 02
>02290a	01290a	c6 06 39 06 01 50 51 52		.text $C6,$06,$39,$06,$01,$50,$51,$52,$E8,$B2,$01,$3C,$01,$75,$03,$E8,$47,$01,$5A,$59,$58,$E2,$BD,$C6,$06,$39,$06,$01,$80,$FC,$06,$75
>022912	012912	e8 b2 01 3c 01 75 03 e8 47 01 5a 59 58 e2 bd c6
>022922	012922	06 39 06 01 80 fc 06 75
>02292a	01292a	02 b4 80 e9 75 fd c6 06		.text $02,$B4,$80,$E9,$75,$FD,$C6,$06,$39,$06,$00,$C3,$1E,$C5,$1E,$12,$00,$C5,$5F,$13,$8B,$4F,$03,$8B,$47,$01,$8B,$57,$05,$8A,$1F,$1F
>022932	012932	39 06 00 c3 1e c5 1e 12 00 c5 5f 13 8b 4f 03 8b
>022942	012942	47 01 8b 57 05 8a 1f 1f
>02294a	01294a	c6 06 20 01 04 89 0e 33		.text $C6,$06,$20,$01,$04,$89,$0E,$33,$01,$A2,$32,$01,$8B,$0E,$39,$05,$F6,$C3,$02,$74,$23,$8B,$C2,$0A,$E4,$75,$2E,$F6,$E1,$0A,$E4,$75
>022952	012952	01 a2 32 01 8b 0e 39 05 f6 c3 02 74 23 8b c2 0a
>022962	012962	e4 75 2e f6 e1 0a e4 75
>02296a	01296a	28 8b c8 26 f7 45 23 01		.text $28,$8B,$C8,$26,$F7,$45,$23,$01,$00,$74,$0D,$F7,$06,$2F,$05,$80,$00,$74,$05,$C6,$06,$36,$05,$01,$33,$C0,$33,$DB,$89,$1E,$37,$05
>022972	012972	00 74 0d f7 06 2f 05 80 00 74 05 c6 06 36 05 01
>022982	012982	33 c0 33 db 89 1e 37 05
>02298a	01298a	e8 3f 00 c6 06 36 05 00		.text $E8,$3F,$00,$C6,$06,$36,$05,$00,$C3,$B4,$01,$E9,$0D,$FD,$C6,$06,$20,$01,$02,$EB,$05,$C6,$06,$20,$01,$03,$06,$C4,$1E,$12,$00,$26
>022992	012992	c3 b4 01 e9 0d fd c6 06 20 01 02 eb 05 c6 06 20
>0229a2	0129a2	01 03 06 c4 1e 12 00 26
>0229aa	0129aa	c4 5f 13 26 8b 47 03 a3		.text $C4,$5F,$13,$26,$8B,$47,$03,$A3,$33,$01,$26,$8B,$47,$01,$A2,$32,$01,$26,$8B,$47,$05,$26,$8B,$4F,$07,$26,$C4,$5F,$09,$8C,$06,$37
>0229b2	0129b2	33 01 26 8b 47 01 a2 32 01 26 8b 47 05 26 8b 4f
>0229c2	0129c2	07 26 c4 5f 09 8c 06 37
>0229ca	0129ca	05 07 89 26 35 01 e8 39		.text $05,$07,$89,$26,$35,$01,$E8,$39,$F9,$80,$3E,$38,$06,$01,$74,$07,$50,$51,$E8,$8E,$FA,$59,$58,$BE,$3B,$05,$D1,$E0,$D1,$E0,$03,$F0
>0229d2	0129d2	f9 80 3e 38 06 01 74 07 50 51 e8 8e fa 59 58 be
>0229e2	0129e2	3b 05 d1 e0 d1 e0 03 f0
>0229ea	0129ea	ba 01 00 26 f7 45 23 08		.text $BA,$01,$00,$26,$F7,$45,$23,$08,$00,$74,$02,$87,$D1,$51,$52,$46,$46,$AC,$A2,$31,$01,$26,$F7,$45,$23,$01,$00,$74,$15,$F7,$06,$2F
>0229f2	0129f2	00 74 02 87 d1 51 52 46 46 ac a2 31 01 26 f7 45
>022a02	012a02	23 01 00 74 15 f7 06 2f
>022a0a	012a0a	05 80 00 74 0d 89 16 22		.text $05,$80,$00,$74,$0D,$89,$16,$22,$01,$8B,$C2,$E8,$13,$FB,$5A,$59,$F8,$C3,$AC,$50,$56,$1E,$50,$8A,$26,$2C,$01,$C5,$36,$2D,$01,$88
>022a12	012a12	01 8b c2 e8 13 fb 5a 59 f8 c3 ac 50 56 1e 50 8a
>022a22	012a22	26 2c 01 c5 36 2d 01 88
>022a2a	012a2a	44 03 88 64 04 58 1f 8a		.text $44,$03,$88,$64,$04,$58,$1F,$8A,$C2,$A3,$22,$01,$E8,$F2,$FA,$5E,$58,$E8,$1D,$00,$03,$D8,$5A,$59,$E2,$B3,$80,$3E,$38,$06,$01,$74
>022a32	012a32	c2 a3 22 01 e8 f2 fa 5e 58 e8 1d 00 03 d8 5a 59
>022a42	012a42	e2 b3 80 3e 38 06 01 74
>022a4a	012a4a	03 e8 68 fa f8 c3 80 fc		.text $03,$E8,$68,$FA,$F8,$C3,$80,$FC,$02,$77,$03,$8A,$C4,$C3,$B0,$03,$C3,$8A,$C8,$B8,$80,$00,$D3,$E0,$C3,$80,$3E,$39,$06,$01,$74,$0E
>022a52	012a52	02 77 03 8a c4 c3 b0 03 c3 8a c8 b8 80 00 d3 e0
>022a62	012a62	c3 80 3e 39 06 01 74 0e
>022a6a	012a6a	26 f7 45 23 80 00 74 4c		.text $26,$F7,$45,$23,$80,$00,$74,$4C,$26,$81,$65,$23,$7F,$FF,$C6,$06,$39,$06,$00,$C6,$06,$3B,$01,$50,$B0,$04,$26,$80,$7D,$22,$02,$74
>022a72	012a72	26 81 65 23 7f ff c6 06 39 06 00 c6 06 3b 01 50
>022a82	012a82	b0 04 26 80 7d 22 02 74
>022a8a	012a8a	1b 26 80 7d 22 01 74 04		.text $1B,$26,$80,$7D,$22,$01,$74,$04,$B0,$01,$EB,$10,$B0,$02,$80,$3E,$37,$06,$00,$75,$07,$B0,$03,$C6,$06,$3B,$01,$54,$1E,$56,$8E,$1E
>022a92	012a92	b0 01 eb 10 b0 02 80 3e 37 06 00 75 07 b0 03 c6
>022aa2	012aa2	06 3b 01 54 1e 56 8e 1e
>022aaa	012aaa	1a 00 c5 36 78 00 c6 44		.text $1A,$00,$C5,$36,$78,$00,$C6,$44,$09,$0F,$5E,$1F,$B4,$17,$26,$8A,$55,$04,$CD,$13,$26,$8A,$65,$13,$88,$26,$37,$01,$C3,$51,$52,$80
>022ab2	012ab2	09 0f 5e 1f b4 17 26 8a 55 04 cd 13 26 8a 65 13
>022ac2	012ac2	88 26 37 01 c3 51 52 80
>022aca	012aca	3e 39 06 01 74 26 32 c0		.text $3E,$39,$06,$01,$74,$26,$32,$C0,$80,$3E,$38,$06,$01,$75,$03,$E9,$85,$00,$06,$56,$8E,$06,$1A,$00,$26,$C4,$36,$78,$00,$89,$36,$2D
>022ad2	012ad2	80 3e 38 06 01 75 03 e9 85 00 06 56 8e 06 1a 00
>022ae2	012ae2	26 c4 36 78 00 89 36 2d
>022aea	012aea	01 8c 06 2f 01 26 c6 44		.text $01,$8C,$06,$2F,$01,$26,$C6,$44,$09,$0F,$5E,$07,$26,$8B,$4D,$25,$49,$80,$E5,$03,$D0,$CD,$D0,$CD,$86,$E9,$26,$0A,$4D,$13,$26,$8A
>022af2	012af2	09 0f 5e 07 26 8b 4d 25 49 80 e5 03 d0 cd d0 cd
>022b02	012b02	86 e9 26 0a 4d 13 26 8a
>022b0a	012b0a	55 04 06 1e 56 57 b4 18		.text $55,$04,$06,$1E,$56,$57,$B4,$18,$CD,$13,$72,$33,$80,$3E,$39,$06,$01,$74,$25,$06,$8E,$06,$1A,$00,$26,$C4,$36,$78,$00,$89,$36,$3A
>022b12	012b12	cd 13 72 33 80 3e 39 06 01 74 25 06 8e 06 1a 00
>022b22	012b22	26 c4 36 78 00 89 36 3a
>022b2a	012b2a	06 8c 06 3c 06 8e 06 1a		.text $06,$8C,$06,$3C,$06,$8E,$06,$1A,$00,$26,$89,$3E,$78,$00,$26,$8F,$06,$7A,$00,$C6,$06,$38,$06,$01,$32,$C0,$A2,$39,$06,$EB,$14,$80
>022b32	012b32	00 26 89 3e 78 00 26 8f 06 7a 00 c6 06 38 06 01
>022b42	012b42	32 c0 a2 39 06 eb 14 80
>022b4a	012b4a	fc 0c 74 09 80 fc 80 74		.text $FC,$0C,$74,$09,$80,$FC,$80,$74,$08,$B0,$01,$EB,$06,$B0,$02,$EB,$02,$B0,$03,$5F,$5E,$1F,$07,$5A,$59,$C3,$50,$80,$3E,$38,$06,$01
>022b52	012b52	08 b0 01 eb 06 b0 02 eb 02 b0 03 5f 5e 1f 07 5a
>022b62	012b62	59 c3 50 80 3e 38 06 01
>022b6a	012b6a	75 05 c6 06 39 06 01 32		.text $75,$05,$C6,$06,$39,$06,$01,$32,$E4,$CD,$13,$C6,$06,$76,$00,$FF,$58,$C3,$53,$56,$F6,$06,$38,$06,$01,$75,$36,$50,$06,$26,$80,$7D
>022b72	012b72	e4 cd 13 c6 06 76 00 ff 58 c3 53 56 f6 06 38 06
>022b82	012b82	01 75 36 50 06 26 80 7d
>022b8a	012b8a	22 02 9c 8e 06 1a 00 26		.text $22,$02,$9C,$8E,$06,$1A,$00,$26,$C4,$36,$78,$00,$89,$36,$2D,$01,$8C,$06,$2F,$01,$A0,$37,$01,$26,$88,$44,$04,$A0,$3B,$01,$26,$88
>022b92	012b92	c4 36 78 00 89 36 2d 01 8c 06 2f 01 a0 37 01 26
>022ba2	012ba2	88 44 04 a0 3b 01 26 88
>022baa	012baa	44 07 26 c6 44 09 0f 9d		.text $44,$07,$26,$C6,$44,$09,$0F,$9D,$75,$05,$26,$C6,$44,$0A,$04,$07,$58,$8B,$16,$39,$01,$8A,$EA,$26,$8A,$55,$04,$8A,$36,$38,$01,$06
>022bb2	012bb2	75 05 26 c6 44 0a 04 07 58 8b 16 39 01 8a ea 26
>022bc2	012bc2	8a 55 04 8a 36 38 01 06
>022bca	012bca	8e 06 37 05 cd 13 07 5e		.text $8E,$06,$37,$05,$CD,$13,$07,$5E,$5B,$C3,$E8,$B0,$F3,$26,$8A,$45,$04,$C4,$3E,$19,$01,$26,$38,$45,$04,$75,$08,$26,$F7,$45,$23,$20
>022bd2	012bd2	5b c3 e8 b0 f3 26 8a 45 04 c4 3e 19 01 26 38 45
>022be2	012be2	04 75 08 26 f7 45 23 20
>022bea	012bea	00 75 15 26 c4 3d eb ed		.text $00,$75,$15,$26,$C4,$3D,$EB,$ED,$E8,$92,$F3,$C6,$06,$7A,$00,$01,$E8,$0F,$F7,$C6,$06,$7A,$00,$00,$32,$C9,$26,$F7,$45,$23,$10,$00
>022bf2	012bf2	e8 92 f3 c6 06 7a 00 01 e8 0f f7 c6 06 7a 00 00
>022c02	012c02	32 c9 26 f7 45 23 10 00
>022c0a	012c0a	74 06 26 8a 4d 05 fe c1		.text $74,$06,$26,$8A,$4D,$05,$FE,$C1,$C5,$1E,$12,$00,$88,$4F,$01,$F8,$C3,$50,$32,$C0,$A2,$39,$06,$86,$06,$38,$06,$0A,$C0,$74,$1E,$56
>022c12	012c12	c5 1e 12 00 88 4f 01 f8 c3 50 32 c0 a2 39 06 86
>022c22	012c22	06 38 06 0a c0 74 1e 56
>022c2a	012c2a	1e 06 c5 36 3a 06 2e 8e		.text $1E,$06,$C5,$36,$3A,$06,$2E,$8E,$06,$30,$00,$26,$8E,$06,$1A,$00,$26,$89,$36,$78,$00,$26,$8C,$1E,$7A,$00,$07,$1F,$5E,$58,$F8,$C3
>022c32	012c32	06 30 00 26 8e 06 1a 00 26 89 36 78 00 26 8c 1e
>022c42	012c42	7a 00 07 1f 5e 58 f8 c3
>022c4a	012c4a	e8 a1 00 26 8a 45 05 c6		.text $E8,$A1,$00,$26,$8A,$45,$05,$C6,$06,$20,$01,$02,$E8,$7D,$00,$72,$26,$80,$3E,$63,$01,$F0,$72,$1C,$80,$3E,$74,$01,$29,$75,$15,$C4
>022c52	012c52	06 20 01 02 e8 7d 00 72 26 80 3e 63 01 f0 72 1c
>022c62	012c62	80 3e 74 01 29 75 15 c4
>022c6a	012c6a	3e 12 00 26 c4 7f 13 be		.text $3E,$12,$00,$26,$C4,$7F,$13,$BE,$75,$01,$83,$C7,$02,$B9,$17,$00,$F3,$A4,$F8,$C3,$B0,$07,$F9,$C3,$E8,$69,$00,$26,$8A,$45,$05,$8A
>022c72	012c72	75 01 83 c7 02 b9 17 00 f3 a4 f8 c3 b0 07 f9 c3
>022c82	012c82	e8 69 00 26 8a 45 05 8a
>022c8a	012c8a	d0 c6 06 20 01 02 52 e8		.text $D0,$C6,$06,$20,$01,$02,$52,$E8,$42,$00,$5A,$72,$3E,$80,$3E,$63,$01,$F0,$72,$34,$80,$3E,$74,$01,$29,$75,$2D,$06,$57,$1E,$07,$BF
>022c92	012c92	42 00 5a 72 3e 80 3e 63 01 f0 72 34 80 3e 74 01
>022ca2	012ca2	29 75 2d 06 57 1e 07 bf
>022caa	012caa	75 01 c5 36 12 00 c5 74		.text $75,$01,$C5,$36,$12,$00,$C5,$74,$13,$83,$C6,$02,$B9,$17,$00,$F3,$A4,$06,$1F,$5F,$07,$E8,$3F,$F5,$8A,$C2,$C6,$06,$20,$01,$03,$E8
>022cb2	012cb2	13 83 c6 02 b9 17 00 f3 a4 06 1f 5f 07 e8 3f f5
>022cc2	012cc2	8a c2 c6 06 20 01 03 e8
>022cca	012cca	0a 00 c6 06 1e 01 ff c3		.text $0A,$00,$C6,$06,$1E,$01,$FF,$C3,$B0,$07,$F9,$C3,$06,$57,$53,$1E,$07,$BF,$4E,$01,$33,$D2,$89,$16,$2B,$05,$B9,$01,$00,$E8,$B0,$F6
>022cd2	012cd2	b0 07 f9 c3 06 57 53 1e 07 bf 4e 01 33 d2 89 16
>022ce2	012ce2	2b 05 b9 01 00 e8 b0 f6
>022cea	012cea	5b 5f 07 c3 26 8a 55 04		.text $5B,$5F,$07,$C3,$26,$8A,$55,$04,$0A,$D2,$78,$22,$26,$F7,$45,$23,$04,$00,$75,$1A,$80,$3E,$77,$00,$01,$75,$13,$E8,$24,$07,$74,$0E
>022cf2	012cf2	0a d2 78 22 26 f7 45 23 04 00 75 1a 80 3e 77 00
>022d02	012d02	01 75 13 e8 24 07 74 0e
>022d0a	012d0a	b4 16 cd 13 73 08 53 bb		.text $B4,$16,$CD,$13,$73,$08,$53,$BB,$40,$00,$E8,$ED,$06,$5B,$C3,$C5,$1E,$12,$00,$C5,$5F,$13,$B0,$00,$26,$F7,$45,$23,$00,$02,$75,$02
>022d12	012d12	40 00 e8 ed 06 5b c3 c5 1e 12 00 c5 5f 13 b0 00
>022d22	012d22	26 f7 45 23 00 02 75 02
>022d2a	012d2a	fe c0 88 47 01 c3 c5 1e		.text $FE,$C0,$88,$47,$01,$C3,$C5,$1E,$12,$00,$C5,$5F,$13,$26,$81,$65,$23,$FF,$FD,$80,$7F,$01,$00,$75,$06,$26,$81,$4D,$23,$00,$02,$C3
>022d32	012d32	12 00 c5 5f 13 26 81 65 23 ff fd 80 7f 01 00 75
>022d42	012d42	06 26 81 4d 23 00 02 c3

;******  Return to file: Floppy.asm


;******  Return to file: kernel.asm


;******  Processing file: FAT12.asm


;******  Processing file: FAT12_def.asm

=$19800						FAT12_ADDRESS_BUFFER_512 = $19800 ; RAM address where to store the sector read by the floppy READ_DATA function
=$19a00						FAT12_FAT_ADDRESS_BUFFER_512 = $19A00 ; RAM address where to store the sector read by the floppy READ_DATA function

;******  Return to file: FAT12.asm

=$19000						Byte_Per_Sector = $19000 ; 512 for a Floppy disk
=$19002						Sector_Per_Cluster = $19002 ; 1
=$19004						Nb_Of_reserved_Cluster = $19004 ; 1 , this number include the boot sector
=$19006						Nb_Of_FAT = $19006 ; 2
=$19008						Max_Root_Entry = $19008 ; 224  => 14 sector for the root directory and 32Byte foe en entry (14 * 512 / 32)
=$1900a						Total_Sector_Count = $1900A ; 2880 => 80 track of 18 sector on each 2 dide (80*18*2)
=$1900c						Sector_per_Fat = $1900C
=$1900e						Sector_per_Track = $1900E
=$19010						Nb_of_Head = $19010
=$19012						Total_Sector_Count_FAT32 = $19012
=$19016						Boot_Signature = $19016
=$19018						Volume_ID = $19018
=$1901c						Volume_Label =  $1901C
=$19027						File_System_Type =  $19027
=$1902f						Sector_loaded_in_ram = $1902F ; updated by any function readding Sector from FDD like : IFAT12_READ_BOOT_SECTOR / IFAT12_GET_ROOT_DIR_POS
=$19031						Root_entry_Sector_index = $19031 ; hold the sector index position of the fists Root directory sectoe
=$19033						Root_entry_value = $19033 ; store the 32 byte of root entry
=$19053						Fat12_Sector_index = $19053 ; store the sector index of the first fat sector
=$19055						Fat12_next_entry = $19055  ; store the 12 bit fat entry
=$19057						Fat12_Sector_loaded_in_ram = $19057 ; store the actual fat sector loades in ram
.019060						IFAT12_READ_BOOT_SECTOR
.019060		c2 30		rep #$30	                REP #$30        ; set A&X long
.019062		a9 01 00	lda #$0001	                  LDA #`FAT12_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.019065		48		pha		                  PHA
.019066		a9 00 98	lda #$9800	                  LDA #<>FAT12_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.019069		48		pha		                  PHA
.01906a		a5 00		lda $00		                  LDA $0 ; read sector 0 (where the boot sector is stored)
.01906c		22 42 a2 01	jsl $01a242	                  JSL IFDD_READ
.019070		fa		plx		                  PLX
.019071		fa		plx		                  PLX;
.019072		8f 2f 90 01	sta $01902f	                  STA Sector_loaded_in_ram
.019076		a2 0b 00	ldx #$000b	                  LDX #11
.019079		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.01907d		8f 00 90 01	sta $019000	                  STA Byte_Per_Sector
.019081		a2 0d 00	ldx #$000d	                  LDX #13 ;
.019084		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.019088		29 ff 00	and #$00ff	                  AND #$FF
.01908b		8f 02 90 01	sta $019002	                  STA Sector_Per_Cluster
.01908f		a2 0e 00	ldx #$000e	                  LDX #14 ;
.019092		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.019096		8f 04 90 01	sta $019004	                  STA Nb_Of_reserved_Cluster
.01909a		a2 10 00	ldx #$0010	                  LDX #16 ;
.01909d		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190a1		29 ff 00	and #$00ff	                  AND #$FF
.0190a4		8f 06 90 01	sta $019006	                  STA Nb_Of_FAT
.0190a8		a2 11 00	ldx #$0011	                  LDX #17 ;
.0190ab		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190af		8f 08 90 01	sta $019008	                  STA Max_Root_Entry
.0190b3		a2 13 00	ldx #$0013	                  LDX #19 ;
.0190b6		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190ba		8f 0a 90 01	sta $01900a	                  STA Total_Sector_Count
.0190be		a2 16 00	ldx #$0016	                  LDX #22 ;
.0190c1		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190c5		8f 0c 90 01	sta $01900c	                  STA Sector_per_Fat
.0190c9		a2 18 00	ldx #$0018	                  LDX #24 ;
.0190cc		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190d0		8f 0e 90 01	sta $01900e	                  STA Sector_per_Track
.0190d4		a2 1a 00	ldx #$001a	                  LDX #26 ;
.0190d7		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190db		8f 10 90 01	sta $019010	                  STA Nb_of_Head
.0190df		a2 20 00	ldx #$0020	                  LDX #32 ;
.0190e2		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190e6		8f 12 90 01	sta $019012	                  STA Total_Sector_Count_FAT32
.0190ea		a2 22 00	ldx #$0022	                  LDX #34 ;
.0190ed		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190f1		8f 14 90 01	sta $019014	                  STA Total_Sector_Count_FAT32+2
.0190f5		a2 26 00	ldx #$0026	                  LDX #38 ;
.0190f8		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.0190fc		29 ff 00	and #$00ff	                  AND #$FF
.0190ff		8f 16 90 01	sta $019016	                  STA Boot_Signature
.019103		a2 27 00	ldx #$0027	                  LDX #39
.019106		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.01910a		8f 18 90 01	sta $019018	                  STA Volume_ID
.01910e		a2 29 00	ldx #$0029	                  LDX #41
.019111		bf 00 98 01	lda $019800,x	                  LDA FAT12_ADDRESS_BUFFER_512,X
.019115		8f 1a 90 01	sta $01901a	                  STA Volume_ID+2
.019119		a9 00 98	lda #$9800	                  LDA #<>FAT12_ADDRESS_BUFFER_512
.01911c		69 2b 00	adc #$002b	                  ADC #43
.01911f		aa		tax		                  TAX
.019120		a0 1c 90	ldy #$901c	                  LDY #<>Volume_Label
.019123		a9 0a 00	lda #$000a	                  LDA #11-1
.019126		54 01 01	mvn $01,$01	                  MVN `Volume_Label , `FAT12_ADDRESS_BUFFER_512
.019129		a9 00 98	lda #$9800	                  LDA #<>FAT12_ADDRESS_BUFFER_512
.01912c		69 36 00	adc #$0036	                  ADC #54
.01912f		aa		tax		                  TAX
.019130		a0 27 90	ldy #$9027	                  LDY #<>File_System_Type
.019133		a9 07 00	lda #$0007	                  LDA #8-1
.019136		54 01 01	mvn $01,$01	                  MVN `File_System_Type, `FAT12_ADDRESS_BUFFER_512
.019139		af 00 90 01	lda $019000	                  LDA Byte_Per_Sector
.01913d		c9 00 02	cmp #$0200	                  CMP #512
.019140		d0 56		bne $019198	                  BNE ERROR_BLOCK_SEIZE
.019142		af 02 90 01	lda $019002	                  LDA Sector_Per_Cluster
.019146		c9 01 00	cmp #$0001	                  CMP #1
.019149		d0 52		bne $01919d	                  BNE ERROR_SECTOR_PER_CLUSTER
.01914b		af 04 90 01	lda $019004	                  LDA Nb_Of_reserved_Cluster
.01914f		c9 01 00	cmp #$0001	                  CMP #1
.019152		90 4e		bcc $0191a2	                  BCC ERROR_RESERVED_SECTOR
.019154		af 06 90 01	lda $019006	                  LDA Nb_Of_FAT
.019158		c9 01 00	cmp #$0001	                  CMP #1
.01915b		90 4a		bcc $0191a7	                  BCC ERROR_NB_FAT
.01915d		af 08 90 01	lda $019008	                  LDA Max_Root_Entry
.019161		c9 e0 00	cmp #$00e0	                  CMP #224
.019164		d0 46		bne $0191ac	                  BNE ERROR_NB_ROOT_ENTRY
.019166		af 0a 90 01	lda $01900a	                  LDA Total_Sector_Count
.01916a		c9 40 0b	cmp #$0b40	                  CMP #2880
.01916d		d0 42		bne $0191b1	                  BNE ERROR_NB_TOTAL_SECTOR_COUNT
.01916f		af 0c 90 01	lda $01900c	                  LDA Sector_per_Fat
.019173		c9 09 00	cmp #$0009	                  CMP #9
.019176		d0 3e		bne $0191b6	                  BNE ERROR_SECTOR_PER_FAT
.019178		af 0e 90 01	lda $01900e	                  LDA Sector_per_Track
.01917c		c9 12 00	cmp #$0012	                  CMP #18
.01917f		d0 3a		bne $0191bb	                  BNE ERROR_SECTOR_PER_TRACK
.019181		af 10 90 01	lda $019010	                  LDA Nb_of_Head
.019185		c9 01 00	cmp #$0001	                  CMP #1
.019188		90 36		bcc $0191c0	                  BCC ERROR_NB_HEAD_NULL
.01918a		af 16 90 01	lda $019016	                  LDA Boot_Signature
.01918e		c9 29 00	cmp #$0029	                  CMP #$29
.019191		d0 32		bne $0191c5	                  BNE ERROR_BOOT_SIGNATURE
.019193		a9 01 00	lda #$0001	                  LDA #1
.019196		80 30		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.019198		a9 ff ff	lda #$ffff	ERROR_BLOCK_SEIZE LDA #-1
.01919b		80 2b		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.01919d						ERROR_SECTOR_PER_CLUSTER
.01919d		a9 fe ff	lda #$fffe	                  LDA #-2
.0191a0		80 26		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191a2						ERROR_RESERVED_SECTOR
.0191a2		a9 fd ff	lda #$fffd	                  LDA #-3
.0191a5		80 21		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191a7		a9 fc ff	lda #$fffc	ERROR_NB_FAT      LDA #-4
.0191aa		80 1c		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191ac						ERROR_NB_ROOT_ENTRY
.0191ac		a9 fb ff	lda #$fffb	                  LDA #-5
.0191af		80 17		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191b1						ERROR_NB_TOTAL_SECTOR_COUNT
.0191b1		a9 fa ff	lda #$fffa	                  LDA #-6
.0191b4		80 12		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191b6						ERROR_SECTOR_PER_FAT
.0191b6		a9 f9 ff	lda #$fff9	                  LDA #-7
.0191b9		80 0d		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191bb						ERROR_SECTOR_PER_TRACK
.0191bb		a9 f8 ff	lda #$fff8	                  LDA #-8
.0191be		80 08		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191c0						ERROR_NB_HEAD_NULL
.0191c0		a9 f7 ff	lda #$fff7	                  LDA #-9
.0191c3		80 03		bra $0191c8	                  BRA RETURN_IFAT12_READ_BOOT_SECTOR
.0191c5						ERROR_BOOT_SIGNATURE
.0191c5		a9 f6 ff	lda #$fff6	                  LDA #-10
.0191c8						RETURN_IFAT12_READ_BOOT_SECTOR
.0191c8		6b		rtl		                  RTL
.0191c9						IFAT12_GET_ROOT_DIR_POS
.0191c9		c2 30		rep #$30	                REP #$30        ; set A&X long
.0191cb		af 06 90 01	lda $019006	                  LDA Nb_Of_FAT;
.0191cf		aa		tax		                  TAX
.0191d0		af 0c 90 01	lda $01900c	                  LDA Sector_per_Fat
.0191d4		ca		dex		ADD_ONE_FAT       DEC X
.0191d5		e0 00 00	cpx #$0000	                  CPX #0
.0191d8		f0 07		beq $0191e1	                  BEQ FDD_END_LOOP_FAT_SECTOR_USAGE
.0191da		18		clc		                  CLC
.0191db		6f 0c 90 01	adc $01900c	                  ADC Sector_per_Fat
.0191df		80 f3		bra $0191d4	                  BRA ADD_ONE_FAT
.0191e1						FDD_END_LOOP_FAT_SECTOR_USAGE
.0191e1		18		clc		                  CLC
.0191e2		6f 04 90 01	adc $019004	                  ADC Nb_Of_reserved_Cluster ; at this point we have the sector where the Root directory is starting
.0191e6		8f 31 90 01	sta $019031	                  STA Root_entry_Sector_index
.0191ea		6b		rtl		                  RTL
.0191eb						IFAT12_GET_ROOT_FIRST_ENTRY
.0191eb		c2 30		rep #$30	                REP #$30        ; set A&X long
.0191ed		6b		rtl		                  RTL
.0191ee						IFAT12_GET_ROOT_NEXT_ENTRY
.0191ee		c2 30		rep #$30	                REP #$30        ; set A&X long
.0191f0		6b		rtl		                  RTL
.0191f1						IFAT12_GET_ROOT_ENTRY
.0191f1		c2 30		rep #$30	                REP #$30        ; set A&X long
.0191f3		cf 08 90 01	cmp $019008	                  CMP Max_Root_Entry
.0191f7		10 47		bpl $019240	                  BPL FAT23_ERROR_NB_ROOT_ENTRY_INDEX
.0191f9		48		pha		                  PHA ; Save the root entry index we want to read
.0191fa		a2 00 00	ldx #$0000	                  LDX #0 ; compute in witch sector the desired root entry is, 16 entry per sector so we just need to divit the sector size by 16
.0191fd						KEEP_SHIFT_ROOT_ENTRY_INDEX
.0191fd		4a		lsr a		                  LSR
.0191fe		e8		inx		                  INC X
.0191ff		e0 04 00	cpx #$0004	                  CPX #4 ; divide by 16
.019202		d0 f9		bne $0191fd	                  BNE KEEP_SHIFT_ROOT_ENTRY_INDEX
.019204		18		clc		                  CLC ; reset the carry flag potencialy set by CPX
.019205		6f 31 90 01	adc $019031	                  ADC Root_entry_Sector_index ; add the relative sector position of the rrot entry to the start root entry position shoud be 19 (0 based index)
.019209		cf 2f 90 01	cmp $01902f	                  CMP Sector_loaded_in_ram
.01920d		f0 16		beq $019225	                  BEQ FDD_SECTOR_ALREADDY_LOADDES_IN_RAM
.01920f		8f 2f 90 01	sta $01902f	                  STA Sector_loaded_in_ram ; save the new sector loaded
.019213		a9 01 00	lda #$0001	                  LDA #`FAT12_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.019216		48		pha		                  PHA
.019217		a9 00 98	lda #$9800	                  LDA #<>FAT12_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.01921a		48		pha		                  PHA
.01921b		af 2f 90 01	lda $01902f	                  LDA Sector_loaded_in_ram ; read the ROOT directory sector saved at the begining of the function
.01921f		22 42 a2 01	jsl $01a242	                  JSL IFDD_READ
.019223		fa		plx		                  PLX
.019224		fa		plx		                  PLX
.019225						FDD_SECTOR_ALREADDY_LOADDES_IN_RAM
.019225		68		pla		                  PLA ; GET the root entry FDD_INDEX
.019226		48		pha		                  PHA
.019227		29 0f 00	and #$000f	                  AND #$0F ; get only the 4 first byte to get the 16 value ofset in the root entry sector loades in ram (16 entry per sector)
.01922a		0a		asl a		                  ASL
.01922b		0a		asl a		                  ASL
.01922c		0a		asl a		                  ASL
.01922d		0a		asl a		                  ASL ; now A contain the ofset to read the root entry from
.01922e		18		clc		                  CLC
.01922f		69 00 98	adc #$9800	                  ADC #<>FAT12_ADDRESS_BUFFER_512
.019232		aa		tax		                  TAX
.019233		a9 33 90	lda #$9033	                  LDA #<>Root_entry_value
.019236		a8		tay		                  TAY
.019237		a9 1f 00	lda #$001f	                  LDA #31
.01923a		54 01 01	mvn $01,$01	                  MVN `Root_entry_value, `FAT12_ADDRESS_BUFFER_512
.01923d		68		pla		                  PLA
.01923e		80 03		bra $019243	                  BRA RETURN_IFAT12_IFAT12_GET_ROOT_ENTRY
.019240						FAT23_ERROR_NB_ROOT_ENTRY_INDEX
.019240		a9 ff ff	lda #$ffff	                  LDA #-1
.019243						RETURN_IFAT12_IFAT12_GET_ROOT_ENTRY
.019243		6b		rtl		                  RTL
.019244						IFAT12_GET_FAT_POS
.019244		af 04 90 01	lda $019004	                  LDA Nb_Of_reserved_Cluster
.019248		8f 53 90 01	sta $019053	                  STA Fat12_Sector_index
.01924c		6b		rtl		                  RTL
.01924d						IFAT_GET_FAT_ENTRY
.01924d		48		pha		                  PHA
.01924e		a2 00 00	ldx #$0000	                  LDX #0
.019251		c9 54 01	cmp #$0154	                  CMP #340
.019254		90 06		bcc $01925c	                  BCC FAT12_ENTRY_SECTOR_LOCATION_FIND
.019256						FAT12_FAT_ENTRY_NEXT_SECTOR
.019256		e8		inx		                  INC X
.019257		e9 54 01	sbc #$0154	                  SBC #340
.01925a		10 fa		bpl $019256	                  BPL FAT12_FAT_ENTRY_NEXT_SECTOR
.01925c						FAT12_ENTRY_SECTOR_LOCATION_FIND
.01925c		8a		txa		                  TXA
.01925d		6f 04 90 01	adc $019004	                  ADC Nb_Of_reserved_Cluster
.019261		cf 57 90 01	cmp $019057	                  CMP Fat12_Sector_loaded_in_ram
.019265		f0 16		beq $01927d	                  BEQ FAT12_COMPUT_OFSET_IN_CLUSTER ; dont need to load the fat sector because it's alreaddy loaded
.019267		8f 57 90 01	sta $019057	                  STA Fat12_Sector_loaded_in_ram
.01926b		a9 01 00	lda #$0001	                  LDA #`FAT12_FAT_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.01926e		48		pha		                  PHA
.01926f		a9 00 9a	lda #$9a00	                  LDA #<>FAT12_FAT_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.019272		48		pha		                  PHA
.019273		af 57 90 01	lda $019057	                  LDA Fat12_Sector_loaded_in_ram ; read the ROOT directory sector saved at the begining of the function
.019277		22 42 a2 01	jsl $01a242	                  JSL IFDD_READ
.01927b		fa		plx		                  PLX
.01927c		fa		plx		                  PLX
.01927d						FAT12_COMPUT_OFSET_IN_CLUSTER
.01927d		a3 01		lda $01,s	                  LDA 1,S
.01927f		29 01 00	and #$0001	                  AND #1
.019282		c9 00 00	cmp #$0000	                  CMP #0
.019285		68		pla		                  PLA ; get the fat entry
.019286		48		pha		                  PHA ; save it back again
.019287		d0 51		bne $0192da	                  BNE FAT12_ODD_FAT_ENTRY
.019289		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.01928d		0a		asl a		                  ASL ; A*2
.01928e		18		clc		                  CLC ; clear the carry flag
.01928f		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry ; A*3
.019293		4a		lsr a		                  LSR
.019294		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.019298		a9 00 9a	lda #$9a00	                  LDA #<>FAT12_FAT_ADDRESS_BUFFER_512
.01929b		18		clc		                  CLC
.01929c		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry
.0192a0		aa		tax		                  TAX
.0192a1		a9 55 90	lda #$9055	                  LDA #<>Fat12_next_entry
.0192a4		a8		tay		                  TAY
.0192a5		a9 00 00	lda #$0000	                  LDA #0 ; read one byte only
.0192a8		54 01 01	mvn $01,$01	                  MVN `Fat12_next_entry,`FAT12_FAT_ADDRESS_BUFFER_512
.0192ab		af 55 90 01	lda $019055	                  LDA Fat12_next_entry
.0192af		48		pha		                  PHA
.0192b0		a9 55 90	lda #$9055	                  LDA #<>Fat12_next_entry
.0192b3		a8		tay		                  TAY
.0192b4		a9 00 00	lda #$0000	                  LDA #0 ; read one byte only
.0192b7		54 01 01	mvn $01,$01	                  MVN `Fat12_next_entry,`FAT12_FAT_ADDRESS_BUFFER_512
.0192ba		af 55 90 01	lda $019055	                  LDA Fat12_next_entry
.0192be		29 0f 00	and #$000f	                  AND #$0F
.0192c1		0a		asl a		                  ASL
.0192c2		0a		asl a		                  ASL
.0192c3		0a		asl a		                  ASL
.0192c4		0a		asl a		                  ASL
.0192c5		0a		asl a		                  ASL
.0192c6		0a		asl a		                  ASL
.0192c7		0a		asl a		                  ASL
.0192c8		0a		asl a		                  ASL
.0192c9		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.0192cd		68		pla		                  PLA
.0192ce		18		clc		                  CLC
.0192cf		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry
.0192d3		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.0192d7		68		pla		                  PLA ; get the initial fat entry, Fat12_next_entry contain the next fat entry and sector to read
.0192d8		80 4f		bra $019329	                  BRA RETURN_IFAT12_GET_FAT_ENTRY
.0192da						FAT12_ODD_FAT_ENTRY
.0192da		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.0192de		0a		asl a		                  ASL ; A*2
.0192df		18		clc		                  CLC ; clear the carry flag
.0192e0		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry ; A*3
.0192e4		4a		lsr a		                  LSR
.0192e5		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.0192e9		a9 00 9a	lda #$9a00	                  LDA #<>FAT12_FAT_ADDRESS_BUFFER_512
.0192ec		18		clc		                  CLC
.0192ed		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry
.0192f1		aa		tax		                  TAX
.0192f2		a9 55 90	lda #$9055	                  LDA #<>Fat12_next_entry
.0192f5		a8		tay		                  TAY
.0192f6		a9 00 00	lda #$0000	                  LDA #0 ; read one byte only
.0192f9		54 01 01	mvn $01,$01	                  MVN `Fat12_next_entry,`FAT12_FAT_ADDRESS_BUFFER_512
.0192fc		af 55 90 01	lda $019055	                  LDA Fat12_next_entry
.019300		29 f0 00	and #$00f0	                  AND #$F0
.019303		4a		lsr a		                  LSR
.019304		4a		lsr a		                  LSR
.019305		4a		lsr a		                  LSR
.019306		4a		lsr a		                  LSR
.019307		48		pha		                  PHA ; save the low part of the fat entry
.019308		a9 55 90	lda #$9055	                  LDA #<>Fat12_next_entry
.01930b		a8		tay		                  TAY
.01930c		a9 00 00	lda #$0000	                  LDA #0 ; read one byte only
.01930f		54 01 01	mvn $01,$01	                  MVN `Fat12_next_entry,`FAT12_FAT_ADDRESS_BUFFER_512
.019312		af 55 90 01	lda $019055	                  LDA Fat12_next_entry
.019316		0a		asl a		                  ASL
.019317		0a		asl a		                  ASL
.019318		0a		asl a		                  ASL
.019319		0a		asl a		                  ASL
.01931a		8f 55 90 01	sta $019055	                  STA Fat12_next_entry ; save the low fat entry
.01931e		68		pla		                  PLA ; get the low paart
.01931f		18		clc		                  CLC
.019320		6f 55 90 01	adc $019055	                  ADC Fat12_next_entry ; add the low part to the hi part
.019324		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.019328		68		pla		                  PLA ; get the initial fat entry, Fat12_next_entry contain the next fat entry and sector to read
.019329						RETURN_IFAT12_GET_FAT_ENTRY
.019329		6b		rtl		                  RTL
.01932a						ILOAD_FILE
.01932a		22 60 90 01	jsl $019060	                  JSL IFAT12_READ_BOOT_SECTOR
.01932e		c9 01 00	cmp #$0001	                  CMP #$0001
.019331		f0 05		beq $019338	                  BEQ ILOAD_FILE_FAT_12_BOOT_SECTOR_PARSING_OK
.019333		a9 ff ff	lda #$ffff	                  LDA #-1
.019336		80 4d		bra $019385	                  BRA ILOAD_FILE_RETURN_ERROR_temp
.019338						ILOAD_FILE_FAT_12_BOOT_SECTOR_PARSING_OK
.019338		22 c9 91 01	jsl $0191c9	                  JSL IFAT12_GET_ROOT_DIR_POS
.01933c		c2 30		rep #$30	                REP #$30        ; set A&X long
.01933e		a9 00 00	lda #$0000	                  LDA #$00 ; sellect the first entry
.019341		48		pha		                  PHA
.019342						ILOAD_FILE_READ_NEXT_ROOT_ENTRY
.019342		22 f1 91 01	jsl $0191f1	                  JSL IFAT12_GET_ROOT_ENTRY
.019346		af 3e 90 01	lda $01903e	                  LDA Root_entry_value + 11 ; get the flag Byte to test if it a file or a directory
.01934a		29 10 00	and #$0010	                  AND #$10
.01934d		c9 10 00	cmp #$0010	                  CMP #$10
.019350		d0 0b		bne $01935d	                  BNE ILOAD_FILE_ENTRY ; if equal we read a directory so just read the next one
.019352						ILOAD_FILE_STRING_NOT_MATCHED
.019352		68		pla		                  PLA   ; get the actual root entry
.019353		cf 08 90 01	cmp $019008	                  CMP Max_Root_Entry ; prevent to loop forever so exit
.019357		f0 26		beq $01937f	                  BEQ ILOAD_FILE_NO_FILE_MATCHED
.019359		1a		inc a		                  INC A ; sellect the next root entry
.01935a		48		pha		                  PHA   ; save the next root entry to read
.01935b		80 e5		bra $019342	                  BRA ILOAD_FILE_READ_NEXT_ROOT_ENTRY
.01935d						ILOAD_FILE_ENTRY
.01935d		c2 30		rep #$30	                REP #$30        ; set A&X long
.01935f		68		pla		                  PLA   ; get the actual root entry
.019360		cf 08 90 01	cmp $019008	                  CMP Max_Root_Entry ; prevent to loop forever so exit
.019364		f0 19		beq $01937f	                  BEQ ILOAD_FILE_NO_FILE_MATCHED
.019366		1a		inc a		                  INC A ; sellect the next root entry
.019367		48		pha		                  PHA   ; save the next root entry to read
.019368		a2 ff ff	ldx #$ffff	                  LDX #-1
.01936b		a0 ff ff	ldy #$ffff	                  LDY #-1
.01936e						ILOAD_FILE_CHAR_MATCHING
.01936e		e8		inx		                  INC X
.01936f		c8		iny		                  INC Y
.019370		e0 0b 00	cpx #$000b	                  CPX #11 ; FAT12 file or folder size
.019373		f0 12		beq $019387	                  BEQ ILOAD_FILE_STRING_MATCHED
.019375		b3 06		lda ($06,s),y	                  LDA (6,S),Y ; load the "y" char file name we want to read
.019377		df 33 90 01	cmp $019033,x	                  CMP Root_entry_value,X
.01937b		f0 f1		beq $01936e	                  BEQ ILOAD_FILE_CHAR_MATCHING
.01937d		80 d3		bra $019352	                  BRA ILOAD_FILE_STRING_NOT_MATCHED
.01937f						ILOAD_FILE_NO_FILE_MATCHED
.01937f		68		pla		                  PLA
.019380		a9 fe ff	lda #$fffe	                  LDA #-2
.019383		80 62		bra $0193e7	                  BRA ILOAD_FILE_RETURN_ERROR
.019385						ILOAD_FILE_RETURN_ERROR_temp
.019385		80 60		bra $0193e7	                  BRA ILOAD_FILE_RETURN_ERROR
.019387						ILOAD_FILE_STRING_MATCHED
.019387		68		pla		                  PLA
.019388		af 4d 90 01	lda $01904d	                  LDA Root_entry_value + 26 ; get the first fat entry for the fil from the root directory entry we matched
.01938c		8f 55 90 01	sta $019055	                  STA Fat12_next_entry
.019390						ILOAD_FILE_Read_next_sector
.019390		a3 0a		lda $0a,s	                  LDA 10,S ; load the byte nb 3 (bank byte)
.019392		48		pha		                  PHA
.019393		a3 0c		lda $0c,s	                  LDA 12,S ; load the low world part of the buffer address
.019395		48		pha		                  PHA
.019396		af 55 90 01	lda $019055	                  LDA Fat12_next_entry ; sector to read
.01939a		69 21 00	adc #$0021	                  ADC #1+9+9+14 ; skip the reserved sector ,  the 2 fat and the root sector
.01939d		22 42 a2 01	jsl $01a242	                  JSL IFDD_READ
.0193a1		fa		plx		                  PLX
.0193a2		fa		plx		                  PLX
.0193a3		a3 0c		lda $0c,s	                  LDA 12,S ; load the low world part of the buffer address
.0193a5		18		clc		                  CLC
.0193a6		a9 00 00	lda #$0000	                  LDA #0
.0193a9		48		pha		                  PHA ; save the conter vaue
.0193aa		48		pha		                  PHA ; save the
.0193ab						ILOAD_FILE_Add_More_Sector_Per_Cluster
.0193ab		a3 04		lda $04,s	                  LDA 4,S ; load the Byte per cluster value
.0193ad		6f 00 90 01	adc $019000	                  ADC Byte_Per_Sector
.0193b1		83 04		sta $04,s	                  STA 4,S
.0193b3		af 02 90 01	lda $019002	                  LDA Sector_Per_Cluster
.0193b7		c3 02		cmp $02,s	                  CMP 2,S
.0193b9		f0 07		beq $0193c2	                  BEQ ILOAD_FILE_Read_Next_Data
.0193bb		a3 02		lda $02,s	                  LDA 2,S
.0193bd		1a		inc a		                  INC A
.0193be		83 02		sta $02,s	                  STA 2,S
.0193c0		80 e9		bra $0193ab	                  BRA ILOAD_FILE_Add_More_Sector_Per_Cluster
.0193c2						ILOAD_FILE_Read_Next_Data
.0193c2		fa		plx		                  PLX ; removing the compter valuer from the stack
.0193c3		a3 0e		lda $0e,s	                  LDA 14,S ; load the low world part of the buffer address
.0193c5		18		clc		                  CLC
.0193c6		63 02		adc $02,s	                  ADC 2,S
.0193c8		90 09		bcc $0193d3	                  BCC ILOAD_FILE_New_Buiffer_Address_computed
.0193ca		83 0e		sta $0e,s	                  STA 14,S ; Save the low world part of the buffer address
.0193cc		a3 0c		lda $0c,s	                  LDA 12,S ; load the byte nb 3 (bank byte)
.0193ce		69 01 00	adc #$0001	                  ADC #1
.0193d1		83 0c		sta $0c,s	                  STA 12,S ; Save the byte nb 3 (bank byte)
.0193d3						ILOAD_FILE_New_Buiffer_Address_computed
.0193d3		fa		plx		                  PLX ; get the Byte per cluster count out of the stack
.0193d4		af 55 90 01	lda $019055	                  LDA Fat12_next_entry ; sector to read
.0193d8		22 4d 92 01	jsl $01924d	                  JSL IFAT_GET_FAT_ENTRY
.0193dc		af 55 90 01	lda $019055	                  LDA Fat12_next_entry
.0193e0		c9 fe 0f	cmp #$0ffe	                  CMP #$FFE
.0193e3		b0 02		bcs $0193e7	                  BCS ILOAD_FILE_END_OF_FILE
.0193e5		80 a9		bra $019390	                  BRA ILOAD_FILE_Read_next_sector
.0193e7						ILOAD_FILE_END_OF_FILE
.0193e7						ILOAD_FILE_RETURN_ERROR
.0193e7		6b		rtl		                  RTL

;******  Return to file: kernel.asm


;******  Processing file: MIDI_MPU_401_def.asm

=$af1330					MIDI_DATA		= $AF1330              ; R/W
=$af1331					MIDI_MPU_STATUS		= $AF1331    ; Read only
=$af1331					MIDI_MPU_COMMAND		= $AF1331  ; Write only

;******  Return to file: kernel.asm


;******  Processing file: uart.s

=$af13f8					UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8					UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.160000						UART_SELECT
.160000		08		php		            PHP
.160001		c2 20		rep #$20	                REP #$20        ; set A long
.160003		c9 02 00	cmp #$0002	            CMP #2
.160006		f0 07		beq $16000f	            BEQ is_COM2
.160008		c2 20		rep #$20	                REP #$20        ; set A long
.16000a		a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.16000d		80 05		bra $160014	            BRA setaddr
.16000f						is_COM2
.16000f		c2 20		rep #$20	                REP #$20        ; set A long
.160011		a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.160014		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.160018		e2 20		sep #$20	                SEP #$20        ; set A short
.16001a		a9 af		lda #$af	            LDA #`UART1_BASE
.16001c		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.160020		28		plp		            PLP
.160021		6b		rtl		            RTL
.160022						UART_SETBPS
.160022		08		php		            PHP
.160023		0b		phd		            PHD
.160024		48		pha		                PHA             ; begin setdp macro
.160025		08		php			PHP
.160026		c2 20		rep #$20	                REP #$20        ; set A long
.160028		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.16002b		5b		tcd		                TCD
.16002c		28		plp			PLP
.16002d		68		pla		                PLA             ; end setdp macro
.16002e		c2 30		rep #$30	                REP #$30        ; set A&X long
.160030		48		pha		            PHA
.160031		e2 20		sep #$20	                SEP #$20        ; set A short
.160033		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.160036		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.160038		09 80		ora #$80	            ORA #LCR_DLB
.16003a		97 00		sta [$0700],y	            STA [CURRUART],Y
.16003c		c2 20		rep #$20	                REP #$20        ; set A long
.16003e		68		pla		            PLA
.16003f		a0 00 00	ldy #$0000	            LDY #UART_DLL
.160042		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.160044		e2 20		sep #$20	                SEP #$20        ; set A short
.160046		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.160049		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.16004b		49 80		eor #$80	            EOR #LCR_DLB
.16004d		97 00		sta [$0700],y	            STA [CURRUART],Y
.16004f		2b		pld		            PLD
.160050		28		plp		            PLP
.160051		6b		rtl		            RTL
.160052						UART_SETLCR
.160052		08		php		            PHP
.160053		0b		phd		            PHD
.160054		48		pha		                PHA             ; begin setdp macro
.160055		08		php			PHP
.160056		c2 20		rep #$20	                REP #$20        ; set A long
.160058		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.16005b		5b		tcd		                TCD
.16005c		28		plp			PLP
.16005d		68		pla		                PLA             ; end setdp macro
.16005e		e2 20		sep #$20	                SEP #$20        ; set A short
.160060		c2 10		rep #$10	                REP #$10        ; set X long
.160062		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.160064		a0 03 00	ldy #$0003	            LDY #UART_LCR
.160067		97 00		sta [$0700],y	            STA [CURRUART],Y
.160069		2b		pld		            PLD
.16006a		28		plp		            PLP
.16006b		6b		rtl		            RTL
.16006c						UART_INIT
.16006c		08		php		            PHP
.16006d		0b		phd		            PHD
.16006e		c2 30		rep #$30	                REP #$30        ; set A&X long
.160070		48		pha		                PHA             ; begin setdp macro
.160071		08		php			PHP
.160072		c2 20		rep #$20	                REP #$20        ; set A long
.160074		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.160077		5b		tcd		                TCD
.160078		28		plp			PLP
.160079		68		pla		                PLA             ; end setdp macro
.16007a		a9 01 00	lda #$0001	            LDA #UART_115200
.16007d		22 22 00 16	jsl $160022	            JSL UART_SETBPS
.160081		e2 20		sep #$20	                SEP #$20        ; set A short
.160083		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.160085		22 52 00 16	jsl $160052	            JSL UART_SETLCR
.160089		a9 e1		lda #$e1	            LDA #%11100001
.16008b		a0 02 00	ldy #$0002	            LDY #UART_FCR
.16008e		97 00		sta [$0700],y	            STA [CURRUART],Y
.160090		2b		pld		            PLD
.160091		28		plp		            PLP
.160092		6b		rtl		            RTL
.160093						UART_HASBYT
.160093						UART_GETC
.160093						UART_PUTC
.160093		08		php		            PHP
.160094		0b		phd		            PHD
.160095		c2 30		rep #$30	                REP #$30        ; set A&X long
.160097		48		pha		                PHA             ; begin setdp macro
.160098		08		php			PHP
.160099		c2 20		rep #$20	                REP #$20        ; set A long
.16009b		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.16009e		5b		tcd		                TCD
.16009f		28		plp			PLP
.1600a0		68		pla		                PLA             ; end setdp macro
.1600a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1600a3		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.1600a4		a0 05 00	ldy #$0005	            LDY #UART_LSR
.1600a7		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.1600a9		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.1600ab		f0 fa		beq $1600a7	            BEQ wait_putc
.1600ad		68		pla		            PLA
.1600ae		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.1600b1		97 00		sta [$0700],y	            STA [CURRUART],Y
.1600b3		2b		pld		            PLD
.1600b4		28		plp		            PLP
.1600b5		6b		rtl		            RTL
.1600b6						UART_PUTS
.1600b6		08		php		            PHP
.1600b7		e2 20		sep #$20	                SEP #$20        ; set A short
.1600b9		bd 00 00	lda $af0000,x	put_loop    LDA #0,B,X
.1600bc		f0 07		beq $1600c5	            BEQ done
.1600be		22 93 00 16	jsl $160093	            JSL UART_PUTC
.1600c2		e8		inx		            INX
.1600c3		80 f4		bra $1600b9	            BRA put_loop
.1600c5		28		plp		done        PLP
.1600c6		6b		rtl		            RTL
.1600c7						UART_PUTHEX
.1600c7		08		php		            PHP
.1600c8		48		pha		            PHA               ; save the value before converting the High part into ASCII
.1600c9		4a		lsr a		            LSR A             ; Extracting the high part of the byte
.1600ca		4a		lsr a		            LSR A
.1600cb		4a		lsr a		            LSR A
.1600cc		4a		lsr a		            LSR A
.1600cd		29 0f		and #$0f	            AND #$F
.1600cf		aa		tax		            LDX A
.1600d0		bf a7 18 19	lda $1918a7,x	            LDA hex_digits,x
.1600d4		a2 00 00	ldx #$0000	            LDX #0
.1600d7		22 93 00 16	jsl $160093	            JSL UART_PUTC
.1600db		68		pla		            PLA             ; get the original value out of the stack
.1600dc		29 0f		and #$0f	            AND #$F         ; Extracting the low part of the byte
.1600de		aa		tax		            LDX A
.1600df		bf a7 18 19	lda $1918a7,x	            LDA hex_digits,x
.1600e3		a2 00 00	ldx #$0000	            LDX #0
.1600e6		22 93 00 16	jsl $160093	            JSL UART_PUTC
.1600ea		28		plp		            PLP
.1600eb		6b		rtl		            RTL
.1600ec						UART_PUTHEX_2
.1600ec		08		php		            PHP
.1600ed		c2 30		rep #$30	                REP #$30        ; set A&X long
.1600ef		da		phx		            PHX
.1600f0		48		pha		            PHA             ; save the value before converting the High part into ASCII
.1600f1		a9 00 00	lda #$0000	            LDA #$0
.1600f4		e2 20		sep #$20	                SEP #$20        ; set A short
.1600f6		a3 01		lda $01,s	            LDA #1, S       ; get the original value out of the stack
.1600f8		4a		lsr a		            LSR A             ; Extracting the high part of the byte
.1600f9		4a		lsr a		            LSR A
.1600fa		4a		lsr a		            LSR A
.1600fb		4a		lsr a		            LSR A
.1600fc		29 0f		and #$0f	            AND #$F
.1600fe		aa		tax		            LDX A
.1600ff		bf a7 18 19	lda $1918a7,x	            LDA hex_digits,x
.160103		a2 00 00	ldx #$0000	            LDX #$0
.160106		22 93 00 16	jsl $160093	            JSL UART_PUTC
.16010a		a3 01		lda $01,s	            LDA #1, S       ; get the original value out of the stack
.16010c		29 0f		and #$0f	            AND #$F         ; Extracting the low part of the byte
.16010e		aa		tax		            LDX A
.16010f		bf a7 18 19	lda $1918a7,x	            LDA hex_digits,x
.160113		a2 00 00	ldx #$0000	            LDX #$0
.160116		22 93 00 16	jsl $160093	            JSL UART_PUTC
.16011a		c2 30		rep #$30	                REP #$30        ; set A&X long
.16011c		68		pla		            PLA
.16011d		fa		plx		            PLX
.16011e		28		plp		            PLP
.16011f		6b		rtl		            RTL

;******  Return to file: kernel.asm


;******  Processing file: kernel_jumptable.asm

.190000		5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.190004		5c 8f 12 19	jmp $19128f	RESTORE         JML IRESTORE
.190008		5c 69 07 19	jmp $190769	BREAK           JML IBREAK
.19000c		5c b0 07 19	jmp $1907b0	READY           JML IREADY
.190010		5c 90 12 19	jmp $191290	SCINIT          JML ISCINIT
.190014		5c 91 12 19	jmp $191291	IOINIT          JML IIOINIT
.190018		5c f5 07 19	jmp $1907f5	PUTC            JML IPUTC
.19001c		5c de 07 19	jmp $1907de	PUTS            JML IPUTS
.190020		5c 22 08 19	jmp $190822	PUTB            JML IPUTB
.190024		5c 92 12 19	jmp $191292	PUTBLOCK        JML IPUTBLOCK
.190028		5c 93 12 19	jmp $191293	SETLFS          JML ISETLFS
.19002c		5c 94 12 19	jmp $191294	SETNAM          JML ISETNAM
.190030		5c 95 12 19	jmp $191295	OPEN            JML IOPEN
.190034		5c 96 12 19	jmp $191296	CLOSE           JML ICLOSE
.190038		5c 97 12 19	jmp $191297	SETIN           JML ISETIN
.19003c		5c 98 12 19	jmp $191298	SETOUT          JML ISETOUT
.190040		5c 99 12 19	jmp $191299	GETB            JML IGETB
.190044		5c 9a 12 19	jmp $19129a	GETBLOCK        JML IGETBLOCK
.190048		5c 9b 12 19	jmp $19129b	GETCH           JML IGETCH
.19004c		5c d4 07 19	jmp $1907d4	GETCHW          JML IGETCHW
.190050		5c cb 07 19	jmp $1907cb	GETCHE          JML IGETCHE
.190054		5c 9c 12 19	jmp $19129c	GETS            JML IGETS
.190058		5c 9d 12 19	jmp $19129d	GETLINE         JML IGETLINE
.19005c		5c 9e 12 19	jmp $19129e	GETFIELD        JML IGETFIELD
.190060		5c 9f 12 19	jmp $19129f	TRIM            JML ITRIM
.190064		5c a0 12 19	jmp $1912a0	PRINTC          JML IPRINTC
.190068		5c a1 12 19	jmp $1912a1	PRINTS          JML IPRINTS
.19006c		5c 23 08 19	jmp $190823	PRINTCR         JML IPRINTCR
.190070		5c a2 12 19	jmp $1912a2	PRINTF          JML IPRINTF
.190074		5c a3 12 19	jmp $1912a3	PRINTI          JML IPRINTI
.190078		5c 0e 09 19	jmp $19090e	PRINTH          JML IPRINTH
.19007c		5c a4 12 19	jmp $1912a4	PRINTAI         JML IPRINTAI
.190080		5c a5 12 19	jmp $1912a5	PRINTAH         JML IPRINTAH
.190084		5c be 08 19	jmp $1908be	LOCATE          JML ILOCATE
.190088		5c a6 12 19	jmp $1912a6	PUSHKEY         JML IPUSHKEY
.19008c		5c a7 12 19	jmp $1912a7	PUSHKEYS        JML IPUSHKEYS
.190090		5c 44 08 19	jmp $190844	CSRRIGHT        JML ICSRRIGHT
.190094		5c a8 12 19	jmp $1912a8	CSRLEFT         JML ICSRLEFT
.190098		5c 99 08 19	jmp $190899	CSRUP           JML ICSRUP
.19009c		5c bd 08 19	jmp $1908bd	CSRDOWN         JML ICSRDOWN
.1900a0		5c a9 12 19	jmp $1912a9	CSRHOME         JML ICSRHOME
.1900a4		5c f4 08 19	jmp $1908f4	SCROLLUP        JML ISCROLLUP
.1900a8		5c 3c 09 19	jmp $19093c	CLRSCREEN       JML ICLRSCREEN
.1900ac		5c a3 09 19	jmp $1909a3	INITCHLUT	      JML IINITCHLUT
.1900b0		5c 9e 0c 19	jmp $190c9e	INITSUPERIO	    JML IINITSUPERIO
.1900b4		5c 9d 0d 19	jmp $190d9d	INITKEYBOARD    JML IINITKEYBOARD
.1900b8		5c 89 0e 19	jmp $190e89	INITRTC         JML IINITRTC
.1900bc		5c c0 0e 19	jmp $190ec0	TESTSID         JML ITESTSID
.1900c0		5c eb 0e 19	jmp $190eeb	TESTMATH        JML ITESTMATH
.1900c4		5c 7d 0c 19	jmp $190c7d	INITCURSOR      JML IINITCURSOR
.1900c8		5c 52 0c 19	jmp $190c52	INITFONTSET     JML IINITFONTSET
.1900cc		5c d2 09 19	jmp $1909d2	INITGAMMATABLE  JML IINITGAMMATABLE
.1900d0		5c f2 09 19	jmp $1909f2	INITALLLUT      JML IINITALLLUT
.1900d4		5c b4 0a 19	jmp $190ab4	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1900d8		5c dd 0a 19	jmp $190add	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1900dc		5c 14 0b 19	jmp $190b14	INITTILEMODE    JML IINITTILEMODE
.1900e0		5c 15 0b 19	jmp $190b15	INITSPRITE      JML IINITSPRITE
.1900e4		5c 12 0f 19	jmp $190f12	INITCODEC       JML IINITCODEC
.1900e8		5c 5b 0f 19	jmp $190f5b	RESETCODEC      JML IRESETCODEC
.1900ec		5c c9 0f 19	jmp $190fc9	BMP_PARSER      JML IBMP_PARSER
.1900f0		5c 7e 0f 19	jmp $190f7e	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1900f4		5c af 24 19	jmp $1924af	OPL2_TONE_TEST  JML IOPL2_TONE_TEST

;******  Return to file: kernel.asm

.190400						IBOOT
.190400		18		clc		                CLC           ; clear the carry flag
.190401		fb		xce		                XCE           ; move carry to emulation flag.
.190402		78		sei		                SEI
.190403		c2 30		rep #$30	                REP #$30        ; set A&X long
.190405		a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.190408		1b		tcs		                TAS
.190409		48		pha		                PHA             ; begin setdp macro
.19040a		08		php			PHP
.19040b		c2 20		rep #$20	                REP #$20        ; set A long
.19040d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190410		5b		tcd		                TCD
.190411		28		plp			PLP
.190412		68		pla		                PLA             ; end setdp macro
.190413		e2 20		sep #$20	                SEP #$20        ; set A short
.190415		a2 00 00	ldx #$0000	                LDX #$0000
.190418		a9 00		lda #$00	                LDA #$00
.19041a						CLEAR_MEM_LOOP
.19041a		95 00		sta $00,x	                STA $0000, X
.19041c		e8		inx		                INX
.19041d		e0 00 04	cpx #$0400	                CPX #$0400
.190420		d0 f8		bne $19041a	                BNE CLEAR_MEM_LOOP
.190422		ea		nop		                NOP
.190423		a9 ff		lda #$ff	                LDA #$FF
.190425		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190429		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.19042d		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.190431		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190435		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190439		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19043d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19043f		a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.190442		85 0c		sta $0c		                STA SCREENBEGIN
.190444		e2 20		sep #$20	                SEP #$20        ; set A short
.190446		a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.190448		85 0e		sta $0e		                STA SCREENBEGIN+2
.19044a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19044c		a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.19044f		85 17		sta $17		                STA CURSORPOS
.190451		e2 20		sep #$20	                SEP #$20        ; set A short
.190453		a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.190455		85 19		sta $19		                STA CURSORPOS+2
.190457		a9 00		lda #$00	                LDA #$00
.190459		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.19045d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19045f		a2 48 00	ldx #$0048	                LDX #72
.190462		86 0f		stx $0f		                STX COLS_VISIBLE
.190464		a0 38 00	ldy #$0038	                LDY #56
.190467		84 13		sty $13		                STY LINES_VISIBLE
.190469		a2 80 00	ldx #$0080	                LDX #128
.19046c		86 11		stx $11		                STX COLS_PER_LINE
.19046e		a0 40 00	ldy #$0040	                LDY #64
.190471		84 15		sty $15		                STY LINES_MAX
.190473		22 e4 00 19	jsl $1900e4	                JSL INITCODEC
.190477		22 b0 00 19	jsl $1900b0	                JSL INITSUPERIO
.19047b		22 b8 00 19	jsl $1900b8	                JSL INITRTC
.19047f		22 cc 00 19	jsl $1900cc	                JSL INITGAMMATABLE
.190483		22 d0 00 19	jsl $1900d0	                JSL INITALLLUT
.190487		22 ac 00 19	jsl $1900ac	                JSL INITCHLUT
.19048b		22 c4 00 19	jsl $1900c4	                JSL INITCURSOR
.19048f		22 d4 00 19	jsl $1900d4	                JSL INITVKYTXTMODE
.190493		22 52 0c 19	jsl $190c52	                JSL IINITFONTSET
.190497		22 3c 09 19	jsl $19093c	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.19049b		22 6b 09 19	jsl $19096b	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.19049f		c2 30		rep #$30	                REP #$30        ; set A&X long
.1904a1						greet
.1904a1		48		pha		                PHA             ; begin setdbr macro
.1904a2		08		php		                PHP
.1904a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1904a5		a9 19		lda #$19		LDA #`greet_msg
.1904a7		48		pha		                PHA
.1904a8		ab		plb		                PLB
.1904a9		28		plp		                PLP
.1904aa		68		pla		                PLA             ; end setdbr macro
.1904ab		a2 ac 12	ldx #$12ac	                LDX #<>greet_msg
.1904ae		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print the first line
.1904b2		a2 95 13	ldx #$1395	                LDX #<>old_pc_style_stat
.1904b5		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print the first line
.1904b9		48		pha		                PHA             ; begin setdp macro
.1904ba		08		php			PHP
.1904bb		c2 20		rep #$20	                REP #$20        ; set A long
.1904bd		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1904c0		5b		tcd		                TCD
.1904c1		28		plp			PLP
.1904c2		68		pla		                PLA             ; end setdp macro
.1904c3		22 b4 00 19	jsl $1900b4	                JSL INITKEYBOARD ;
.1904c7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1904c9		22 f4 00 19	jsl $1900f4	                JSL OPL2_TONE_TEST
.1904cd		c2 20		rep #$20	                REP #$20        ; set A long
.1904cf		a9 01 00	lda #$0001	                LDA #1              ; Select COM1
.1904d2		22 00 00 16	jsl $160000	                JSL UART_SELECT
.1904d6		22 6c 00 16	jsl $16006c	                JSL UART_INIT       ; And initialize it
.1904da		a2 1d 18	ldx #$181d	                LDX #<>ready_msg
.1904dd		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.1904e1		a9 0a 00	lda #$000a	                LDA #$A
.1904e4		22 93 00 16	jsl $160093	                JSL UART_PUTC
.1904e8		a9 0d 00	lda #$000d	                LDA #$D
.1904eb		22 93 00 16	jsl $160093	                JSL UART_PUTC
.1904ef		48		pha		                PHA             ; begin setdbr macro
.1904f0		08		php		                PHP
.1904f1		e2 20		sep #$20	                SEP #$20        ; set A short
.1904f3		a9 19		lda #$19		LDA #`minus_line
.1904f5		48		pha		                PHA
.1904f6		ab		plb		                PLB
.1904f7		28		plp		                PLP
.1904f8		68		pla		                PLA             ; end setdbr macro
.1904f9		a2 f0 18	ldx #$18f0	                LDX #<>minus_line
.1904fc		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.190500		22 56 a9 01	jsl $01a956	                JSL IFDD_PRINT_REG  ; read the FDD register value
.190504		c2 30		rep #$30	                REP #$30        ; set A&X long
.190506		22 8e a1 01	jsl $01a18e	                JSL IFDD_INIT_AT
.19050a		22 56 a9 01	jsl $01a956	                JSL IFDD_PRINT_REG  ; read the FDD register value
.19050e						seek_loop
.19050e		a5 00		lda $00		                LDA 0
.190510		48		pha		                PHA
.190511		e2 20		sep #$20	                SEP #$20        ; set A short
.190513		48		pha		                PHA             ; begin setdbr macro
.190514		08		php		                PHP
.190515		e2 20		sep #$20	                SEP #$20        ; set A short
.190517		a9 af		lda #$af		LDA #`$AFA200
.190519		48		pha		                PHA
.19051a		ab		plb		                PLB
.19051b		28		plp		                PLP
.19051c		68		pla		                PLA             ; end setdbr macro
.19051d		a2 00 00	ldx #$0000	                LDX #0
.190520		a9 00		lda #$00	                LDA #0
.190522		9d 00 a0	sta $afa000,x	  ERAZE_SCREEN_1  STA $AFA000 ,X
.190525		e8		inx		                INX
.190526		e0 00 20	cpx #$2000	                CPX #$2000
.190529		d0 f7		bne $190522	                BNE ERAZE_SCREEN_1
.19052b		48		pha		                PHA             ; begin setdbr macro
.19052c		08		php		                PHP
.19052d		e2 20		sep #$20	                SEP #$20        ; set A short
.19052f		a9 af		lda #$af		LDA #`$AFA200
.190531		48		pha		                PHA
.190532		ab		plb		                PLB
.190533		28		plp		                PLP
.190534		68		pla		                PLA             ; end setdbr macro
.190535		a2 00 00	ldx #$0000	                LDX #0
.190538		a9 00		lda #$00	seek_loop_2     LDA #0
.19053a		9d 00 a2	sta $afa200,x	ERAZE_SCREEN_2  STA $AFA200 ,X
.19053d		e8		inx		                INX
.19053e		e0 00 20	cpx #$2000	                CPX #$2000
.190541		d0 f7		bne $19053a	                BNE ERAZE_SCREEN_2
.190543		a9 00		lda #$00	                LDA #0                      ; Floppy driver to work with and side
.190545		a2 01 00	ldx #$0001	                LDX #1                      ; MFM:1/FM:0
.190548		22 66 a5 01	jsl $01a566	                JSL IFDD_READ_ID
.19054c		22 19 a9 01	jsl $01a919	                JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.190550		22 6f a4 01	jsl $01a46f	                JSL IFDD_SENS_INTERRUPT_STATUS
.190554		22 19 a9 01	jsl $01a919	                JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.190558		a9 01		lda #$01	                LDA #$1                     ; ND ("1":non-DMA mode / "0":DMA mode)
.19055a		48		pha		                PHA
.19055b		a9 00		lda #$00	                LDA #$0                     ; HLT (Head Load Time)
.19055d		48		pha		                PHA
.19055e		a9 00		lda #$00	                LDA #$0                     ; HUT (Head Unload Time)
.190560		48		pha		                PHA
.190561		a9 00		lda #$00	                LDA #$0                     ; SRT (Step Rate Time)
.190563		48		pha		                PHA
.190564		22 cb a4 01	jsl $01a4cb	                JSL IFDD_SPECIFY
.190568		68		pla		                PLA
.190569		68		pla		                PLA
.19056a		68		pla		                PLA
.19056b		68		pla		                PLA
.19056c		22 19 a9 01	jsl $01a919	                JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.190570		a9 00		lda #$00	                LDA #0                      ; Floppy driver to work with and side
.190572		a2 01 00	ldx #$0001	                LDX #1                      ; MFM:1/FM:0
.190575		22 66 a5 01	jsl $01a566	                JSL IFDD_READ_ID
.190579		22 6f a4 01	jsl $01a46f	                JSL IFDD_SENS_INTERRUPT_STATUS
.19057d		a9 00		lda #$00	                LDA #0            ; Sellect the floppy disc drive 0
.19057f		22 35 a4 01	jsl $01a435	                JSL IFDD_RECALIBRATE
.190583		22 19 a9 01	jsl $01a919	                JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.190587		22 6f a4 01	jsl $01a46f	                JSL IFDD_SENS_INTERRUPT_STATUS
.19058b		22 19 a9 01	jsl $01a919	                JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.19058f		e2 20		sep #$20	                SEP #$20        ; set A short
.190591		a9 00		lda #$00	                LDA #$0                    ; R (Sector Adress)
.190593		48		pha		                PHA
.190594		a9 00		lda #$00	                LDA #$0                    ; H (Head Address)
.190596		48		pha		                PHA
.190597		a9 00		lda #$00	                LDA #$0                    ; C (Cylender Adress)
.190599		48		pha		                PHA
.19059a		a9 aa		lda #$aa	                LDA #$AA                    ; D (Byte filler)
.19059c		48		pha		                PHA
.19059d		a9 54		lda #$54	                LDA #$54                    ; GPL (Gap3)
.19059f		48		pha		                PHA
.1905a0		a9 09		lda #$09	                LDA #$9                    ; SC (Sector Per Cylender)
.1905a2		48		pha		                PHA
.1905a3		a9 02		lda #$02	                LDA #$2                    ; N (Byte per sector)
.1905a5		48		pha		                PHA
.1905a6		a9 00		lda #$00	                LDA #$0                    ; HDS/DS1-DS0 (Head DRIVE1-Drive0)
.1905a8		48		pha		                PHA
.1905a9		a9 01		lda #$01	                LDA #$1                    ; MFM
.1905ab		48		pha		                PHA
.1905ac		a9 ff		lda #$ff	                LDA #$FF
.1905ae		22 93 a2 01	jsl $01a293	                JSL IFDD_FORMAT_TRACK
.1905b2		68		pla		                PLA
.1905b3		68		pla		                PLA
.1905b4		68		pla		                PLA
.1905b5		68		pla		                PLA
.1905b6		68		pla		                PLA
.1905b7		68		pla		                PLA
.1905b8		68		pla		                PLA
.1905b9		68		pla		                PLA
.1905ba		68		pla		                PLA
.1905bb		c2 30		rep #$30	                REP #$30        ; set A&X long
.1905bd		a2 88 13	ldx #$1388	                LDX #5000
.1905c0		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.1905c4		e2 20		sep #$20	                SEP #$20        ; set A short
.1905c6		a5 00		lda $00		                LDA 0
.1905c8		a2 01 00	ldx #$0001	                LDX #1                      ; MFM:1/FM:0
.1905cb		22 66 a5 01	jsl $01a566	                JSL IFDD_READ_ID
.1905cf		a2 d0 07	ldx #$07d0	                LDX #2000
.1905d2		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.1905d6		22 56 a9 01	jsl $01a956	                JSL IFDD_PRINT_REG
.1905da		a2 d0 07	ldx #$07d0	                LDX #2000
.1905dd		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.1905e1		22 6f a4 01	jsl $01a46f	                JSL IFDD_SENS_INTERRUPT_STATUS
.1905e5		a2 00 00	ldx #$0000	                LDX #$00
.1905e8		22 6f a4 01	jsl $01a46f	                JSL IFDD_SENS_INTERRUPT_STATUS
.1905ec		a2 d0 07	ldx #$07d0	                LDX #2000
.1905ef		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.1905f3		a3 01		lda $01,s	                LDA #1, S            ; read the next sector
.1905f5		1a		inc a		                INC A
.1905f6		83 01		sta $01,s	                STA #1, S
.1905f8		22 56 a9 01	jsl $01a956	                JSL IFDD_PRINT_REG
.1905fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1905fe		a9 00		lda #$00	                LDA #0
.190600		a2 3c 00	ldx #$003c	                LDX #60
.190603		22 1d a5 01	jsl $01a51d	                JSL IFDD_SEEK
.190607		a2 20 4e	ldx #$4e20	                LDX #20000
.19060a		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.19060e		a9 00		lda #$00	                LDA #0            ; Sellect the floppy disc drive 0
.190610		22 35 a4 01	jsl $01a435	                JSL IFDD_RECALIBRATE
.190614		82 21 ff	brl $190538	                BRL seek_loop_2
.190617		22 56 a9 01	jsl $01a956	                JSL IFDD_PRINT_REG  ; read the FDD register value
.19061b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19061d		a2 20 4e	ldx #$4e20	                LDX #20000
.190620		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.190624		22 56 a9 01	jsl $01a956	                JSL IFDD_PRINT_REG  ; read the FDD register value
.190628		c2 30		rep #$30	                REP #$30        ; set A&X long
.19062a		a2 f4 01	ldx #$01f4	                LDX #500
.19062d		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.190631		22 56 a9 01	jsl $01a956	                JSL IFDD_PRINT_REG  ; read the FDD register value
.190635		c2 30		rep #$30	                REP #$30        ; set A&X long
.190637		a2 20 4e	ldx #$4e20	                LDX #20000
.19063a		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.19063e		e2 20		sep #$20	                SEP #$20        ; set A short
.190640		a9 00		lda #$00	                LDA #0
.190642		a2 0f 00	ldx #$000f	                LDX #15
.190645		22 1d a5 01	jsl $01a51d	                JSL IFDD_SEEK
.190649		22 56 a9 01	jsl $01a956	                JSL IFDD_PRINT_REG  ; read the FDD register value
.19064d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19064f		a2 88 13	ldx #$1388	                LDX #5000
.190652		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.190656		80 00		bra $190658	                BRA next_instruction
.190658						seek_loop_step1
.190658						next_instruction
.190658		48		pha		                PHA             ; begin setdbr macro
.190659		08		php		                PHP
.19065a		e2 20		sep #$20	                SEP #$20        ; set A short
.19065c		a9 19		lda #$19		LDA #`minus_line
.19065e		48		pha		                PHA
.19065f		ab		plb		                PLB
.190660		28		plp		                PLP
.190661		68		pla		                PLA             ; end setdbr macro
.190662		a2 f0 18	ldx #$18f0	                LDX #<>minus_line
.190665		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.190669		a2 f0 18	ldx #$18f0	                LDX #<>minus_line
.19066c		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.190670		c2 30		rep #$30	                REP #$30        ; set A&X long
.190672		a2 f4 01	ldx #$01f4	                LDX #500
.190675		22 43 a0 01	jsl $01a043	                JSL ILOOP_MS
.190679		e2 20		sep #$20	                SEP #$20        ; set A short
.19067b		a9 00		lda #$00	                LDA #0
.19067d		22 e2 a5 01	jsl $01a5e2	                JSL IFDD_GET_DRIVE_STATUS
.190681		e2 20		sep #$20	                SEP #$20        ; set A short
.190683		48		pha		                PHA             ; begin setdbr macro
.190684		08		php		                PHP
.190685		e2 20		sep #$20	                SEP #$20        ; set A short
.190687		a9 01		lda #$01		LDA #`FLOPPY_CMD_BUFFER
.190689		48		pha		                PHA
.19068a		ab		plb		                PLB
.19068b		28		plp		                PLP
.19068c		68		pla		                PLA             ; end setdbr macro
.19068d		ad 00 a0	lda $01a000	                LDA FLOPPY_CMD_BUFFER
.190690		22 c7 00 16	jsl $1600c7	                JSL UART_PUTHEX
.190694		a9 0a		lda #$0a	                LDA #$A
.190696		22 93 00 16	jsl $160093	                JSL UART_PUTC
.19069a		a9 0d		lda #$0d	                LDA #$D
.19069c		22 93 00 16	jsl $160093	                JSL UART_PUTC
.1906a0		48		pha		                PHA             ; begin setdbr macro
.1906a1		08		php		                PHP
.1906a2		e2 20		sep #$20	                SEP #$20        ; set A short
.1906a4		a9 19		lda #$19		LDA #`minus_line
.1906a6		48		pha		                PHA
.1906a7		ab		plb		                PLB
.1906a8		28		plp		                PLP
.1906a9		68		pla		                PLA             ; end setdbr macro
.1906aa		a2 f0 18	ldx #$18f0	                LDX #<>minus_line
.1906ad		22 b6 00 16	jsl $1600b6	                JSL UART_PUTS
.1906b1		22 62 a0 01	jsl $01a062	                JSL IFDD_MOTOR_0_OFF
.1906b5		80 a1		bra $190658	                BRA seek_loop_step1
.1906b7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1906b9		a9 19 00	lda #$0019	                LDA #`file_to_load ; load the byte nb 3 (bank byte)
.1906bc		48		pha		                PHA
.1906bd		a9 e5 18	lda #$18e5	                LDA #<>file_to_load ; load the low world part of the buffer address
.1906c0		48		pha		                PHA
.1906c1		a9 01 00	lda #$0001	                LDA #`FAT12_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.1906c4		48		pha		                PHA
.1906c5		a9 00 98	lda #$9800	                LDA #<>FAT12_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.1906c8		48		pha		                PHA
.1906c9		22 60 90 01	jsl $019060	                JSL IFAT12_READ_BOOT_SECTOR
.1906cd		c9 01 00	cmp #$0001	                CMP #$0001
.1906d0		f0 07		beq $1906d9	                BEQ FAT_12_BOOT_SECTOR_PARSING_OK
.1906d2		a2 b8 18	ldx #$18b8	                LDX #<>error_FAT
.1906d5		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print the first line
.1906d9						FAT_12_BOOT_SECTOR_PARSING_OK
.1906d9		22 c9 91 01	jsl $0191c9	                JSL IFAT12_GET_ROOT_DIR_POS
.1906dd		c2 30		rep #$30	                REP #$30        ; set A&X long
.1906df		a9 00 00	lda #$0000	                LDA #$00 ; sellect the first entry
.1906e2		48		pha		                PHA
.1906e3						FDD_DISPLAY_NEXT_ROOT_ENTRY
.1906e3		22 f1 91 01	jsl $0191f1	                JSL IFAT12_GET_ROOT_ENTRY
.1906e7		48		pha		                PHA             ; begin setdbr macro
.1906e8		08		php		                PHP
.1906e9		e2 20		sep #$20	                SEP #$20        ; set A short
.1906eb		a9 01		lda #$01		LDA #`Root_entry_value
.1906ed		48		pha		                PHA
.1906ee		ab		plb		                PLB
.1906ef		28		plp		                PLP
.1906f0		68		pla		                PLA             ; end setdbr macro
.1906f1		a2 33 90	ldx #$9033	                LDX #<>Root_entry_value
.1906f4		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print the first line
.1906f8		c2 30		rep #$30	                REP #$30        ; set A&X long
.1906fa		68		pla		                PLA
.1906fb		c9 14 00	cmp #$0014	                CMP #20 ;Max_Root_Entry ; limit jusy how many enty is displayed
.1906fe		f0 04		beq $190704	                BEQ FDD_END_DISPLAY_ROOT_ENTRY_LOOP
.190700		1a		inc a		                INC A
.190701		48		pha		                PHA
.190702		80 df		bra $1906e3	                BRA FDD_DISPLAY_NEXT_ROOT_ENTRY
.190704						FDD_END_DISPLAY_ROOT_ENTRY_LOOP
.190704		68		pla		                PLA
.190705		a9 00 00	lda #$0000	                LDA #0 ; read fthe first root entry
.190708		22 f1 91 01	jsl $0191f1	                JSL IFAT12_GET_ROOT_ENTRY
.19070c		80 00		bra $19070e	                BRA FIRST_ROOT_ENTRY_READ
.19070e						READ_NEXT_FILE
.19070e						FIRST_ROOT_ENTRY_READ
.19070e		ad 4d 90	lda $01904d	                LDA Root_entry_value + 26 ; get the first fat entry for the fil from the root directory entry 0
.190711		8d 55 90	sta $019055	                STA Fat12_next_entry
.190714						Read_next_sector
.190714		a9 01 00	lda #$0001	                LDA #`FAT12_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.190717		48		pha		                PHA
.190718		a9 00 98	lda #$9800	                LDA #<>FAT12_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.19071b		48		pha		                PHA
.19071c		ad 55 90	lda $019055	                LDA Fat12_next_entry ; sector to read
.19071f		69 21 00	adc #$0021	                ADC #1+9+9+14
.190722		22 42 a2 01	jsl $01a242	                JSL IFDD_READ
.190726		fa		plx		                PLX
.190727		fa		plx		                PLX
.190728		ad 55 90	lda $019055	                LDA Fat12_next_entry ; sector to read
.19072b		22 4d 92 01	jsl $01924d	                JSL IFAT_GET_FAT_ENTRY
.19072f		ad 55 90	lda $019055	                LDA Fat12_next_entry
.190732		c9 fe 0f	cmp #$0ffe	                CMP #$FFE
.190735		b0 d7		bcs $19070e	                BCS READ_NEXT_FILE
.190737		80 db		bra $190714	                BRA Read_next_sector
.190739		80 fe		bra $190739	end_loop        BRA end_loop
.19073b		58		cli		                CLI ; Make sure no Interrupt will come and fuck up Init before this point.
.19073c		e2 20		sep #$20	                SEP #$20        ; set A short
.19073e		48		pha		                PHA             ; begin setdbr macro
.19073f		08		php		                PHP
.190740		e2 20		sep #$20	                SEP #$20        ; set A short
.190742		a9 19		lda #$19		LDA #`greet_msg
.190744		48		pha		                PHA
.190745		ab		plb		                PLB
.190746		28		plp		                PLP
.190747		68		pla		                PLA             ; end setdbr macro
.190748		ea		nop		endlessloop     NOP
.190749		af 83 0f 00	lda $000f83	                LDA KEY_BUFFER_CMD
.19074d		c9 01		cmp #$01	                CMP #$01
.19074f		f0 04		beq $190755	                BEQ GoProcessCommandLine
.190751		5c 48 07 19	jmp $190748	                JML endlessloop
.190755						GoProcessCommandLine
.190755		a9 00		lda #$00	                LDA #$00  ; Clear the Flag
.190757		8f 83 0f 00	sta $000f83	                STA KEY_BUFFER_CMD
.19075b		22 56 30 19	jsl $193056	                JSL PROCESS_COMMAND_LINE
.19075f		a2 1d 18	ldx #$181d	                LDX #<>ready_msg
.190762		22 d5 07 19	jsl $1907d5	                JSL IPRINT
.190766		80 e0		bra $190748	                BRA  endlessloop
.190768		00		brk #		greet_done      BRK             ;Terminate boot routine and go to Ready handler.
.190769						IBREAK
.190769		48		pha		                PHA             ; begin setdp macro
.19076a		08		php			PHP
.19076b		c2 20		rep #$20	                REP #$20        ; set A long
.19076d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190770		5b		tcd		                TCD
.190771		28		plp			PLP
.190772		68		pla		                PLA             ; end setdp macro
.190773		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.190774		8f 48 02 00	sta $000248	                STA CPUY
.190778		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.190779		8f 46 02 00	sta $000246	                STA CPUX
.19077d		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.19077e		8f 44 02 00	sta $000244	                STA CPUA
.190782		68		pla		                PLA
.190783		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.190787		e2 20		sep #$20	                SEP #$20        ; set A short
.190789		68		pla		                PLA             ; Pull Data Bank (8 bits)
.19078a		8f 4e 02 00	sta $00024e	                STA CPUDBR
.19078e		68		pla		                PLA             ; Pull Flags (8 bits)
.19078f		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.190793		c2 20		rep #$20	                REP #$20        ; set A long
.190795		68		pla		                PLA             ; Pull Program Counter (16 bits)
.190796		8f 40 02 00	sta $000240	                STA CPUPC
.19079a		e2 20		sep #$20	                SEP #$20        ; set A short
.19079c		68		pla		                PLA             ; Pull Program Bank (8 bits)
.19079d		8f 42 02 00	sta $000242	                STA CPUPBR
.1907a1		c2 20		rep #$20	                REP #$20        ; set A long
.1907a3		3b		tsc		                TSA             ; Get the stack
.1907a4		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.1907a8		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.1907ab		1b		tcs		                TAS
.1907ac		5c e0 ff 00	jmp $00ffe0	                JML JMP_READY   ; Run READY routine (usually BASIC or MONITOR)
.1907b0						IREADY
.1907b0		48		pha		                PHA             ; begin setdbr macro
.1907b1		08		php		                PHP
.1907b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1907b4		a9 19		lda #$19		LDA #`ready_msg
.1907b6		48		pha		                PHA
.1907b7		ab		plb		                PLB
.1907b8		28		plp		                PLP
.1907b9		68		pla		                PLA             ; end setdbr macro
.1907ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1907bc		a2 1d 18	ldx #$181d	                LDX #<>ready_msg
.1907bf		22 d5 07 19	jsl $1907d5	                JSL IPRINT
.1907c3						IREADYWAIT
.1907c3		22 cb 07 19	jsl $1907cb	                JSL IGETCHE
.1907c7		80 fa		bra $1907c3	                BRA IREADYWAIT
.1907c9		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.1907ca		db		stp		IRETURN         STP
.1907cb		22 d4 07 19	jsl $1907d4	IGETCHE         JSL IGETCHW
.1907cf		22 f5 07 19	jsl $1907f5	                JSL IPUTC
.1907d3		6b		rtl		                RTL
.1907d4						IGETCHW
.1907d4		6b		rtl		                RTL
.1907d5		22 de 07 19	jsl $1907de	IPRINT          JSL IPUTS
.1907d9		22 23 08 19	jsl $190823	                JSL IPRINTCR
.1907dd		6b		rtl		                RTL
.1907de		48		pha		IPUTS           PHA
.1907df		08		php		                PHP
.1907e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1907e2		c2 10		rep #$10	                REP #$10        ; set X long
.1907e4		bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.1907e7		f0 08		beq $1907f1	                BEQ iputs_done
.1907e9		22 f5 07 19	jsl $1907f5	iputs2          JSL IPUTC
.1907ed		e8		inx		iputs3          INX
.1907ee		4c e4 07	jmp $1907e4	                JMP iputs1
.1907f1		e8		inx		iputs_done      INX
.1907f2		28		plp		                PLP
.1907f3		68		pla		                PLA
.1907f4		6b		rtl		                RTL
.1907f5		0b		phd		IPUTC           PHD
.1907f6		08		php		                PHP             ; stash the flags (we'll be changing M)
.1907f7		48		pha		                PHA             ; begin setdp macro
.1907f8		08		php			PHP
.1907f9		c2 20		rep #$20	                REP #$20        ; set A long
.1907fb		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1907fe		5b		tcd		                TCD
.1907ff		28		plp			PLP
.190800		68		pla		                PLA             ; end setdp macro
.190801		e2 20		sep #$20	                SEP #$20        ; set A short
.190803		c9 0d		cmp #$0d	                CMP #$0D        ; handle CR
.190805		d0 06		bne $19080d	                BNE iputc_bs
.190807		22 23 08 19	jsl $190823	                JSL IPRINTCR
.19080b		80 10		bra $19081d	                bra iputc_done
.19080d		c9 08		cmp #$08	iputc_bs        CMP #$08        ; backspace
.19080f		d0 06		bne $190817	                BNE iputc_print
.190811		22 34 08 19	jsl $190834	                JSL IPRINTBS
.190815		80 06		bra $19081d	                BRA iputc_done
.190817		87 17		sta [$17]	iputc_print     STA [CURSORPOS] ; Save the character on the screen
.190819		22 44 08 19	jsl $190844	                JSL ICSRRIGHT
.19081d						iputc_done
>19081d		42 01				                .byte $42, $01
.19081f		28		plp		                PLP
.190820		2b		pld		                PLD
.190821		6b		rtl		                RTL
.190822						IPUTB
.190822		6b		rtl		                RTL
.190823		da		phx		IPRINTCR	      PHX
.190824		5a		phy		                PHY
.190825		08		php		                PHP
.190826		a2 00 00	ldx #$0000	                LDX #0
.190829		a4 1c		ldy $1c		                LDY CURSORY
.19082b		c8		iny		                INY
.19082c		22 be 08 19	jsl $1908be	                JSL ILOCATE
.190830		28		plp		                PLP
.190831		7a		ply		                PLY
.190832		fa		plx		                PLX
.190833		6b		rtl		                RTL
.190834		da		phx		IPRINTBS	PHX
.190835		5a		phy		                PHY
.190836		08		php		                PHP
.190837		a6 1a		ldx $1a		                LDX CURSORX
.190839		a4 1c		ldy $1c		                LDY CURSORY
.19083b		ca		dex		                DEX
.19083c		22 be 08 19	jsl $1908be	                JSL ILOCATE
.190840		28		plp		                PLP
.190841		7a		ply		                PLY
.190842		fa		plx		                PLX
.190843		6b		rtl		                RTL
.190844						ICSRRIGHT
.190844		da		phx		                PHX
.190845		8b		phb		                PHB
.190846		c2 20		rep #$20	                REP #$20        ; set A long
.190848		c2 10		rep #$10	                REP #$10        ; set X long
.19084a		48		pha		                PHA             ; begin setdp macro
.19084b		08		php			PHP
.19084c		c2 20		rep #$20	                REP #$20        ; set A long
.19084e		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.190851		5b		tcd		                TCD
.190852		28		plp			PLP
.190853		68		pla		                PLA             ; end setdp macro
.190854		e6 17		inc $17		                INC CURSORPOS
.190856		a6 1a		ldx $1a		                LDX CURSORX
.190858		e8		inx		                INX
.190859		e4 0f		cpx $0f		                CPX COLS_VISIBLE
.19085b		90 0c		bcc $190869	                BCC icsr_nowrap  ; wrap if the cursor is at or past column 80
.19085d		a2 00 00	ldx #$0000	                LDX #0
.190860		5a		phy		                PHY
.190861		a4 1c		ldy $1c		                LDY CURSORY
.190863		c8		iny		                INY
.190864		22 be 08 19	jsl $1908be	                JSL ILOCATE
.190868		7a		ply		                PLY
.190869		86 1a		stx $1a		icsr_nowrap     STX CURSORX
.19086b		48		pha		                PHA
.19086c		8a		txa		                TXA
.19086d		8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.190871		68		pla		                PLA
.190872		ab		plb		                PLB
.190873		fa		plx		                PLX
.190874		6b		rtl		                RTL
.190875						ISRLEFT
.190875		da		phx		                PHX
.190876		5a		phy		                PHY
.190877		8b		phb		                PHB
.190878		48		pha		                PHA
.190879		c2 30		rep #$30	                REP #$30        ; set A&X long
.19087b		48		pha		                PHA             ; begin setdp macro
.19087c		08		php			PHP
.19087d		c2 20		rep #$20	                REP #$20        ; set A long
.19087f		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.190882		5b		tcd		                TCD
.190883		28		plp			PLP
.190884		68		pla		                PLA             ; end setdp macro
.190885		a5 1a		lda $1a		                LDA CURSORX
.190887		f0 0b		beq $190894	                BEQ isrleft_done_already_zero ; Check that we are not already @ Zero
.190889		a6 1a		ldx $1a		                LDX CURSORX
.19088b		ca		dex		                DEX
.19088c		86 1a		stx $1a		                STX CURSORX
.19088e		a4 1c		ldy $1c		                LDY CURSORY
.190890		22 be 08 19	jsl $1908be	                JSL ILOCATE
.190894						isrleft_done_already_zero
.190894		68		pla		                PLA
.190895		ab		plb		                PLB
.190896		7a		ply		                PLY
.190897		fa		plx		                PLX
.190898		6b		rtl		                RTL
.190899						ICSRUP
.190899		da		phx		                PHX
.19089a		5a		phy		                PHY
.19089b		8b		phb		                PHB
.19089c		48		pha		                PHA
.19089d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19089f		48		pha		                PHA             ; begin setdp macro
.1908a0		08		php			PHP
.1908a1		c2 20		rep #$20	                REP #$20        ; set A long
.1908a3		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1908a6		5b		tcd		                TCD
.1908a7		28		plp			PLP
.1908a8		68		pla		                PLA             ; end setdp macro
.1908a9		a5 1c		lda $1c		                LDA CURSORY
.1908ab		f0 0b		beq $1908b8	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.1908ad		a4 1c		ldy $1c		                LDY CURSORY
.1908af		88		dey		                DEY
.1908b0		84 1c		sty $1c		                STY CURSORY
.1908b2		a6 1a		ldx $1a		                LDX CURSORX
.1908b4		22 be 08 19	jsl $1908be	                JSL ILOCATE
.1908b8						isrup_done_already_zero
.1908b8		68		pla		                PLA
.1908b9		ab		plb		                PLB
.1908ba		7a		ply		                PLY
.1908bb		fa		plx		                PLX
.1908bc		6b		rtl		                RTL
.1908bd						ICSRDOWN
.1908bd		6b		rtl		                RTL
.1908be		48		pha		ILOCATE         PHA
.1908bf		08		php		                PHP
.1908c0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1908c2						ilocate_scroll
.1908c2		c4 13		cpy $13		                CPY LINES_VISIBLE
.1908c4		90 07		bcc $1908cd	                BCC ilocate_scrolldone
.1908c6		22 f4 08 19	jsl $1908f4	                JSL ISCROLLUP
.1908ca		88		dey		                DEY
.1908cb		80 f5		bra $1908c2	                BRA ilocate_scroll
.1908cd						ilocate_scrolldone
.1908cd		86 1a		stx $1a		                STX CURSORX
.1908cf		84 1c		sty $1c		                STY CURSORY
.1908d1		a5 0c		lda $0c		                LDA SCREENBEGIN
.1908d3						ilocate_row
.1908d3		c0 00 00	cpy #$0000	                CPY #$0
.1908d6		f0 08		beq $1908e0	                BEQ ilocate_right
.1908d8		18		clc		ilocate_down    CLC
.1908d9		65 11		adc $11		                ADC COLS_PER_LINE
.1908db		88		dey		                DEY
.1908dc		f0 02		beq $1908e0	                BEQ ilocate_right
.1908de		80 f8		bra $1908d8	                BRA ilocate_down
.1908e0		18		clc		ilocate_right   CLC
.1908e1		65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.1908e3		85 17		sta $17		                STA CURSORPOS
.1908e5		a4 1c		ldy $1c		                LDY CURSORY
.1908e7		98		tya		                TYA
.1908e8		8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.1908ec		8a		txa		                TXA
.1908ed		8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.1908f1		28		plp		ilocate_done    PLP
.1908f2		68		pla		                PLA
.1908f3		6b		rtl		                RTL
.1908f4						ISCROLLUP
.1908f4		48		pha		                PHA
.1908f5		da		phx		                PHX
.1908f6		5a		phy		                PHY
.1908f7		8b		phb		                PHB
.1908f8		08		php		                PHP
.1908f9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1908fb		18		clc		                CLC
.1908fc		a5 0c		lda $0c		                LDA SCREENBEGIN
.1908fe		a8		tay		                TAY             ; Destination is first row
.1908ff		65 11		adc $11		                ADC COLS_PER_LINE
.190901		aa		tax		                TAX             ; Source is second row
.190902		a9 ef 1f	lda #$1fef	                LDA #SCREEN_PAGE1-SCREEN_PAGE0-COLS_PER_LINE
.190905		44 00 00	mvp $00,$00	                MVP $00,$00
.190908		28		plp		                PLP
.190909		ab		plb		                PLB
.19090a		7a		ply		                PLY
.19090b		fa		plx		                PLX
.19090c		68		pla		                PLA
.19090d		6b		rtl		                RTL
.19090e		08		php		IPRINTH         PHP
.19090f		48		pha		                PHA
.190910						iprinth1
.190910		e2 20		sep #$20	                SEP #$20        ; set A short
.190912		bd 00 00	lda $190000,x	                LDA #0,b,x      ; Read the value to be printed
.190915		4a		lsr a		                LSR
.190916		4a		lsr a		                LSR
.190917		4a		lsr a		                LSR
.190918		4a		lsr a		                LSR
.190919		22 2b 09 19	jsl $19092b	                JSL iprint_digit
.19091d		bd 00 00	lda $190000,x	                LDA #0,b,x
.190920		22 2b 09 19	jsl $19092b	                JSL iprint_digit
.190924		ca		dex		                DEX
.190925		88		dey		                DEY
.190926		d0 e8		bne $190910	                BNE iprinth1
.190928		68		pla		                PLA
.190929		28		plp		                PLP
.19092a		6b		rtl		                RTL
.19092b		da		phx		iprint_digit    PHX
.19092c		c2 20		rep #$20	                REP #$20        ; set A long
.19092e		29 0f 00	and #$000f	                AND #$0F
.190931		aa		tax		                TAX
.190932		bf a7 18 19	lda $1918a7,x	                LDA hex_digits,X
.190936		22 f5 07 19	jsl $1907f5	                JSL IPUTC       ; Print the digit
.19093a		fa		plx		                PLX
.19093b		6b		rtl		                RTL
.19093c		0b		phd		ICLRSCREEN	    PHD
.19093d		08		php		                PHP
.19093e		48		pha		                PHA
.19093f		da		phx		                PHX
.190940		e2 20		sep #$20	                SEP #$20        ; set A short
.190942		c2 10		rep #$10	                REP #$10        ; set X long
.190944		a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.190947		a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.190949		9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.19094d		e8		inx		                inx
.19094e		e0 00 20	cpx #$2000	                cpx #$2000
.190951		d0 f6		bne $190949	                bne iclearloop0
.190953		a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.190956		a9 ed		lda #$ed	                LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.190958		9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.19095c		e8		inx		                inx
.19095d		e0 00 20	cpx #$2000	                cpx #$2000
.190960		d0 f6		bne $190958	                bne iclearloop1
.190962		c2 10		rep #$10	                REP #$10        ; set X long
.190964		c2 20		rep #$20	                REP #$20        ; set A long
.190966		fa		plx		                PLX
.190967		68		pla		                PLA
.190968		28		plp		                PLP
.190969		2b		pld		                PLD
.19096a		6b		rtl		                RTL
.19096b		48		pha		ICOLORFLAG      PHA
.19096c		da		phx		                PHX
.19096d		08		php		                PHP
.19096e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.190970		a2 00		ldx #$00	                LDX #$00
.190972		bf 1d 16 19	lda $19161d,x	iclearloop2	    LDA @lgreet_clr_line1,x
.190976		9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.19097a		bf 2b 16 19	lda $19162b,x	                LDA @lgreet_clr_line2,x
.19097e		9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.190982		bf 39 16 19	lda $191639,x	                LDA @lgreet_clr_line3,x
.190986		9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.19098a		bf 47 16 19	lda $191647,x	                LDA @lgreet_clr_line4,x
.19098e		9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.190992		bf 55 16 19	lda $191655,x	                LDA @lgreet_clr_line5,x
.190996		9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.19099a		e8		inx		                inx
.19099b		e0 0e		cpx #$0e	                cpx #$0E
.19099d		d0 d3		bne $190972	                bne iclearloop2
.19099f		28		plp		                PLP
.1909a0		fa		plx		                PLX
.1909a1		68		pla		                PLA
.1909a2		6b		rtl		                RTL
.1909a3		0b		phd		IINITCHLUT		  PHD
.1909a4		08		php		                PHP
.1909a5		48		pha		                PHA
.1909a6		da		phx		                PHX
.1909a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1909a9		e2 10		sep #$10	                SEP #$10        ; set X short
.1909ab		a2 00		ldx #$00					        LDX	#$00
.1909ad		bf 63 16 19	lda $191663,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.1909b1		9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.1909b5		e8		inx		                inx
.1909b6		e0 40		cpx #$40	                cpx #$40
.1909b8		d0 f3		bne $1909ad	                bne lutinitloop0
.1909ba		a2 00		ldx #$00	                LDX	#$00
.1909bc		bf a3 16 19	lda $1916a3,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.1909c0		9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.1909c4		e8		inx		                INX
.1909c5		e0 40		cpx #$40	                CPX #$40
.1909c7		d0 f3		bne $1909bc	                bne lutinitloop1
.1909c9		c2 20		rep #$20	                REP #$20        ; set A long
.1909cb		c2 10		rep #$10	                REP #$10        ; set X long
.1909cd		fa		plx		                PLX
.1909ce		68		pla		                PLA
.1909cf		28		plp		                PLP
.1909d0		2b		pld		                PLD
.1909d1		6b		rtl		                RTL
.1909d2						IINITGAMMATABLE
.1909d2		e2 20		sep #$20	                SEP #$20        ; set A short
.1909d4		c2 10		rep #$10	                REP #$10        ; set X long
.1909d6		a2 00 00	ldx #$0000	                ldx #$0000
.1909d9		bf 00 1e 19	lda $191e00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.1909dd		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.1909e1		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.1909e5		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.1909e9		e8		inx		                inx
.1909ea		e0 00 01	cpx #$0100	                cpx #$0100
.1909ed		d0 ea		bne $1909d9	                bne initgammaloop
.1909ef		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909f1		6b		rtl		                RTL
.1909f2		48		pha		IINITALLLUT     PHA
.1909f3		da		phx		                PHX
.1909f4		a2 00 00	ldx #$0000	                LDX #$0000
.1909f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1909f9		a9 00		lda #$00	                LDA #$00
.1909fb		85 0a		sta $0a		                STA $0A     ; Temp Location
.1909fd						iinit_lut_loop
.1909fd		86 02		stx $02		                STX $02
.1909ff		a6 0a		ldx $0a		                LDX $0A
.190a01		bf 00 1d 19	lda $191d00,x	                LDA GAMMA_2_2_Tbl, x
.190a05		49 55		eor #$55	                EOR  #$55
.190a07		a6 02		ldx $02		                LDX $02
.190a09		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a0d		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a11		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a15		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a19		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a1d		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a21		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a25		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a29		e8		inx		                inx
.190a2a		86 02		stx $02		                STX $02
.190a2c		a6 0a		ldx $0a		                LDX $0A
.190a2e		bf 00 1f 19	lda $191f00,x	                LDA RANDOM_LUT_Tbl, x
.190a32		a6 02		ldx $02		                LDX $02
.190a34		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a38		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a3c		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a40		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a44		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a48		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a4c		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a50		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a54		e8		inx		                inx
.190a55		86 02		stx $02		                STX $02
.190a57		a6 0a		ldx $0a		                LDX $0A
.190a59		bf 00 1e 19	lda $191e00,x	                LDA GAMMA_1_8_Tbl, x
.190a5d		49 aa		eor #$aa	                EOR  #$AA
.190a5f		a6 02		ldx $02		                LDX $02
.190a61		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a65		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a69		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a6d		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a71		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a75		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a79		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a7d		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a81		e8		inx		                inx
.190a82		a9 ff		lda #$ff	                LDA #$FF
.190a84		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a88		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a8c		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a90		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a94		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a98		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a9c		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190aa0		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190aa4		e6 0a		inc $0a		                inc $0A
.190aa6		e8		inx		                inx
.190aa7		e0 00 04	cpx #$0400	                cpx #$0400
.190aaa		f0 03		beq $190aaf	                beq iinit_lut_exit
.190aac		82 4e ff	brl $1909fd	                brl iinit_lut_loop
.190aaf						iinit_lut_exit
.190aaf		c2 30		rep #$30	                REP #$30        ; set A&X long
.190ab1		fa		plx		                PLX
.190ab2		68		pla		                PLA
.190ab3		6b		rtl		                RTL
.190ab4		48		pha		IINITVKYTXTMODE PHA
.190ab5		e2 20		sep #$20	                SEP #$20        ; set A short
.190ab7		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.190ab9		8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.190abd		a9 20		lda #$20	                LDA #$20
.190abf		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190ac3		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.190ac7		a9 00		lda #$00	                LDA #$00
.190ac9		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190acd		a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.190acf		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190ad3		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190ad5		8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.190ad9		c2 30		rep #$30	                REP #$30        ; set A&X long
.190adb		68		pla		                PLA
.190adc		6b		rtl		                RTL
.190add						IINITVKYGRPMODE
.190add		48		pha		                PHA
.190ade		e2 20		sep #$20	                SEP #$20        ; set A short
.190ae0		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190ae2		8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.190ae6		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190ae8		8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.190aec		a9 c0		lda #$c0	                LDA #$C0
.190aee		8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.190af2		a9 00		lda #$00	                LDA #$00
.190af4		8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.190af8		a9 80		lda #$80	                LDA #$80
.190afa		8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.190afe		a9 02		lda #$02	                LDA #$02
.190b00		8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.190b04		a9 e0		lda #$e0	                LDA #$E0
.190b06		8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.190b0a		a9 01		lda #$01	                LDA #$01
.190b0c		8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.190b10		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b12		68		pla		                PLA
.190b13		6b		rtl		                RTL
.190b14						IINITTILEMODE
.190b14		6b		rtl		                RTL
.190b15		48		pha		IINITSPRITE     PHA
.190b16		e2 20		sep #$20	                SEP #$20        ; set A short
.190b18		a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.190b1a		8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.190b1e		8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.190b22		8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.190b26		8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.190b2a		8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.190b2e		8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.190b32		8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.190b36		8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.190b3a		8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.190b3e		8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.190b42		8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.190b46		8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.190b4a		8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.190b4e		8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.190b52		8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.190b56		8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.190b5a		8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.190b5e		a9 09		lda #$09	                LDA #$09
.190b60		8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.190b64		8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.190b68		8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.190b6c		8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.190b70		8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.190b74		8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.190b78		8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.190b7c		8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.190b80		8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.190b84		8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.190b88		8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.190b8c		8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.190b90		8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.190b94		8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.190b98		8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.190b9c		8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.190ba0		8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.190ba4		a9 00		lda #$00	                LDA #$00
.190ba6		8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.190baa		a9 04		lda #$04	                LDA #$04
.190bac		8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.190bb0		a9 08		lda #$08	                LDA #$08
.190bb2		8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.190bb6		a9 0c		lda #$0c	                LDA #$0C
.190bb8		8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.190bbc		a9 10		lda #$10	                LDA #$10
.190bbe		8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.190bc2		a9 14		lda #$14	                LDA #$14
.190bc4		8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.190bc8		a9 18		lda #$18	                LDA #$18
.190bca		8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.190bce		a9 1c		lda #$1c	                LDA #$1C
.190bd0		8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.190bd4		a9 20		lda #$20	                LDA #$20
.190bd6		8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.190bda		a9 24		lda #$24	                LDA #$24
.190bdc		8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.190be0		a9 28		lda #$28	                LDA #$28
.190be2		8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.190be6		a9 2c		lda #$2c	                LDA #$2C
.190be8		8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.190bec		a9 30		lda #$30	                LDA #$30
.190bee		8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.190bf2		a9 34		lda #$34	                LDA #$34
.190bf4		8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.190bf8		a9 38		lda #$38	                LDA #$38
.190bfa		8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.190bfe		a9 3c		lda #$3c	                LDA #$3C
.190c00		8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.190c04		a9 40		lda #$40	                LDA #$40
.190c06		8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.190c0a		a9 00		lda #$00	                LDA #$00
.190c0c		8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.190c10		8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.190c14		8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.190c18		8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.190c1c		8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.190c20		8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.190c24		8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.190c28		8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.190c2c		8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.190c30		8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.190c34		8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.190c38		8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.190c3c		8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.190c40		8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.190c44		8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.190c48		8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.190c4c		8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.190c50		68		pla		                PLA
.190c51		6b		rtl		                RTL
.190c52						IINITFONTSET
.190c52		e2 20		sep #$20	                SEP #$20        ; set A short
.190c54		c2 10		rep #$10	                REP #$10        ; set X long
.190c56		a2 00 00	ldx #$0000	                LDX #$0000
.190c59						initFontsetbranch0
.190c59		bf 00 f0 1f	lda $1ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.190c5d		9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.190c61		e8		inx		                INX
.190c62		e0 00 08	cpx #$0800	                CPX #$0800
.190c65		d0 f2		bne $190c59	                BNE initFontsetbranch0
.190c67		ea		nop		                NOP
.190c68		a2 00 00	ldx #$0000	                LDX #$0000
.190c6b						initFontsetbranch1
.190c6b		bf 00 f8 1f	lda $1ff800,x	                LDA @lFONT_4_BANK1,X
.190c6f		9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.190c73		e8		inx		                INX
.190c74		e0 00 08	cpx #$0800	                CPX #$0800
.190c77		d0 f2		bne $190c6b	                BNE initFontsetbranch1
.190c79		ea		nop		                NOP
.190c7a		c2 30		rep #$30	                REP #$30        ; set A&X long
.190c7c		6b		rtl		                RTL
.190c7d		48		pha		IINITCURSOR     PHA
.190c7e		e2 20		sep #$20	                SEP #$20        ; set A short
.190c80		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190c82		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190c86		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190c88		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190c8c		c2 30		rep #$30	                REP #$30        ; set A&X long
.190c8e		a9 00 00	lda #$0000	                LDA #$0000;
.190c91		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190c95		a9 06 00	lda #$0006	                LDA #$0006;
.190c98		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190c9c		68		pla		                PLA
.190c9d		6b		rtl		                RTL
.190c9e		0b		phd		IINITSUPERIO	  PHD
.190c9f		08		php		                PHP
.190ca0		48		pha		                PHA
.190ca1		e2 20		sep #$20	                SEP #$20        ; set A short
.190ca3		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190ca5		8f 23 11 af	sta $af1123	                STA GP10_REG
.190ca9		af 23 11 af	lda $af1123	                LDA GP10_REG
.190cad		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190caf		8f 24 11 af	sta $af1124	                STA GP11_REG
.190cb3		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190cb5		8f 25 11 af	sta $af1125	                STA GP12_REG
.190cb9		a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190cbb		8f 26 11 af	sta $af1126	        				STA GP13_REG
.190cbf		a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190cc1		8f 27 11 af	sta $af1127	        				STA GP14_REG
.190cc5		a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190cc7		8f 28 11 af	sta $af1128	        				STA GP15_REG
.190ccb		a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190ccd		8f 29 11 af	sta $af1129	        				STA GP16_REG
.190cd1		a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190cd3		8f 2a 11 af	sta $af112a	        				STA GP17_REG
.190cd7		a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190cd9		8f 2b 11 af	sta $af112b	        				STA GP20_REG
.190cdd		a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190cdf		8f 2f 11 af	sta $af112f					        STA GP24_REG
.190ce3		a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190ce5		8f 30 11 af	sta $af1130					        STA GP25_REG
.190ce9		a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190ceb		8f 31 11 af	sta $af1131					        STA GP26_REG
.190cef		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190cf1		8f 33 11 af	sta $af1133					        STA GP30_REG
.190cf5		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190cf7		8f 34 11 af	sta $af1134					        STA GP31_REG
.190cfb		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190cfd		8f 35 11 af	sta $af1135					        STA GP32_REG
.190d01		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190d03		8f 36 11 af	sta $af1136					        STA GP33_REG
.190d07		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190d09		8f 37 11 af	sta $af1137					        STA GP34_REG
.190d0d		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190d0f		8f 38 11 af	sta $af1138					        STA GP35_REG
.190d13		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190d15		8f 39 11 af	sta $af1139					        STA GP36_REG
.190d19		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190d1b		8f 3a 11 af	sta $af113a					        STA GP37_REG
.190d1f		a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190d21		8f 3d 11 af	sta $af113d					        STA GP42_REG
.190d25		a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190d27		8f 3e 11 af	sta $af113e					        STA GP43_REG
.190d2b		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190d2d		8f 3f 11 af	sta $af113f					        STA GP50_REG
.190d31		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190d33		8f 40 11 af	sta $af1140					        STA GP51_REG
.190d37		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190d39		8f 41 11 af	sta $af1141					        STA GP52_REG
.190d3d		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190d3f		8f 42 11 af	sta $af1142					        STA GP53_REG
.190d43		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190d45		8f 43 11 af	sta $af1143					        STA GP54_REG
.190d49		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190d4b		8f 44 11 af	sta $af1144					        STA GP55_REG
.190d4f		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190d51		8f 45 11 af	sta $af1145					        STA GP56_REG
.190d55		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190d57		8f 46 11 af	sta $af1146					        STA GP57_REG
.190d5b		a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.190d5d		8f 47 11 af	sta $af1147					        STA GP60_REG
.190d61		a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.190d63		8f 48 11 af	sta $af1148					        STA GP61_REG
.190d67		a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190d69		8f 4b 11 af	sta $af114b					        STA GP1_REG
.190d6d		a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190d6f		8f 4c 11 af	sta $af114c					        STA GP2_REG
.190d73		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190d75		8f 4d 11 af	sta $af114d					        STA GP3_REG
.190d79		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190d7b		8f 4e 11 af	sta $af114e					        STA GP4_REG
.190d7f		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190d81		8f 4f 11 af	sta $af114f					        STA GP5_REG
.190d85		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190d87		8f 50 11 af	sta $af1150					        STA GP6_REG
.190d8b		a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190d8d		8f 5d 11 af	sta $af115d					        STA LED1_REG
.190d91		a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190d93		8f 5e 11 af	sta $af115e					        STA LED2_REG
.190d97		c2 20		rep #$20	                REP #$20        ; set A long
.190d99		68		pla		                PLA
.190d9a		28		plp						        PLP
.190d9b		2b		pld					        	PLD
.190d9c		6b		rtl		                RTL
.190d9d		0b		phd		IINITKEYBOARD	  PHD
.190d9e		08		php						        PHP
.190d9f		48		pha						        PHA
.190da0		da		phx						        PHX
.190da1		e2 20		sep #$20	                SEP #$20        ; set A short
.190da3		c2 10		rep #$10	                REP #$10        ; set X long
.190da5		18		clc		                CLC
.190da6		20 73 0e	jsr $190e73	                JSR Poll_Inbuf ;
.190da9		a9 aa		lda #$aa					        LDA #$0AA			;Send self test command
.190dab		8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.190daf		20 7e 0e	jsr $190e7e	                JSR Poll_Outbuf ;
.190db2		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.190db6		c9 55		cmp #$55					        CMP #$55
.190db8		f0 03		beq $190dbd					        BEQ	passAAtest
.190dba		82 a6 00	brl $190e63	                BRL initkb_loop_out
.190dbd		a2 10 17	ldx #$1710	passAAtest      LDX #<>pass_tst0xAAmsg
.190dc0		22 d5 07 19	jsl $1907d5	                JSL IPRINT      ; print Message
.190dc4		a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.190dc6		8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.190dca		20 7e 0e	jsr $190e7e	                JSR Poll_Outbuf ;
.190dcd		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.190dd1		c9 00		cmp #$00					        CMP #$00			;Should be 00
.190dd3		f0 03		beq $190dd8					        BEQ	passABtest
.190dd5		82 8b 00	brl $190e63	                BRL initkb_loop_out
.190dd8		a2 29 17	ldx #$1729	passABtest      LDX #<>pass_tst0xABmsg
.190ddb		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print Message
.190ddf		a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.190de1		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190de5		20 73 0e	jsr $190e73	                JSR Poll_Inbuf ;
.190de8		a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.190dea		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190dee		20 73 0e	jsr $190e73	                JSR Poll_Inbuf ;
.190df1		a2 42 17	ldx #$1742	                LDX #<>pass_cmd0x60msg
.190df4		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print Message
.190df8		a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.190dfa		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190dfe		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.190e01		ca		dex		DLY_LOOP1       DEX
.190e02		ea		nop		                NOP
.190e03		ea		nop		                NOP
.190e04		ea		nop		                NOP
.190e05		ea		nop		                NOP
.190e06		ea		nop		                NOP
.190e07		ea		nop		                NOP
.190e08		ea		nop		                NOP
.190e09		ea		nop		                NOP
.190e0a		e0 00 00	cpx #$0000	                CPX #$0000
.190e0d		d0 f2		bne $190e01	                BNE DLY_LOOP1
.190e0f		20 7e 0e	jsr $190e7e	                JSR Poll_Outbuf ;
.190e12		af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.190e16		a2 56 17	ldx #$1756	                LDX #<>pass_cmd0xFFmsg
.190e19		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print Message
.190e1d		a9 ee		lda #$ee	                LDA #$EE      ; Send Keyboard Reset command
.190e1f		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190e23		a2 00 40	ldx #$4000	                LDX #$4000
.190e26		ca		dex		DLY_LOOP2       DEX
.190e27		ea		nop		                NOP
.190e28		ea		nop		                NOP
.190e29		ea		nop		                NOP
.190e2a		ea		nop		                NOP
.190e2b		ea		nop		                NOP
.190e2c		ea		nop		                NOP
.190e2d		ea		nop		                NOP
.190e2e		ea		nop		                NOP
.190e2f		e0 00 00	cpx #$0000	                CPX #$0000
.190e32		d0 f2		bne $190e26	                BNE DLY_LOOP2
.190e34		20 7e 0e	jsr $190e7e	                JSR Poll_Outbuf ;
.190e37		a2 6e 17	ldx #$176e	                LDX #<>pass_cmd0xEEmsg
.190e3a		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print Message
.190e3e		a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.190e40		8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.190e44		20 7e 0e	jsr $190e7e	                JSR Poll_Outbuf ;
.190e47		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.190e4b		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.190e4f		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.190e53		af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.190e57		29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.190e59		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190e5d		a2 8c 17	ldx #$178c	                LDX #<>Success_kb_init
.190e60		38		sec		                SEC
.190e61		b0 03		bcs $190e66	                BCS InitSuccess
.190e63		a2 9e 17	ldx #$179e	initkb_loop_out LDX #<>Failed_kb_init
.190e66		22 d5 07 19	jsl $1907d5	InitSuccess     JSL IPRINT       ; print Message
.190e6a		c2 20		rep #$20	                REP #$20        ; set A long
.190e6c		c2 10		rep #$10	                REP #$10        ; set X long
.190e6e		fa		plx		                PLX
.190e6f		68		pla		                PLA
.190e70		28		plp						        PLP
.190e71		2b		pld						        PLD
.190e72		6b		rtl		                RTL
.190e73						Poll_Inbuf
.190e73		af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.190e77		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.190e79		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.190e7b		f0 f6		beq $190e73					        BEQ Poll_Inbuf
.190e7d		60		rts		                RTS
.190e7e						Poll_Outbuf
.190e7e		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.190e82		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.190e84		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.190e86		d0 f6		bne $190e7e	                BNE Poll_Outbuf
.190e88		60		rts		                RTS
.190e89		48		pha		IINITRTC        PHA
.190e8a		e2 20		sep #$20	                SEP #$20        ; set A short
.190e8c		a9 00		lda #$00	                LDA #$00
.190e8e		8f 00 08 af	sta $af0800	                STA RTC_SEC     ;Set the Time to 10:10AM
.190e92		a9 0a		lda #$0a	                LDA #10
.190e94		8f 02 08 af	sta $af0802	                STA RTC_MIN
.190e98		8f 04 08 af	sta $af0804	                STA RTC_HRS
.190e9c		a9 0c		lda #$0c	                LDA #12
.190e9e		8f 06 08 af	sta $af0806	                STA RTC_DAY
.190ea2		a9 04		lda #$04	                LDA #04
.190ea4		8f 09 08 af	sta $af0809	                STA RTC_MONTH   ; April 12th, 2018 - Begining of the Project
.190ea8		a9 04		lda #$04	                LDA #04
.190eaa		8f 09 08 af	sta $af0809	                STA RTC_MONTH   ; Thursday
.190eae		a9 12		lda #$12	                LDA #18
.190eb0		8f 0a 08 af	sta $af080a	                STA RTC_YEAR    ; Thursday
.190eb4		af 06 08 af	lda $af0806	                LDA RTC_DAY     ; Read the Day Registers
.190eb8		8f 06 08 af	sta $af0806	                STA RTC_DAY     ; Store it back
.190ebc		c2 20		rep #$20	                REP #$20        ; set A long
.190ebe		68		pla		                PLA
.190ebf		6b		rtl		                RTL
.190ec0		48		pha		ITESTSID        PHA
.190ec1		e2 20		sep #$20	                SEP #$20        ; set A short
.190ec3		a9 0f		lda #$0f	                LDA #$0F
.190ec5		8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.190ec9		a9 be		lda #$be	                LDA #$BE
.190ecb		8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.190ecf		a9 f8		lda #$f8	                LDA #$F8
.190ed1		8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.190ed5		a9 11		lda #$11	                LDA #$11
.190ed7		8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.190edb		a9 25		lda #$25	                LDA #$25
.190edd		8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.190ee1		a9 11		lda #$11	                LDA #$11
.190ee3		8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.190ee7		c2 20		rep #$20	                REP #$20        ; set A long
.190ee9		68		pla		                PLA
.190eea		6b		rtl		                RTL
.190eeb		48		pha		ITESTMATH       PHA
.190eec		c2 20		rep #$20	                REP #$20        ; set A long
.190eee		a9 34 12	lda #$1234	                LDA #$1234
.190ef1		8f 00 01 00	sta $000100	                STA UNSIGNED_MULT_A_LO
.190ef5		a9 aa 55	lda #$55aa	                LDA #$55AA
.190ef8		8f 02 01 00	sta $000102	                STA UNSIGNED_MULT_B_LO
.190efc		af 04 01 00	lda $000104	                LDA UNSIGNED_MULT_AL_LO
.190f00		8f 00 0e 00	sta $000e00	                STA STEF_BLOB_BEGIN
.190f04		af 06 01 00	lda $000106	                LDA UNSIGNED_MULT_AH_LO
.190f08		8f 02 0e 00	sta $000e02	                STA STEF_BLOB_BEGIN + 2
.190f0c		c2 10		rep #$10	                REP #$10        ; set X long
.190f0e		c2 20		rep #$20	                REP #$20        ; set A long
.190f10		68		pla		                PLA
.190f11		6b		rtl		                RTL
.190f12		48		pha		IINITCODEC      PHA
.190f13		c2 20		rep #$20	                REP #$20        ; set A long
.190f15		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190f18		8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190f1c		a9 01 00	lda #$0001	                LDA #$0001
.190f1f		8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190f23		20 6f 0f	jsr $190f6f	                JSR CODEC_TRF_FINISHED
.190f26		a9 03 2a	lda #$2a03	                LDA #%0010101000000011       ;R21 - Enable All the Analog In
.190f29		8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190f2d		a9 01 00	lda #$0001	                LDA #$0001
.190f30		8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190f34		20 6f 0f	jsr $190f6f	                JSR CODEC_TRF_FINISHED
.190f37		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190f3a		8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190f3e		a9 01 00	lda #$0001	                LDA #$0001
.190f41		8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190f45		20 6f 0f	jsr $190f6f	                JSR CODEC_TRF_FINISHED
.190f48		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190f4b		8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190f4f		a9 01 00	lda #$0001	                LDA #$0001
.190f52		8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190f56		20 6f 0f	jsr $190f6f	                JSR CODEC_TRF_FINISHED
.190f59		68		pla		                PLA
.190f5a		6b		rtl		                RTL
.190f5b						IRESETCODEC
.190f5b		c2 20		rep #$20	                REP #$20        ; set A long
.190f5d		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190f60		8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190f64		a9 01 00	lda #$0001	                LDA #$0001
.190f67		8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190f6b		20 6f 0f	jsr $190f6f	                JSR CODEC_TRF_FINISHED
.190f6e		6b		rtl		                RTL
.190f6f						CODEC_TRF_FINISHED
.190f6f		e2 20		sep #$20	                SEP #$20        ; set A short
.190f71		af 22 e8 af	lda $afe822	CODEC_LOOP      LDA CODEC_WR_CTRL
.190f75		29 01		and #$01	                AND #$01
.190f77		c9 01		cmp #$01	                CMP #$01
.190f79		f0 f6		beq $190f71	                BEQ CODEC_LOOP
.190f7b		c2 20		rep #$20	                REP #$20        ; set A long
.190f7d		60		rts		                RTS
.190f7e						IBM_FILL_SCREEN
.190f7e		c2 30		rep #$30	                REP #$30        ; set A&X long
.190f80		a9 00 00	lda #$0000	                LDA #$0000
.190f83		a2 00 00	ldx #$0000	                LDX #$0000
.190f86						BM_FILL_SCREEN_LOOPY
.190f86		a0 00 00	ldy #$0000	                LDY #$0000
.190f89		e2 20		sep #$20	                SEP #$20        ; set A short
.190f8b						BM_FILL_SCREEN_LOOPX
.190f8b		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190f8d		c8		iny		                INY
.190f8e		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190f90		d0 f9		bne $190f8b	                BNE BM_FILL_SCREEN_LOOPX
.190f92		20 9d 0f	jsr $190f9d	                JSR BM_FILL_COMPUTE_Y_DST
.190f95		e8		inx		                INX
.190f96		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190f98		d0 ec		bne $190f86	                BNE BM_FILL_SCREEN_LOOPY
.190f9a		c2 30		rep #$30	                REP #$30        ; set A&X long
.190f9c		6b		rtl		                RTL
.190f9d						BM_FILL_COMPUTE_Y_DST
.190f9d		c2 20		rep #$20	                REP #$20        ; set A long
.190f9f		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190fa1		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190fa5		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190fa7		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190fab		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190fae		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190fb2		a9 00 00	lda #$0000	                LDA #$0000
.190fb5		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190fb9		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190fbd		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190fbf		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190fc3		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190fc5		a9 00 00	lda #$0000	                LDA #$0000
.190fc8		60		rts		                RTS
.190fc9						IBMP_PARSER
.190fc9		c2 30		rep #$30	                REP #$30        ; set A&X long
.190fcb		a0 00 00	ldy #$0000	                LDY #$0000
.190fce		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190fd0		c9 42 4d	cmp #$4d42	                CMP #$4D42
.190fd3		f0 03		beq $190fd8	                BEQ IBMP_PARSER_CONT
.190fd5		82 04 01	brl $1910dc	                BRL BMP_PARSER_END_WITH_ERROR
.190fd8						IBMP_PARSER_CONT
.190fd8		a0 02 00	ldy #$0002	                LDY #$0002
.190fdb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190fdd		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190fe1		a0 04 00	ldy #$0004	                LDY #$0004
.190fe4		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190fe6		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190fea		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190fed		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190ff1		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190ff5		18		clc		                CLC
.190ff6		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ffa		85 50		sta $50		                STA BMP_FILE_SIZE
.190ffc		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.191000		85 52		sta $52		                STA BMP_FILE_SIZE+2
.191002		a0 12 00	ldy #$0012	                LDY #$0012
.191005		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.191007		85 40		sta $40		                STA BMP_X_SIZE
.191009		a0 16 00	ldy #$0016	                LDY #$0016
.19100c		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.19100e		85 42		sta $42		                STA BMP_Y_SIZE
.191010		a0 2e 00	ldy #$002e	                LDY #$002E
.191013		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.191015		0a		asl a		                ASL A; Multiply by 2
.191016		0a		asl a		                ASL A; Multiply by 2
.191017		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.191019		e0 00 00	cpx #$0000	                CPX #$0000
.19101c		d0 05		bne $191023	                BNE BMP_LUT1_PICK
.19101e		20 e4 10	jsr $1910e4	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.191021		80 08		bra $19102b	                BRA DONE_TRANSFER_LUT;
.191023						  BMP_LUT1_PICK
.191023		e0 01 00	cpx #$0001	                CPX #$0001
.191026		d0 03		bne $19102b	                BNE BMP_LUT2_PICK
.191028		20 14 11	jsr $191114	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.19102b						  BMP_LUT2_PICK
.19102b						  DONE_TRANSFER_LUT
.19102b		a5 56		lda $56		                LDA BMP_POSITION_Y
.19102d		8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.191031		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.191033		8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.191037		af 04 01 00	lda $000104	                LDA @lM0_RESULT
.19103b		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.19103f		af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.191043		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.191047		a5 54		lda $54		                LDA BMP_POSITION_X
.191049		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.19104d		a9 00 00	lda #$0000	                LDA #$0000
.191050		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.191054		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.191058		85 f0		sta $f0		                STA USER_TEMP
.19105a		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.19105e		85 f2		sta $f2		                STA USER_TEMP+2
.191060		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.191062		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.191066		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.191068		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.19106c		a5 f0		lda $f0		                LDA USER_TEMP
.19106e		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.191072		a5 f2		lda $f2		                LDA USER_TEMP+2
.191074		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.191078		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.19107c		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.19107e		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.191082		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.191084		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.191086		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.19108a		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.19108c		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.191090		a5 50		lda $50		                LDA BMP_FILE_SIZE
.191092		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.191096		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.191098		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.19109c		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.1910a0		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.1910a2		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.1910a6		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.1910a8		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.1910aa		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.1910ae		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.1910b0		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.1910b4		18		clc		                CLC
.1910b5		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.1910b7		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.1910ba		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.1910bd		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.1910c1		a9 ff ff	lda #$ffff	                LDA #$FFFF
.1910c4		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.1910c8		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.1910cc		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.1910ce		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.1910d2		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.1910d4		20 44 11	jsr $191144	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.1910d7		a2 fc 17	ldx #$17fc	                LDX #<>bmp_parser_msg0
.1910da		80 03		bra $1910df	                BRA BMP_PARSER_END_NO_ERROR
.1910dc						BMP_PARSER_END_WITH_ERROR
.1910dc		a2 e8 17	ldx #$17e8	                LDX #<>bmp_parser_err0
.1910df						BMP_PARSER_END_NO_ERROR
.1910df		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print the first line
.1910e3		6b		rtl		                RTL
.1910e4						BMP_PARSER_UPDATE_LUT0
.1910e4		38		sec		                SEC
.1910e5		a0 7a 00	ldy #$007a	                LDY #$007A
.1910e8		a2 00 00	ldx #$0000	                LDX #$0000
.1910eb		e2 20		sep #$20	                SEP #$20        ; set A short
.1910ed						BMP_PARSER_UPDATE_LOOP
.1910ed		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.1910ef		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.1910f3		c8		iny		                INY
.1910f4		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.1910f6		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.1910fa		c8		iny		                INY
.1910fb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.1910fd		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.191101		c8		iny		                INY
.191102		a9 80		lda #$80	                LDA #$80
.191104		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.191108		c8		iny		                INY ; For the Alpha Value, nobody cares
.191109		e8		inx		                INX
.19110a		e8		inx		                INX
.19110b		e8		inx		                INX
.19110c		e8		inx		                INX
.19110d		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.19110f		d0 dc		bne $1910ed	                BNE BMP_PARSER_UPDATE_LOOP
.191111		c2 20		rep #$20	                REP #$20        ; set A long
.191113		60		rts		                RTS
.191114						BMP_PARSER_UPDATE_LUT1
.191114		38		sec		                SEC
.191115		a0 36 00	ldy #$0036	                LDY #$0036
.191118		a2 00 00	ldx #$0000	                LDX #$0000
.19111b		e2 20		sep #$20	                SEP #$20        ; set A short
.19111d						PALETTE_LUT1_LOOP
.19111d		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.19111f		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.191123		c8		iny		                INY
.191124		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.191126		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.19112a		c8		iny		                INY
.19112b		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.19112d		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.191131		c8		iny		                INY
.191132		a9 80		lda #$80	                LDA #$80
.191134		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.191138		c8		iny		                INY ; For the Alpha Value, nobody cares
.191139		e8		inx		                INX
.19113a		e8		inx		                INX
.19113b		e8		inx		                INX
.19113c		e8		inx		                INX
.19113d		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.19113f		d0 dc		bne $19111d	                BNE PALETTE_LUT1_LOOP
.191141		c2 20		rep #$20	                REP #$20        ; set A long
.191143		60		rts		                RTS
.191144						BMP_PARSER_DMA_SHIT_OUT
.191144		a2 00 00	ldx #$0000	                LDX #$0000
.191147						BMP_PARSER_LOOPY
.191147		a0 00 00	ldy #$0000	                LDY #$0000
.19114a		e2 20		sep #$20	                SEP #$20        ; set A short
.19114c						BMP_PARSER_LOOPX
.19114c		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.19114e		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.191150		c8		iny		                INY
.191151		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.191153		d0 f7		bne $19114c	                BNE BMP_PARSER_LOOPX
.191155		20 61 11	jsr $191161	                JSR BMP_PARSER_COMPUTE_Y_SRC
.191158		20 7c 11	jsr $19117c	                JSR BMP_PARSER_COMPUTE_Y_DST
.19115b		e8		inx		                INX
.19115c		e4 42		cpx $42		                CPX BMP_Y_SIZE
.19115e		d0 e7		bne $191147	                BNE BMP_PARSER_LOOPY
.191160		60		rts		                RTS
.191161						BMP_PARSER_COMPUTE_Y_SRC
.191161		c2 20		rep #$20	                REP #$20        ; set A long
.191163		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.191165		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.191169		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.19116b		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.19116f		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.191173		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.191175		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.191179		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.19117b		60		rts		                RTS
.19117c						BMP_PARSER_COMPUTE_Y_DST
.19117c		c2 20		rep #$20	                REP #$20        ; set A long
.19117e		18		clc		                CLC
.19117f		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.191181		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.191183		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.191185		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.191187		69 00 00	adc #$0000	                ADC #$0000
.19118a		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.19118c		60		rts		                RTS
.19118d						IRQ_HANDLER
.19118d		e2 20		sep #$20	                SEP #$20        ; set A short
.19118f		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0 ; Clear the Pending INTERRUPT
.191193		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0 ; Clear the Pending INTERRUPT
.191197		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1 ; Clear the Pending INTERRUPT
.19119b		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1 ; Clear the Pending INTERRUPT
.19119f		af 42 01 00	lda $000142	                LDA @lINT_PENDING_REG2 ; Clear the Pending INTERRUPT
.1911a3		8f 42 01 00	sta $000142	                STA @lINT_PENDING_REG2 ; Clear the Pending INTERRUPT
.1911a7		a2 00 00	ldx #$0000	                ldx #$0000
.1911aa		e2 10		sep #$10	                SEP #$10        ; set X short
.1911ac						IRQ_HANDLER_FETCH
.1911ac		af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF        ; Get Scan Code from KeyBoard
.1911b0		8f 88 0f 00	sta $000f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.1911b4		c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.1911b6		f0 74		beq $19122c	                BEQ KB_SET_SHIFT
.1911b8		c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.1911ba		f0 7d		beq $191239	                BEQ KB_CLR_SHIFT
.1911bc		c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.1911be		d0 03		bne $1911c3	                BNE NOT_KB_SET_CTRL
.1911c0		82 83 00	brl $191246	                BRL KB_SET_CTRL
.1911c3						NOT_KB_SET_CTRL
.1911c3		c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.1911c5		d0 03		bne $1911ca	                BNE KB_CHECK_ALT
.1911c7		82 89 00	brl $191253	                BRL KB_CLR_CTRL
.1911ca		c9 38		cmp #$38	KB_CHECK_ALT    CMP #$38                ; Left ALT Pressed
.1911cc		d0 03		bne $1911d1	                BNE KB_ALT_UNPRESED
.1911ce		82 8f 00	brl $191260	                BRL KB_SET_ALT
.1911d1		c9 b8		cmp #$b8	KB_ALT_UNPRESED CMP #$B8                ; Left ALT Unpressed
.1911d3		d0 03		bne $1911d8	                BNE KB_UNPRESSED
.1911d5		82 95 00	brl $19126d	                BRL KB_CLR_ALT
.1911d8		29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.1911da		c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.1911dc		d0 03		bne $1911e1	                BNE KB_NORM_SC
.1911de		82 96 00	brl $191277	                BRL KB_CHECK_B_DONE
.1911e1		af 88 0f 00	lda $000f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.1911e5		aa		tax		                TAX
.1911e6		af 87 0f 00	lda $000f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.1911ea		29 10		and #$10	                AND #$10
.1911ec		c9 10		cmp #$10	                CMP #$10
.1911ee		f0 1b		beq $19120b	                BEQ SHIFT_KEY_ON
.1911f0		af 87 0f 00	lda $000f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.1911f4		29 20		and #$20	                AND #$20
.1911f6		c9 20		cmp #$20	                CMP #$20
.1911f8		f0 18		beq $191212	                BEQ CTRL_KEY_ON
.1911fa		af 87 0f 00	lda $000f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.1911fe		29 40		and #$40	                AND #$40
.191200		c9 40		cmp #$40	                CMP #$40
.191202		f0 15		beq $191219	                BEQ ALT_KEY_ON
.191204		bf 00 1a 19	lda $191a00,x	                LDA @lScanCode_Press_Set1, x
.191208		82 12 00	brl $19121d	                BRL KB_WR_2_SCREEN
.19120b		bf 80 1a 19	lda $191a80,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.19120f		82 0b 00	brl $19121d	                BRL KB_WR_2_SCREEN
.191212		bf 00 1b 19	lda $191b00,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.191216		82 04 00	brl $19121d	                BRL KB_WR_2_SCREEN
.191219		bf 80 1b 19	lda $191b80,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.19121d						KB_WR_2_SCREEN
.19121d		48		pha		                PHA
.19121e		c2 10		rep #$10	                REP #$10        ; set X long
.191220		22 00 30 19	jsl $193000	                JSL SAVECHAR2CMDLINE
.191224		68		pla		                PLA
.191225		22 18 00 19	jsl $190018	                JSL PUTC
.191229		4c 77 12	jmp $191277	                JMP KB_CHECK_B_DONE
.19122c		af 87 0f 00	lda $000f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.191230		09 10		ora #$10	                ORA #$10
.191232		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.191236		4c 77 12	jmp $191277	                JMP KB_CHECK_B_DONE
.191239		af 87 0f 00	lda $000f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.19123d		29 ef		and #$ef	                AND #$EF
.19123f		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.191243		4c 77 12	jmp $191277	                JMP KB_CHECK_B_DONE
.191246		af 87 0f 00	lda $000f87	KB_SET_CTRL    LDA KEYBOARD_SC_FLG
.19124a		09 20		ora #$20	                ORA #$20
.19124c		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.191250		4c 77 12	jmp $191277	                JMP KB_CHECK_B_DONE
.191253		af 87 0f 00	lda $000f87	KB_CLR_CTRL    LDA KEYBOARD_SC_FLG
.191257		29 df		and #$df	                AND #$DF
.191259		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.19125d		4c 77 12	jmp $191277	                JMP KB_CHECK_B_DONE
.191260		af 87 0f 00	lda $000f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.191264		09 40		ora #$40	                ORA #$40
.191266		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.19126a		4c 77 12	jmp $191277	                JMP KB_CHECK_B_DONE
.19126d		af 87 0f 00	lda $000f87	KB_CLR_ALT     LDA KEYBOARD_SC_FLG
.191271		29 bf		and #$bf	                AND #$BF
.191273		8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG
.191277						KB_CHECK_B_DONE
.191277		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.19127b		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.19127d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL ; if Still Byte in the Buffer, fetch it out
.19127f		d0 03		bne $191284	                BNE KB_DONE
.191281		4c ac 11	jmp $1911ac	                JMP IRQ_HANDLER_FETCH
.191284						KB_DONE
.191284		c2 30		rep #$30	                REP #$30        ; set A&X long
.191286		6b		rtl		                RTL
.191287						NMI_HANDLER
.191287		a2 d7 17	ldx #$17d7	                LDX #<>nmi_Msg
.19128a		22 d5 07 19	jsl $1907d5	                JSL IPRINT       ; print the Init
.19128e		6b		rtl		                RTL
.19128f		00		brk #		IRESTORE        BRK ; Warm boot routine
.191290		00		brk #		ISCINIT         BRK ;
.191291		00		brk #		IIOINIT         BRK ;
.191292		00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.191293		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.191294		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.191295		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.191296		00		brk #		ICLOSE          BRK ; Close a channel
.191297		00		brk #		ISETIN          BRK ; Set the current input channel
.191298		00		brk #		ISETOUT         BRK ; Set the current output channel
.191299		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.19129a		00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.19129b		00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.19129c		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.19129d		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.19129e		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.19129f		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.1912a0		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.1912a1		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.1912a2		00		brk #		IPRINTF         BRK ; Print a float value
.1912a3		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.1912a4		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.1912a5		00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.1912a6		00		brk #		IPUSHKEY        BRK ;
.1912a7		00		brk #		IPUSHKEYS       BRK ;
.1912a8		00		brk #		ICSRLEFT        BRK ;
.1912a9		00		brk #		ICSRHOME        BRK ;
.1912aa		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.1912ab		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.1912ac						KERNEL_DATA
>1912ac		20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, "C256 FOENIX DEVELOPMENT SYSTEM",$0D
>1912b4		0b 0c 0b 0c 0b 0c 43 32 35 36 20 46 4f 45 4e 49
>1912c4		58 20 44 45 56 45 4c 4f 50 4d 45 4e 54 20 53 59
>1912d4		53 54 45 4d 0d
>1912d9		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "May the Power of the 65C816 Bring You Joy!",$0D
>1912e1		0c 0b 0c 0b 0c 20 4d 61 79 20 74 68 65 20 50 6f
>1912f1		77 65 72 20 6f 66 20 74 68 65 20 36 35 43 38 31
>191301		36 20 42 72 69 6e 67 20 59 6f 75 20 4a 6f 79 21
>191311		0d
>191312		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, "System Designed by: Stefany Allaire",$0D
>19131a		0b 0c 0b 0c 20 20 53 79 73 74 65 6d 20 44 65 73
>19132a		69 67 6e 65 64 20 62 79 3a 20 53 74 65 66 61 6e
>19133a		79 20 41 6c 6c 61 69 72 65 0d
>191344		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, $20, "www.c256foenix.com",$0D
>19134c		0c 0b 0c 20 20 20 77 77 77 2e 63 32 35 36 66 6f
>19135c		65 6e 69 78 2e 63 6f 6d 0d
>191365		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, $20, $20, "2048KB CODE RAM  4096K VIDEO MEM",$0D, $00
>19136d		0b 0c 20 20 20 20 32 30 34 38 4b 42 20 43 4f 44
>19137d		45 20 52 41 4d 20 20 34 30 39 36 4b 20 56 49 44
>19138d		45 4f 20 4d 45 4d 0d 00
.191395						old_pc_style_stat
>191395		d6 c4 c4 c4 c4 c4 c4 c4		                .text $D6, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C2
>19139d		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1913ad		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c2
>1913b9		c4 c4 c4 c4 c4 c4 c4 c4		                .text      $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $B7, $0D
>1913c1		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1913d1		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 b7 0d
>1913dd		ba 20 4d 61 69 6e 20 50		                .text $BA, " Main Processor     : 65C816      ",$B3," Base Memory Size     : 2048K     ",$BA, $0D
>1913e5		72 6f 63 65 73 73 6f 72 20 20 20 20 20 3a 20 36
>1913f5		35 43 38 31 36 20 20 20 20 20 20 b3 20 42 61 73
>191405		65 20 4d 65 6d 6f 72 79 20 53 69 7a 65 20 20 20
>191415		20 20 3a 20 32 30 34 38 4b 20 20 20 20 20 ba 0d
>191425		ba 20 4e 75 6d 65 72 69		                .text $BA, " Numeric Processor  : CFP9518     ",$B3," Video Memory Size    : 4096K     ",$BA, $0D
>19142d		63 20 50 72 6f 63 65 73 73 6f 72 20 20 3a 20 43
>19143d		46 50 39 35 31 38 20 20 20 20 20 b3 20 56 69 64
>19144d		65 6f 20 4d 65 6d 6f 72 79 20 53 69 7a 65 20 20
>19145d		20 20 3a 20 34 30 39 36 4b 20 20 20 20 20 ba 0d
>19146d		ba 20 46 6c 6f 70 70 79		                .text $BA, " Floppy Driver A:   : Yes         ",$B3," Hard Disk C: Type    : None      ",$BA, $0D
>191475		20 44 72 69 76 65 72 20 41 3a 20 20 20 3a 20 59
>191485		65 73 20 20 20 20 20 20 20 20 20 b3 20 48 61 72
>191495		64 20 44 69 73 6b 20 43 3a 20 54 79 70 65 20 20
>1914a5		20 20 3a 20 4e 6f 6e 65 20 20 20 20 20 20 ba 0d
>1914b5		ba 20 53 44 43 61 72 64		                .text $BA, " SDCard Card Reader : Yes         ",$B3," Serial Port(s)       : $AF:13F8, ",$BA, $0D
>1914bd		20 43 61 72 64 20 52 65 61 64 65 72 20 3a 20 59
>1914cd		65 73 20 20 20 20 20 20 20 20 20 b3 20 53 65 72
>1914dd		69 61 6c 20 50 6f 72 74 28 73 29 20 20 20 20 20
>1914ed		20 20 3a 20 24 41 46 3a 31 33 46 38 2c 20 ba 0d
>1914fd		ba 20 44 69 73 70 6c 61		                .text $BA, " Display Type       : VGA         ",$B3,"                        $AF:12F8  ",$BA, $0D
>191505		79 20 54 79 70 65 20 20 20 20 20 20 20 3a 20 56
>191515		47 41 20 20 20 20 20 20 20 20 20 b3 20 20 20 20
>191525		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>191535		20 20 20 20 24 41 46 3a 31 32 46 38 20 20 ba 0d
>191545		ba 20 46 6f 65 6e 69 78		                .text $BA, " Foenix Kernel Date : 042219      ",$B3," Parallel Ports(s)    : $AF:1378  ",$BA, $0D
>19154d		20 4b 65 72 6e 65 6c 20 44 61 74 65 20 3a 20 30
>19155d		34 32 32 31 39 20 20 20 20 20 20 b3 20 50 61 72
>19156d		61 6c 6c 65 6c 20 50 6f 72 74 73 28 73 29 20 20
>19157d		20 20 3a 20 24 41 46 3a 31 33 37 38 20 20 ba 0d
>19158d		ba 20 4b 65 79 62 6f 61		                .text $BA, " Keyboard Type      : PS2         ",$B3," Sound Chip Installed : OPL2(2)   ",$BA, $0D
>191595		72 64 20 54 79 70 65 20 20 20 20 20 20 3a 20 50
>1915a5		53 32 20 20 20 20 20 20 20 20 20 b3 20 53 6f 75
>1915b5		6e 64 20 43 68 69 70 20 49 6e 73 74 61 6c 6c 65
>1915c5		64 20 3a 20 4f 50 4c 32 28 32 29 20 20 20 ba 0d
>1915d5		d3 c4 c4 c4 c4 c4 c4 c4		                .text $D3, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C1
>1915dd		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1915ed		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c1
>1915f9		c4 c4 c4 c4 c4 c4 c4 c4		                .text      $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $BD, $00
>191601		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>191611		c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 bd 00
>19161d		1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>191625		4d 4d 2d 2d 5d 5d
>19162b		1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D
>191633		4d 2d 2d 5d 5d 5d
>191639		1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D
>191641		2d 2d 5d 5d 5d 5d
>191647		1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D, $5D
>19164f		2d 5d 5d 5d 5d 5d
>191655		1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D, $5D, $5D
>19165d		5d 5d 5d 5d 5d 5d
>191663		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>191667		00 00 80 ff			                .text $00, $00, $80, $FF
>19166b		00 80 00 ff			                .text $00, $80, $00, $FF
>19166f		80 00 00 ff			                .text $80, $00, $00, $FF
>191673		00 80 80 ff			                .text $00, $80, $80, $FF
>191677		80 80 00 ff			                .text $80, $80, $00, $FF
>19167b		80 00 80 ff			                .text $80, $00, $80, $FF
>19167f		80 80 80 ff			                .text $80, $80, $80, $FF
>191683		00 45 ff ff			                .text $00, $45, $FF, $FF
>191687		13 45 8b ff			                .text $13, $45, $8B, $FF
>19168b		00 00 20 ff			                .text $00, $00, $20, $FF
>19168f		00 20 00 ff			                .text $00, $20, $00, $FF
>191693		20 00 00 ff			                .text $20, $00, $00, $FF
>191697		20 20 20 ff			                .text $20, $20, $20, $FF
>19169b		40 40 40 ff			                .text $40, $40, $40, $FF
>19169f		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>1916a3		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>1916a7		00 00 80 ff			                .text $00, $00, $80, $FF
>1916ab		00 80 00 ff			                .text $00, $80, $00, $FF
>1916af		80 00 00 ff			                .text $80, $00, $00, $FF
>1916b3		00 20 20 ff			                .text $00, $20, $20, $FF
>1916b7		20 20 00 ff			                .text $20, $20, $00, $FF
>1916bb		20 00 20 ff			                .text $20, $00, $20, $FF
>1916bf		20 20 20 ff			                .text $20, $20, $20, $FF
>1916c3		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>1916c7		13 45 8b ff			                .text $13, $45, $8B, $FF
>1916cb		00 00 20 ff			                .text $00, $00, $20, $FF
>1916cf		00 20 00 ff			                .text $00, $20, $00, $FF
>1916d3		40 00 00 ff			                .text $40, $00, $00, $FF
>1916d7		10 10 10 ff			                .text $10, $10, $10, $FF
>1916db		40 40 40 ff			                .text $40, $40, $40, $FF
>1916df		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>1916e3		0d 44 65 62 75 67 20 43		version_msg     .text $0D, "Debug Code Version 0.0.0 - March 26th, 2019", $00
>1916eb		6f 64 65 20 56 65 72 73 69 6f 6e 20 30 2e 30 2e
>1916fb		30 20 2d 20 4d 61 72 63 68 20 32 36 74 68 2c 20
>19170b		32 30 31 39 00
>191710		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>191718		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>191728		00
>191729		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>191731		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>191741		00
>191742		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>19174a		20 45 78 65 63 75 74 65 64 2e 0d 00
>191756		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>19175e		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>19176e		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>191776		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>191786		64 2e 2e 2e 0d 00
>19178c		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>191794		20 50 72 65 73 65 6e 74 0d 00
>19179e		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>1917a6		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>1917b6		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>1917c6		5b 49 52 51 20 49 6e 74		irq_Msg         .text "[IRQ Interrupt]", $0D, $00
>1917ce		65 72 72 75 70 74 5d 0d 00
>1917d7		5b 4e 4d 49 20 49 6e 74		nmi_Msg         .text "[NMI Interrupt]", $0D, $00
>1917df		65 72 72 75 70 74 5d 0d 00
>1917e8		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>1917f0		54 55 52 45 20 46 4f 55 4e 44 2e 00
>1917fc		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>191804		45 44 2e 00
>191808		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>191810		47 20 42 4d 50 20 50 41 52 53 45 52 00
>19181d		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>191825		47 20 30 32 30 30 30 30		hello_ml        .null "G 020000",$0D
>19182d		0d 00
>19182f		48 45 4c 4c 4f 20 57 4f		                .null "HELLO WORLD",$0D
>191837		52 4c 44 0d 00
>19183c		0d 00				                .null $0D
>19183e		20 50 43 20 20 20 20 20		                .null " PC     A    X    Y    SP   DBR DP   NVMXDIZC",$0D
>191846		41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>191856		50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>191866		58 44 49 5a 43 0d 00
>19186d		3b 30 30 32 31 31 32 20		                .null ";002112 0019 F0AA 0000 D6FF F8  0000 --M-----"
>191875		30 30 31 39 20 46 30 41 41 20 30 30 30 30 20 44
>191885		36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 4d
>191895		2d 2d 2d 2d 2d 00
>19189b		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>1918a3		52 4f 52 00
>1918a7		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>1918af		38 39 41 42 43 44 45 46 00
>1918b8		45 72 72 6f 72 20 69 6e		error_FAT       .null "Error in the floppy boot sector, wrong data",$0D
>1918c0		20 74 68 65 20 66 6c 6f 70 70 79 20 62 6f 6f 74
>1918d0		20 73 65 63 74 6f 72 2c 20 77 72 6f 6e 67 20 64
>1918e0		61 74 61 0d 00
>1918e5		4d 53 44 4f 53 20 20 20		file_to_load    .text "MSDOS   SYS"
>1918ed		53 59 53
>1918f0		2d 2d 2d 2d 2d 2d 2d 2d		minus_line       .text "-----------------------------------------------",$0A,$0D,0
>1918f8		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>191908		2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>191918		2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>191922						.align 256
>191a00		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191a08		37 38 39 30 2d 3d 08 09
>191a10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191a18		6f 70 5b 5d 0d 00 61 73
>191a20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191a28		27 60 00 5c 7a 78 63 76
>191a30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191a38		00 20 00 00 00 00 00 00
>191a40		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191a48		00 00 00 00 00 00 00 00
>191a50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191a58		00 00 00 00 00 00 00 00
>191a60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191a68		00 00 00 00 00 00 00 00
>191a70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191a78		00 00 00 00 00 00 00 00
>191a80		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>191a88		26 2a 28 29 5f 2b 08 09
>191a90		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>191a98		4f 50 7b 7d 0d 00 41 53
>191aa0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>191aa8		22 7e 00 5c 5a 58 43 56
>191ab0		42 4e 4d 3c 3e 3f 00 2a		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191ab8		00 20 00 00 00 00 00 00
>191ac0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191ac8		00 00 00 00 00 00 00 00
>191ad0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191ad8		00 00 00 00 00 00 00 00
>191ae0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191ae8		00 00 00 00 00 00 00 00
>191af0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191af8		00 00 00 00 00 00 00 00
>191b00		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191b08		37 38 39 30 2d 3d 08 09
>191b10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191b18		6f 70 5b 5d 0d 00 61 73
>191b20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191b28		27 60 00 5c 7a 78 63 76
>191b30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191b38		00 20 00 00 00 00 00 00
>191b40		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191b48		00 00 00 00 00 00 00 00
>191b50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191b58		00 00 00 00 00 00 00 00
>191b60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191b68		00 00 00 00 00 00 00 00
>191b70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191b78		00 00 00 00 00 00 00 00
>191b80		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191b88		37 38 39 30 2d 3d 08 09
>191b90		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191b98		6f 70 5b 5d 0d 00 61 73
>191ba0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191ba8		27 60 00 5c 7a 78 63 76
>191bb0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191bb8		00 20 00 00 00 00 00 00
>191bc0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191bc8		00 00 00 00 00 00 00 00
>191bd0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191bd8		00 00 00 00 00 00 00 00
>191be0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191be8		00 00 00 00 00 00 00 00
>191bf0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191bf8		00 00 00 00 00 00 00 00
>191c00		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191c08		37 38 39 30 2d 3d 08 09
>191c10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191c18		6f 70 5b 5d 0d 00 61 73
>191c20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191c28		27 60 00 5c 7a 78 63 76
>191c30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191c38		00 20 00 00 00 00 00 00
>191c40		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191c48		00 00 00 00 00 00 00 00
>191c50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191c58		00 00 00 00 00 00 00 00
>191c60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191c68		00 00 00 00 00 00 00 00
>191c70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191c78		00 00 00 00 00 00 00 00
>191c80						.align 256
>191d00		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>191d08		34 37 3a 3d 3f 41 44 46
>191d10		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>191d18		57 58 5a 5b 5d 5e 60 61
>191d20		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>191d28		6d 6f 70 71 72 73 75 76
>191d30		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>191d38		80 81 82 83 84 85 86 87
>191d40		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>191d48		8f 90 91 92 93 93 94 95
>191d50		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>191d58		9d 9e 9e 9f a0 a1 a2 a2
>191d60		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>191d68		a9 aa ab ab ac ad ae ae
>191d70		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>191d78		b5 b5 b6 b7 b7 b8 b9 b9
>191d80		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>191d88		bf c0 c0 c1 c2 c2 c3 c4
>191d90		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>191d98		c9 ca ca cb cb cc cd cd
>191da0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>191da8		d2 d3 d4 d4 d5 d5 d6 d6
>191db0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>191db8		db dc dc dd de de df df
>191dc0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>191dc8		e4 e4 e5 e5 e6 e6 e7 e7
>191dd0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>191dd8		ec ec ed ed ee ee ef ef
>191de0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>191de8		f4 f4 f5 f5 f6 f6 f7 f7
>191df0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>191df8		fb fc fc fd fd fe fe ff
>191e00						.align 256
>191e00		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>191e08		25 27 2a 2c 2e 30 32 34
>191e10		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>191e18		44 46 47 49 4a 4c 4d 4f
>191e20		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>191e28		5b 5c 5d 5e 60 61 62 63
>191e30		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>191e38		6d 6e 70 71 72 73 74 75
>191e40		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>191e48		7e 7f 80 81 82 83 84 84
>191e50		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>191e58		8d 8e 8e 8f 90 91 92 93
>191e60		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>191e68		9a 9b 9c 9d 9e 9f 9f a0
>191e70		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>191e78		a7 a8 a9 aa aa ab ac ad
>191e80		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>191e88		b3 b4 b5 b6 b6 b7 b8 b8
>191e90		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>191e98		bf bf c0 c1 c2 c2 c3 c4
>191ea0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>191ea8		ca ca cb cc cc cd ce ce
>191eb0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>191eb8		d4 d5 d6 d6 d7 d7 d8 d9
>191ec0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>191ec8		de df e0 e0 e1 e1 e2 e3
>191ed0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>191ed8		e8 e9 e9 ea ea eb ec ec
>191ee0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>191ee8		f1 f2 f3 f3 f4 f4 f5 f5
>191ef0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>191ef8		fb fb fc fc fd fd fe ff
>191f00						.align 256
>191f00		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>191f08		83 dd ce 39 cd c5 3b 15
>191f10		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>191f18		87 12 31 65 89 27 88 42
>191f20		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>191f28		94 ce 56 ec fe da 58 c9
>191f30		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>191f38		d0 10 2c b2 4b ea 32 61
>191f40		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>191f48		a1 e6 ca 2d b3 ce b0 79
>191f50		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>191f58		5f e3 fb bd 15 2e be f5
>191f60		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>191f68		8d 8f 2c 80 0a 5e 99 36
>191f70		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>191f78		13 52 44 2f e3 ef 44 a2
>191f80		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>191f88		be 23 02 58 0a 52 5e b4
>191f90		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>191f98		d5 cf 3e df c4 9e da bb
>191fa0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>191fa8		77 7d b1 3b 4a 68 35 6e
>191fb0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>191fb8		b5 8f 44 63 55 6f e1 50
>191fc0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>191fc8		57 74 b9 bd 05 14 50 eb
>191fd0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>191fd8		44 bc ec db 22 58 fc be
>191fe0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>191fe8		24 aa 82 11 5c 9f 43 4d
>191ff0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>191ff8		3e 3d 66 7e 0a 1c 6b 74
.1ff000						FONT_4_BANK0
>1ff000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1ff008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1ff018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1ff028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1ff038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1ff048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1ff058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1ff068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1ff078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1ff088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1ff098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1ff0a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1ff0b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1ff0c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1ff0d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1ff0e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1ff0f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1ff108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1ff118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1ff128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1ff138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1ff148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1ff158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1ff168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1ff178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1ff188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1ff198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1ff1a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1ff1b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1ff1c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1ff1d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1ff1e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1ff1f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1ff208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1ff218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1ff228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1ff238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1ff248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1ff258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1ff268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1ff278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1ff288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1ff298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1ff2a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1ff2b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1ff2c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1ff2d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1ff2e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1ff2f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1ff308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1ff318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1ff328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1ff338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1ff348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1ff358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1ff368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1ff378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1ff388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1ff398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1ff3a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1ff3b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1ff3c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1ff3d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1ff3e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1ff3f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1ff408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1ff418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1ff428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1ff438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1ff448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1ff458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1ff468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1ff478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1ff488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1ff498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1ff4a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1ff4b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1ff4c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1ff4d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1ff4e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1ff4f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1ff508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1ff518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1ff528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1ff538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1ff548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1ff558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1ff568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1ff578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1ff588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1ff598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1ff5a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1ff5b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1ff5c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1ff5d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1ff5e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1ff5f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1ff608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1ff618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1ff628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1ff638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1ff648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1ff658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1ff668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1ff678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1ff688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1ff698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1ff6a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1ff6b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1ff6c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1ff6d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1ff6e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1ff6f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1ff708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1ff718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1ff728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1ff738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1ff748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1ff758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1ff768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1ff778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1ff788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1ff798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1ff7a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1ff7b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1ff7c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1ff7d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1ff7e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1ff7f8		00 00 00 00 00 00 00 00
.1ff800						FONT_4_BANK1
>1ff800		00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>1ff808		7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>1ff818		ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>1ff828		ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>1ff838		ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>1ff848		00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>1ff858		00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>1ff868		00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>1ff878		00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>1ff888		ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>1ff898		ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>1ff8a8		ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>1ff8b8		ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>1ff8c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1ff908		10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>1ff918		24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>1ff928		62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>1ff938		10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>1ff948		10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>1ff958		00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>1ff968		00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>1ff978		04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>1ff988		10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>1ff998		38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>1ff9a8		7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>1ff9b8		7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>1ff9c8		38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>1ff9d8		00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>1ff9e8		00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>1ff9f8		38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>1ffa08		10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>1ffa18		38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>1ffa28		7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>1ffa38		38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>1ffa48		38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>1ffa58		24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>1ffa68		44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>1ffa78		38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>1ffa88		38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>1ffa98		3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>1ffaa8		44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>1ffab8		82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>1ffac8		44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>1ffad8		38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>1ffae8		38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>1ffaf8		00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>1ffb08		00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>1ffb18		00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>1ffb28		00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>1ffb38		00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>1ffb48		10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>1ffb58		20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>1ffb68		00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>1ffb78		00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>1ffb88		00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>1ffb98		00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>1ffba8		00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>1ffbb8		00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>1ffbc8		00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>1ffbd8		0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>1ffbe8		30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>1ffbf8		00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>1ffc08		00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>1ffc18		00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>1ffc28		00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>1ffc38		0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>1ffc48		02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>1ffc58		00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>1ffc68		18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>1ffc78		24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>1ffc88		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>1ffc98		ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>1ffca8		ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>1ffcb8		f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>1ffcc8		fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>1ffcd8		3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>1ffce8		0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>1ffcf8		00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>1ffd08		f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>1ffd18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1ffd28		80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>1ffd38		01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>1ffd48		ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>1ffd58		18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>1ffd68		18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>1ffd78		00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>1ffd88		18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>1ffd98		18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>1ffda8		e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>1ffdb8		ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>1ffdc8		00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>1ffdd8		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>1ffde8		18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>1ffdf8		f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>1ffe08		08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>1ffe18		00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>1ffe28		00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>1ffe38		30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>1ffe48		00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>1ffe58		18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>1ffe68		c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>1ffe78		ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>1ffe88		00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>1ffe98		36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>1ffea8		00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>1ffeb8		00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>1ffec8		06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>1ffed8		18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>1ffee8		18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>1ffef8		ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>1fff08		00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>1fff18		00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>1fff28		24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>1fff38		24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>1fff48		24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>1fff58		0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>1fff68		80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>1fff78		cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>1fff88		0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>1fff98		ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>1fffa8		00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>1fffb8		00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>1fffc8		aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>1fffd8		00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>1fffe8		18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>1ffff8		00 00 00 00 00 00 00 00

;******  End of listing
